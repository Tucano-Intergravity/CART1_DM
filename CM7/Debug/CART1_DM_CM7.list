
CART1_DM_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ff58  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080101f8  080101f8  000111f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080102a4  080102a4  00012088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080102a4  080102a4  000112a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080102ac  080102ac  00012088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080102ac  080102ac  000112ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080102b0  080102b0  000112b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  24000000  080102b4  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000618  24000088  0801033c  00012088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  240006a0  0801033c  000126a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00012088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022081  00000000  00000000  000120b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fea  00000000  00000000  00034137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a00  00000000  00000000  00038128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000141f  00000000  00000000  00039b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004029f  00000000  00000000  0003af47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023db8  00000000  00000000  0007b1e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a43bd  00000000  00000000  0009ef9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0024335b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076cc  00000000  00000000  002433a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0024aa6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080101e0 	.word	0x080101e0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	080101e0 	.word	0x080101e0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006c0:	4b49      	ldr	r3, [pc, #292]	@ (80007e8 <SystemInit+0x12c>)
 80006c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006c6:	4a48      	ldr	r2, [pc, #288]	@ (80007e8 <SystemInit+0x12c>)
 80006c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006d0:	4b45      	ldr	r3, [pc, #276]	@ (80007e8 <SystemInit+0x12c>)
 80006d2:	691b      	ldr	r3, [r3, #16]
 80006d4:	4a44      	ldr	r2, [pc, #272]	@ (80007e8 <SystemInit+0x12c>)
 80006d6:	f043 0310 	orr.w	r3, r3, #16
 80006da:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006dc:	4b43      	ldr	r3, [pc, #268]	@ (80007ec <SystemInit+0x130>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f003 030f 	and.w	r3, r3, #15
 80006e4:	2b06      	cmp	r3, #6
 80006e6:	d807      	bhi.n	80006f8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e8:	4b40      	ldr	r3, [pc, #256]	@ (80007ec <SystemInit+0x130>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f023 030f 	bic.w	r3, r3, #15
 80006f0:	4a3e      	ldr	r2, [pc, #248]	@ (80007ec <SystemInit+0x130>)
 80006f2:	f043 0307 	orr.w	r3, r3, #7
 80006f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006f8:	4b3d      	ldr	r3, [pc, #244]	@ (80007f0 <SystemInit+0x134>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a3c      	ldr	r2, [pc, #240]	@ (80007f0 <SystemInit+0x134>)
 80006fe:	f043 0301 	orr.w	r3, r3, #1
 8000702:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000704:	4b3a      	ldr	r3, [pc, #232]	@ (80007f0 <SystemInit+0x134>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800070a:	4b39      	ldr	r3, [pc, #228]	@ (80007f0 <SystemInit+0x134>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	4938      	ldr	r1, [pc, #224]	@ (80007f0 <SystemInit+0x134>)
 8000710:	4b38      	ldr	r3, [pc, #224]	@ (80007f4 <SystemInit+0x138>)
 8000712:	4013      	ands	r3, r2
 8000714:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000716:	4b35      	ldr	r3, [pc, #212]	@ (80007ec <SystemInit+0x130>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f003 0308 	and.w	r3, r3, #8
 800071e:	2b00      	cmp	r3, #0
 8000720:	d007      	beq.n	8000732 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000722:	4b32      	ldr	r3, [pc, #200]	@ (80007ec <SystemInit+0x130>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f023 030f 	bic.w	r3, r3, #15
 800072a:	4a30      	ldr	r2, [pc, #192]	@ (80007ec <SystemInit+0x130>)
 800072c:	f043 0307 	orr.w	r3, r3, #7
 8000730:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000732:	4b2f      	ldr	r3, [pc, #188]	@ (80007f0 <SystemInit+0x134>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000738:	4b2d      	ldr	r3, [pc, #180]	@ (80007f0 <SystemInit+0x134>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800073e:	4b2c      	ldr	r3, [pc, #176]	@ (80007f0 <SystemInit+0x134>)
 8000740:	2200      	movs	r2, #0
 8000742:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000744:	4b2a      	ldr	r3, [pc, #168]	@ (80007f0 <SystemInit+0x134>)
 8000746:	4a2c      	ldr	r2, [pc, #176]	@ (80007f8 <SystemInit+0x13c>)
 8000748:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800074a:	4b29      	ldr	r3, [pc, #164]	@ (80007f0 <SystemInit+0x134>)
 800074c:	4a2b      	ldr	r2, [pc, #172]	@ (80007fc <SystemInit+0x140>)
 800074e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000750:	4b27      	ldr	r3, [pc, #156]	@ (80007f0 <SystemInit+0x134>)
 8000752:	4a2b      	ldr	r2, [pc, #172]	@ (8000800 <SystemInit+0x144>)
 8000754:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000756:	4b26      	ldr	r3, [pc, #152]	@ (80007f0 <SystemInit+0x134>)
 8000758:	2200      	movs	r2, #0
 800075a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800075c:	4b24      	ldr	r3, [pc, #144]	@ (80007f0 <SystemInit+0x134>)
 800075e:	4a28      	ldr	r2, [pc, #160]	@ (8000800 <SystemInit+0x144>)
 8000760:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000762:	4b23      	ldr	r3, [pc, #140]	@ (80007f0 <SystemInit+0x134>)
 8000764:	2200      	movs	r2, #0
 8000766:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000768:	4b21      	ldr	r3, [pc, #132]	@ (80007f0 <SystemInit+0x134>)
 800076a:	4a25      	ldr	r2, [pc, #148]	@ (8000800 <SystemInit+0x144>)
 800076c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800076e:	4b20      	ldr	r3, [pc, #128]	@ (80007f0 <SystemInit+0x134>)
 8000770:	2200      	movs	r2, #0
 8000772:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000774:	4b1e      	ldr	r3, [pc, #120]	@ (80007f0 <SystemInit+0x134>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a1d      	ldr	r2, [pc, #116]	@ (80007f0 <SystemInit+0x134>)
 800077a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800077e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000780:	4b1b      	ldr	r3, [pc, #108]	@ (80007f0 <SystemInit+0x134>)
 8000782:	2200      	movs	r2, #0
 8000784:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000786:	4b1f      	ldr	r3, [pc, #124]	@ (8000804 <SystemInit+0x148>)
 8000788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800078a:	4a1e      	ldr	r2, [pc, #120]	@ (8000804 <SystemInit+0x148>)
 800078c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000790:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000792:	4b1d      	ldr	r3, [pc, #116]	@ (8000808 <SystemInit+0x14c>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	4b1d      	ldr	r3, [pc, #116]	@ (800080c <SystemInit+0x150>)
 8000798:	4013      	ands	r3, r2
 800079a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800079e:	d202      	bcs.n	80007a6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000810 <SystemInit+0x154>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80007a6:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <SystemInit+0x134>)
 80007a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d113      	bne.n	80007dc <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007b4:	4b0e      	ldr	r3, [pc, #56]	@ (80007f0 <SystemInit+0x134>)
 80007b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007ba:	4a0d      	ldr	r2, [pc, #52]	@ (80007f0 <SystemInit+0x134>)
 80007bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007c0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007c4:	4b13      	ldr	r3, [pc, #76]	@ (8000814 <SystemInit+0x158>)
 80007c6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007ca:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007cc:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <SystemInit+0x134>)
 80007ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007d2:	4a07      	ldr	r2, [pc, #28]	@ (80007f0 <SystemInit+0x134>)
 80007d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007d8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	e000ed00 	.word	0xe000ed00
 80007ec:	52002000 	.word	0x52002000
 80007f0:	58024400 	.word	0x58024400
 80007f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007f8:	02020200 	.word	0x02020200
 80007fc:	01ff0000 	.word	0x01ff0000
 8000800:	01010280 	.word	0x01010280
 8000804:	580000c0 	.word	0x580000c0
 8000808:	5c001000 	.word	0x5c001000
 800080c:	ffff0000 	.word	0xffff0000
 8000810:	51008108 	.word	0x51008108
 8000814:	52004000 	.word	0x52004000

08000818 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 800081c:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <ExitRun0Mode+0x2c>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	4a08      	ldr	r2, [pc, #32]	@ (8000844 <ExitRun0Mode+0x2c>)
 8000822:	f023 0302 	bic.w	r3, r3, #2
 8000826:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000828:	bf00      	nop
 800082a:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <ExitRun0Mode+0x2c>)
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000832:	2b00      	cmp	r3, #0
 8000834:	d0f9      	beq.n	800082a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000836:	bf00      	nop
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	58024800 	.word	0x58024800

08000848 <HAL_TIM_PeriodElapsedCallback>:
uint32_t cnt1ms = 0;

double TC[MAX_TC_CH];

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000858:	d136      	bne.n	80008c8 <HAL_TIM_PeriodElapsedCallback+0x80>
	{
		// 1ms마다 실행되는 코드
		f1ms = true;
 800085a:	4b1e      	ldr	r3, [pc, #120]	@ (80008d4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800085c:	2201      	movs	r2, #1
 800085e:	701a      	strb	r2, [r3, #0]
		cnt1ms++;
 8000860:	4b1d      	ldr	r3, [pc, #116]	@ (80008d8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	3301      	adds	r3, #1
 8000866:	4a1c      	ldr	r2, [pc, #112]	@ (80008d8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000868:	6013      	str	r3, [r2, #0]

		if (cnt1ms%10 == 0)
 800086a:	4b1b      	ldr	r3, [pc, #108]	@ (80008d8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800086c:	6819      	ldr	r1, [r3, #0]
 800086e:	4b1b      	ldr	r3, [pc, #108]	@ (80008dc <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000870:	fba3 2301 	umull	r2, r3, r3, r1
 8000874:	08da      	lsrs	r2, r3, #3
 8000876:	4613      	mov	r3, r2
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	4413      	add	r3, r2
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	1aca      	subs	r2, r1, r3
 8000880:	2a00      	cmp	r2, #0
 8000882:	d102      	bne.n	800088a <HAL_TIM_PeriodElapsedCallback+0x42>
		{
			f10ms = true;
 8000884:	4b16      	ldr	r3, [pc, #88]	@ (80008e0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000886:	2201      	movs	r2, #1
 8000888:	701a      	strb	r2, [r3, #0]
		}

		if (cnt1ms%100 == 0)
 800088a:	4b13      	ldr	r3, [pc, #76]	@ (80008d8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	4b15      	ldr	r3, [pc, #84]	@ (80008e4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000890:	fba3 1302 	umull	r1, r3, r3, r2
 8000894:	095b      	lsrs	r3, r3, #5
 8000896:	2164      	movs	r1, #100	@ 0x64
 8000898:	fb01 f303 	mul.w	r3, r1, r3
 800089c:	1ad3      	subs	r3, r2, r3
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d102      	bne.n	80008a8 <HAL_TIM_PeriodElapsedCallback+0x60>
		{
			f100ms = true;
 80008a2:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	701a      	strb	r2, [r3, #0]
		}

		if (cnt1ms%1000 == 0)
 80008a8:	4b0b      	ldr	r3, [pc, #44]	@ (80008d8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	4b0f      	ldr	r3, [pc, #60]	@ (80008ec <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80008ae:	fba3 1302 	umull	r1, r3, r3, r2
 80008b2:	099b      	lsrs	r3, r3, #6
 80008b4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80008b8:	fb01 f303 	mul.w	r3, r1, r3
 80008bc:	1ad3      	subs	r3, r2, r3
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d102      	bne.n	80008c8 <HAL_TIM_PeriodElapsedCallback+0x80>
		{
			f1000ms = true;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	@ (80008f0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80008c8:	bf00      	nop
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	240002fc 	.word	0x240002fc
 80008d8:	24000300 	.word	0x24000300
 80008dc:	cccccccd 	.word	0xcccccccd
 80008e0:	240002fd 	.word	0x240002fd
 80008e4:	51eb851f 	.word	0x51eb851f
 80008e8:	240002fe 	.word	0x240002fe
 80008ec:	10624dd3 	.word	0x10624dd3
 80008f0:	240002ff 	.word	0x240002ff

080008f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80008fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008fe:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000900:	bf00      	nop
 8000902:	4b5f      	ldr	r3, [pc, #380]	@ (8000a80 <main+0x18c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800090a:	2b00      	cmp	r3, #0
 800090c:	d004      	beq.n	8000918 <main+0x24>
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	1e5a      	subs	r2, r3, #1
 8000912:	617a      	str	r2, [r7, #20]
 8000914:	2b00      	cmp	r3, #0
 8000916:	dcf4      	bgt.n	8000902 <main+0xe>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000918:	f002 fa84 	bl	8002e24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800091c:	f000 f8c4 	bl	8000aa8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000920:	4b57      	ldr	r3, [pc, #348]	@ (8000a80 <main+0x18c>)
 8000922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000926:	4a56      	ldr	r2, [pc, #344]	@ (8000a80 <main+0x18c>)
 8000928:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800092c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000930:	4b53      	ldr	r3, [pc, #332]	@ (8000a80 <main+0x18c>)
 8000932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800093e:	2000      	movs	r0, #0
 8000940:	f007 fa2a 	bl	8007d98 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000944:	2100      	movs	r1, #0
 8000946:	2000      	movs	r0, #0
 8000948:	f007 fa40 	bl	8007dcc <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800094c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000950:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000952:	bf00      	nop
 8000954:	4b4a      	ldr	r3, [pc, #296]	@ (8000a80 <main+0x18c>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800095c:	2b00      	cmp	r3, #0
 800095e:	d104      	bne.n	800096a <main+0x76>
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	1e5a      	subs	r2, r3, #1
 8000964:	617a      	str	r2, [r7, #20]
 8000966:	2b00      	cmp	r3, #0
 8000968:	dcf4      	bgt.n	8000954 <main+0x60>
if ( timeout < 0 )
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	2b00      	cmp	r3, #0
 800096e:	da01      	bge.n	8000974 <main+0x80>
{
Error_Handler();
 8000970:	f000 fc60 	bl	8001234 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000974:	f000 fb6c 	bl	8001050 <MX_GPIO_Init>
  MX_DMA_Init();
 8000978:	f000 fb4a 	bl	8001010 <MX_DMA_Init>
  MX_SPI1_Init();
 800097c:	f000 fa56 	bl	8000e2c <MX_SPI1_Init>
  MX_TIM2_Init();
 8000980:	f000 faac 	bl	8000edc <MX_TIM2_Init>
  MX_ADC1_Init();
 8000984:	f000 f90c 	bl	8000ba0 <MX_ADC1_Init>
  MX_UART4_Init();
 8000988:	f000 faf6 	bl	8000f78 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 800098c:	483d      	ldr	r0, [pc, #244]	@ (8000a84 <main+0x190>)
 800098e:	f00b fc17 	bl	800c1c0 <HAL_TIM_Base_Start_IT>

  InitPT();
 8000992:	f000 fc55 	bl	8001240 <InitPT>
  InitTMTC();
 8000996:	f001 ff99 	bl	80028cc <InitTMTC>


  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800099a:	2000      	movs	r0, #0
 800099c:	f001 ffec 	bl	8002978 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80009a0:	2001      	movs	r0, #1
 80009a2:	f001 ffe9 	bl	8002978 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80009a6:	2002      	movs	r0, #2
 80009a8:	f001 ffe6 	bl	8002978 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80009ac:	2101      	movs	r1, #1
 80009ae:	2000      	movs	r0, #0
 80009b0:	f002 f8d6 	bl	8002b60 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80009b4:	4b34      	ldr	r3, [pc, #208]	@ (8000a88 <main+0x194>)
 80009b6:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009ba:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80009bc:	4b32      	ldr	r3, [pc, #200]	@ (8000a88 <main+0x194>)
 80009be:	2200      	movs	r2, #0
 80009c0:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80009c2:	4b31      	ldr	r3, [pc, #196]	@ (8000a88 <main+0x194>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80009c8:	4b2f      	ldr	r3, [pc, #188]	@ (8000a88 <main+0x194>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80009ce:	4b2e      	ldr	r3, [pc, #184]	@ (8000a88 <main+0x194>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80009d4:	492c      	ldr	r1, [pc, #176]	@ (8000a88 <main+0x194>)
 80009d6:	2000      	movs	r0, #0
 80009d8:	f002 f946 	bl	8002c68 <BSP_COM_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <main+0xf2>
  {
    Error_Handler();
 80009e2:	f000 fc27 	bl	8001234 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */
  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 80009e6:	4829      	ldr	r0, [pc, #164]	@ (8000a8c <main+0x198>)
 80009e8:	f00e fd80 	bl	800f4ec <iprintf>
  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 80009ec:	2000      	movs	r0, #0
 80009ee:	f002 f839 	bl	8002a64 <BSP_LED_On>
  BSP_LED_On(LED_YELLOW);
 80009f2:	2001      	movs	r0, #1
 80009f4:	f002 f836 	bl	8002a64 <BSP_LED_On>
  BSP_LED_Off(LED_RED);
 80009f8:	2002      	movs	r0, #2
 80009fa:	f002 f85d 	bl	8002ab8 <BSP_LED_Off>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (fTC == true)
 80009fe:	4b24      	ldr	r3, [pc, #144]	@ (8000a90 <main+0x19c>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d102      	bne.n	8000a0c <main+0x118>
	  {
		  fTC = false;
 8000a06:	4b22      	ldr	r3, [pc, #136]	@ (8000a90 <main+0x19c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	701a      	strb	r2, [r3, #0]
	  }

	  if (f10ms == true)
 8000a0c:	4b21      	ldr	r3, [pc, #132]	@ (8000a94 <main+0x1a0>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d125      	bne.n	8000a60 <main+0x16c>
	  {
		  f10ms = false;
 8000a14:	4b1f      	ldr	r3, [pc, #124]	@ (8000a94 <main+0x1a0>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	701a      	strb	r2, [r3, #0]

		  uint8_t ch[MAX_SV_NUM] ={0};
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	811a      	strh	r2, [r3, #8]
		  ch[0] = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	703b      	strb	r3, [r7, #0]
		  ch[1] = 1;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	707b      	strb	r3, [r7, #1]
		  ch[2] = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	70bb      	strb	r3, [r7, #2]
		  ch[3] = 1;
 8000a30:	2301      	movs	r3, #1
 8000a32:	70fb      	strb	r3, [r7, #3]
		  ch[4] = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	713b      	strb	r3, [r7, #4]
		  ch[5] = 1;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	717b      	strb	r3, [r7, #5]
		  ch[6] = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	71bb      	strb	r3, [r7, #6]
		  ch[7] = 1;
 8000a40:	2301      	movs	r3, #1
 8000a42:	71fb      	strb	r3, [r7, #7]
		  ch[8] = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	723b      	strb	r3, [r7, #8]
		  ch[9] = 1;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	727b      	strb	r3, [r7, #9]
		  SVUpdate(ch);
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 fc18 	bl	8001284 <SVUpdate>

		  GetTemp(TC);
 8000a54:	4810      	ldr	r0, [pc, #64]	@ (8000a98 <main+0x1a4>)
 8000a56:	f001 fece 	bl	80027f6 <GetTemp>

		  GetADCRaw(ADC_results);
 8000a5a:	4810      	ldr	r0, [pc, #64]	@ (8000a9c <main+0x1a8>)
 8000a5c:	f000 fc02 	bl	8001264 <GetADCRaw>
	  }

	  if (f1000ms == true)
 8000a60:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa0 <main+0x1ac>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d1ca      	bne.n	80009fe <main+0x10a>
	  {
		  f1000ms = false;
 8000a68:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa0 <main+0x1ac>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	701a      	strb	r2, [r3, #0]
		  BSP_LED_Toggle(LED_RED);
 8000a6e:	2002      	movs	r0, #2
 8000a70:	f002 f84c 	bl	8002b0c <BSP_LED_Toggle>

		  char *msg = "UART4 ready\r\n";
 8000a74:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa4 <main+0x1b0>)
 8000a76:	613b      	str	r3, [r7, #16]
		  SendTM((uint8_t*)msg);
 8000a78:	6938      	ldr	r0, [r7, #16]
 8000a7a:	f001 ff39 	bl	80028f0 <SendTM>
	  if (fTC == true)
 8000a7e:	e7be      	b.n	80009fe <main+0x10a>
 8000a80:	58024400 	.word	0x58024400
 8000a84:	2400021c 	.word	0x2400021c
 8000a88:	240000a4 	.word	0x240000a4
 8000a8c:	080101f8 	.word	0x080101f8
 8000a90:	240003a4 	.word	0x240003a4
 8000a94:	240002fd 	.word	0x240002fd
 8000a98:	24000308 	.word	0x24000308
 8000a9c:	24000368 	.word	0x24000368
 8000aa0:	240002ff 	.word	0x240002ff
 8000aa4:	08010214 	.word	0x08010214

08000aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b09c      	sub	sp, #112	@ 0x70
 8000aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab2:	224c      	movs	r2, #76	@ 0x4c
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f00e fe02 	bl	800f6c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	2220      	movs	r2, #32
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f00e fdfc 	bl	800f6c0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000ac8:	2004      	movs	r0, #4
 8000aca:	f007 f993 	bl	8007df4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ace:	2300      	movs	r3, #0
 8000ad0:	603b      	str	r3, [r7, #0]
 8000ad2:	4b31      	ldr	r3, [pc, #196]	@ (8000b98 <SystemClock_Config+0xf0>)
 8000ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ad6:	4a30      	ldr	r2, [pc, #192]	@ (8000b98 <SystemClock_Config+0xf0>)
 8000ad8:	f023 0301 	bic.w	r3, r3, #1
 8000adc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000ade:	4b2e      	ldr	r3, [pc, #184]	@ (8000b98 <SystemClock_Config+0xf0>)
 8000ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	4b2c      	ldr	r3, [pc, #176]	@ (8000b9c <SystemClock_Config+0xf4>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000af0:	4a2a      	ldr	r2, [pc, #168]	@ (8000b9c <SystemClock_Config+0xf4>)
 8000af2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000af6:	6193      	str	r3, [r2, #24]
 8000af8:	4b28      	ldr	r3, [pc, #160]	@ (8000b9c <SystemClock_Config+0xf4>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b00:	603b      	str	r3, [r7, #0]
 8000b02:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b04:	bf00      	nop
 8000b06:	4b25      	ldr	r3, [pc, #148]	@ (8000b9c <SystemClock_Config+0xf4>)
 8000b08:	699b      	ldr	r3, [r3, #24]
 8000b0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b12:	d1f8      	bne.n	8000b06 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b14:	2302      	movs	r3, #2
 8000b16:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b1c:	2340      	movs	r3, #64	@ 0x40
 8000b1e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b20:	2302      	movs	r3, #2
 8000b22:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b24:	2300      	movs	r3, #0
 8000b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b28:	2304      	movs	r3, #4
 8000b2a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b2c:	230a      	movs	r3, #10
 8000b2e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b30:	2302      	movs	r3, #2
 8000b32:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b34:	2302      	movs	r3, #2
 8000b36:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b3c:	230c      	movs	r3, #12
 8000b3e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000b40:	2302      	movs	r3, #2
 8000b42:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f007 f9ab 	bl	8007ea8 <HAL_RCC_OscConfig>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000b58:	f000 fb6c 	bl	8001234 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b5c:	233f      	movs	r3, #63	@ 0x3f
 8000b5e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b70:	2340      	movs	r3, #64	@ 0x40
 8000b72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	2101      	movs	r1, #1
 8000b80:	4618      	mov	r0, r3
 8000b82:	f007 fdeb 	bl	800875c <HAL_RCC_ClockConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000b8c:	f000 fb52 	bl	8001234 <Error_Handler>
  }
}
 8000b90:	bf00      	nop
 8000b92:	3770      	adds	r7, #112	@ 0x70
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	58000400 	.word	0x58000400
 8000b9c:	58024800 	.word	0x58024800

08000ba0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	@ 0x28
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
 8000bc0:	615a      	str	r2, [r3, #20]
 8000bc2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bc4:	4b8a      	ldr	r3, [pc, #552]	@ (8000df0 <MX_ADC1_Init+0x250>)
 8000bc6:	4a8b      	ldr	r2, [pc, #556]	@ (8000df4 <MX_ADC1_Init+0x254>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 8000bca:	4b89      	ldr	r3, [pc, #548]	@ (8000df0 <MX_ADC1_Init+0x250>)
 8000bcc:	f44f 1210 	mov.w	r2, #2359296	@ 0x240000
 8000bd0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bd2:	4b87      	ldr	r3, [pc, #540]	@ (8000df0 <MX_ADC1_Init+0x250>)
 8000bd4:	2208      	movs	r2, #8
 8000bd6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000bd8:	4b85      	ldr	r3, [pc, #532]	@ (8000df0 <MX_ADC1_Init+0x250>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000bde:	4b84      	ldr	r3, [pc, #528]	@ (8000df0 <MX_ADC1_Init+0x250>)
 8000be0:	2208      	movs	r2, #8
 8000be2:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000be4:	4b82      	ldr	r3, [pc, #520]	@ (8000df0 <MX_ADC1_Init+0x250>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000bea:	4b81      	ldr	r3, [pc, #516]	@ (8000df0 <MX_ADC1_Init+0x250>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 13;
 8000bf0:	4b7f      	ldr	r3, [pc, #508]	@ (8000df0 <MX_ADC1_Init+0x250>)
 8000bf2:	220d      	movs	r2, #13
 8000bf4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bf6:	4b7e      	ldr	r3, [pc, #504]	@ (8000df0 <MX_ADC1_Init+0x250>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bfc:	4b7c      	ldr	r3, [pc, #496]	@ (8000df0 <MX_ADC1_Init+0x250>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c02:	4b7b      	ldr	r3, [pc, #492]	@ (8000df0 <MX_ADC1_Init+0x250>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000c08:	4b79      	ldr	r3, [pc, #484]	@ (8000df0 <MX_ADC1_Init+0x250>)
 8000c0a:	2203      	movs	r2, #3
 8000c0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c0e:	4b78      	ldr	r3, [pc, #480]	@ (8000df0 <MX_ADC1_Init+0x250>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c14:	4b76      	ldr	r3, [pc, #472]	@ (8000df0 <MX_ADC1_Init+0x250>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c1a:	4b75      	ldr	r3, [pc, #468]	@ (8000df0 <MX_ADC1_Init+0x250>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000c22:	4b73      	ldr	r3, [pc, #460]	@ (8000df0 <MX_ADC1_Init+0x250>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c28:	4871      	ldr	r0, [pc, #452]	@ (8000df0 <MX_ADC1_Init+0x250>)
 8000c2a:	f002 fbeb 	bl	8003404 <HAL_ADC_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000c34:	f000 fafe 	bl	8001234 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c3c:	f107 031c 	add.w	r3, r7, #28
 8000c40:	4619      	mov	r1, r3
 8000c42:	486b      	ldr	r0, [pc, #428]	@ (8000df0 <MX_ADC1_Init+0x250>)
 8000c44:	f003 fe18 	bl	8004878 <HAL_ADCEx_MultiModeConfigChannel>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000c4e:	f000 faf1 	bl	8001234 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000c52:	4b69      	ldr	r3, [pc, #420]	@ (8000df8 <MX_ADC1_Init+0x258>)
 8000c54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c56:	2306      	movs	r3, #6
 8000c58:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c5e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000c62:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c64:	2304      	movs	r3, #4
 8000c66:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c70:	463b      	mov	r3, r7
 8000c72:	4619      	mov	r1, r3
 8000c74:	485e      	ldr	r0, [pc, #376]	@ (8000df0 <MX_ADC1_Init+0x250>)
 8000c76:	f003 f88d 	bl	8003d94 <HAL_ADC_ConfigChannel>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000c80:	f000 fad8 	bl	8001234 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c84:	4b5d      	ldr	r3, [pc, #372]	@ (8000dfc <MX_ADC1_Init+0x25c>)
 8000c86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c88:	230c      	movs	r3, #12
 8000c8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4857      	ldr	r0, [pc, #348]	@ (8000df0 <MX_ADC1_Init+0x250>)
 8000c92:	f003 f87f 	bl	8003d94 <HAL_ADC_ConfigChannel>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000c9c:	f000 faca 	bl	8001234 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ca0:	4b57      	ldr	r3, [pc, #348]	@ (8000e00 <MX_ADC1_Init+0x260>)
 8000ca2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ca4:	2312      	movs	r3, #18
 8000ca6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ca8:	463b      	mov	r3, r7
 8000caa:	4619      	mov	r1, r3
 8000cac:	4850      	ldr	r0, [pc, #320]	@ (8000df0 <MX_ADC1_Init+0x250>)
 8000cae:	f003 f871 	bl	8003d94 <HAL_ADC_ConfigChannel>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000cb8:	f000 fabc 	bl	8001234 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000cbc:	4b51      	ldr	r3, [pc, #324]	@ (8000e04 <MX_ADC1_Init+0x264>)
 8000cbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000cc0:	2318      	movs	r3, #24
 8000cc2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4849      	ldr	r0, [pc, #292]	@ (8000df0 <MX_ADC1_Init+0x250>)
 8000cca:	f003 f863 	bl	8003d94 <HAL_ADC_ConfigChannel>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000cd4:	f000 faae 	bl	8001234 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000cd8:	4b4b      	ldr	r3, [pc, #300]	@ (8000e08 <MX_ADC1_Init+0x268>)
 8000cda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000cdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ce0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ce2:	463b      	mov	r3, r7
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4842      	ldr	r0, [pc, #264]	@ (8000df0 <MX_ADC1_Init+0x250>)
 8000ce8:	f003 f854 	bl	8003d94 <HAL_ADC_ConfigChannel>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 8000cf2:	f000 fa9f 	bl	8001234 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000cf6:	4b45      	ldr	r3, [pc, #276]	@ (8000e0c <MX_ADC1_Init+0x26c>)
 8000cf8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000cfa:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000cfe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d00:	463b      	mov	r3, r7
 8000d02:	4619      	mov	r1, r3
 8000d04:	483a      	ldr	r0, [pc, #232]	@ (8000df0 <MX_ADC1_Init+0x250>)
 8000d06:	f003 f845 	bl	8003d94 <HAL_ADC_ConfigChannel>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_ADC1_Init+0x174>
  {
    Error_Handler();
 8000d10:	f000 fa90 	bl	8001234 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000d14:	4b3e      	ldr	r3, [pc, #248]	@ (8000e10 <MX_ADC1_Init+0x270>)
 8000d16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000d18:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8000d1c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d1e:	463b      	mov	r3, r7
 8000d20:	4619      	mov	r1, r3
 8000d22:	4833      	ldr	r0, [pc, #204]	@ (8000df0 <MX_ADC1_Init+0x250>)
 8000d24:	f003 f836 	bl	8003d94 <HAL_ADC_ConfigChannel>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_ADC1_Init+0x192>
  {
    Error_Handler();
 8000d2e:	f000 fa81 	bl	8001234 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000d32:	4b38      	ldr	r3, [pc, #224]	@ (8000e14 <MX_ADC1_Init+0x274>)
 8000d34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000d36:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8000d3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	4619      	mov	r1, r3
 8000d40:	482b      	ldr	r0, [pc, #172]	@ (8000df0 <MX_ADC1_Init+0x250>)
 8000d42:	f003 f827 	bl	8003d94 <HAL_ADC_ConfigChannel>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_ADC1_Init+0x1b0>
  {
    Error_Handler();
 8000d4c:	f000 fa72 	bl	8001234 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000d50:	4b31      	ldr	r3, [pc, #196]	@ (8000e18 <MX_ADC1_Init+0x278>)
 8000d52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000d54:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8000d58:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4824      	ldr	r0, [pc, #144]	@ (8000df0 <MX_ADC1_Init+0x250>)
 8000d60:	f003 f818 	bl	8003d94 <HAL_ADC_ConfigChannel>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_ADC1_Init+0x1ce>
  {
    Error_Handler();
 8000d6a:	f000 fa63 	bl	8001234 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000d6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000e1c <MX_ADC1_Init+0x27c>)
 8000d70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000d72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d78:	463b      	mov	r3, r7
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	481c      	ldr	r0, [pc, #112]	@ (8000df0 <MX_ADC1_Init+0x250>)
 8000d7e:	f003 f809 	bl	8003d94 <HAL_ADC_ConfigChannel>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_ADC1_Init+0x1ec>
  {
    Error_Handler();
 8000d88:	f000 fa54 	bl	8001234 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000d8c:	4b24      	ldr	r3, [pc, #144]	@ (8000e20 <MX_ADC1_Init+0x280>)
 8000d8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000d90:	f240 2306 	movw	r3, #518	@ 0x206
 8000d94:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d96:	463b      	mov	r3, r7
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4815      	ldr	r0, [pc, #84]	@ (8000df0 <MX_ADC1_Init+0x250>)
 8000d9c:	f002 fffa 	bl	8003d94 <HAL_ADC_ConfigChannel>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_ADC1_Init+0x20a>
  {
    Error_Handler();
 8000da6:	f000 fa45 	bl	8001234 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8000daa:	4b1e      	ldr	r3, [pc, #120]	@ (8000e24 <MX_ADC1_Init+0x284>)
 8000dac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000dae:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8000db2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db4:	463b      	mov	r3, r7
 8000db6:	4619      	mov	r1, r3
 8000db8:	480d      	ldr	r0, [pc, #52]	@ (8000df0 <MX_ADC1_Init+0x250>)
 8000dba:	f002 ffeb 	bl	8003d94 <HAL_ADC_ConfigChannel>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_ADC1_Init+0x228>
  {
    Error_Handler();
 8000dc4:	f000 fa36 	bl	8001234 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8000dc8:	4b17      	ldr	r3, [pc, #92]	@ (8000e28 <MX_ADC1_Init+0x288>)
 8000dca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000dcc:	f240 2312 	movw	r3, #530	@ 0x212
 8000dd0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd2:	463b      	mov	r3, r7
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4806      	ldr	r0, [pc, #24]	@ (8000df0 <MX_ADC1_Init+0x250>)
 8000dd8:	f002 ffdc 	bl	8003d94 <HAL_ADC_ConfigChannel>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_ADC1_Init+0x246>
  {
    Error_Handler();
 8000de2:	f000 fa27 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	3728      	adds	r7, #40	@ 0x28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	240000b8 	.word	0x240000b8
 8000df4:	40022000 	.word	0x40022000
 8000df8:	08600004 	.word	0x08600004
 8000dfc:	0c900008 	.word	0x0c900008
 8000e00:	10c00010 	.word	0x10c00010
 8000e04:	1d500080 	.word	0x1d500080
 8000e08:	21800100 	.word	0x21800100
 8000e0c:	2a000400 	.word	0x2a000400
 8000e10:	2e300800 	.word	0x2e300800
 8000e14:	3ac04000 	.word	0x3ac04000
 8000e18:	3ef08000 	.word	0x3ef08000
 8000e1c:	43210000 	.word	0x43210000
 8000e20:	47520000 	.word	0x47520000
 8000e24:	4b840000 	.word	0x4b840000
 8000e28:	4fb80000 	.word	0x4fb80000

08000e2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e30:	4b28      	ldr	r3, [pc, #160]	@ (8000ed4 <MX_SPI1_Init+0xa8>)
 8000e32:	4a29      	ldr	r2, [pc, #164]	@ (8000ed8 <MX_SPI1_Init+0xac>)
 8000e34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e36:	4b27      	ldr	r3, [pc, #156]	@ (8000ed4 <MX_SPI1_Init+0xa8>)
 8000e38:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000e3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000e3e:	4b25      	ldr	r3, [pc, #148]	@ (8000ed4 <MX_SPI1_Init+0xa8>)
 8000e40:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000e44:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e46:	4b23      	ldr	r3, [pc, #140]	@ (8000ed4 <MX_SPI1_Init+0xa8>)
 8000e48:	2207      	movs	r2, #7
 8000e4a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e4c:	4b21      	ldr	r3, [pc, #132]	@ (8000ed4 <MX_SPI1_Init+0xa8>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e52:	4b20      	ldr	r3, [pc, #128]	@ (8000ed4 <MX_SPI1_Init+0xa8>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e58:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed4 <MX_SPI1_Init+0xa8>)
 8000e5a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000e5e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000e60:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed4 <MX_SPI1_Init+0xa8>)
 8000e62:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000e66:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e68:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed4 <MX_SPI1_Init+0xa8>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e6e:	4b19      	ldr	r3, [pc, #100]	@ (8000ed4 <MX_SPI1_Init+0xa8>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e74:	4b17      	ldr	r3, [pc, #92]	@ (8000ed4 <MX_SPI1_Init+0xa8>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000e7a:	4b16      	ldr	r3, [pc, #88]	@ (8000ed4 <MX_SPI1_Init+0xa8>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e80:	4b14      	ldr	r3, [pc, #80]	@ (8000ed4 <MX_SPI1_Init+0xa8>)
 8000e82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e86:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e88:	4b12      	ldr	r3, [pc, #72]	@ (8000ed4 <MX_SPI1_Init+0xa8>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e8e:	4b11      	ldr	r3, [pc, #68]	@ (8000ed4 <MX_SPI1_Init+0xa8>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e94:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed4 <MX_SPI1_Init+0xa8>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed4 <MX_SPI1_Init+0xa8>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed4 <MX_SPI1_Init+0xa8>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed4 <MX_SPI1_Init+0xa8>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000eac:	4b09      	ldr	r3, [pc, #36]	@ (8000ed4 <MX_SPI1_Init+0xa8>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000eb2:	4b08      	ldr	r3, [pc, #32]	@ (8000ed4 <MX_SPI1_Init+0xa8>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	@ (8000ed4 <MX_SPI1_Init+0xa8>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ebe:	4805      	ldr	r0, [pc, #20]	@ (8000ed4 <MX_SPI1_Init+0xa8>)
 8000ec0:	f00a fcd6 	bl	800b870 <HAL_SPI_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000eca:	f000 f9b3 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	24000194 	.word	0x24000194
 8000ed8:	40013000 	.word	0x40013000

08000edc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b088      	sub	sp, #32
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ee2:	f107 0310 	add.w	r3, r7, #16
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef0:	1d3b      	adds	r3, r7, #4
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000efa:	4b1e      	ldr	r3, [pc, #120]	@ (8000f74 <MX_TIM2_Init+0x98>)
 8000efc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f00:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8000f02:	4b1c      	ldr	r3, [pc, #112]	@ (8000f74 <MX_TIM2_Init+0x98>)
 8000f04:	223f      	movs	r2, #63	@ 0x3f
 8000f06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f08:	4b1a      	ldr	r3, [pc, #104]	@ (8000f74 <MX_TIM2_Init+0x98>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000f0e:	4b19      	ldr	r3, [pc, #100]	@ (8000f74 <MX_TIM2_Init+0x98>)
 8000f10:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f16:	4b17      	ldr	r3, [pc, #92]	@ (8000f74 <MX_TIM2_Init+0x98>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1c:	4b15      	ldr	r3, [pc, #84]	@ (8000f74 <MX_TIM2_Init+0x98>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f22:	4814      	ldr	r0, [pc, #80]	@ (8000f74 <MX_TIM2_Init+0x98>)
 8000f24:	f00b f8f5 	bl	800c112 <HAL_TIM_Base_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f2e:	f000 f981 	bl	8001234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f38:	f107 0310 	add.w	r3, r7, #16
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	480d      	ldr	r0, [pc, #52]	@ (8000f74 <MX_TIM2_Init+0x98>)
 8000f40:	f00b fabe 	bl	800c4c0 <HAL_TIM_ConfigClockSource>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f4a:	f000 f973 	bl	8001234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4806      	ldr	r0, [pc, #24]	@ (8000f74 <MX_TIM2_Init+0x98>)
 8000f5c:	f00b fd0e 	bl	800c97c <HAL_TIMEx_MasterConfigSynchronization>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f66:	f000 f965 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	3720      	adds	r7, #32
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	2400021c 	.word	0x2400021c

08000f78 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000f7c:	4b22      	ldr	r3, [pc, #136]	@ (8001008 <MX_UART4_Init+0x90>)
 8000f7e:	4a23      	ldr	r2, [pc, #140]	@ (800100c <MX_UART4_Init+0x94>)
 8000f80:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 230400;
 8000f82:	4b21      	ldr	r3, [pc, #132]	@ (8001008 <MX_UART4_Init+0x90>)
 8000f84:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8000f88:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001008 <MX_UART4_Init+0x90>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000f90:	4b1d      	ldr	r3, [pc, #116]	@ (8001008 <MX_UART4_Init+0x90>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000f96:	4b1c      	ldr	r3, [pc, #112]	@ (8001008 <MX_UART4_Init+0x90>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001008 <MX_UART4_Init+0x90>)
 8000f9e:	220c      	movs	r2, #12
 8000fa0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa2:	4b19      	ldr	r3, [pc, #100]	@ (8001008 <MX_UART4_Init+0x90>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa8:	4b17      	ldr	r3, [pc, #92]	@ (8001008 <MX_UART4_Init+0x90>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fae:	4b16      	ldr	r3, [pc, #88]	@ (8001008 <MX_UART4_Init+0x90>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fb4:	4b14      	ldr	r3, [pc, #80]	@ (8001008 <MX_UART4_Init+0x90>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fba:	4b13      	ldr	r3, [pc, #76]	@ (8001008 <MX_UART4_Init+0x90>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000fc0:	4811      	ldr	r0, [pc, #68]	@ (8001008 <MX_UART4_Init+0x90>)
 8000fc2:	f00b fd87 	bl	800cad4 <HAL_UART_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000fcc:	f000 f932 	bl	8001234 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	480d      	ldr	r0, [pc, #52]	@ (8001008 <MX_UART4_Init+0x90>)
 8000fd4:	f00e f8fd 	bl	800f1d2 <HAL_UARTEx_SetTxFifoThreshold>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000fde:	f000 f929 	bl	8001234 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4808      	ldr	r0, [pc, #32]	@ (8001008 <MX_UART4_Init+0x90>)
 8000fe6:	f00e f932 	bl	800f24e <HAL_UARTEx_SetRxFifoThreshold>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000ff0:	f000 f920 	bl	8001234 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000ff4:	4804      	ldr	r0, [pc, #16]	@ (8001008 <MX_UART4_Init+0x90>)
 8000ff6:	f00e f8b3 	bl	800f160 <HAL_UARTEx_DisableFifoMode>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001000:	f000 f918 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	24000268 	.word	0x24000268
 800100c:	40004c00 	.word	0x40004c00

08001010 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001016:	4b0d      	ldr	r3, [pc, #52]	@ (800104c <MX_DMA_Init+0x3c>)
 8001018:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800101c:	4a0b      	ldr	r2, [pc, #44]	@ (800104c <MX_DMA_Init+0x3c>)
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001026:	4b09      	ldr	r3, [pc, #36]	@ (800104c <MX_DMA_Init+0x3c>)
 8001028:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001034:	2200      	movs	r2, #0
 8001036:	2100      	movs	r1, #0
 8001038:	200b      	movs	r0, #11
 800103a:	f003 fdd6 	bl	8004bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800103e:	200b      	movs	r0, #11
 8001040:	f003 fded 	bl	8004c1e <HAL_NVIC_EnableIRQ>

}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	58024400 	.word	0x58024400

08001050 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08c      	sub	sp, #48	@ 0x30
 8001054:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001056:	f107 031c 	add.w	r3, r7, #28
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001066:	4b63      	ldr	r3, [pc, #396]	@ (80011f4 <MX_GPIO_Init+0x1a4>)
 8001068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800106c:	4a61      	ldr	r2, [pc, #388]	@ (80011f4 <MX_GPIO_Init+0x1a4>)
 800106e:	f043 0310 	orr.w	r3, r3, #16
 8001072:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001076:	4b5f      	ldr	r3, [pc, #380]	@ (80011f4 <MX_GPIO_Init+0x1a4>)
 8001078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800107c:	f003 0310 	and.w	r3, r3, #16
 8001080:	61bb      	str	r3, [r7, #24]
 8001082:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001084:	4b5b      	ldr	r3, [pc, #364]	@ (80011f4 <MX_GPIO_Init+0x1a4>)
 8001086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800108a:	4a5a      	ldr	r2, [pc, #360]	@ (80011f4 <MX_GPIO_Init+0x1a4>)
 800108c:	f043 0320 	orr.w	r3, r3, #32
 8001090:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001094:	4b57      	ldr	r3, [pc, #348]	@ (80011f4 <MX_GPIO_Init+0x1a4>)
 8001096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800109a:	f003 0320 	and.w	r3, r3, #32
 800109e:	617b      	str	r3, [r7, #20]
 80010a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a2:	4b54      	ldr	r3, [pc, #336]	@ (80011f4 <MX_GPIO_Init+0x1a4>)
 80010a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a8:	4a52      	ldr	r2, [pc, #328]	@ (80011f4 <MX_GPIO_Init+0x1a4>)
 80010aa:	f043 0304 	orr.w	r3, r3, #4
 80010ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010b2:	4b50      	ldr	r3, [pc, #320]	@ (80011f4 <MX_GPIO_Init+0x1a4>)
 80010b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b8:	f003 0304 	and.w	r3, r3, #4
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c0:	4b4c      	ldr	r3, [pc, #304]	@ (80011f4 <MX_GPIO_Init+0x1a4>)
 80010c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c6:	4a4b      	ldr	r2, [pc, #300]	@ (80011f4 <MX_GPIO_Init+0x1a4>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010d0:	4b48      	ldr	r3, [pc, #288]	@ (80011f4 <MX_GPIO_Init+0x1a4>)
 80010d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010de:	4b45      	ldr	r3, [pc, #276]	@ (80011f4 <MX_GPIO_Init+0x1a4>)
 80010e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e4:	4a43      	ldr	r2, [pc, #268]	@ (80011f4 <MX_GPIO_Init+0x1a4>)
 80010e6:	f043 0308 	orr.w	r3, r3, #8
 80010ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010ee:	4b41      	ldr	r3, [pc, #260]	@ (80011f4 <MX_GPIO_Init+0x1a4>)
 80010f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010f4:	f003 0308 	and.w	r3, r3, #8
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010fc:	4b3d      	ldr	r3, [pc, #244]	@ (80011f4 <MX_GPIO_Init+0x1a4>)
 80010fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001102:	4a3c      	ldr	r2, [pc, #240]	@ (80011f4 <MX_GPIO_Init+0x1a4>)
 8001104:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001108:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800110c:	4b39      	ldr	r3, [pc, #228]	@ (80011f4 <MX_GPIO_Init+0x1a4>)
 800110e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800111a:	2200      	movs	r2, #0
 800111c:	f64f 71fd 	movw	r1, #65533	@ 0xfffd
 8001120:	4835      	ldr	r0, [pc, #212]	@ (80011f8 <MX_GPIO_Init+0x1a8>)
 8001122:	f006 fe05 	bl	8007d30 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001126:	2200      	movs	r2, #0
 8001128:	f647 41ff 	movw	r1, #31999	@ 0x7cff
 800112c:	4833      	ldr	r0, [pc, #204]	@ (80011fc <MX_GPIO_Init+0x1ac>)
 800112e:	f006 fdff 	bl	8007d30 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001132:	2200      	movs	r2, #0
 8001134:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8001138:	4831      	ldr	r0, [pc, #196]	@ (8001200 <MX_GPIO_Init+0x1b0>)
 800113a:	f006 fdf9 	bl	8007d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800113e:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 8001142:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001144:	2301      	movs	r3, #1
 8001146:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114c:	2300      	movs	r3, #0
 800114e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001150:	f107 031c 	add.w	r3, r7, #28
 8001154:	4619      	mov	r1, r3
 8001156:	4828      	ldr	r0, [pc, #160]	@ (80011f8 <MX_GPIO_Init+0x1a8>)
 8001158:	f006 fc3a 	bl	80079d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 800115c:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001160:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001162:	2303      	movs	r3, #3
 8001164:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	4619      	mov	r1, r3
 8001170:	4824      	ldr	r0, [pc, #144]	@ (8001204 <MX_GPIO_Init+0x1b4>)
 8001172:	f006 fc2d 	bl	80079d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin PD11 PD12 PD13
                           PD14 PD0 PD1 PD2
                           PD3 PD4 PD5 PD6
                           PD7 */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001176:	f647 43ff 	movw	r3, #31999	@ 0x7cff
 800117a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117c:	2301      	movs	r3, #1
 800117e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001188:	f107 031c 	add.w	r3, r7, #28
 800118c:	4619      	mov	r1, r3
 800118e:	481b      	ldr	r0, [pc, #108]	@ (80011fc <MX_GPIO_Init+0x1ac>)
 8001190:	f006 fc1e 	bl	80079d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001194:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119a:	2301      	movs	r3, #1
 800119c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	2300      	movs	r3, #0
 80011a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	4619      	mov	r1, r3
 80011ac:	4814      	ldr	r0, [pc, #80]	@ (8001200 <MX_GPIO_Init+0x1b0>)
 80011ae:	f006 fc0f 	bl	80079d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80011b2:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80011b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80011c4:	230a      	movs	r3, #10
 80011c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c8:	f107 031c 	add.w	r3, r7, #28
 80011cc:	4619      	mov	r1, r3
 80011ce:	480e      	ldr	r0, [pc, #56]	@ (8001208 <MX_GPIO_Init+0x1b8>)
 80011d0:	f006 fbfe 	bl	80079d0 <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80011d4:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 80011d8:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80011dc:	f001 fec0 	bl	8002f60 <HAL_SYSCFG_AnalogSwitchConfig>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80011e0:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 80011e4:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 80011e8:	f001 feba 	bl	8002f60 <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80011ec:	bf00      	nop
 80011ee:	3730      	adds	r7, #48	@ 0x30
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	58024400 	.word	0x58024400
 80011f8:	58021000 	.word	0x58021000
 80011fc:	58020c00 	.word	0x58020c00
 8001200:	58020800 	.word	0x58020800
 8001204:	58021400 	.word	0x58021400
 8001208:	58020000 	.word	0x58020000

0800120c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d102      	bne.n	8001222 <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 800121c:	4b04      	ldr	r3, [pc, #16]	@ (8001230 <BSP_PB_Callback+0x24>)
 800121e:	2201      	movs	r2, #1
 8001220:	601a      	str	r2, [r3, #0]
  }
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	240000b4 	.word	0x240000b4

08001234 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001238:	b672      	cpsid	i
}
 800123a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <Error_Handler+0x8>

08001240 <InitPT>:

extern void Error_Handler(void);


void InitPT(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
    if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, N_ADC_CH) != HAL_OK)
 8001244:	220d      	movs	r2, #13
 8001246:	4905      	ldr	r1, [pc, #20]	@ (800125c <InitPT+0x1c>)
 8001248:	4805      	ldr	r0, [pc, #20]	@ (8001260 <InitPT+0x20>)
 800124a:	f002 fa7d 	bl	8003748 <HAL_ADC_Start_DMA>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <InitPT+0x18>
    {
        Error_Handler();
 8001254:	f7ff ffee 	bl	8001234 <Error_Handler>
    }
}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	24000384 	.word	0x24000384
 8001260:	240000b8 	.word	0x240000b8

08001264 <GetADCRaw>:

void GetADCRaw(uint16_t* buf)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	memcpy((void*)buf, (void*)adc_buffer, sizeof(uint16_t)*N_ADC_CH);
 800126c:	221a      	movs	r2, #26
 800126e:	4904      	ldr	r1, [pc, #16]	@ (8001280 <GetADCRaw+0x1c>)
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f00e faa0 	bl	800f7b6 <memcpy>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	24000384 	.word	0x24000384

08001284 <SVUpdate>:

#include "solenoidvalve.h"
#include <stdint.h>

void SVUpdate(uint8_t* ch)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i<MAX_SV_NUM; i++) {
 800128c:	2300      	movs	r3, #0
 800128e:	73fb      	strb	r3, [r7, #15]
 8001290:	e0d1      	b.n	8001436 <SVUpdate+0x1b2>
		switch(i) {
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	2b09      	cmp	r3, #9
 8001296:	f200 80ca 	bhi.w	800142e <SVUpdate+0x1aa>
 800129a:	a201      	add	r2, pc, #4	@ (adr r2, 80012a0 <SVUpdate+0x1c>)
 800129c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a0:	080012c9 	.word	0x080012c9
 80012a4:	080012e9 	.word	0x080012e9
 80012a8:	0800130b 	.word	0x0800130b
 80012ac:	0800132d 	.word	0x0800132d
 80012b0:	0800134f 	.word	0x0800134f
 80012b4:	08001375 	.word	0x08001375
 80012b8:	0800139b 	.word	0x0800139b
 80012bc:	080013c1 	.word	0x080013c1
 80012c0:	080013e7 	.word	0x080013e7
 80012c4:	08001409 	.word	0x08001409
		case 0: // SV CH1
			if (ch[0] == 0) {
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d105      	bne.n	80012dc <SVUpdate+0x58>
				HAL_GPIO_WritePin(SV_CH1_PORT, SV_CH1_GPIO, GPIO_PIN_RESET);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2101      	movs	r1, #1
 80012d4:	485c      	ldr	r0, [pc, #368]	@ (8001448 <SVUpdate+0x1c4>)
 80012d6:	f006 fd2b 	bl	8007d30 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH1_PORT, SV_CH1_GPIO, GPIO_PIN_SET);
			}
			break;
 80012da:	e0a9      	b.n	8001430 <SVUpdate+0x1ac>
				HAL_GPIO_WritePin(SV_CH1_PORT, SV_CH1_GPIO, GPIO_PIN_SET);
 80012dc:	2201      	movs	r2, #1
 80012de:	2101      	movs	r1, #1
 80012e0:	4859      	ldr	r0, [pc, #356]	@ (8001448 <SVUpdate+0x1c4>)
 80012e2:	f006 fd25 	bl	8007d30 <HAL_GPIO_WritePin>
			break;
 80012e6:	e0a3      	b.n	8001430 <SVUpdate+0x1ac>
		case 1:
			if (ch[1] == 0) {
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3301      	adds	r3, #1
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d105      	bne.n	80012fe <SVUpdate+0x7a>
				HAL_GPIO_WritePin(SV_CH2_PORT, SV_CH2_GPIO, GPIO_PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2108      	movs	r1, #8
 80012f6:	4854      	ldr	r0, [pc, #336]	@ (8001448 <SVUpdate+0x1c4>)
 80012f8:	f006 fd1a 	bl	8007d30 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH2_PORT, SV_CH2_GPIO, GPIO_PIN_SET);
			}
			break;
 80012fc:	e098      	b.n	8001430 <SVUpdate+0x1ac>
				HAL_GPIO_WritePin(SV_CH2_PORT, SV_CH2_GPIO, GPIO_PIN_SET);
 80012fe:	2201      	movs	r2, #1
 8001300:	2108      	movs	r1, #8
 8001302:	4851      	ldr	r0, [pc, #324]	@ (8001448 <SVUpdate+0x1c4>)
 8001304:	f006 fd14 	bl	8007d30 <HAL_GPIO_WritePin>
			break;
 8001308:	e092      	b.n	8001430 <SVUpdate+0x1ac>
		case 2:
			if (ch[2] == 0) {
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	3302      	adds	r3, #2
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d105      	bne.n	8001320 <SVUpdate+0x9c>
				HAL_GPIO_WritePin(SV_CH3_PORT, SV_CH3_GPIO, GPIO_PIN_RESET);
 8001314:	2200      	movs	r2, #0
 8001316:	2110      	movs	r1, #16
 8001318:	484b      	ldr	r0, [pc, #300]	@ (8001448 <SVUpdate+0x1c4>)
 800131a:	f006 fd09 	bl	8007d30 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH3_PORT, SV_CH3_GPIO, GPIO_PIN_SET);
			}
			break;
 800131e:	e087      	b.n	8001430 <SVUpdate+0x1ac>
				HAL_GPIO_WritePin(SV_CH3_PORT, SV_CH3_GPIO, GPIO_PIN_SET);
 8001320:	2201      	movs	r2, #1
 8001322:	2110      	movs	r1, #16
 8001324:	4848      	ldr	r0, [pc, #288]	@ (8001448 <SVUpdate+0x1c4>)
 8001326:	f006 fd03 	bl	8007d30 <HAL_GPIO_WritePin>
			break;
 800132a:	e081      	b.n	8001430 <SVUpdate+0x1ac>
		case 3:
			if (ch[3] == 0) {
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3303      	adds	r3, #3
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d105      	bne.n	8001342 <SVUpdate+0xbe>
				HAL_GPIO_WritePin(SV_CH4_PORT, SV_CH4_GPIO, GPIO_PIN_RESET);
 8001336:	2200      	movs	r2, #0
 8001338:	2180      	movs	r1, #128	@ 0x80
 800133a:	4843      	ldr	r0, [pc, #268]	@ (8001448 <SVUpdate+0x1c4>)
 800133c:	f006 fcf8 	bl	8007d30 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH4_PORT, SV_CH4_GPIO, GPIO_PIN_SET);
			}
			break;
 8001340:	e076      	b.n	8001430 <SVUpdate+0x1ac>
				HAL_GPIO_WritePin(SV_CH4_PORT, SV_CH4_GPIO, GPIO_PIN_SET);
 8001342:	2201      	movs	r2, #1
 8001344:	2180      	movs	r1, #128	@ 0x80
 8001346:	4840      	ldr	r0, [pc, #256]	@ (8001448 <SVUpdate+0x1c4>)
 8001348:	f006 fcf2 	bl	8007d30 <HAL_GPIO_WritePin>
			break;
 800134c:	e070      	b.n	8001430 <SVUpdate+0x1ac>
		case 4:
			if (ch[4] == 0) {
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	3304      	adds	r3, #4
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d106      	bne.n	8001366 <SVUpdate+0xe2>
				HAL_GPIO_WritePin(SV_CH5_PORT, SV_CH5_GPIO, GPIO_PIN_RESET);
 8001358:	2200      	movs	r2, #0
 800135a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800135e:	483a      	ldr	r0, [pc, #232]	@ (8001448 <SVUpdate+0x1c4>)
 8001360:	f006 fce6 	bl	8007d30 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH5_PORT, SV_CH5_GPIO, GPIO_PIN_SET);
			}
			break;
 8001364:	e064      	b.n	8001430 <SVUpdate+0x1ac>
				HAL_GPIO_WritePin(SV_CH5_PORT, SV_CH5_GPIO, GPIO_PIN_SET);
 8001366:	2201      	movs	r2, #1
 8001368:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800136c:	4836      	ldr	r0, [pc, #216]	@ (8001448 <SVUpdate+0x1c4>)
 800136e:	f006 fcdf 	bl	8007d30 <HAL_GPIO_WritePin>
			break;
 8001372:	e05d      	b.n	8001430 <SVUpdate+0x1ac>
		case 5:
			if (ch[5] == 0) {
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3305      	adds	r3, #5
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d106      	bne.n	800138c <SVUpdate+0x108>
				HAL_GPIO_WritePin(SV_CH6_PORT, SV_CH6_GPIO, GPIO_PIN_RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001384:	4830      	ldr	r0, [pc, #192]	@ (8001448 <SVUpdate+0x1c4>)
 8001386:	f006 fcd3 	bl	8007d30 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH6_PORT, SV_CH6_GPIO, GPIO_PIN_SET);
			}
			break;
 800138a:	e051      	b.n	8001430 <SVUpdate+0x1ac>
				HAL_GPIO_WritePin(SV_CH6_PORT, SV_CH6_GPIO, GPIO_PIN_SET);
 800138c:	2201      	movs	r2, #1
 800138e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001392:	482d      	ldr	r0, [pc, #180]	@ (8001448 <SVUpdate+0x1c4>)
 8001394:	f006 fccc 	bl	8007d30 <HAL_GPIO_WritePin>
			break;
 8001398:	e04a      	b.n	8001430 <SVUpdate+0x1ac>
		case 6:
			if (ch[6] == 0) {
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	3306      	adds	r3, #6
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d106      	bne.n	80013b2 <SVUpdate+0x12e>
				HAL_GPIO_WritePin(SV_CH7_PORT, SV_CH7_GPIO, GPIO_PIN_RESET);
 80013a4:	2200      	movs	r2, #0
 80013a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013aa:	4827      	ldr	r0, [pc, #156]	@ (8001448 <SVUpdate+0x1c4>)
 80013ac:	f006 fcc0 	bl	8007d30 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH7_PORT, SV_CH7_GPIO, GPIO_PIN_SET);
			}
			break;
 80013b0:	e03e      	b.n	8001430 <SVUpdate+0x1ac>
				HAL_GPIO_WritePin(SV_CH7_PORT, SV_CH7_GPIO, GPIO_PIN_SET);
 80013b2:	2201      	movs	r2, #1
 80013b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013b8:	4823      	ldr	r0, [pc, #140]	@ (8001448 <SVUpdate+0x1c4>)
 80013ba:	f006 fcb9 	bl	8007d30 <HAL_GPIO_WritePin>
			break;
 80013be:	e037      	b.n	8001430 <SVUpdate+0x1ac>
		case 7:
			if (ch[7] == 0) {
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3307      	adds	r3, #7
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d106      	bne.n	80013d8 <SVUpdate+0x154>
				HAL_GPIO_WritePin(SV_CH8_PORT, SV_CH8_GPIO, GPIO_PIN_RESET);
 80013ca:	2200      	movs	r2, #0
 80013cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013d0:	481d      	ldr	r0, [pc, #116]	@ (8001448 <SVUpdate+0x1c4>)
 80013d2:	f006 fcad 	bl	8007d30 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH8_PORT, SV_CH8_GPIO, GPIO_PIN_SET);
			}
			break;
 80013d6:	e02b      	b.n	8001430 <SVUpdate+0x1ac>
				HAL_GPIO_WritePin(SV_CH8_PORT, SV_CH8_GPIO, GPIO_PIN_SET);
 80013d8:	2201      	movs	r2, #1
 80013da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013de:	481a      	ldr	r0, [pc, #104]	@ (8001448 <SVUpdate+0x1c4>)
 80013e0:	f006 fca6 	bl	8007d30 <HAL_GPIO_WritePin>
			break;
 80013e4:	e024      	b.n	8001430 <SVUpdate+0x1ac>
		case 8:
			if (ch[8] == 0) {
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3308      	adds	r3, #8
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d105      	bne.n	80013fc <SVUpdate+0x178>
				HAL_GPIO_WritePin(SV_CH9_PORT, SV_CH9_GPIO, GPIO_PIN_RESET);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2140      	movs	r1, #64	@ 0x40
 80013f4:	4815      	ldr	r0, [pc, #84]	@ (800144c <SVUpdate+0x1c8>)
 80013f6:	f006 fc9b 	bl	8007d30 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH9_PORT, SV_CH9_GPIO, GPIO_PIN_SET);
			}
			break;
 80013fa:	e019      	b.n	8001430 <SVUpdate+0x1ac>
				HAL_GPIO_WritePin(SV_CH9_PORT, SV_CH9_GPIO, GPIO_PIN_SET);
 80013fc:	2201      	movs	r2, #1
 80013fe:	2140      	movs	r1, #64	@ 0x40
 8001400:	4812      	ldr	r0, [pc, #72]	@ (800144c <SVUpdate+0x1c8>)
 8001402:	f006 fc95 	bl	8007d30 <HAL_GPIO_WritePin>
			break;
 8001406:	e013      	b.n	8001430 <SVUpdate+0x1ac>
		case 9:
			if (ch[9] == 0) {
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3309      	adds	r3, #9
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d106      	bne.n	8001420 <SVUpdate+0x19c>
				HAL_GPIO_WritePin(SV_CH10_PORT, SV_CH10_GPIO, GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001418:	480c      	ldr	r0, [pc, #48]	@ (800144c <SVUpdate+0x1c8>)
 800141a:	f006 fc89 	bl	8007d30 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH10_PORT, SV_CH10_GPIO, GPIO_PIN_SET);
			}
			break;
 800141e:	e007      	b.n	8001430 <SVUpdate+0x1ac>
				HAL_GPIO_WritePin(SV_CH10_PORT, SV_CH10_GPIO, GPIO_PIN_SET);
 8001420:	2201      	movs	r2, #1
 8001422:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001426:	4809      	ldr	r0, [pc, #36]	@ (800144c <SVUpdate+0x1c8>)
 8001428:	f006 fc82 	bl	8007d30 <HAL_GPIO_WritePin>
			break;
 800142c:	e000      	b.n	8001430 <SVUpdate+0x1ac>
		default:
			break;
 800142e:	bf00      	nop
	for (uint8_t i = 0; i<MAX_SV_NUM; i++) {
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	3301      	adds	r3, #1
 8001434:	73fb      	strb	r3, [r7, #15]
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	2b09      	cmp	r3, #9
 800143a:	f67f af2a 	bls.w	8001292 <SVUpdate+0xe>
		}
	}

}
 800143e:	bf00      	nop
 8001440:	bf00      	nop
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	58021000 	.word	0x58021000
 800144c:	58020800 	.word	0x58020800

08001450 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001456:	4b0a      	ldr	r3, [pc, #40]	@ (8001480 <HAL_MspInit+0x30>)
 8001458:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800145c:	4a08      	ldr	r2, [pc, #32]	@ (8001480 <HAL_MspInit+0x30>)
 800145e:	f043 0302 	orr.w	r3, r3, #2
 8001462:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001466:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <HAL_MspInit+0x30>)
 8001468:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	607b      	str	r3, [r7, #4]
 8001472:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	58024400 	.word	0x58024400

08001484 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b0bc      	sub	sp, #240	@ 0xf0
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800149c:	f107 0318 	add.w	r3, r7, #24
 80014a0:	22c0      	movs	r2, #192	@ 0xc0
 80014a2:	2100      	movs	r1, #0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f00e f90b 	bl	800f6c0 <memset>
  if(hadc->Instance==ADC1)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a67      	ldr	r2, [pc, #412]	@ (800164c <HAL_ADC_MspInit+0x1c8>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	f040 80c6 	bne.w	8001642 <HAL_ADC_MspInit+0x1be>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014b6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80014ba:	f04f 0300 	mov.w	r3, #0
 80014be:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80014c2:	2304      	movs	r3, #4
 80014c4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 80014c6:	230a      	movs	r3, #10
 80014c8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80014ca:	2302      	movs	r3, #2
 80014cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80014ce:	2302      	movs	r3, #2
 80014d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80014d2:	2302      	movs	r3, #2
 80014d4:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80014d6:	23c0      	movs	r3, #192	@ 0xc0
 80014d8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80014da:	2320      	movs	r3, #32
 80014dc:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 80014de:	2300      	movs	r3, #0
 80014e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80014e2:	2300      	movs	r3, #0
 80014e4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014e8:	f107 0318 	add.w	r3, r7, #24
 80014ec:	4618      	mov	r0, r3
 80014ee:	f007 fcc1 	bl	8008e74 <HAL_RCCEx_PeriphCLKConfig>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 80014f8:	f7ff fe9c 	bl	8001234 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80014fc:	4b54      	ldr	r3, [pc, #336]	@ (8001650 <HAL_ADC_MspInit+0x1cc>)
 80014fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001502:	4a53      	ldr	r2, [pc, #332]	@ (8001650 <HAL_ADC_MspInit+0x1cc>)
 8001504:	f043 0320 	orr.w	r3, r3, #32
 8001508:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800150c:	4b50      	ldr	r3, [pc, #320]	@ (8001650 <HAL_ADC_MspInit+0x1cc>)
 800150e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001512:	f003 0320 	and.w	r3, r3, #32
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800151a:	4b4d      	ldr	r3, [pc, #308]	@ (8001650 <HAL_ADC_MspInit+0x1cc>)
 800151c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001520:	4a4b      	ldr	r2, [pc, #300]	@ (8001650 <HAL_ADC_MspInit+0x1cc>)
 8001522:	f043 0304 	orr.w	r3, r3, #4
 8001526:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800152a:	4b49      	ldr	r3, [pc, #292]	@ (8001650 <HAL_ADC_MspInit+0x1cc>)
 800152c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001538:	4b45      	ldr	r3, [pc, #276]	@ (8001650 <HAL_ADC_MspInit+0x1cc>)
 800153a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800153e:	4a44      	ldr	r2, [pc, #272]	@ (8001650 <HAL_ADC_MspInit+0x1cc>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001548:	4b41      	ldr	r3, [pc, #260]	@ (8001650 <HAL_ADC_MspInit+0x1cc>)
 800154a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001556:	4b3e      	ldr	r3, [pc, #248]	@ (8001650 <HAL_ADC_MspInit+0x1cc>)
 8001558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800155c:	4a3c      	ldr	r2, [pc, #240]	@ (8001650 <HAL_ADC_MspInit+0x1cc>)
 800155e:	f043 0320 	orr.w	r3, r3, #32
 8001562:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001566:	4b3a      	ldr	r3, [pc, #232]	@ (8001650 <HAL_ADC_MspInit+0x1cc>)
 8001568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800156c:	f003 0320 	and.w	r3, r3, #32
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> ADC1_INP7
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001574:	2333      	movs	r3, #51	@ 0x33
 8001576:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800157a:	2303      	movs	r3, #3
 800157c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001586:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800158a:	4619      	mov	r1, r3
 800158c:	4831      	ldr	r0, [pc, #196]	@ (8001654 <HAL_ADC_MspInit+0x1d0>)
 800158e:	f006 fa1f 	bl	80079d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001592:	23ff      	movs	r3, #255	@ 0xff
 8001594:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001598:	2303      	movs	r3, #3
 800159a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80015a8:	4619      	mov	r1, r3
 80015aa:	482b      	ldr	r0, [pc, #172]	@ (8001658 <HAL_ADC_MspInit+0x1d4>)
 80015ac:	f006 fa10 	bl	80079d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80015b0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80015b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015b8:	2303      	movs	r3, #3
 80015ba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015c4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80015c8:	4619      	mov	r1, r3
 80015ca:	4824      	ldr	r0, [pc, #144]	@ (800165c <HAL_ADC_MspInit+0x1d8>)
 80015cc:	f006 fa00 	bl	80079d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80015d0:	4b23      	ldr	r3, [pc, #140]	@ (8001660 <HAL_ADC_MspInit+0x1dc>)
 80015d2:	4a24      	ldr	r2, [pc, #144]	@ (8001664 <HAL_ADC_MspInit+0x1e0>)
 80015d4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80015d6:	4b22      	ldr	r3, [pc, #136]	@ (8001660 <HAL_ADC_MspInit+0x1dc>)
 80015d8:	2209      	movs	r2, #9
 80015da:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015dc:	4b20      	ldr	r3, [pc, #128]	@ (8001660 <HAL_ADC_MspInit+0x1dc>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001660 <HAL_ADC_MspInit+0x1dc>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001660 <HAL_ADC_MspInit+0x1dc>)
 80015ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015ee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001660 <HAL_ADC_MspInit+0x1dc>)
 80015f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80015f6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015f8:	4b19      	ldr	r3, [pc, #100]	@ (8001660 <HAL_ADC_MspInit+0x1dc>)
 80015fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015fe:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001600:	4b17      	ldr	r3, [pc, #92]	@ (8001660 <HAL_ADC_MspInit+0x1dc>)
 8001602:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001606:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001608:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <HAL_ADC_MspInit+0x1dc>)
 800160a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800160e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001610:	4b13      	ldr	r3, [pc, #76]	@ (8001660 <HAL_ADC_MspInit+0x1dc>)
 8001612:	2200      	movs	r2, #0
 8001614:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001616:	4812      	ldr	r0, [pc, #72]	@ (8001660 <HAL_ADC_MspInit+0x1dc>)
 8001618:	f003 fb2e 	bl	8004c78 <HAL_DMA_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <HAL_ADC_MspInit+0x1a2>
    {
      Error_Handler();
 8001622:	f7ff fe07 	bl	8001234 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a0d      	ldr	r2, [pc, #52]	@ (8001660 <HAL_ADC_MspInit+0x1dc>)
 800162a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800162c:	4a0c      	ldr	r2, [pc, #48]	@ (8001660 <HAL_ADC_MspInit+0x1dc>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2100      	movs	r1, #0
 8001636:	2012      	movs	r0, #18
 8001638:	f003 fad7 	bl	8004bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800163c:	2012      	movs	r0, #18
 800163e:	f003 faee 	bl	8004c1e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001642:	bf00      	nop
 8001644:	37f0      	adds	r7, #240	@ 0xf0
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40022000 	.word	0x40022000
 8001650:	58024400 	.word	0x58024400
 8001654:	58020800 	.word	0x58020800
 8001658:	58020000 	.word	0x58020000
 800165c:	58021400 	.word	0x58021400
 8001660:	2400011c 	.word	0x2400011c
 8001664:	40020010 	.word	0x40020010

08001668 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b0ba      	sub	sp, #232	@ 0xe8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001680:	f107 0310 	add.w	r3, r7, #16
 8001684:	22c0      	movs	r2, #192	@ 0xc0
 8001686:	2100      	movs	r1, #0
 8001688:	4618      	mov	r0, r3
 800168a:	f00e f819 	bl	800f6c0 <memset>
  if(hspi->Instance==SPI1)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a26      	ldr	r2, [pc, #152]	@ (800172c <HAL_SPI_MspInit+0xc4>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d145      	bne.n	8001724 <HAL_SPI_MspInit+0xbc>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001698:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800169c:	f04f 0300 	mov.w	r3, #0
 80016a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016a8:	f107 0310 	add.w	r3, r7, #16
 80016ac:	4618      	mov	r0, r3
 80016ae:	f007 fbe1 	bl	8008e74 <HAL_RCCEx_PeriphCLKConfig>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80016b8:	f7ff fdbc 	bl	8001234 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001730 <HAL_SPI_MspInit+0xc8>)
 80016be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016c2:	4a1b      	ldr	r2, [pc, #108]	@ (8001730 <HAL_SPI_MspInit+0xc8>)
 80016c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016c8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80016cc:	4b18      	ldr	r3, [pc, #96]	@ (8001730 <HAL_SPI_MspInit+0xc8>)
 80016ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016da:	4b15      	ldr	r3, [pc, #84]	@ (8001730 <HAL_SPI_MspInit+0xc8>)
 80016dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016e0:	4a13      	ldr	r2, [pc, #76]	@ (8001730 <HAL_SPI_MspInit+0xc8>)
 80016e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016ea:	4b11      	ldr	r3, [pc, #68]	@ (8001730 <HAL_SPI_MspInit+0xc8>)
 80016ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80016f8:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80016fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001700:	2302      	movs	r3, #2
 8001702:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170c:	2300      	movs	r3, #0
 800170e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001712:	2305      	movs	r3, #5
 8001714:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001718:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800171c:	4619      	mov	r1, r3
 800171e:	4805      	ldr	r0, [pc, #20]	@ (8001734 <HAL_SPI_MspInit+0xcc>)
 8001720:	f006 f956 	bl	80079d0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001724:	bf00      	nop
 8001726:	37e8      	adds	r7, #232	@ 0xe8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40013000 	.word	0x40013000
 8001730:	58024400 	.word	0x58024400
 8001734:	58021800 	.word	0x58021800

08001738 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001748:	d116      	bne.n	8001778 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800174a:	4b0d      	ldr	r3, [pc, #52]	@ (8001780 <HAL_TIM_Base_MspInit+0x48>)
 800174c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001750:	4a0b      	ldr	r2, [pc, #44]	@ (8001780 <HAL_TIM_Base_MspInit+0x48>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800175a:	4b09      	ldr	r3, [pc, #36]	@ (8001780 <HAL_TIM_Base_MspInit+0x48>)
 800175c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001768:	2200      	movs	r2, #0
 800176a:	2100      	movs	r1, #0
 800176c:	201c      	movs	r0, #28
 800176e:	f003 fa3c 	bl	8004bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001772:	201c      	movs	r0, #28
 8001774:	f003 fa53 	bl	8004c1e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001778:	bf00      	nop
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	58024400 	.word	0x58024400

08001784 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b0ba      	sub	sp, #232	@ 0xe8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800179c:	f107 0310 	add.w	r3, r7, #16
 80017a0:	22c0      	movs	r2, #192	@ 0xc0
 80017a2:	2100      	movs	r1, #0
 80017a4:	4618      	mov	r0, r3
 80017a6:	f00d ff8b 	bl	800f6c0 <memset>
  if(huart->Instance==UART4)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a2b      	ldr	r2, [pc, #172]	@ (800185c <HAL_UART_MspInit+0xd8>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d14e      	bne.n	8001852 <HAL_UART_MspInit+0xce>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80017b4:	f04f 0202 	mov.w	r2, #2
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80017c0:	2300      	movs	r3, #0
 80017c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017c6:	f107 0310 	add.w	r3, r7, #16
 80017ca:	4618      	mov	r0, r3
 80017cc:	f007 fb52 	bl	8008e74 <HAL_RCCEx_PeriphCLKConfig>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80017d6:	f7ff fd2d 	bl	8001234 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80017da:	4b21      	ldr	r3, [pc, #132]	@ (8001860 <HAL_UART_MspInit+0xdc>)
 80017dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017e0:	4a1f      	ldr	r2, [pc, #124]	@ (8001860 <HAL_UART_MspInit+0xdc>)
 80017e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80017e6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80017ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001860 <HAL_UART_MspInit+0xdc>)
 80017ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f8:	4b19      	ldr	r3, [pc, #100]	@ (8001860 <HAL_UART_MspInit+0xdc>)
 80017fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017fe:	4a18      	ldr	r2, [pc, #96]	@ (8001860 <HAL_UART_MspInit+0xdc>)
 8001800:	f043 0304 	orr.w	r3, r3, #4
 8001804:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001808:	4b15      	ldr	r3, [pc, #84]	@ (8001860 <HAL_UART_MspInit+0xdc>)
 800180a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800180e:	f003 0304 	and.w	r3, r3, #4
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001816:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800181a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2300      	movs	r3, #0
 800182c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001830:	2308      	movs	r3, #8
 8001832:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001836:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800183a:	4619      	mov	r1, r3
 800183c:	4809      	ldr	r0, [pc, #36]	@ (8001864 <HAL_UART_MspInit+0xe0>)
 800183e:	f006 f8c7 	bl	80079d0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	2100      	movs	r1, #0
 8001846:	2034      	movs	r0, #52	@ 0x34
 8001848:	f003 f9cf 	bl	8004bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800184c:	2034      	movs	r0, #52	@ 0x34
 800184e:	f003 f9e6 	bl	8004c1e <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 8001852:	bf00      	nop
 8001854:	37e8      	adds	r7, #232	@ 0xe8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40004c00 	.word	0x40004c00
 8001860:	58024400 	.word	0x58024400
 8001864:	58020800 	.word	0x58020800

08001868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800186c:	bf00      	nop
 800186e:	e7fd      	b.n	800186c <NMI_Handler+0x4>

08001870 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001874:	bf00      	nop
 8001876:	e7fd      	b.n	8001874 <HardFault_Handler+0x4>

08001878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800187c:	bf00      	nop
 800187e:	e7fd      	b.n	800187c <MemManage_Handler+0x4>

08001880 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001884:	bf00      	nop
 8001886:	e7fd      	b.n	8001884 <BusFault_Handler+0x4>

08001888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <UsageFault_Handler+0x4>

08001890 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018be:	f001 fb23 	bl	8002f08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018cc:	4802      	ldr	r0, [pc, #8]	@ (80018d8 <DMA1_Stream0_IRQHandler+0x10>)
 80018ce:	f004 fcfd 	bl	80062cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	2400011c 	.word	0x2400011c

080018dc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80018e0:	4802      	ldr	r0, [pc, #8]	@ (80018ec <ADC_IRQHandler+0x10>)
 80018e2:	f001 fff5 	bl	80038d0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	240000b8 	.word	0x240000b8

080018f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018f4:	4802      	ldr	r0, [pc, #8]	@ (8001900 <TIM2_IRQHandler+0x10>)
 80018f6:	f00a fcdb 	bl	800c2b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	2400021c 	.word	0x2400021c

08001904 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001908:	2000      	movs	r0, #0
 800190a:	f001 f99b 	bl	8002c44 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001918:	4802      	ldr	r0, [pc, #8]	@ (8001924 <UART4_IRQHandler+0x10>)
 800191a:	f00b fa05 	bl	800cd28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	24000268 	.word	0x24000268

08001928 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	e00a      	b.n	8001950 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800193a:	f3af 8000 	nop.w
 800193e:	4601      	mov	r1, r0
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	1c5a      	adds	r2, r3, #1
 8001944:	60ba      	str	r2, [r7, #8]
 8001946:	b2ca      	uxtb	r2, r1
 8001948:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	3301      	adds	r3, #1
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	429a      	cmp	r2, r3
 8001956:	dbf0      	blt.n	800193a <_read+0x12>
  }

  return len;
 8001958:	687b      	ldr	r3, [r7, #4]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b086      	sub	sp, #24
 8001966:	af00      	add	r7, sp, #0
 8001968:	60f8      	str	r0, [r7, #12]
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	e009      	b.n	8001988 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	1c5a      	adds	r2, r3, #1
 8001978:	60ba      	str	r2, [r7, #8]
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f001 f9d5 	bl	8002d2c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	3301      	adds	r3, #1
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	429a      	cmp	r2, r3
 800198e:	dbf1      	blt.n	8001974 <_write+0x12>
  }
  return len;
 8001990:	687b      	ldr	r3, [r7, #4]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <_close>:

int _close(int file)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
 80019ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019c2:	605a      	str	r2, [r3, #4]
  return 0;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <_isatty>:

int _isatty(int file)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019da:	2301      	movs	r3, #1
}
 80019dc:	4618      	mov	r0, r3
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
	...

08001a04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a0c:	4a14      	ldr	r2, [pc, #80]	@ (8001a60 <_sbrk+0x5c>)
 8001a0e:	4b15      	ldr	r3, [pc, #84]	@ (8001a64 <_sbrk+0x60>)
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a18:	4b13      	ldr	r3, [pc, #76]	@ (8001a68 <_sbrk+0x64>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d102      	bne.n	8001a26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a20:	4b11      	ldr	r3, [pc, #68]	@ (8001a68 <_sbrk+0x64>)
 8001a22:	4a12      	ldr	r2, [pc, #72]	@ (8001a6c <_sbrk+0x68>)
 8001a24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a26:	4b10      	ldr	r3, [pc, #64]	@ (8001a68 <_sbrk+0x64>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d207      	bcs.n	8001a44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a34:	f00d fe92 	bl	800f75c <__errno>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	220c      	movs	r2, #12
 8001a3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a42:	e009      	b.n	8001a58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a44:	4b08      	ldr	r3, [pc, #32]	@ (8001a68 <_sbrk+0x64>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a4a:	4b07      	ldr	r3, [pc, #28]	@ (8001a68 <_sbrk+0x64>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	4a05      	ldr	r2, [pc, #20]	@ (8001a68 <_sbrk+0x64>)
 8001a54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a56:	68fb      	ldr	r3, [r7, #12]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	24080000 	.word	0x24080000
 8001a64:	00000400 	.word	0x00000400
 8001a68:	240003a0 	.word	0x240003a0
 8001a6c:	240006a0 	.word	0x240006a0

08001a70 <MAX31855_CS_Enable>:

extern SPI_HandleTypeDef hspi1; // SPI1 핸들러 외부 선언

// CS 핀을 Low로 설정 (SPI 통신 시작)
void MAX31855_CS_Enable(uint8_t ch)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
	switch(ch) {
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	2b0b      	cmp	r3, #11
 8001a7e:	f200 8329 	bhi.w	80020d4 <MAX31855_CS_Enable+0x664>
 8001a82:	a201      	add	r2, pc, #4	@ (adr r2, 8001a88 <MAX31855_CS_Enable+0x18>)
 8001a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a88:	08001ab9 	.word	0x08001ab9
 8001a8c:	08001b3b 	.word	0x08001b3b
 8001a90:	08001bbd 	.word	0x08001bbd
 8001a94:	08001c3f 	.word	0x08001c3f
 8001a98:	08001cc1 	.word	0x08001cc1
 8001a9c:	08001d43 	.word	0x08001d43
 8001aa0:	08001dc9 	.word	0x08001dc9
 8001aa4:	08001e4b 	.word	0x08001e4b
 8001aa8:	08001ecd 	.word	0x08001ecd
 8001aac:	08001f4f 	.word	0x08001f4f
 8001ab0:	08001fd1 	.word	0x08001fd1
 8001ab4:	08002053 	.word	0x08002053
	case TC_CH1:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_RESET);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2101      	movs	r1, #1
 8001abc:	48c1      	ldr	r0, [pc, #772]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001abe:	f006 f937 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	2102      	movs	r1, #2
 8001ac6:	48bf      	ldr	r0, [pc, #764]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001ac8:	f006 f932 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001acc:	2201      	movs	r2, #1
 8001ace:	2104      	movs	r1, #4
 8001ad0:	48bc      	ldr	r0, [pc, #752]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001ad2:	f006 f92d 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	2108      	movs	r1, #8
 8001ada:	48ba      	ldr	r0, [pc, #744]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001adc:	f006 f928 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	2110      	movs	r1, #16
 8001ae4:	48b7      	ldr	r0, [pc, #732]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001ae6:	f006 f923 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001aea:	2201      	movs	r2, #1
 8001aec:	2120      	movs	r1, #32
 8001aee:	48b5      	ldr	r0, [pc, #724]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001af0:	f006 f91e 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001af4:	2201      	movs	r2, #1
 8001af6:	2140      	movs	r1, #64	@ 0x40
 8001af8:	48b2      	ldr	r0, [pc, #712]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001afa:	f006 f919 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001afe:	2201      	movs	r2, #1
 8001b00:	2180      	movs	r1, #128	@ 0x80
 8001b02:	48b0      	ldr	r0, [pc, #704]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001b04:	f006 f914 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b0e:	48ad      	ldr	r0, [pc, #692]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001b10:	f006 f90e 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001b14:	2201      	movs	r2, #1
 8001b16:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b1a:	48aa      	ldr	r0, [pc, #680]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001b1c:	f006 f908 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001b20:	2201      	movs	r2, #1
 8001b22:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b26:	48a7      	ldr	r0, [pc, #668]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001b28:	f006 f902 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b32:	48a4      	ldr	r0, [pc, #656]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001b34:	f006 f8fc 	bl	8007d30 <HAL_GPIO_WritePin>
		break;
 8001b38:	e2cd      	b.n	80020d6 <MAX31855_CS_Enable+0x666>
	case TC_CH2:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	48a1      	ldr	r0, [pc, #644]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001b40:	f006 f8f6 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_RESET);
 8001b44:	2200      	movs	r2, #0
 8001b46:	2102      	movs	r1, #2
 8001b48:	489e      	ldr	r0, [pc, #632]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001b4a:	f006 f8f1 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001b4e:	2201      	movs	r2, #1
 8001b50:	2104      	movs	r1, #4
 8001b52:	489c      	ldr	r0, [pc, #624]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001b54:	f006 f8ec 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001b58:	2201      	movs	r2, #1
 8001b5a:	2108      	movs	r1, #8
 8001b5c:	4899      	ldr	r0, [pc, #612]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001b5e:	f006 f8e7 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001b62:	2201      	movs	r2, #1
 8001b64:	2110      	movs	r1, #16
 8001b66:	4897      	ldr	r0, [pc, #604]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001b68:	f006 f8e2 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	2120      	movs	r1, #32
 8001b70:	4894      	ldr	r0, [pc, #592]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001b72:	f006 f8dd 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001b76:	2201      	movs	r2, #1
 8001b78:	2140      	movs	r1, #64	@ 0x40
 8001b7a:	4892      	ldr	r0, [pc, #584]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001b7c:	f006 f8d8 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001b80:	2201      	movs	r2, #1
 8001b82:	2180      	movs	r1, #128	@ 0x80
 8001b84:	488f      	ldr	r0, [pc, #572]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001b86:	f006 f8d3 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b90:	488c      	ldr	r0, [pc, #560]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001b92:	f006 f8cd 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001b96:	2201      	movs	r2, #1
 8001b98:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b9c:	4889      	ldr	r0, [pc, #548]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001b9e:	f006 f8c7 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ba8:	4886      	ldr	r0, [pc, #536]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001baa:	f006 f8c1 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001bb4:	4883      	ldr	r0, [pc, #524]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001bb6:	f006 f8bb 	bl	8007d30 <HAL_GPIO_WritePin>
		break;
 8001bba:	e28c      	b.n	80020d6 <MAX31855_CS_Enable+0x666>
	case TC_CH3:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	4880      	ldr	r0, [pc, #512]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001bc2:	f006 f8b5 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	2102      	movs	r1, #2
 8001bca:	487e      	ldr	r0, [pc, #504]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001bcc:	f006 f8b0 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_RESET);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2104      	movs	r1, #4
 8001bd4:	487b      	ldr	r0, [pc, #492]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001bd6:	f006 f8ab 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001bda:	2201      	movs	r2, #1
 8001bdc:	2108      	movs	r1, #8
 8001bde:	4879      	ldr	r0, [pc, #484]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001be0:	f006 f8a6 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001be4:	2201      	movs	r2, #1
 8001be6:	2110      	movs	r1, #16
 8001be8:	4876      	ldr	r0, [pc, #472]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001bea:	f006 f8a1 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001bee:	2201      	movs	r2, #1
 8001bf0:	2120      	movs	r1, #32
 8001bf2:	4874      	ldr	r0, [pc, #464]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001bf4:	f006 f89c 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	2140      	movs	r1, #64	@ 0x40
 8001bfc:	4871      	ldr	r0, [pc, #452]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001bfe:	f006 f897 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001c02:	2201      	movs	r2, #1
 8001c04:	2180      	movs	r1, #128	@ 0x80
 8001c06:	486f      	ldr	r0, [pc, #444]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001c08:	f006 f892 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c12:	486c      	ldr	r0, [pc, #432]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001c14:	f006 f88c 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c1e:	4869      	ldr	r0, [pc, #420]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001c20:	f006 f886 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001c24:	2201      	movs	r2, #1
 8001c26:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c2a:	4866      	ldr	r0, [pc, #408]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001c2c:	f006 f880 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001c30:	2201      	movs	r2, #1
 8001c32:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c36:	4863      	ldr	r0, [pc, #396]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001c38:	f006 f87a 	bl	8007d30 <HAL_GPIO_WritePin>
		break;
 8001c3c:	e24b      	b.n	80020d6 <MAX31855_CS_Enable+0x666>
	case TC_CH4:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001c3e:	2201      	movs	r2, #1
 8001c40:	2101      	movs	r1, #1
 8001c42:	4860      	ldr	r0, [pc, #384]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001c44:	f006 f874 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001c48:	2201      	movs	r2, #1
 8001c4a:	2102      	movs	r1, #2
 8001c4c:	485d      	ldr	r0, [pc, #372]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001c4e:	f006 f86f 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001c52:	2201      	movs	r2, #1
 8001c54:	2104      	movs	r1, #4
 8001c56:	485b      	ldr	r0, [pc, #364]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001c58:	f006 f86a 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_RESET);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	2108      	movs	r1, #8
 8001c60:	4858      	ldr	r0, [pc, #352]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001c62:	f006 f865 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001c66:	2201      	movs	r2, #1
 8001c68:	2110      	movs	r1, #16
 8001c6a:	4856      	ldr	r0, [pc, #344]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001c6c:	f006 f860 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001c70:	2201      	movs	r2, #1
 8001c72:	2120      	movs	r1, #32
 8001c74:	4853      	ldr	r0, [pc, #332]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001c76:	f006 f85b 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	2140      	movs	r1, #64	@ 0x40
 8001c7e:	4851      	ldr	r0, [pc, #324]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001c80:	f006 f856 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001c84:	2201      	movs	r2, #1
 8001c86:	2180      	movs	r1, #128	@ 0x80
 8001c88:	484e      	ldr	r0, [pc, #312]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001c8a:	f006 f851 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c94:	484b      	ldr	r0, [pc, #300]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001c96:	f006 f84b 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ca0:	4848      	ldr	r0, [pc, #288]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001ca2:	f006 f845 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001cac:	4845      	ldr	r0, [pc, #276]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001cae:	f006 f83f 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001cb8:	4842      	ldr	r0, [pc, #264]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001cba:	f006 f839 	bl	8007d30 <HAL_GPIO_WritePin>
		break;
 8001cbe:	e20a      	b.n	80020d6 <MAX31855_CS_Enable+0x666>
	case TC_CH5:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	483f      	ldr	r0, [pc, #252]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001cc6:	f006 f833 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001cca:	2201      	movs	r2, #1
 8001ccc:	2102      	movs	r1, #2
 8001cce:	483d      	ldr	r0, [pc, #244]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001cd0:	f006 f82e 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	2104      	movs	r1, #4
 8001cd8:	483a      	ldr	r0, [pc, #232]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001cda:	f006 f829 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001cde:	2201      	movs	r2, #1
 8001ce0:	2108      	movs	r1, #8
 8001ce2:	4838      	ldr	r0, [pc, #224]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001ce4:	f006 f824 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_RESET);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2110      	movs	r1, #16
 8001cec:	4835      	ldr	r0, [pc, #212]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001cee:	f006 f81f 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	2120      	movs	r1, #32
 8001cf6:	4833      	ldr	r0, [pc, #204]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001cf8:	f006 f81a 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	2140      	movs	r1, #64	@ 0x40
 8001d00:	4830      	ldr	r0, [pc, #192]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001d02:	f006 f815 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001d06:	2201      	movs	r2, #1
 8001d08:	2180      	movs	r1, #128	@ 0x80
 8001d0a:	482e      	ldr	r0, [pc, #184]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001d0c:	f006 f810 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001d10:	2201      	movs	r2, #1
 8001d12:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d16:	482b      	ldr	r0, [pc, #172]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001d18:	f006 f80a 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d22:	4828      	ldr	r0, [pc, #160]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001d24:	f006 f804 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d2e:	4825      	ldr	r0, [pc, #148]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001d30:	f005 fffe 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001d34:	2201      	movs	r2, #1
 8001d36:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d3a:	4822      	ldr	r0, [pc, #136]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001d3c:	f005 fff8 	bl	8007d30 <HAL_GPIO_WritePin>
		break;
 8001d40:	e1c9      	b.n	80020d6 <MAX31855_CS_Enable+0x666>
	case TC_CH6:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001d42:	2201      	movs	r2, #1
 8001d44:	2101      	movs	r1, #1
 8001d46:	481f      	ldr	r0, [pc, #124]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001d48:	f005 fff2 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	2102      	movs	r1, #2
 8001d50:	481c      	ldr	r0, [pc, #112]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001d52:	f005 ffed 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001d56:	2201      	movs	r2, #1
 8001d58:	2104      	movs	r1, #4
 8001d5a:	481a      	ldr	r0, [pc, #104]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001d5c:	f005 ffe8 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001d60:	2201      	movs	r2, #1
 8001d62:	2108      	movs	r1, #8
 8001d64:	4817      	ldr	r0, [pc, #92]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001d66:	f005 ffe3 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	2110      	movs	r1, #16
 8001d6e:	4815      	ldr	r0, [pc, #84]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001d70:	f005 ffde 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_RESET);
 8001d74:	2200      	movs	r2, #0
 8001d76:	2120      	movs	r1, #32
 8001d78:	4812      	ldr	r0, [pc, #72]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001d7a:	f005 ffd9 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001d7e:	2201      	movs	r2, #1
 8001d80:	2140      	movs	r1, #64	@ 0x40
 8001d82:	4810      	ldr	r0, [pc, #64]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001d84:	f005 ffd4 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001d88:	2201      	movs	r2, #1
 8001d8a:	2180      	movs	r1, #128	@ 0x80
 8001d8c:	480d      	ldr	r0, [pc, #52]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001d8e:	f005 ffcf 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001d92:	2201      	movs	r2, #1
 8001d94:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d98:	480a      	ldr	r0, [pc, #40]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001d9a:	f005 ffc9 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001da4:	4807      	ldr	r0, [pc, #28]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001da6:	f005 ffc3 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001daa:	2201      	movs	r2, #1
 8001dac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001db0:	4804      	ldr	r0, [pc, #16]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001db2:	f005 ffbd 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001db6:	2201      	movs	r2, #1
 8001db8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001dbc:	4801      	ldr	r0, [pc, #4]	@ (8001dc4 <MAX31855_CS_Enable+0x354>)
 8001dbe:	f005 ffb7 	bl	8007d30 <HAL_GPIO_WritePin>
		break;
 8001dc2:	e188      	b.n	80020d6 <MAX31855_CS_Enable+0x666>
 8001dc4:	58020c00 	.word	0x58020c00
	case TC_CH7:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001dc8:	2201      	movs	r2, #1
 8001dca:	2101      	movs	r1, #1
 8001dcc:	48c4      	ldr	r0, [pc, #784]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001dce:	f005 ffaf 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	2102      	movs	r1, #2
 8001dd6:	48c2      	ldr	r0, [pc, #776]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001dd8:	f005 ffaa 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001ddc:	2201      	movs	r2, #1
 8001dde:	2104      	movs	r1, #4
 8001de0:	48bf      	ldr	r0, [pc, #764]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001de2:	f005 ffa5 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001de6:	2201      	movs	r2, #1
 8001de8:	2108      	movs	r1, #8
 8001dea:	48bd      	ldr	r0, [pc, #756]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001dec:	f005 ffa0 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001df0:	2201      	movs	r2, #1
 8001df2:	2110      	movs	r1, #16
 8001df4:	48ba      	ldr	r0, [pc, #744]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001df6:	f005 ff9b 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	2120      	movs	r1, #32
 8001dfe:	48b8      	ldr	r0, [pc, #736]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001e00:	f005 ff96 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_RESET);
 8001e04:	2200      	movs	r2, #0
 8001e06:	2140      	movs	r1, #64	@ 0x40
 8001e08:	48b5      	ldr	r0, [pc, #724]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001e0a:	f005 ff91 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001e0e:	2201      	movs	r2, #1
 8001e10:	2180      	movs	r1, #128	@ 0x80
 8001e12:	48b3      	ldr	r0, [pc, #716]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001e14:	f005 ff8c 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e1e:	48b0      	ldr	r0, [pc, #704]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001e20:	f005 ff86 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001e24:	2201      	movs	r2, #1
 8001e26:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e2a:	48ad      	ldr	r0, [pc, #692]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001e2c:	f005 ff80 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001e30:	2201      	movs	r2, #1
 8001e32:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e36:	48aa      	ldr	r0, [pc, #680]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001e38:	f005 ff7a 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001e42:	48a7      	ldr	r0, [pc, #668]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001e44:	f005 ff74 	bl	8007d30 <HAL_GPIO_WritePin>
		break;
 8001e48:	e145      	b.n	80020d6 <MAX31855_CS_Enable+0x666>
	case TC_CH8:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	48a4      	ldr	r0, [pc, #656]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001e50:	f005 ff6e 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001e54:	2201      	movs	r2, #1
 8001e56:	2102      	movs	r1, #2
 8001e58:	48a1      	ldr	r0, [pc, #644]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001e5a:	f005 ff69 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001e5e:	2201      	movs	r2, #1
 8001e60:	2104      	movs	r1, #4
 8001e62:	489f      	ldr	r0, [pc, #636]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001e64:	f005 ff64 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001e68:	2201      	movs	r2, #1
 8001e6a:	2108      	movs	r1, #8
 8001e6c:	489c      	ldr	r0, [pc, #624]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001e6e:	f005 ff5f 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001e72:	2201      	movs	r2, #1
 8001e74:	2110      	movs	r1, #16
 8001e76:	489a      	ldr	r0, [pc, #616]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001e78:	f005 ff5a 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	2120      	movs	r1, #32
 8001e80:	4897      	ldr	r0, [pc, #604]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001e82:	f005 ff55 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001e86:	2201      	movs	r2, #1
 8001e88:	2140      	movs	r1, #64	@ 0x40
 8001e8a:	4895      	ldr	r0, [pc, #596]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001e8c:	f005 ff50 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_RESET);
 8001e90:	2200      	movs	r2, #0
 8001e92:	2180      	movs	r1, #128	@ 0x80
 8001e94:	4892      	ldr	r0, [pc, #584]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001e96:	f005 ff4b 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ea0:	488f      	ldr	r0, [pc, #572]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001ea2:	f005 ff45 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001eac:	488c      	ldr	r0, [pc, #560]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001eae:	f005 ff3f 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001eb8:	4889      	ldr	r0, [pc, #548]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001eba:	f005 ff39 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001ec4:	4886      	ldr	r0, [pc, #536]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001ec6:	f005 ff33 	bl	8007d30 <HAL_GPIO_WritePin>
		break;
 8001eca:	e104      	b.n	80020d6 <MAX31855_CS_Enable+0x666>
	case TC_CH9:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001ecc:	2201      	movs	r2, #1
 8001ece:	2101      	movs	r1, #1
 8001ed0:	4883      	ldr	r0, [pc, #524]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001ed2:	f005 ff2d 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	2102      	movs	r1, #2
 8001eda:	4881      	ldr	r0, [pc, #516]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001edc:	f005 ff28 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	2104      	movs	r1, #4
 8001ee4:	487e      	ldr	r0, [pc, #504]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001ee6:	f005 ff23 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001eea:	2201      	movs	r2, #1
 8001eec:	2108      	movs	r1, #8
 8001eee:	487c      	ldr	r0, [pc, #496]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001ef0:	f005 ff1e 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	2110      	movs	r1, #16
 8001ef8:	4879      	ldr	r0, [pc, #484]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001efa:	f005 ff19 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001efe:	2201      	movs	r2, #1
 8001f00:	2120      	movs	r1, #32
 8001f02:	4877      	ldr	r0, [pc, #476]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001f04:	f005 ff14 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001f08:	2201      	movs	r2, #1
 8001f0a:	2140      	movs	r1, #64	@ 0x40
 8001f0c:	4874      	ldr	r0, [pc, #464]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001f0e:	f005 ff0f 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001f12:	2201      	movs	r2, #1
 8001f14:	2180      	movs	r1, #128	@ 0x80
 8001f16:	4872      	ldr	r0, [pc, #456]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001f18:	f005 ff0a 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_RESET);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f22:	486f      	ldr	r0, [pc, #444]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001f24:	f005 ff04 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f2e:	486c      	ldr	r0, [pc, #432]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001f30:	f005 fefe 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001f34:	2201      	movs	r2, #1
 8001f36:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f3a:	4869      	ldr	r0, [pc, #420]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001f3c:	f005 fef8 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001f40:	2201      	movs	r2, #1
 8001f42:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f46:	4866      	ldr	r0, [pc, #408]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001f48:	f005 fef2 	bl	8007d30 <HAL_GPIO_WritePin>
		break;
 8001f4c:	e0c3      	b.n	80020d6 <MAX31855_CS_Enable+0x666>
	case TC_CH10:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001f4e:	2201      	movs	r2, #1
 8001f50:	2101      	movs	r1, #1
 8001f52:	4863      	ldr	r0, [pc, #396]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001f54:	f005 feec 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001f58:	2201      	movs	r2, #1
 8001f5a:	2102      	movs	r1, #2
 8001f5c:	4860      	ldr	r0, [pc, #384]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001f5e:	f005 fee7 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001f62:	2201      	movs	r2, #1
 8001f64:	2104      	movs	r1, #4
 8001f66:	485e      	ldr	r0, [pc, #376]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001f68:	f005 fee2 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	2108      	movs	r1, #8
 8001f70:	485b      	ldr	r0, [pc, #364]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001f72:	f005 fedd 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001f76:	2201      	movs	r2, #1
 8001f78:	2110      	movs	r1, #16
 8001f7a:	4859      	ldr	r0, [pc, #356]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001f7c:	f005 fed8 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001f80:	2201      	movs	r2, #1
 8001f82:	2120      	movs	r1, #32
 8001f84:	4856      	ldr	r0, [pc, #344]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001f86:	f005 fed3 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	2140      	movs	r1, #64	@ 0x40
 8001f8e:	4854      	ldr	r0, [pc, #336]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001f90:	f005 fece 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001f94:	2201      	movs	r2, #1
 8001f96:	2180      	movs	r1, #128	@ 0x80
 8001f98:	4851      	ldr	r0, [pc, #324]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001f9a:	f005 fec9 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001fa4:	484e      	ldr	r0, [pc, #312]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001fa6:	f005 fec3 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_RESET);
 8001faa:	2200      	movs	r2, #0
 8001fac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001fb0:	484b      	ldr	r0, [pc, #300]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001fb2:	f005 febd 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fbc:	4848      	ldr	r0, [pc, #288]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001fbe:	f005 feb7 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001fc8:	4845      	ldr	r0, [pc, #276]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001fca:	f005 feb1 	bl	8007d30 <HAL_GPIO_WritePin>
		break;
 8001fce:	e082      	b.n	80020d6 <MAX31855_CS_Enable+0x666>
	case TC_CH11:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	4842      	ldr	r0, [pc, #264]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001fd6:	f005 feab 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001fda:	2201      	movs	r2, #1
 8001fdc:	2102      	movs	r1, #2
 8001fde:	4840      	ldr	r0, [pc, #256]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001fe0:	f005 fea6 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	2104      	movs	r1, #4
 8001fe8:	483d      	ldr	r0, [pc, #244]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001fea:	f005 fea1 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001fee:	2201      	movs	r2, #1
 8001ff0:	2108      	movs	r1, #8
 8001ff2:	483b      	ldr	r0, [pc, #236]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001ff4:	f005 fe9c 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	2110      	movs	r1, #16
 8001ffc:	4838      	ldr	r0, [pc, #224]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8001ffe:	f005 fe97 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8002002:	2201      	movs	r2, #1
 8002004:	2120      	movs	r1, #32
 8002006:	4836      	ldr	r0, [pc, #216]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8002008:	f005 fe92 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 800200c:	2201      	movs	r2, #1
 800200e:	2140      	movs	r1, #64	@ 0x40
 8002010:	4833      	ldr	r0, [pc, #204]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8002012:	f005 fe8d 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8002016:	2201      	movs	r2, #1
 8002018:	2180      	movs	r1, #128	@ 0x80
 800201a:	4831      	ldr	r0, [pc, #196]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 800201c:	f005 fe88 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002020:	2201      	movs	r2, #1
 8002022:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002026:	482e      	ldr	r0, [pc, #184]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8002028:	f005 fe82 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 800202c:	2201      	movs	r2, #1
 800202e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002032:	482b      	ldr	r0, [pc, #172]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8002034:	f005 fe7c 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_RESET);
 8002038:	2200      	movs	r2, #0
 800203a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800203e:	4828      	ldr	r0, [pc, #160]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8002040:	f005 fe76 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002044:	2201      	movs	r2, #1
 8002046:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800204a:	4825      	ldr	r0, [pc, #148]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 800204c:	f005 fe70 	bl	8007d30 <HAL_GPIO_WritePin>
		break;
 8002050:	e041      	b.n	80020d6 <MAX31855_CS_Enable+0x666>
	case TC_CH12:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8002052:	2201      	movs	r2, #1
 8002054:	2101      	movs	r1, #1
 8002056:	4822      	ldr	r0, [pc, #136]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8002058:	f005 fe6a 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 800205c:	2201      	movs	r2, #1
 800205e:	2102      	movs	r1, #2
 8002060:	481f      	ldr	r0, [pc, #124]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8002062:	f005 fe65 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8002066:	2201      	movs	r2, #1
 8002068:	2104      	movs	r1, #4
 800206a:	481d      	ldr	r0, [pc, #116]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 800206c:	f005 fe60 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8002070:	2201      	movs	r2, #1
 8002072:	2108      	movs	r1, #8
 8002074:	481a      	ldr	r0, [pc, #104]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8002076:	f005 fe5b 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 800207a:	2201      	movs	r2, #1
 800207c:	2110      	movs	r1, #16
 800207e:	4818      	ldr	r0, [pc, #96]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8002080:	f005 fe56 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8002084:	2201      	movs	r2, #1
 8002086:	2120      	movs	r1, #32
 8002088:	4815      	ldr	r0, [pc, #84]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 800208a:	f005 fe51 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 800208e:	2201      	movs	r2, #1
 8002090:	2140      	movs	r1, #64	@ 0x40
 8002092:	4813      	ldr	r0, [pc, #76]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 8002094:	f005 fe4c 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8002098:	2201      	movs	r2, #1
 800209a:	2180      	movs	r1, #128	@ 0x80
 800209c:	4810      	ldr	r0, [pc, #64]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 800209e:	f005 fe47 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 80020a2:	2201      	movs	r2, #1
 80020a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80020a8:	480d      	ldr	r0, [pc, #52]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 80020aa:	f005 fe41 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 80020ae:	2201      	movs	r2, #1
 80020b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80020b4:	480a      	ldr	r0, [pc, #40]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 80020b6:	f005 fe3b 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 80020ba:	2201      	movs	r2, #1
 80020bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020c0:	4807      	ldr	r0, [pc, #28]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 80020c2:	f005 fe35 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_RESET);
 80020c6:	2200      	movs	r2, #0
 80020c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80020cc:	4804      	ldr	r0, [pc, #16]	@ (80020e0 <MAX31855_CS_Enable+0x670>)
 80020ce:	f005 fe2f 	bl	8007d30 <HAL_GPIO_WritePin>
		break;
 80020d2:	e000      	b.n	80020d6 <MAX31855_CS_Enable+0x666>
	default:
		break;
 80020d4:	bf00      	nop
	}
}
 80020d6:	bf00      	nop
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	58020c00 	.word	0x58020c00

080020e4 <MAX31855_CS_Disable>:

// CS 핀을 High로 설정 (SPI 통신 종료)
void MAX31855_CS_Disable(uint8_t ch)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	71fb      	strb	r3, [r7, #7]
	switch(ch) {
 80020ee:	79fb      	ldrb	r3, [r7, #7]
 80020f0:	2b0b      	cmp	r3, #11
 80020f2:	f200 8329 	bhi.w	8002748 <MAX31855_CS_Disable+0x664>
 80020f6:	a201      	add	r2, pc, #4	@ (adr r2, 80020fc <MAX31855_CS_Disable+0x18>)
 80020f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020fc:	0800212d 	.word	0x0800212d
 8002100:	080021af 	.word	0x080021af
 8002104:	08002231 	.word	0x08002231
 8002108:	080022b3 	.word	0x080022b3
 800210c:	08002335 	.word	0x08002335
 8002110:	080023b7 	.word	0x080023b7
 8002114:	0800243d 	.word	0x0800243d
 8002118:	080024bf 	.word	0x080024bf
 800211c:	08002541 	.word	0x08002541
 8002120:	080025c3 	.word	0x080025c3
 8002124:	08002645 	.word	0x08002645
 8002128:	080026c7 	.word	0x080026c7
	case TC_CH1:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 800212c:	2201      	movs	r2, #1
 800212e:	2101      	movs	r1, #1
 8002130:	48c1      	ldr	r0, [pc, #772]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 8002132:	f005 fdfd 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8002136:	2201      	movs	r2, #1
 8002138:	2102      	movs	r1, #2
 800213a:	48bf      	ldr	r0, [pc, #764]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 800213c:	f005 fdf8 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8002140:	2201      	movs	r2, #1
 8002142:	2104      	movs	r1, #4
 8002144:	48bc      	ldr	r0, [pc, #752]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 8002146:	f005 fdf3 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 800214a:	2201      	movs	r2, #1
 800214c:	2108      	movs	r1, #8
 800214e:	48ba      	ldr	r0, [pc, #744]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 8002150:	f005 fdee 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8002154:	2201      	movs	r2, #1
 8002156:	2110      	movs	r1, #16
 8002158:	48b7      	ldr	r0, [pc, #732]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 800215a:	f005 fde9 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 800215e:	2201      	movs	r2, #1
 8002160:	2120      	movs	r1, #32
 8002162:	48b5      	ldr	r0, [pc, #724]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 8002164:	f005 fde4 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002168:	2201      	movs	r2, #1
 800216a:	2140      	movs	r1, #64	@ 0x40
 800216c:	48b2      	ldr	r0, [pc, #712]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 800216e:	f005 fddf 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8002172:	2201      	movs	r2, #1
 8002174:	2180      	movs	r1, #128	@ 0x80
 8002176:	48b0      	ldr	r0, [pc, #704]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 8002178:	f005 fdda 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 800217c:	2201      	movs	r2, #1
 800217e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002182:	48ad      	ldr	r0, [pc, #692]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 8002184:	f005 fdd4 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002188:	2201      	movs	r2, #1
 800218a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800218e:	48aa      	ldr	r0, [pc, #680]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 8002190:	f005 fdce 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8002194:	2201      	movs	r2, #1
 8002196:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800219a:	48a7      	ldr	r0, [pc, #668]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 800219c:	f005 fdc8 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80021a0:	2201      	movs	r2, #1
 80021a2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80021a6:	48a4      	ldr	r0, [pc, #656]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 80021a8:	f005 fdc2 	bl	8007d30 <HAL_GPIO_WritePin>
		break;
 80021ac:	e2cd      	b.n	800274a <MAX31855_CS_Disable+0x666>
	case TC_CH2:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80021ae:	2201      	movs	r2, #1
 80021b0:	2101      	movs	r1, #1
 80021b2:	48a1      	ldr	r0, [pc, #644]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 80021b4:	f005 fdbc 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80021b8:	2201      	movs	r2, #1
 80021ba:	2102      	movs	r1, #2
 80021bc:	489e      	ldr	r0, [pc, #632]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 80021be:	f005 fdb7 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80021c2:	2201      	movs	r2, #1
 80021c4:	2104      	movs	r1, #4
 80021c6:	489c      	ldr	r0, [pc, #624]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 80021c8:	f005 fdb2 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80021cc:	2201      	movs	r2, #1
 80021ce:	2108      	movs	r1, #8
 80021d0:	4899      	ldr	r0, [pc, #612]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 80021d2:	f005 fdad 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80021d6:	2201      	movs	r2, #1
 80021d8:	2110      	movs	r1, #16
 80021da:	4897      	ldr	r0, [pc, #604]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 80021dc:	f005 fda8 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80021e0:	2201      	movs	r2, #1
 80021e2:	2120      	movs	r1, #32
 80021e4:	4894      	ldr	r0, [pc, #592]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 80021e6:	f005 fda3 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 80021ea:	2201      	movs	r2, #1
 80021ec:	2140      	movs	r1, #64	@ 0x40
 80021ee:	4892      	ldr	r0, [pc, #584]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 80021f0:	f005 fd9e 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 80021f4:	2201      	movs	r2, #1
 80021f6:	2180      	movs	r1, #128	@ 0x80
 80021f8:	488f      	ldr	r0, [pc, #572]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 80021fa:	f005 fd99 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 80021fe:	2201      	movs	r2, #1
 8002200:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002204:	488c      	ldr	r0, [pc, #560]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 8002206:	f005 fd93 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 800220a:	2201      	movs	r2, #1
 800220c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002210:	4889      	ldr	r0, [pc, #548]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 8002212:	f005 fd8d 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8002216:	2201      	movs	r2, #1
 8002218:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800221c:	4886      	ldr	r0, [pc, #536]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 800221e:	f005 fd87 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002222:	2201      	movs	r2, #1
 8002224:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002228:	4883      	ldr	r0, [pc, #524]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 800222a:	f005 fd81 	bl	8007d30 <HAL_GPIO_WritePin>
		break;
 800222e:	e28c      	b.n	800274a <MAX31855_CS_Disable+0x666>
	case TC_CH3:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8002230:	2201      	movs	r2, #1
 8002232:	2101      	movs	r1, #1
 8002234:	4880      	ldr	r0, [pc, #512]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 8002236:	f005 fd7b 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 800223a:	2201      	movs	r2, #1
 800223c:	2102      	movs	r1, #2
 800223e:	487e      	ldr	r0, [pc, #504]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 8002240:	f005 fd76 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8002244:	2201      	movs	r2, #1
 8002246:	2104      	movs	r1, #4
 8002248:	487b      	ldr	r0, [pc, #492]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 800224a:	f005 fd71 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 800224e:	2201      	movs	r2, #1
 8002250:	2108      	movs	r1, #8
 8002252:	4879      	ldr	r0, [pc, #484]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 8002254:	f005 fd6c 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8002258:	2201      	movs	r2, #1
 800225a:	2110      	movs	r1, #16
 800225c:	4876      	ldr	r0, [pc, #472]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 800225e:	f005 fd67 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8002262:	2201      	movs	r2, #1
 8002264:	2120      	movs	r1, #32
 8002266:	4874      	ldr	r0, [pc, #464]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 8002268:	f005 fd62 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 800226c:	2201      	movs	r2, #1
 800226e:	2140      	movs	r1, #64	@ 0x40
 8002270:	4871      	ldr	r0, [pc, #452]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 8002272:	f005 fd5d 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8002276:	2201      	movs	r2, #1
 8002278:	2180      	movs	r1, #128	@ 0x80
 800227a:	486f      	ldr	r0, [pc, #444]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 800227c:	f005 fd58 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002280:	2201      	movs	r2, #1
 8002282:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002286:	486c      	ldr	r0, [pc, #432]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 8002288:	f005 fd52 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 800228c:	2201      	movs	r2, #1
 800228e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002292:	4869      	ldr	r0, [pc, #420]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 8002294:	f005 fd4c 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8002298:	2201      	movs	r2, #1
 800229a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800229e:	4866      	ldr	r0, [pc, #408]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 80022a0:	f005 fd46 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80022a4:	2201      	movs	r2, #1
 80022a6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80022aa:	4863      	ldr	r0, [pc, #396]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 80022ac:	f005 fd40 	bl	8007d30 <HAL_GPIO_WritePin>
		break;
 80022b0:	e24b      	b.n	800274a <MAX31855_CS_Disable+0x666>
	case TC_CH4:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80022b2:	2201      	movs	r2, #1
 80022b4:	2101      	movs	r1, #1
 80022b6:	4860      	ldr	r0, [pc, #384]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 80022b8:	f005 fd3a 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80022bc:	2201      	movs	r2, #1
 80022be:	2102      	movs	r1, #2
 80022c0:	485d      	ldr	r0, [pc, #372]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 80022c2:	f005 fd35 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80022c6:	2201      	movs	r2, #1
 80022c8:	2104      	movs	r1, #4
 80022ca:	485b      	ldr	r0, [pc, #364]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 80022cc:	f005 fd30 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80022d0:	2201      	movs	r2, #1
 80022d2:	2108      	movs	r1, #8
 80022d4:	4858      	ldr	r0, [pc, #352]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 80022d6:	f005 fd2b 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80022da:	2201      	movs	r2, #1
 80022dc:	2110      	movs	r1, #16
 80022de:	4856      	ldr	r0, [pc, #344]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 80022e0:	f005 fd26 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80022e4:	2201      	movs	r2, #1
 80022e6:	2120      	movs	r1, #32
 80022e8:	4853      	ldr	r0, [pc, #332]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 80022ea:	f005 fd21 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 80022ee:	2201      	movs	r2, #1
 80022f0:	2140      	movs	r1, #64	@ 0x40
 80022f2:	4851      	ldr	r0, [pc, #324]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 80022f4:	f005 fd1c 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 80022f8:	2201      	movs	r2, #1
 80022fa:	2180      	movs	r1, #128	@ 0x80
 80022fc:	484e      	ldr	r0, [pc, #312]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 80022fe:	f005 fd17 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002302:	2201      	movs	r2, #1
 8002304:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002308:	484b      	ldr	r0, [pc, #300]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 800230a:	f005 fd11 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 800230e:	2201      	movs	r2, #1
 8002310:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002314:	4848      	ldr	r0, [pc, #288]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 8002316:	f005 fd0b 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 800231a:	2201      	movs	r2, #1
 800231c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002320:	4845      	ldr	r0, [pc, #276]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 8002322:	f005 fd05 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002326:	2201      	movs	r2, #1
 8002328:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800232c:	4842      	ldr	r0, [pc, #264]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 800232e:	f005 fcff 	bl	8007d30 <HAL_GPIO_WritePin>
		break;
 8002332:	e20a      	b.n	800274a <MAX31855_CS_Disable+0x666>
	case TC_CH5:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8002334:	2201      	movs	r2, #1
 8002336:	2101      	movs	r1, #1
 8002338:	483f      	ldr	r0, [pc, #252]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 800233a:	f005 fcf9 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 800233e:	2201      	movs	r2, #1
 8002340:	2102      	movs	r1, #2
 8002342:	483d      	ldr	r0, [pc, #244]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 8002344:	f005 fcf4 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8002348:	2201      	movs	r2, #1
 800234a:	2104      	movs	r1, #4
 800234c:	483a      	ldr	r0, [pc, #232]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 800234e:	f005 fcef 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8002352:	2201      	movs	r2, #1
 8002354:	2108      	movs	r1, #8
 8002356:	4838      	ldr	r0, [pc, #224]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 8002358:	f005 fcea 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 800235c:	2201      	movs	r2, #1
 800235e:	2110      	movs	r1, #16
 8002360:	4835      	ldr	r0, [pc, #212]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 8002362:	f005 fce5 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8002366:	2201      	movs	r2, #1
 8002368:	2120      	movs	r1, #32
 800236a:	4833      	ldr	r0, [pc, #204]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 800236c:	f005 fce0 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002370:	2201      	movs	r2, #1
 8002372:	2140      	movs	r1, #64	@ 0x40
 8002374:	4830      	ldr	r0, [pc, #192]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 8002376:	f005 fcdb 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 800237a:	2201      	movs	r2, #1
 800237c:	2180      	movs	r1, #128	@ 0x80
 800237e:	482e      	ldr	r0, [pc, #184]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 8002380:	f005 fcd6 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002384:	2201      	movs	r2, #1
 8002386:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800238a:	482b      	ldr	r0, [pc, #172]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 800238c:	f005 fcd0 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002390:	2201      	movs	r2, #1
 8002392:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002396:	4828      	ldr	r0, [pc, #160]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 8002398:	f005 fcca 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 800239c:	2201      	movs	r2, #1
 800239e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80023a2:	4825      	ldr	r0, [pc, #148]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 80023a4:	f005 fcc4 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80023a8:	2201      	movs	r2, #1
 80023aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80023ae:	4822      	ldr	r0, [pc, #136]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 80023b0:	f005 fcbe 	bl	8007d30 <HAL_GPIO_WritePin>
		break;
 80023b4:	e1c9      	b.n	800274a <MAX31855_CS_Disable+0x666>
	case TC_CH6:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80023b6:	2201      	movs	r2, #1
 80023b8:	2101      	movs	r1, #1
 80023ba:	481f      	ldr	r0, [pc, #124]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 80023bc:	f005 fcb8 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80023c0:	2201      	movs	r2, #1
 80023c2:	2102      	movs	r1, #2
 80023c4:	481c      	ldr	r0, [pc, #112]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 80023c6:	f005 fcb3 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80023ca:	2201      	movs	r2, #1
 80023cc:	2104      	movs	r1, #4
 80023ce:	481a      	ldr	r0, [pc, #104]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 80023d0:	f005 fcae 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80023d4:	2201      	movs	r2, #1
 80023d6:	2108      	movs	r1, #8
 80023d8:	4817      	ldr	r0, [pc, #92]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 80023da:	f005 fca9 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80023de:	2201      	movs	r2, #1
 80023e0:	2110      	movs	r1, #16
 80023e2:	4815      	ldr	r0, [pc, #84]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 80023e4:	f005 fca4 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80023e8:	2201      	movs	r2, #1
 80023ea:	2120      	movs	r1, #32
 80023ec:	4812      	ldr	r0, [pc, #72]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 80023ee:	f005 fc9f 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 80023f2:	2201      	movs	r2, #1
 80023f4:	2140      	movs	r1, #64	@ 0x40
 80023f6:	4810      	ldr	r0, [pc, #64]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 80023f8:	f005 fc9a 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 80023fc:	2201      	movs	r2, #1
 80023fe:	2180      	movs	r1, #128	@ 0x80
 8002400:	480d      	ldr	r0, [pc, #52]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 8002402:	f005 fc95 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002406:	2201      	movs	r2, #1
 8002408:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800240c:	480a      	ldr	r0, [pc, #40]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 800240e:	f005 fc8f 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002412:	2201      	movs	r2, #1
 8002414:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002418:	4807      	ldr	r0, [pc, #28]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 800241a:	f005 fc89 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 800241e:	2201      	movs	r2, #1
 8002420:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002424:	4804      	ldr	r0, [pc, #16]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 8002426:	f005 fc83 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 800242a:	2201      	movs	r2, #1
 800242c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002430:	4801      	ldr	r0, [pc, #4]	@ (8002438 <MAX31855_CS_Disable+0x354>)
 8002432:	f005 fc7d 	bl	8007d30 <HAL_GPIO_WritePin>
		break;
 8002436:	e188      	b.n	800274a <MAX31855_CS_Disable+0x666>
 8002438:	58020c00 	.word	0x58020c00
	case TC_CH7:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 800243c:	2201      	movs	r2, #1
 800243e:	2101      	movs	r1, #1
 8002440:	48c4      	ldr	r0, [pc, #784]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 8002442:	f005 fc75 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8002446:	2201      	movs	r2, #1
 8002448:	2102      	movs	r1, #2
 800244a:	48c2      	ldr	r0, [pc, #776]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 800244c:	f005 fc70 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8002450:	2201      	movs	r2, #1
 8002452:	2104      	movs	r1, #4
 8002454:	48bf      	ldr	r0, [pc, #764]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 8002456:	f005 fc6b 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 800245a:	2201      	movs	r2, #1
 800245c:	2108      	movs	r1, #8
 800245e:	48bd      	ldr	r0, [pc, #756]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 8002460:	f005 fc66 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8002464:	2201      	movs	r2, #1
 8002466:	2110      	movs	r1, #16
 8002468:	48ba      	ldr	r0, [pc, #744]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 800246a:	f005 fc61 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 800246e:	2201      	movs	r2, #1
 8002470:	2120      	movs	r1, #32
 8002472:	48b8      	ldr	r0, [pc, #736]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 8002474:	f005 fc5c 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002478:	2201      	movs	r2, #1
 800247a:	2140      	movs	r1, #64	@ 0x40
 800247c:	48b5      	ldr	r0, [pc, #724]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 800247e:	f005 fc57 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8002482:	2201      	movs	r2, #1
 8002484:	2180      	movs	r1, #128	@ 0x80
 8002486:	48b3      	ldr	r0, [pc, #716]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 8002488:	f005 fc52 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 800248c:	2201      	movs	r2, #1
 800248e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002492:	48b0      	ldr	r0, [pc, #704]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 8002494:	f005 fc4c 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002498:	2201      	movs	r2, #1
 800249a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800249e:	48ad      	ldr	r0, [pc, #692]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 80024a0:	f005 fc46 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 80024a4:	2201      	movs	r2, #1
 80024a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80024aa:	48aa      	ldr	r0, [pc, #680]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 80024ac:	f005 fc40 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80024b0:	2201      	movs	r2, #1
 80024b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80024b6:	48a7      	ldr	r0, [pc, #668]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 80024b8:	f005 fc3a 	bl	8007d30 <HAL_GPIO_WritePin>
		break;
 80024bc:	e145      	b.n	800274a <MAX31855_CS_Disable+0x666>
	case TC_CH8:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80024be:	2201      	movs	r2, #1
 80024c0:	2101      	movs	r1, #1
 80024c2:	48a4      	ldr	r0, [pc, #656]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 80024c4:	f005 fc34 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80024c8:	2201      	movs	r2, #1
 80024ca:	2102      	movs	r1, #2
 80024cc:	48a1      	ldr	r0, [pc, #644]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 80024ce:	f005 fc2f 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80024d2:	2201      	movs	r2, #1
 80024d4:	2104      	movs	r1, #4
 80024d6:	489f      	ldr	r0, [pc, #636]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 80024d8:	f005 fc2a 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80024dc:	2201      	movs	r2, #1
 80024de:	2108      	movs	r1, #8
 80024e0:	489c      	ldr	r0, [pc, #624]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 80024e2:	f005 fc25 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80024e6:	2201      	movs	r2, #1
 80024e8:	2110      	movs	r1, #16
 80024ea:	489a      	ldr	r0, [pc, #616]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 80024ec:	f005 fc20 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80024f0:	2201      	movs	r2, #1
 80024f2:	2120      	movs	r1, #32
 80024f4:	4897      	ldr	r0, [pc, #604]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 80024f6:	f005 fc1b 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 80024fa:	2201      	movs	r2, #1
 80024fc:	2140      	movs	r1, #64	@ 0x40
 80024fe:	4895      	ldr	r0, [pc, #596]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 8002500:	f005 fc16 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8002504:	2201      	movs	r2, #1
 8002506:	2180      	movs	r1, #128	@ 0x80
 8002508:	4892      	ldr	r0, [pc, #584]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 800250a:	f005 fc11 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 800250e:	2201      	movs	r2, #1
 8002510:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002514:	488f      	ldr	r0, [pc, #572]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 8002516:	f005 fc0b 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 800251a:	2201      	movs	r2, #1
 800251c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002520:	488c      	ldr	r0, [pc, #560]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 8002522:	f005 fc05 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8002526:	2201      	movs	r2, #1
 8002528:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800252c:	4889      	ldr	r0, [pc, #548]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 800252e:	f005 fbff 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002532:	2201      	movs	r2, #1
 8002534:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002538:	4886      	ldr	r0, [pc, #536]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 800253a:	f005 fbf9 	bl	8007d30 <HAL_GPIO_WritePin>
		break;
 800253e:	e104      	b.n	800274a <MAX31855_CS_Disable+0x666>
	case TC_CH9:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8002540:	2201      	movs	r2, #1
 8002542:	2101      	movs	r1, #1
 8002544:	4883      	ldr	r0, [pc, #524]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 8002546:	f005 fbf3 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 800254a:	2201      	movs	r2, #1
 800254c:	2102      	movs	r1, #2
 800254e:	4881      	ldr	r0, [pc, #516]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 8002550:	f005 fbee 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8002554:	2201      	movs	r2, #1
 8002556:	2104      	movs	r1, #4
 8002558:	487e      	ldr	r0, [pc, #504]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 800255a:	f005 fbe9 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 800255e:	2201      	movs	r2, #1
 8002560:	2108      	movs	r1, #8
 8002562:	487c      	ldr	r0, [pc, #496]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 8002564:	f005 fbe4 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8002568:	2201      	movs	r2, #1
 800256a:	2110      	movs	r1, #16
 800256c:	4879      	ldr	r0, [pc, #484]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 800256e:	f005 fbdf 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8002572:	2201      	movs	r2, #1
 8002574:	2120      	movs	r1, #32
 8002576:	4877      	ldr	r0, [pc, #476]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 8002578:	f005 fbda 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 800257c:	2201      	movs	r2, #1
 800257e:	2140      	movs	r1, #64	@ 0x40
 8002580:	4874      	ldr	r0, [pc, #464]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 8002582:	f005 fbd5 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8002586:	2201      	movs	r2, #1
 8002588:	2180      	movs	r1, #128	@ 0x80
 800258a:	4872      	ldr	r0, [pc, #456]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 800258c:	f005 fbd0 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002590:	2201      	movs	r2, #1
 8002592:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002596:	486f      	ldr	r0, [pc, #444]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 8002598:	f005 fbca 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 800259c:	2201      	movs	r2, #1
 800259e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80025a2:	486c      	ldr	r0, [pc, #432]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 80025a4:	f005 fbc4 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 80025a8:	2201      	movs	r2, #1
 80025aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80025ae:	4869      	ldr	r0, [pc, #420]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 80025b0:	f005 fbbe 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80025b4:	2201      	movs	r2, #1
 80025b6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80025ba:	4866      	ldr	r0, [pc, #408]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 80025bc:	f005 fbb8 	bl	8007d30 <HAL_GPIO_WritePin>
		break;
 80025c0:	e0c3      	b.n	800274a <MAX31855_CS_Disable+0x666>
	case TC_CH10:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80025c2:	2201      	movs	r2, #1
 80025c4:	2101      	movs	r1, #1
 80025c6:	4863      	ldr	r0, [pc, #396]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 80025c8:	f005 fbb2 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80025cc:	2201      	movs	r2, #1
 80025ce:	2102      	movs	r1, #2
 80025d0:	4860      	ldr	r0, [pc, #384]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 80025d2:	f005 fbad 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80025d6:	2201      	movs	r2, #1
 80025d8:	2104      	movs	r1, #4
 80025da:	485e      	ldr	r0, [pc, #376]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 80025dc:	f005 fba8 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80025e0:	2201      	movs	r2, #1
 80025e2:	2108      	movs	r1, #8
 80025e4:	485b      	ldr	r0, [pc, #364]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 80025e6:	f005 fba3 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80025ea:	2201      	movs	r2, #1
 80025ec:	2110      	movs	r1, #16
 80025ee:	4859      	ldr	r0, [pc, #356]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 80025f0:	f005 fb9e 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80025f4:	2201      	movs	r2, #1
 80025f6:	2120      	movs	r1, #32
 80025f8:	4856      	ldr	r0, [pc, #344]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 80025fa:	f005 fb99 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 80025fe:	2201      	movs	r2, #1
 8002600:	2140      	movs	r1, #64	@ 0x40
 8002602:	4854      	ldr	r0, [pc, #336]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 8002604:	f005 fb94 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8002608:	2201      	movs	r2, #1
 800260a:	2180      	movs	r1, #128	@ 0x80
 800260c:	4851      	ldr	r0, [pc, #324]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 800260e:	f005 fb8f 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002612:	2201      	movs	r2, #1
 8002614:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002618:	484e      	ldr	r0, [pc, #312]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 800261a:	f005 fb89 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 800261e:	2201      	movs	r2, #1
 8002620:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002624:	484b      	ldr	r0, [pc, #300]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 8002626:	f005 fb83 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 800262a:	2201      	movs	r2, #1
 800262c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002630:	4848      	ldr	r0, [pc, #288]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 8002632:	f005 fb7d 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002636:	2201      	movs	r2, #1
 8002638:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800263c:	4845      	ldr	r0, [pc, #276]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 800263e:	f005 fb77 	bl	8007d30 <HAL_GPIO_WritePin>
		break;
 8002642:	e082      	b.n	800274a <MAX31855_CS_Disable+0x666>
	case TC_CH11:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8002644:	2201      	movs	r2, #1
 8002646:	2101      	movs	r1, #1
 8002648:	4842      	ldr	r0, [pc, #264]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 800264a:	f005 fb71 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 800264e:	2201      	movs	r2, #1
 8002650:	2102      	movs	r1, #2
 8002652:	4840      	ldr	r0, [pc, #256]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 8002654:	f005 fb6c 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8002658:	2201      	movs	r2, #1
 800265a:	2104      	movs	r1, #4
 800265c:	483d      	ldr	r0, [pc, #244]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 800265e:	f005 fb67 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8002662:	2201      	movs	r2, #1
 8002664:	2108      	movs	r1, #8
 8002666:	483b      	ldr	r0, [pc, #236]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 8002668:	f005 fb62 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 800266c:	2201      	movs	r2, #1
 800266e:	2110      	movs	r1, #16
 8002670:	4838      	ldr	r0, [pc, #224]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 8002672:	f005 fb5d 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8002676:	2201      	movs	r2, #1
 8002678:	2120      	movs	r1, #32
 800267a:	4836      	ldr	r0, [pc, #216]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 800267c:	f005 fb58 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002680:	2201      	movs	r2, #1
 8002682:	2140      	movs	r1, #64	@ 0x40
 8002684:	4833      	ldr	r0, [pc, #204]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 8002686:	f005 fb53 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 800268a:	2201      	movs	r2, #1
 800268c:	2180      	movs	r1, #128	@ 0x80
 800268e:	4831      	ldr	r0, [pc, #196]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 8002690:	f005 fb4e 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002694:	2201      	movs	r2, #1
 8002696:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800269a:	482e      	ldr	r0, [pc, #184]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 800269c:	f005 fb48 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 80026a0:	2201      	movs	r2, #1
 80026a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80026a6:	482b      	ldr	r0, [pc, #172]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 80026a8:	f005 fb42 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 80026ac:	2201      	movs	r2, #1
 80026ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80026b2:	4828      	ldr	r0, [pc, #160]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 80026b4:	f005 fb3c 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80026b8:	2201      	movs	r2, #1
 80026ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80026be:	4825      	ldr	r0, [pc, #148]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 80026c0:	f005 fb36 	bl	8007d30 <HAL_GPIO_WritePin>
		break;
 80026c4:	e041      	b.n	800274a <MAX31855_CS_Disable+0x666>
	case TC_CH12:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80026c6:	2201      	movs	r2, #1
 80026c8:	2101      	movs	r1, #1
 80026ca:	4822      	ldr	r0, [pc, #136]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 80026cc:	f005 fb30 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80026d0:	2201      	movs	r2, #1
 80026d2:	2102      	movs	r1, #2
 80026d4:	481f      	ldr	r0, [pc, #124]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 80026d6:	f005 fb2b 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80026da:	2201      	movs	r2, #1
 80026dc:	2104      	movs	r1, #4
 80026de:	481d      	ldr	r0, [pc, #116]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 80026e0:	f005 fb26 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80026e4:	2201      	movs	r2, #1
 80026e6:	2108      	movs	r1, #8
 80026e8:	481a      	ldr	r0, [pc, #104]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 80026ea:	f005 fb21 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80026ee:	2201      	movs	r2, #1
 80026f0:	2110      	movs	r1, #16
 80026f2:	4818      	ldr	r0, [pc, #96]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 80026f4:	f005 fb1c 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80026f8:	2201      	movs	r2, #1
 80026fa:	2120      	movs	r1, #32
 80026fc:	4815      	ldr	r0, [pc, #84]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 80026fe:	f005 fb17 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002702:	2201      	movs	r2, #1
 8002704:	2140      	movs	r1, #64	@ 0x40
 8002706:	4813      	ldr	r0, [pc, #76]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 8002708:	f005 fb12 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 800270c:	2201      	movs	r2, #1
 800270e:	2180      	movs	r1, #128	@ 0x80
 8002710:	4810      	ldr	r0, [pc, #64]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 8002712:	f005 fb0d 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002716:	2201      	movs	r2, #1
 8002718:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800271c:	480d      	ldr	r0, [pc, #52]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 800271e:	f005 fb07 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002722:	2201      	movs	r2, #1
 8002724:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002728:	480a      	ldr	r0, [pc, #40]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 800272a:	f005 fb01 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 800272e:	2201      	movs	r2, #1
 8002730:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002734:	4807      	ldr	r0, [pc, #28]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 8002736:	f005 fafb 	bl	8007d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 800273a:	2201      	movs	r2, #1
 800273c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002740:	4804      	ldr	r0, [pc, #16]	@ (8002754 <MAX31855_CS_Disable+0x670>)
 8002742:	f005 faf5 	bl	8007d30 <HAL_GPIO_WritePin>
		break;
 8002746:	e000      	b.n	800274a <MAX31855_CS_Disable+0x666>
	default:
		break;
 8002748:	bf00      	nop
	}
}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	58020c00 	.word	0x58020c00

08002758 <MAX31855_ReadData>:

// SPI를 통해 MAX31855에서 32비트 데이터 읽기
uint32_t MAX31855_ReadData(uint8_t ch)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	71fb      	strb	r3, [r7, #7]
	uint8_t rxBuffer[4] = {0}; // 4바이트(32비트) 데이터 버퍼
 8002762:	2300      	movs	r3, #0
 8002764:	60bb      	str	r3, [r7, #8]
	uint32_t rawData = 0;
 8002766:	2300      	movs	r3, #0
 8002768:	60fb      	str	r3, [r7, #12]

	MAX31855_CS_Enable(ch); // CS Low → SPI 시작
 800276a:	79fb      	ldrb	r3, [r7, #7]
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff f97f 	bl	8001a70 <MAX31855_CS_Enable>
	HAL_SPI_Receive(&hspi1, rxBuffer, 4, SPI_TIMEOUT); // 32비트(4바이트) 데이터 수신
 8002772:	f107 0108 	add.w	r1, r7, #8
 8002776:	2364      	movs	r3, #100	@ 0x64
 8002778:	2204      	movs	r2, #4
 800277a:	480b      	ldr	r0, [pc, #44]	@ (80027a8 <MAX31855_ReadData+0x50>)
 800277c:	f009 f99c 	bl	800bab8 <HAL_SPI_Receive>
	MAX31855_CS_Disable(ch); // CS High → SPI 종료
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff fcae 	bl	80020e4 <MAX31855_CS_Disable>

	// 4바이트 데이터를 32비트 정수로 변환
	rawData = ((uint32_t)rxBuffer[0] << 24) |
 8002788:	7a3b      	ldrb	r3, [r7, #8]
 800278a:	061a      	lsls	r2, r3, #24
			((uint32_t)rxBuffer[1] << 16) |
 800278c:	7a7b      	ldrb	r3, [r7, #9]
 800278e:	041b      	lsls	r3, r3, #16
	rawData = ((uint32_t)rxBuffer[0] << 24) |
 8002790:	431a      	orrs	r2, r3
			((uint32_t)rxBuffer[2] << 8) |
 8002792:	7abb      	ldrb	r3, [r7, #10]
 8002794:	021b      	lsls	r3, r3, #8
			((uint32_t)rxBuffer[1] << 16) |
 8002796:	4313      	orrs	r3, r2
			((uint32_t)rxBuffer[3]);
 8002798:	7afa      	ldrb	r2, [r7, #11]
	rawData = ((uint32_t)rxBuffer[0] << 24) |
 800279a:	4313      	orrs	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]

	return rawData;
 800279e:	68fb      	ldr	r3, [r7, #12]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	24000194 	.word	0x24000194

080027ac <MAX31855_GetThermocoupleTemperature>:

// 열전대(Hot Junction) 온도 변환 함수
float MAX31855_GetThermocoupleTemperature(uint8_t ch)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	71fb      	strb	r3, [r7, #7]
	uint32_t rawData = MAX31855_ReadData(ch);
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff ffcd 	bl	8002758 <MAX31855_ReadData>
 80027be:	60b8      	str	r0, [r7, #8]
	int16_t tempData = (rawData >> 18) & 0x3FFF; // 상위 14비트 추출
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	0c9b      	lsrs	r3, r3, #18
 80027c4:	81fb      	strh	r3, [r7, #14]

	// 음수 보정 (2의 보수 변환)
	if (rawData & 0x80000000)
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	da05      	bge.n	80027d8 <MAX31855_GetThermocoupleTemperature+0x2c>
	{
		tempData |= 0xC000; // 부호 확장
 80027cc:	89fb      	ldrh	r3, [r7, #14]
 80027ce:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 80027d2:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 80027d6:	81fb      	strh	r3, [r7, #14]
	}

	return (float)tempData * 0.25; // 해상도 0.25°C 변환
 80027d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027dc:	ee07 3a90 	vmov	s15, r3
 80027e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027e4:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 80027e8:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80027ec:	eeb0 0a67 	vmov.f32	s0, s15
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <GetTemp>:
	}
}


void GetTemp(double* Temp)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b084      	sub	sp, #16
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0; i < MAX_TC_CH; i++)
 80027fe:	2300      	movs	r3, #0
 8002800:	73fb      	strb	r3, [r7, #15]
 8002802:	e010      	b.n	8002826 <GetTemp+0x30>
	{
		Temp[i] = (double)MAX31855_GetThermocoupleTemperature(i);
 8002804:	7bfb      	ldrb	r3, [r7, #15]
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff ffd0 	bl	80027ac <MAX31855_GetThermocoupleTemperature>
 800280c:	eef0 7a40 	vmov.f32	s15, s0
 8002810:	7bfb      	ldrb	r3, [r7, #15]
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	4413      	add	r3, r2
 8002818:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800281c:	ed83 7b00 	vstr	d7, [r3]
	for (uint8_t i=0; i < MAX_TC_CH; i++)
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	3301      	adds	r3, #1
 8002824:	73fb      	strb	r3, [r7, #15]
 8002826:	7bfb      	ldrb	r3, [r7, #15]
 8002828:	2b0b      	cmp	r3, #11
 800282a:	d9eb      	bls.n	8002804 <GetTemp+0xe>
	}
}
 800282c:	bf00      	nop
 800282e:	bf00      	nop
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <HAL_UART_RxCpltCallback>:
uint8_t NRecv = 0;

extern void Error_Handler(void);

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART4)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a19      	ldr	r2, [pc, #100]	@ (80028ac <HAL_UART_RxCpltCallback+0x74>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d12c      	bne.n	80028a4 <HAL_UART_RxCpltCallback+0x6c>
	{
		rx_buffer[rx_index++] = rx_data;
 800284a:	4b19      	ldr	r3, [pc, #100]	@ (80028b0 <HAL_UART_RxCpltCallback+0x78>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	1c5a      	adds	r2, r3, #1
 8002850:	b2d1      	uxtb	r1, r2
 8002852:	4a17      	ldr	r2, [pc, #92]	@ (80028b0 <HAL_UART_RxCpltCallback+0x78>)
 8002854:	7011      	strb	r1, [r2, #0]
 8002856:	461a      	mov	r2, r3
 8002858:	4b16      	ldr	r3, [pc, #88]	@ (80028b4 <HAL_UART_RxCpltCallback+0x7c>)
 800285a:	7819      	ldrb	r1, [r3, #0]
 800285c:	4b16      	ldr	r3, [pc, #88]	@ (80028b8 <HAL_UART_RxCpltCallback+0x80>)
 800285e:	5499      	strb	r1, [r3, r2]

		if (rx_data == 0x0A)
 8002860:	4b14      	ldr	r3, [pc, #80]	@ (80028b4 <HAL_UART_RxCpltCallback+0x7c>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b0a      	cmp	r3, #10
 8002866:	d110      	bne.n	800288a <HAL_UART_RxCpltCallback+0x52>
		{
			fTC = true;
 8002868:	4b14      	ldr	r3, [pc, #80]	@ (80028bc <HAL_UART_RxCpltCallback+0x84>)
 800286a:	2201      	movs	r2, #1
 800286c:	701a      	strb	r2, [r3, #0]
			memcpy((void*)tc_buffer, (void*)rx_buffer, sizeof(uint8_t)*rx_index);
 800286e:	4b10      	ldr	r3, [pc, #64]	@ (80028b0 <HAL_UART_RxCpltCallback+0x78>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	461a      	mov	r2, r3
 8002874:	4910      	ldr	r1, [pc, #64]	@ (80028b8 <HAL_UART_RxCpltCallback+0x80>)
 8002876:	4812      	ldr	r0, [pc, #72]	@ (80028c0 <HAL_UART_RxCpltCallback+0x88>)
 8002878:	f00c ff9d 	bl	800f7b6 <memcpy>
			NRecv = rx_index;
 800287c:	4b0c      	ldr	r3, [pc, #48]	@ (80028b0 <HAL_UART_RxCpltCallback+0x78>)
 800287e:	781a      	ldrb	r2, [r3, #0]
 8002880:	4b10      	ldr	r3, [pc, #64]	@ (80028c4 <HAL_UART_RxCpltCallback+0x8c>)
 8002882:	701a      	strb	r2, [r3, #0]
			rx_index = 0;
 8002884:	4b0a      	ldr	r3, [pc, #40]	@ (80028b0 <HAL_UART_RxCpltCallback+0x78>)
 8002886:	2200      	movs	r2, #0
 8002888:	701a      	strb	r2, [r3, #0]
		}

		// 순환 버퍼 또는 수신 종료 문자 조건으로 처리 가능
		if (rx_index >= MAX_TC_SIZE)
 800288a:	4b09      	ldr	r3, [pc, #36]	@ (80028b0 <HAL_UART_RxCpltCallback+0x78>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	b25b      	sxtb	r3, r3
 8002890:	2b00      	cmp	r3, #0
 8002892:	da02      	bge.n	800289a <HAL_UART_RxCpltCallback+0x62>
		{
			rx_index = 0; // 오버플로 방지
 8002894:	4b06      	ldr	r3, [pc, #24]	@ (80028b0 <HAL_UART_RxCpltCallback+0x78>)
 8002896:	2200      	movs	r2, #0
 8002898:	701a      	strb	r2, [r3, #0]
		}

		// 다음 수신 재시작
		HAL_UART_Receive_IT(&huart4, &rx_data, 1);
 800289a:	2201      	movs	r2, #1
 800289c:	4905      	ldr	r1, [pc, #20]	@ (80028b4 <HAL_UART_RxCpltCallback+0x7c>)
 800289e:	480a      	ldr	r0, [pc, #40]	@ (80028c8 <HAL_UART_RxCpltCallback+0x90>)
 80028a0:	f00a f9f6 	bl	800cc90 <HAL_UART_Receive_IT>
	}
}
 80028a4:	bf00      	nop
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40004c00 	.word	0x40004c00
 80028b0:	24000428 	.word	0x24000428
 80028b4:	240003a5 	.word	0x240003a5
 80028b8:	240003a8 	.word	0x240003a8
 80028bc:	240003a4 	.word	0x240003a4
 80028c0:	2400042c 	.word	0x2400042c
 80028c4:	240004ac 	.word	0x240004ac
 80028c8:	24000268 	.word	0x24000268

080028cc <InitTMTC>:

void InitTMTC(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive_IT(&huart4, &rx_data, 1) != HAL_OK)
 80028d0:	2201      	movs	r2, #1
 80028d2:	4905      	ldr	r1, [pc, #20]	@ (80028e8 <InitTMTC+0x1c>)
 80028d4:	4805      	ldr	r0, [pc, #20]	@ (80028ec <InitTMTC+0x20>)
 80028d6:	f00a f9db 	bl	800cc90 <HAL_UART_Receive_IT>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <InitTMTC+0x18>
	{
		Error_Handler();
 80028e0:	f7fe fca8 	bl	8001234 <Error_Handler>
	}
}
 80028e4:	bf00      	nop
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	240003a5 	.word	0x240003a5
 80028ec:	24000268 	.word	0x24000268

080028f0 <SendTM>:
{
	memcpy((void*)TC,(void*)tc_buffer,sizeof(uint8_t)*NRecv);
}

void SendTM(uint8_t* TM)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
	uint8_t n_send = strlen((char*)TM);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7fd fcf1 	bl	80002e0 <strlen>
 80028fe:	4603      	mov	r3, r0
 8002900:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart4, (uint8_t*)TM, n_send, HAL_MAX_DELAY);
 8002902:	7bfb      	ldrb	r3, [r7, #15]
 8002904:	b29a      	uxth	r2, r3
 8002906:	f04f 33ff 	mov.w	r3, #4294967295
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	4803      	ldr	r0, [pc, #12]	@ (800291c <SendTM+0x2c>)
 800290e:	f00a f931 	bl	800cb74 <HAL_UART_Transmit>
}
 8002912:	bf00      	nop
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	24000268 	.word	0x24000268

08002920 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002920:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800295c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002924:	f7fd ff78 	bl	8000818 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002928:	f7fd fec8 	bl	80006bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800292c:	480c      	ldr	r0, [pc, #48]	@ (8002960 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800292e:	490d      	ldr	r1, [pc, #52]	@ (8002964 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002930:	4a0d      	ldr	r2, [pc, #52]	@ (8002968 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002934:	e002      	b.n	800293c <LoopCopyDataInit>

08002936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800293a:	3304      	adds	r3, #4

0800293c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800293c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800293e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002940:	d3f9      	bcc.n	8002936 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002942:	4a0a      	ldr	r2, [pc, #40]	@ (800296c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002944:	4c0a      	ldr	r4, [pc, #40]	@ (8002970 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002948:	e001      	b.n	800294e <LoopFillZerobss>

0800294a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800294a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800294c:	3204      	adds	r2, #4

0800294e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800294e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002950:	d3fb      	bcc.n	800294a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002952:	f00c ff09 	bl	800f768 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002956:	f7fd ffcd 	bl	80008f4 <main>
  bx  lr
 800295a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800295c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002960:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002964:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8002968:	080102b4 	.word	0x080102b4
  ldr r2, =_sbss
 800296c:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 8002970:	240006a0 	.word	0x240006a0

08002974 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002974:	e7fe      	b.n	8002974 <ADC3_IRQHandler>
	...

08002978 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b08c      	sub	sp, #48	@ 0x30
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002982:	2300      	movs	r3, #0
 8002984:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8002986:	79fb      	ldrb	r3, [r7, #7]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d009      	beq.n	80029a0 <BSP_LED_Init+0x28>
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d006      	beq.n	80029a0 <BSP_LED_Init+0x28>
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	2b02      	cmp	r3, #2
 8002996:	d003      	beq.n	80029a0 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002998:	f06f 0301 	mvn.w	r3, #1
 800299c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800299e:	e055      	b.n	8002a4c <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80029a0:	79fb      	ldrb	r3, [r7, #7]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10f      	bne.n	80029c6 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80029a6:	4b2c      	ldr	r3, [pc, #176]	@ (8002a58 <BSP_LED_Init+0xe0>)
 80029a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029ac:	4a2a      	ldr	r2, [pc, #168]	@ (8002a58 <BSP_LED_Init+0xe0>)
 80029ae:	f043 0302 	orr.w	r3, r3, #2
 80029b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029b6:	4b28      	ldr	r3, [pc, #160]	@ (8002a58 <BSP_LED_Init+0xe0>)
 80029b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	617b      	str	r3, [r7, #20]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	e021      	b.n	8002a0a <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d10f      	bne.n	80029ec <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80029cc:	4b22      	ldr	r3, [pc, #136]	@ (8002a58 <BSP_LED_Init+0xe0>)
 80029ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029d2:	4a21      	ldr	r2, [pc, #132]	@ (8002a58 <BSP_LED_Init+0xe0>)
 80029d4:	f043 0310 	orr.w	r3, r3, #16
 80029d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002a58 <BSP_LED_Init+0xe0>)
 80029de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029e2:	f003 0310 	and.w	r3, r3, #16
 80029e6:	613b      	str	r3, [r7, #16]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	e00e      	b.n	8002a0a <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80029ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002a58 <BSP_LED_Init+0xe0>)
 80029ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029f2:	4a19      	ldr	r2, [pc, #100]	@ (8002a58 <BSP_LED_Init+0xe0>)
 80029f4:	f043 0302 	orr.w	r3, r3, #2
 80029f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029fc:	4b16      	ldr	r3, [pc, #88]	@ (8002a58 <BSP_LED_Init+0xe0>)
 80029fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	4a13      	ldr	r2, [pc, #76]	@ (8002a5c <BSP_LED_Init+0xe4>)
 8002a0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a12:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002a14:	2301      	movs	r3, #1
 8002a16:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	4a0f      	ldr	r2, [pc, #60]	@ (8002a60 <BSP_LED_Init+0xe8>)
 8002a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a28:	f107 0218 	add.w	r2, r7, #24
 8002a2c:	4611      	mov	r1, r2
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f004 ffce 	bl	80079d0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002a34:	79fb      	ldrb	r3, [r7, #7]
 8002a36:	4a0a      	ldr	r2, [pc, #40]	@ (8002a60 <BSP_LED_Init+0xe8>)
 8002a38:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002a3c:	79fb      	ldrb	r3, [r7, #7]
 8002a3e:	4a07      	ldr	r2, [pc, #28]	@ (8002a5c <BSP_LED_Init+0xe4>)
 8002a40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a44:	2200      	movs	r2, #0
 8002a46:	4619      	mov	r1, r3
 8002a48:	f005 f972 	bl	8007d30 <HAL_GPIO_WritePin>
  }

  return ret;
 8002a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3730      	adds	r7, #48	@ 0x30
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	58024400 	.word	0x58024400
 8002a5c:	08010234 	.word	0x08010234
 8002a60:	2400000c 	.word	0x2400000c

08002a64 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8002a72:	79fb      	ldrb	r3, [r7, #7]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d009      	beq.n	8002a8c <BSP_LED_On+0x28>
 8002a78:	79fb      	ldrb	r3, [r7, #7]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d006      	beq.n	8002a8c <BSP_LED_On+0x28>
 8002a7e:	79fb      	ldrb	r3, [r7, #7]
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d003      	beq.n	8002a8c <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002a84:	f06f 0301 	mvn.w	r3, #1
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	e00b      	b.n	8002aa4 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8002a8c:	79fb      	ldrb	r3, [r7, #7]
 8002a8e:	4a08      	ldr	r2, [pc, #32]	@ (8002ab0 <BSP_LED_On+0x4c>)
 8002a90:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002a94:	79fb      	ldrb	r3, [r7, #7]
 8002a96:	4a07      	ldr	r2, [pc, #28]	@ (8002ab4 <BSP_LED_On+0x50>)
 8002a98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	f005 f946 	bl	8007d30 <HAL_GPIO_WritePin>
  }

  return ret;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	2400000c 	.word	0x2400000c
 8002ab4:	08010234 	.word	0x08010234

08002ab8 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d009      	beq.n	8002ae0 <BSP_LED_Off+0x28>
 8002acc:	79fb      	ldrb	r3, [r7, #7]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d006      	beq.n	8002ae0 <BSP_LED_Off+0x28>
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d003      	beq.n	8002ae0 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002ad8:	f06f 0301 	mvn.w	r3, #1
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	e00b      	b.n	8002af8 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002ae0:	79fb      	ldrb	r3, [r7, #7]
 8002ae2:	4a08      	ldr	r2, [pc, #32]	@ (8002b04 <BSP_LED_Off+0x4c>)
 8002ae4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002ae8:	79fb      	ldrb	r3, [r7, #7]
 8002aea:	4a07      	ldr	r2, [pc, #28]	@ (8002b08 <BSP_LED_Off+0x50>)
 8002aec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002af0:	2200      	movs	r2, #0
 8002af2:	4619      	mov	r1, r3
 8002af4:	f005 f91c 	bl	8007d30 <HAL_GPIO_WritePin>
  }

  return ret;
 8002af8:	68fb      	ldr	r3, [r7, #12]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	2400000c 	.word	0x2400000c
 8002b08:	08010234 	.word	0x08010234

08002b0c <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d009      	beq.n	8002b34 <BSP_LED_Toggle+0x28>
 8002b20:	79fb      	ldrb	r3, [r7, #7]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d006      	beq.n	8002b34 <BSP_LED_Toggle+0x28>
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d003      	beq.n	8002b34 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002b2c:	f06f 0301 	mvn.w	r3, #1
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	e00b      	b.n	8002b4c <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002b34:	79fb      	ldrb	r3, [r7, #7]
 8002b36:	4a08      	ldr	r2, [pc, #32]	@ (8002b58 <BSP_LED_Toggle+0x4c>)
 8002b38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	4907      	ldr	r1, [pc, #28]	@ (8002b5c <BSP_LED_Toggle+0x50>)
 8002b40:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002b44:	4619      	mov	r1, r3
 8002b46:	4610      	mov	r0, r2
 8002b48:	f005 f90b 	bl	8007d62 <HAL_GPIO_TogglePin>
  }

  return ret;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	2400000c 	.word	0x2400000c
 8002b5c:	08010234 	.word	0x08010234

08002b60 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b088      	sub	sp, #32
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	460a      	mov	r2, r1
 8002b6a:	71fb      	strb	r3, [r7, #7]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8002b70:	4b2e      	ldr	r3, [pc, #184]	@ (8002c2c <BSP_PB_Init+0xcc>)
 8002b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b76:	4a2d      	ldr	r2, [pc, #180]	@ (8002c2c <BSP_PB_Init+0xcc>)
 8002b78:	f043 0304 	orr.w	r3, r3, #4
 8002b7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b80:	4b2a      	ldr	r3, [pc, #168]	@ (8002c2c <BSP_PB_Init+0xcc>)
 8002b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b86:	f003 0304 	and.w	r3, r3, #4
 8002b8a:	60bb      	str	r3, [r7, #8]
 8002b8c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8002b8e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b92:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002b94:	2302      	movs	r3, #2
 8002b96:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8002b9c:	79bb      	ldrb	r3, [r7, #6]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10c      	bne.n	8002bbc <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	4a21      	ldr	r2, [pc, #132]	@ (8002c30 <BSP_PB_Init+0xd0>)
 8002baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bae:	f107 020c 	add.w	r2, r7, #12
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f004 ff0b 	bl	80079d0 <HAL_GPIO_Init>
 8002bba:	e031      	b.n	8002c20 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002bbc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002bc0:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002bc2:	79fb      	ldrb	r3, [r7, #7]
 8002bc4:	4a1a      	ldr	r2, [pc, #104]	@ (8002c30 <BSP_PB_Init+0xd0>)
 8002bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bca:	f107 020c 	add.w	r2, r7, #12
 8002bce:	4611      	mov	r1, r2
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f004 fefd 	bl	80079d0 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	4a16      	ldr	r2, [pc, #88]	@ (8002c34 <BSP_PB_Init+0xd4>)
 8002bdc:	441a      	add	r2, r3
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	4915      	ldr	r1, [pc, #84]	@ (8002c38 <BSP_PB_Init+0xd8>)
 8002be2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002be6:	4619      	mov	r1, r3
 8002be8:	4610      	mov	r0, r2
 8002bea:	f004 fea0 	bl	800792e <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	4a10      	ldr	r2, [pc, #64]	@ (8002c34 <BSP_PB_Init+0xd4>)
 8002bf4:	1898      	adds	r0, r3, r2
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
 8002bf8:	4a10      	ldr	r2, [pc, #64]	@ (8002c3c <BSP_PB_Init+0xdc>)
 8002bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	2100      	movs	r1, #0
 8002c02:	f004 fe75 	bl	80078f0 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002c06:	2028      	movs	r0, #40	@ 0x28
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	4a0d      	ldr	r2, [pc, #52]	@ (8002c40 <BSP_PB_Init+0xe0>)
 8002c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c10:	2200      	movs	r2, #0
 8002c12:	4619      	mov	r1, r3
 8002c14:	f001 ffe9 	bl	8004bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002c18:	2328      	movs	r3, #40	@ 0x28
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f001 ffff 	bl	8004c1e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3720      	adds	r7, #32
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	58024400 	.word	0x58024400
 8002c30:	24000018 	.word	0x24000018
 8002c34:	240004b0 	.word	0x240004b0
 8002c38:	0801023c 	.word	0x0801023c
 8002c3c:	2400001c 	.word	0x2400001c
 8002c40:	24000020 	.word	0x24000020

08002c44 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8002c4e:	79fb      	ldrb	r3, [r7, #7]
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	4a04      	ldr	r2, [pc, #16]	@ (8002c64 <BSP_PB_IRQHandler+0x20>)
 8002c54:	4413      	add	r3, r2
 8002c56:	4618      	mov	r0, r3
 8002c58:	f004 fe7e 	bl	8007958 <HAL_EXTI_IRQHandler>
}
 8002c5c:	bf00      	nop
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	240004b0 	.word	0x240004b0

08002c68 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	6039      	str	r1, [r7, #0]
 8002c72:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002c74:	2300      	movs	r3, #0
 8002c76:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8002c78:	79fb      	ldrb	r3, [r7, #7]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002c7e:	f06f 0301 	mvn.w	r3, #1
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	e018      	b.n	8002cb8 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8002c86:	79fb      	ldrb	r3, [r7, #7]
 8002c88:	2294      	movs	r2, #148	@ 0x94
 8002c8a:	fb02 f303 	mul.w	r3, r2, r3
 8002c8e:	4a0d      	ldr	r2, [pc, #52]	@ (8002cc4 <BSP_COM_Init+0x5c>)
 8002c90:	4413      	add	r3, r2
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 f86e 	bl	8002d74 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8002c98:	79fb      	ldrb	r3, [r7, #7]
 8002c9a:	2294      	movs	r2, #148	@ 0x94
 8002c9c:	fb02 f303 	mul.w	r3, r2, r3
 8002ca0:	4a08      	ldr	r2, [pc, #32]	@ (8002cc4 <BSP_COM_Init+0x5c>)
 8002ca2:	4413      	add	r3, r2
 8002ca4:	6839      	ldr	r1, [r7, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 f80e 	bl	8002cc8 <MX_USART3_Init>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d002      	beq.n	8002cb8 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002cb2:	f06f 0303 	mvn.w	r3, #3
 8002cb6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	240004b8 	.word	0x240004b8

08002cc8 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8002cd2:	4b15      	ldr	r3, [pc, #84]	@ (8002d28 <MX_USART3_Init+0x60>)
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	220c      	movs	r2, #12
 8002ce6:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	895b      	ldrh	r3, [r3, #10]
 8002cec:	461a      	mov	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	891b      	ldrh	r3, [r3, #8]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	899b      	ldrh	r3, [r3, #12]
 8002d08:	461a      	mov	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002d14:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f009 fedc 	bl	800cad4 <HAL_UART_Init>
 8002d1c:	4603      	mov	r3, r0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	24000008 	.word	0x24000008

08002d2c <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8002d34:	4b09      	ldr	r3, [pc, #36]	@ (8002d5c <__io_putchar+0x30>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	2394      	movs	r3, #148	@ 0x94
 8002d3c:	fb02 f303 	mul.w	r3, r2, r3
 8002d40:	4a07      	ldr	r2, [pc, #28]	@ (8002d60 <__io_putchar+0x34>)
 8002d42:	1898      	adds	r0, r3, r2
 8002d44:	1d39      	adds	r1, r7, #4
 8002d46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f009 ff12 	bl	800cb74 <HAL_UART_Transmit>
  return ch;
 8002d50:	687b      	ldr	r3, [r7, #4]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	2400054c 	.word	0x2400054c
 8002d60:	240004b8 	.word	0x240004b8

08002d64 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002d68:	2000      	movs	r0, #0
 8002d6a:	f7fe fa4f 	bl	800120c <BSP_PB_Callback>
}
 8002d6e:	bf00      	nop
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b08a      	sub	sp, #40	@ 0x28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8002d7c:	4b27      	ldr	r3, [pc, #156]	@ (8002e1c <COM1_MspInit+0xa8>)
 8002d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d82:	4a26      	ldr	r2, [pc, #152]	@ (8002e1c <COM1_MspInit+0xa8>)
 8002d84:	f043 0308 	orr.w	r3, r3, #8
 8002d88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d8c:	4b23      	ldr	r3, [pc, #140]	@ (8002e1c <COM1_MspInit+0xa8>)
 8002d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8002d9a:	4b20      	ldr	r3, [pc, #128]	@ (8002e1c <COM1_MspInit+0xa8>)
 8002d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002da0:	4a1e      	ldr	r2, [pc, #120]	@ (8002e1c <COM1_MspInit+0xa8>)
 8002da2:	f043 0308 	orr.w	r3, r3, #8
 8002da6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002daa:	4b1c      	ldr	r3, [pc, #112]	@ (8002e1c <COM1_MspInit+0xa8>)
 8002dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8002db8:	4b18      	ldr	r3, [pc, #96]	@ (8002e1c <COM1_MspInit+0xa8>)
 8002dba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002dbe:	4a17      	ldr	r2, [pc, #92]	@ (8002e1c <COM1_MspInit+0xa8>)
 8002dc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dc4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002dc8:	4b14      	ldr	r3, [pc, #80]	@ (8002e1c <COM1_MspInit+0xa8>)
 8002dca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002dce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dd2:	60bb      	str	r3, [r7, #8]
 8002dd4:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8002dd6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002dda:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002de0:	2302      	movs	r3, #2
 8002de2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002de4:	2301      	movs	r3, #1
 8002de6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8002de8:	2307      	movs	r3, #7
 8002dea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002dec:	f107 0314 	add.w	r3, r7, #20
 8002df0:	4619      	mov	r1, r3
 8002df2:	480b      	ldr	r0, [pc, #44]	@ (8002e20 <COM1_MspInit+0xac>)
 8002df4:	f004 fdec 	bl	80079d0 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8002df8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002dfc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002dfe:	2302      	movs	r3, #2
 8002e00:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8002e02:	2307      	movs	r3, #7
 8002e04:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8002e06:	f107 0314 	add.w	r3, r7, #20
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4804      	ldr	r0, [pc, #16]	@ (8002e20 <COM1_MspInit+0xac>)
 8002e0e:	f004 fddf 	bl	80079d0 <HAL_GPIO_Init>
}
 8002e12:	bf00      	nop
 8002e14:	3728      	adds	r7, #40	@ 0x28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	58024400 	.word	0x58024400
 8002e20:	58020c00 	.word	0x58020c00

08002e24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e2a:	2003      	movs	r0, #3
 8002e2c:	f001 fed2 	bl	8004bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e30:	f005 fe4a 	bl	8008ac8 <HAL_RCC_GetSysClockFreq>
 8002e34:	4602      	mov	r2, r0
 8002e36:	4b15      	ldr	r3, [pc, #84]	@ (8002e8c <HAL_Init+0x68>)
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	0a1b      	lsrs	r3, r3, #8
 8002e3c:	f003 030f 	and.w	r3, r3, #15
 8002e40:	4913      	ldr	r1, [pc, #76]	@ (8002e90 <HAL_Init+0x6c>)
 8002e42:	5ccb      	ldrb	r3, [r1, r3]
 8002e44:	f003 031f 	and.w	r3, r3, #31
 8002e48:	fa22 f303 	lsr.w	r3, r2, r3
 8002e4c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8002e8c <HAL_Init+0x68>)
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	4a0e      	ldr	r2, [pc, #56]	@ (8002e90 <HAL_Init+0x6c>)
 8002e58:	5cd3      	ldrb	r3, [r2, r3]
 8002e5a:	f003 031f 	and.w	r3, r3, #31
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	fa22 f303 	lsr.w	r3, r2, r3
 8002e64:	4a0b      	ldr	r2, [pc, #44]	@ (8002e94 <HAL_Init+0x70>)
 8002e66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e68:	4a0b      	ldr	r2, [pc, #44]	@ (8002e98 <HAL_Init+0x74>)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e6e:	2000      	movs	r0, #0
 8002e70:	f000 f814 	bl	8002e9c <HAL_InitTick>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e002      	b.n	8002e84 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002e7e:	f7fe fae7 	bl	8001450 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	58024400 	.word	0x58024400
 8002e90:	08010224 	.word	0x08010224
 8002e94:	24000004 	.word	0x24000004
 8002e98:	24000000 	.word	0x24000000

08002e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002ea4:	4b15      	ldr	r3, [pc, #84]	@ (8002efc <HAL_InitTick+0x60>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e021      	b.n	8002ef4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002eb0:	4b13      	ldr	r3, [pc, #76]	@ (8002f00 <HAL_InitTick+0x64>)
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	4b11      	ldr	r3, [pc, #68]	@ (8002efc <HAL_InitTick+0x60>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	4619      	mov	r1, r3
 8002eba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ebe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f001 feb7 	bl	8004c3a <HAL_SYSTICK_Config>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e00e      	b.n	8002ef4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2b0f      	cmp	r3, #15
 8002eda:	d80a      	bhi.n	8002ef2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002edc:	2200      	movs	r2, #0
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee4:	f001 fe81 	bl	8004bea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ee8:	4a06      	ldr	r2, [pc, #24]	@ (8002f04 <HAL_InitTick+0x68>)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	e000      	b.n	8002ef4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	24000028 	.word	0x24000028
 8002f00:	24000000 	.word	0x24000000
 8002f04:	24000024 	.word	0x24000024

08002f08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f0c:	4b06      	ldr	r3, [pc, #24]	@ (8002f28 <HAL_IncTick+0x20>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	461a      	mov	r2, r3
 8002f12:	4b06      	ldr	r3, [pc, #24]	@ (8002f2c <HAL_IncTick+0x24>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4413      	add	r3, r2
 8002f18:	4a04      	ldr	r2, [pc, #16]	@ (8002f2c <HAL_IncTick+0x24>)
 8002f1a:	6013      	str	r3, [r2, #0]
}
 8002f1c:	bf00      	nop
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	24000028 	.word	0x24000028
 8002f2c:	24000550 	.word	0x24000550

08002f30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  return uwTick;
 8002f34:	4b03      	ldr	r3, [pc, #12]	@ (8002f44 <HAL_GetTick+0x14>)
 8002f36:	681b      	ldr	r3, [r3, #0]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	24000550 	.word	0x24000550

08002f48 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002f4c:	4b03      	ldr	r3, [pc, #12]	@ (8002f5c <HAL_GetREVID+0x14>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	0c1b      	lsrs	r3, r3, #16
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	5c001000 	.word	0x5c001000

08002f60 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002f6a:	4b07      	ldr	r3, [pc, #28]	@ (8002f88 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	43db      	mvns	r3, r3
 8002f72:	401a      	ands	r2, r3
 8002f74:	4904      	ldr	r1, [pc, #16]	@ (8002f88 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	604b      	str	r3, [r1, #4]
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	58000400 	.word	0x58000400

08002f8c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	609a      	str	r2, [r3, #8]
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
 8002fba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	609a      	str	r2, [r3, #8]
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003004:	2b00      	cmp	r3, #0
 8003006:	d107      	bne.n	8003018 <LL_ADC_SetChannelPreselection+0x24>
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	0e9b      	lsrs	r3, r3, #26
 800300c:	f003 031f 	and.w	r3, r3, #31
 8003010:	2201      	movs	r2, #1
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	e015      	b.n	8003044 <LL_ADC_SetChannelPreselection+0x50>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	fa93 f3a3 	rbit	r3, r3
 8003022:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 800302e:	2320      	movs	r3, #32
 8003030:	e003      	b.n	800303a <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	fab3 f383 	clz	r3, r3
 8003038:	b2db      	uxtb	r3, r3
 800303a:	f003 031f 	and.w	r3, r3, #31
 800303e:	2201      	movs	r2, #1
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	69d2      	ldr	r2, [r2, #28]
 8003048:	431a      	orrs	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 800304e:	bf00      	nop
 8003050:	371c      	adds	r7, #28
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800305a:	b480      	push	{r7}
 800305c:	b087      	sub	sp, #28
 800305e:	af00      	add	r7, sp, #0
 8003060:	60f8      	str	r0, [r7, #12]
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	607a      	str	r2, [r7, #4]
 8003066:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	3360      	adds	r3, #96	@ 0x60
 800306c:	461a      	mov	r2, r3
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	430b      	orrs	r3, r1
 8003088:	431a      	orrs	r2, r3
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800308e:	bf00      	nop
 8003090:	371c      	adds	r7, #28
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800309a:	b480      	push	{r7}
 800309c:	b085      	sub	sp, #20
 800309e:	af00      	add	r7, sp, #0
 80030a0:	60f8      	str	r0, [r7, #12]
 80030a2:	60b9      	str	r1, [r7, #8]
 80030a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	f003 031f 	and.w	r3, r3, #31
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ba:	431a      	orrs	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	611a      	str	r2, [r3, #16]
}
 80030c0:	bf00      	nop
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b087      	sub	sp, #28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	3360      	adds	r3, #96	@ 0x60
 80030dc:	461a      	mov	r2, r3
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	431a      	orrs	r2, r3
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	601a      	str	r2, [r3, #0]
  }
}
 80030f6:	bf00      	nop
 80030f8:	371c      	adds	r7, #28
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003116:	2301      	movs	r3, #1
 8003118:	e000      	b.n	800311c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003128:	b480      	push	{r7}
 800312a:	b087      	sub	sp, #28
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	3330      	adds	r3, #48	@ 0x30
 8003138:	461a      	mov	r2, r3
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	0a1b      	lsrs	r3, r3, #8
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	f003 030c 	and.w	r3, r3, #12
 8003144:	4413      	add	r3, r2
 8003146:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	f003 031f 	and.w	r3, r3, #31
 8003152:	211f      	movs	r1, #31
 8003154:	fa01 f303 	lsl.w	r3, r1, r3
 8003158:	43db      	mvns	r3, r3
 800315a:	401a      	ands	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	0e9b      	lsrs	r3, r3, #26
 8003160:	f003 011f 	and.w	r1, r3, #31
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	f003 031f 	and.w	r3, r3, #31
 800316a:	fa01 f303 	lsl.w	r3, r1, r3
 800316e:	431a      	orrs	r2, r3
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003174:	bf00      	nop
 8003176:	371c      	adds	r7, #28
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f023 0203 	bic.w	r2, r3, #3
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	431a      	orrs	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	60da      	str	r2, [r3, #12]
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b083      	sub	sp, #12
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031b2:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80031ba:	2301      	movs	r3, #1
 80031bc:	e000      	b.n	80031c0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	3314      	adds	r3, #20
 80031dc:	461a      	mov	r2, r3
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	0e5b      	lsrs	r3, r3, #25
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	f003 0304 	and.w	r3, r3, #4
 80031e8:	4413      	add	r3, r2
 80031ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	0d1b      	lsrs	r3, r3, #20
 80031f4:	f003 031f 	and.w	r3, r3, #31
 80031f8:	2107      	movs	r1, #7
 80031fa:	fa01 f303 	lsl.w	r3, r1, r3
 80031fe:	43db      	mvns	r3, r3
 8003200:	401a      	ands	r2, r3
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	0d1b      	lsrs	r3, r3, #20
 8003206:	f003 031f 	and.w	r3, r3, #31
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	fa01 f303 	lsl.w	r3, r1, r3
 8003210:	431a      	orrs	r2, r3
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003216:	bf00      	nop
 8003218:	371c      	adds	r7, #28
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
	...

08003224 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800323c:	43db      	mvns	r3, r3
 800323e:	401a      	ands	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f003 0318 	and.w	r3, r3, #24
 8003246:	4908      	ldr	r1, [pc, #32]	@ (8003268 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003248:	40d9      	lsrs	r1, r3
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	400b      	ands	r3, r1
 800324e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003252:	431a      	orrs	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800325a:	bf00      	nop
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	000fffff 	.word	0x000fffff

0800326c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 031f 	and.w	r3, r3, #31
}
 800327c:	4618      	mov	r0, r3
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8003298:	4618      	mov	r0, r3
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	4b04      	ldr	r3, [pc, #16]	@ (80032c4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80032b2:	4013      	ands	r3, r2
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6093      	str	r3, [r2, #8]
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	5fffffc0 	.word	0x5fffffc0

080032c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032dc:	d101      	bne.n	80032e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80032de:	2301      	movs	r3, #1
 80032e0:	e000      	b.n	80032e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	4b05      	ldr	r3, [pc, #20]	@ (8003314 <LL_ADC_EnableInternalRegulator+0x24>)
 80032fe:	4013      	ands	r3, r2
 8003300:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	6fffffc0 	.word	0x6fffffc0

08003318 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003328:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800332c:	d101      	bne.n	8003332 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800332e:	2301      	movs	r3, #1
 8003330:	e000      	b.n	8003334 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	4b05      	ldr	r3, [pc, #20]	@ (8003364 <LL_ADC_Enable+0x24>)
 800334e:	4013      	ands	r3, r2
 8003350:	f043 0201 	orr.w	r2, r3, #1
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	7fffffc0 	.word	0x7fffffc0

08003368 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <LL_ADC_IsEnabled+0x18>
 800337c:	2301      	movs	r3, #1
 800337e:	e000      	b.n	8003382 <LL_ADC_IsEnabled+0x1a>
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
	...

08003390 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	4b05      	ldr	r3, [pc, #20]	@ (80033b4 <LL_ADC_REG_StartConversion+0x24>)
 800339e:	4013      	ands	r3, r2
 80033a0:	f043 0204 	orr.w	r2, r3, #4
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	7fffffc0 	.word	0x7fffffc0

080033b8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d101      	bne.n	80033d0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80033cc:	2301      	movs	r3, #1
 80033ce:	e000      	b.n	80033d2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80033de:	b480      	push	{r7}
 80033e0:	b083      	sub	sp, #12
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b08      	cmp	r3, #8
 80033f0:	d101      	bne.n	80033f6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80033f2:	2301      	movs	r3, #1
 80033f4:	e000      	b.n	80033f8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003404:	b590      	push	{r4, r7, lr}
 8003406:	b089      	sub	sp, #36	@ 0x24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800340c:	2300      	movs	r3, #0
 800340e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003410:	2300      	movs	r3, #0
 8003412:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e18f      	b.n	800373e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003428:	2b00      	cmp	r3, #0
 800342a:	d109      	bne.n	8003440 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f7fe f829 	bl	8001484 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff ff3f 	bl	80032c8 <LL_ADC_IsDeepPowerDownEnabled>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d004      	beq.n	800345a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff ff25 	bl	80032a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff ff5a 	bl	8003318 <LL_ADC_IsInternalRegulatorEnabled>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d114      	bne.n	8003494 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f7ff ff3e 	bl	80032f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003474:	4b87      	ldr	r3, [pc, #540]	@ (8003694 <HAL_ADC_Init+0x290>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	099b      	lsrs	r3, r3, #6
 800347a:	4a87      	ldr	r2, [pc, #540]	@ (8003698 <HAL_ADC_Init+0x294>)
 800347c:	fba2 2303 	umull	r2, r3, r2, r3
 8003480:	099b      	lsrs	r3, r3, #6
 8003482:	3301      	adds	r3, #1
 8003484:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003486:	e002      	b.n	800348e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	3b01      	subs	r3, #1
 800348c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1f9      	bne.n	8003488 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff ff3d 	bl	8003318 <LL_ADC_IsInternalRegulatorEnabled>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10d      	bne.n	80034c0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034a8:	f043 0210 	orr.w	r2, r3, #16
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b4:	f043 0201 	orr.w	r2, r3, #1
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff ff77 	bl	80033b8 <LL_ADC_REG_IsConversionOngoing>
 80034ca:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034d0:	f003 0310 	and.w	r3, r3, #16
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f040 8129 	bne.w	800372c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f040 8125 	bne.w	800372c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80034ea:	f043 0202 	orr.w	r2, r3, #2
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff ff36 	bl	8003368 <LL_ADC_IsEnabled>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d136      	bne.n	8003570 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a65      	ldr	r2, [pc, #404]	@ (800369c <HAL_ADC_Init+0x298>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d004      	beq.n	8003516 <HAL_ADC_Init+0x112>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a63      	ldr	r2, [pc, #396]	@ (80036a0 <HAL_ADC_Init+0x29c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d10e      	bne.n	8003534 <HAL_ADC_Init+0x130>
 8003516:	4861      	ldr	r0, [pc, #388]	@ (800369c <HAL_ADC_Init+0x298>)
 8003518:	f7ff ff26 	bl	8003368 <LL_ADC_IsEnabled>
 800351c:	4604      	mov	r4, r0
 800351e:	4860      	ldr	r0, [pc, #384]	@ (80036a0 <HAL_ADC_Init+0x29c>)
 8003520:	f7ff ff22 	bl	8003368 <LL_ADC_IsEnabled>
 8003524:	4603      	mov	r3, r0
 8003526:	4323      	orrs	r3, r4
 8003528:	2b00      	cmp	r3, #0
 800352a:	bf0c      	ite	eq
 800352c:	2301      	moveq	r3, #1
 800352e:	2300      	movne	r3, #0
 8003530:	b2db      	uxtb	r3, r3
 8003532:	e008      	b.n	8003546 <HAL_ADC_Init+0x142>
 8003534:	485b      	ldr	r0, [pc, #364]	@ (80036a4 <HAL_ADC_Init+0x2a0>)
 8003536:	f7ff ff17 	bl	8003368 <LL_ADC_IsEnabled>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	bf0c      	ite	eq
 8003540:	2301      	moveq	r3, #1
 8003542:	2300      	movne	r3, #0
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d012      	beq.n	8003570 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a53      	ldr	r2, [pc, #332]	@ (800369c <HAL_ADC_Init+0x298>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d004      	beq.n	800355e <HAL_ADC_Init+0x15a>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a51      	ldr	r2, [pc, #324]	@ (80036a0 <HAL_ADC_Init+0x29c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d101      	bne.n	8003562 <HAL_ADC_Init+0x15e>
 800355e:	4a52      	ldr	r2, [pc, #328]	@ (80036a8 <HAL_ADC_Init+0x2a4>)
 8003560:	e000      	b.n	8003564 <HAL_ADC_Init+0x160>
 8003562:	4a52      	ldr	r2, [pc, #328]	@ (80036ac <HAL_ADC_Init+0x2a8>)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	4619      	mov	r1, r3
 800356a:	4610      	mov	r0, r2
 800356c:	f7ff fd0e 	bl	8002f8c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003570:	f7ff fcea 	bl	8002f48 <HAL_GetREVID>
 8003574:	4603      	mov	r3, r0
 8003576:	f241 0203 	movw	r2, #4099	@ 0x1003
 800357a:	4293      	cmp	r3, r2
 800357c:	d914      	bls.n	80035a8 <HAL_ADC_Init+0x1a4>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	2b10      	cmp	r3, #16
 8003584:	d110      	bne.n	80035a8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	7d5b      	ldrb	r3, [r3, #21]
 800358a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003590:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003596:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	7f1b      	ldrb	r3, [r3, #28]
 800359c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800359e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80035a0:	f043 030c 	orr.w	r3, r3, #12
 80035a4:	61bb      	str	r3, [r7, #24]
 80035a6:	e00d      	b.n	80035c4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	7d5b      	ldrb	r3, [r3, #21]
 80035ac:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80035b2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80035b8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	7f1b      	ldrb	r3, [r3, #28]
 80035be:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80035c0:	4313      	orrs	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	7f1b      	ldrb	r3, [r3, #28]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d106      	bne.n	80035da <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	3b01      	subs	r3, #1
 80035d2:	045b      	lsls	r3, r3, #17
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d009      	beq.n	80035f6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e6:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ee:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68da      	ldr	r2, [r3, #12]
 80035fc:	4b2c      	ldr	r3, [pc, #176]	@ (80036b0 <HAL_ADC_Init+0x2ac>)
 80035fe:	4013      	ands	r3, r2
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6812      	ldr	r2, [r2, #0]
 8003604:	69b9      	ldr	r1, [r7, #24]
 8003606:	430b      	orrs	r3, r1
 8003608:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff fed2 	bl	80033b8 <LL_ADC_REG_IsConversionOngoing>
 8003614:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff fedf 	bl	80033de <LL_ADC_INJ_IsConversionOngoing>
 8003620:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d15f      	bne.n	80036e8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d15c      	bne.n	80036e8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	7d1b      	ldrb	r3, [r3, #20]
 8003632:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8003638:	4313      	orrs	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	4b1c      	ldr	r3, [pc, #112]	@ (80036b4 <HAL_ADC_Init+0x2b0>)
 8003644:	4013      	ands	r3, r2
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6812      	ldr	r2, [r2, #0]
 800364a:	69b9      	ldr	r1, [r7, #24]
 800364c:	430b      	orrs	r3, r1
 800364e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003656:	2b01      	cmp	r3, #1
 8003658:	d130      	bne.n	80036bc <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	691a      	ldr	r2, [r3, #16]
 8003666:	4b14      	ldr	r3, [pc, #80]	@ (80036b8 <HAL_ADC_Init+0x2b4>)
 8003668:	4013      	ands	r3, r2
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800366e:	3a01      	subs	r2, #1
 8003670:	0411      	lsls	r1, r2, #16
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003676:	4311      	orrs	r1, r2
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800367c:	4311      	orrs	r1, r2
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003682:	430a      	orrs	r2, r1
 8003684:	431a      	orrs	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 0201 	orr.w	r2, r2, #1
 800368e:	611a      	str	r2, [r3, #16]
 8003690:	e01c      	b.n	80036cc <HAL_ADC_Init+0x2c8>
 8003692:	bf00      	nop
 8003694:	24000000 	.word	0x24000000
 8003698:	053e2d63 	.word	0x053e2d63
 800369c:	40022000 	.word	0x40022000
 80036a0:	40022100 	.word	0x40022100
 80036a4:	58026000 	.word	0x58026000
 80036a8:	40022300 	.word	0x40022300
 80036ac:	58026300 	.word	0x58026300
 80036b0:	fff0c003 	.word	0xfff0c003
 80036b4:	ffffbffc 	.word	0xffffbffc
 80036b8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691a      	ldr	r2, [r3, #16]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0201 	bic.w	r2, r2, #1
 80036ca:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 ff64 	bl	80045b0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d10c      	bne.n	800370a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f6:	f023 010f 	bic.w	r1, r3, #15
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	1e5a      	subs	r2, r3, #1
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	631a      	str	r2, [r3, #48]	@ 0x30
 8003708:	e007      	b.n	800371a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 020f 	bic.w	r2, r2, #15
 8003718:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800371e:	f023 0303 	bic.w	r3, r3, #3
 8003722:	f043 0201 	orr.w	r2, r3, #1
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	655a      	str	r2, [r3, #84]	@ 0x54
 800372a:	e007      	b.n	800373c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003730:	f043 0210 	orr.w	r2, r3, #16
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800373c:	7ffb      	ldrb	r3, [r7, #31]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3724      	adds	r7, #36	@ 0x24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd90      	pop	{r4, r7, pc}
 8003746:	bf00      	nop

08003748 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a55      	ldr	r2, [pc, #340]	@ (80038b0 <HAL_ADC_Start_DMA+0x168>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d004      	beq.n	8003768 <HAL_ADC_Start_DMA+0x20>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a54      	ldr	r2, [pc, #336]	@ (80038b4 <HAL_ADC_Start_DMA+0x16c>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d101      	bne.n	800376c <HAL_ADC_Start_DMA+0x24>
 8003768:	4b53      	ldr	r3, [pc, #332]	@ (80038b8 <HAL_ADC_Start_DMA+0x170>)
 800376a:	e000      	b.n	800376e <HAL_ADC_Start_DMA+0x26>
 800376c:	4b53      	ldr	r3, [pc, #332]	@ (80038bc <HAL_ADC_Start_DMA+0x174>)
 800376e:	4618      	mov	r0, r3
 8003770:	f7ff fd7c 	bl	800326c <LL_ADC_GetMultimode>
 8003774:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4618      	mov	r0, r3
 800377c:	f7ff fe1c 	bl	80033b8 <LL_ADC_REG_IsConversionOngoing>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	f040 808c 	bne.w	80038a0 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800378e:	2b01      	cmp	r3, #1
 8003790:	d101      	bne.n	8003796 <HAL_ADC_Start_DMA+0x4e>
 8003792:	2302      	movs	r3, #2
 8003794:	e087      	b.n	80038a6 <HAL_ADC_Start_DMA+0x15e>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d005      	beq.n	80037b0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	2b05      	cmp	r3, #5
 80037a8:	d002      	beq.n	80037b0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	2b09      	cmp	r3, #9
 80037ae:	d170      	bne.n	8003892 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f000 fddf 	bl	8004374 <ADC_Enable>
 80037b6:	4603      	mov	r3, r0
 80037b8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80037ba:	7dfb      	ldrb	r3, [r7, #23]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d163      	bne.n	8003888 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037c4:	4b3e      	ldr	r3, [pc, #248]	@ (80038c0 <HAL_ADC_Start_DMA+0x178>)
 80037c6:	4013      	ands	r3, r2
 80037c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a37      	ldr	r2, [pc, #220]	@ (80038b4 <HAL_ADC_Start_DMA+0x16c>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d002      	beq.n	80037e0 <HAL_ADC_Start_DMA+0x98>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	e000      	b.n	80037e2 <HAL_ADC_Start_DMA+0x9a>
 80037e0:	4b33      	ldr	r3, [pc, #204]	@ (80038b0 <HAL_ADC_Start_DMA+0x168>)
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	6812      	ldr	r2, [r2, #0]
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d002      	beq.n	80037f0 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d105      	bne.n	80037fc <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037f4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003800:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d006      	beq.n	8003816 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800380c:	f023 0206 	bic.w	r2, r3, #6
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	659a      	str	r2, [r3, #88]	@ 0x58
 8003814:	e002      	b.n	800381c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003820:	4a28      	ldr	r2, [pc, #160]	@ (80038c4 <HAL_ADC_Start_DMA+0x17c>)
 8003822:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003828:	4a27      	ldr	r2, [pc, #156]	@ (80038c8 <HAL_ADC_Start_DMA+0x180>)
 800382a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003830:	4a26      	ldr	r2, [pc, #152]	@ (80038cc <HAL_ADC_Start_DMA+0x184>)
 8003832:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	221c      	movs	r2, #28
 800383a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0210 	orr.w	r2, r2, #16
 8003852:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800385c:	4619      	mov	r1, r3
 800385e:	4610      	mov	r0, r2
 8003860:	f7ff fc8e 	bl	8003180 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3340      	adds	r3, #64	@ 0x40
 800386e:	4619      	mov	r1, r3
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f001 fd5c 	bl	8005330 <HAL_DMA_Start_IT>
 8003878:	4603      	mov	r3, r0
 800387a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff fd85 	bl	8003390 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003886:	e00d      	b.n	80038a4 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8003890:	e008      	b.n	80038a4 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800389e:	e001      	b.n	80038a4 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80038a0:	2302      	movs	r3, #2
 80038a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80038a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3718      	adds	r7, #24
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	40022000 	.word	0x40022000
 80038b4:	40022100 	.word	0x40022100
 80038b8:	40022300 	.word	0x40022300
 80038bc:	58026300 	.word	0x58026300
 80038c0:	fffff0fe 	.word	0xfffff0fe
 80038c4:	08004489 	.word	0x08004489
 80038c8:	08004561 	.word	0x08004561
 80038cc:	0800457d 	.word	0x0800457d

080038d0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b08a      	sub	sp, #40	@ 0x28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80038d8:	2300      	movs	r3, #0
 80038da:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a87      	ldr	r2, [pc, #540]	@ (8003b10 <HAL_ADC_IRQHandler+0x240>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d004      	beq.n	8003900 <HAL_ADC_IRQHandler+0x30>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a86      	ldr	r2, [pc, #536]	@ (8003b14 <HAL_ADC_IRQHandler+0x244>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d101      	bne.n	8003904 <HAL_ADC_IRQHandler+0x34>
 8003900:	4b85      	ldr	r3, [pc, #532]	@ (8003b18 <HAL_ADC_IRQHandler+0x248>)
 8003902:	e000      	b.n	8003906 <HAL_ADC_IRQHandler+0x36>
 8003904:	4b85      	ldr	r3, [pc, #532]	@ (8003b1c <HAL_ADC_IRQHandler+0x24c>)
 8003906:	4618      	mov	r0, r3
 8003908:	f7ff fcb0 	bl	800326c <LL_ADC_GetMultimode>
 800390c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d017      	beq.n	8003948 <HAL_ADC_IRQHandler+0x78>
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d012      	beq.n	8003948 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003926:	f003 0310 	and.w	r3, r3, #16
 800392a:	2b00      	cmp	r3, #0
 800392c:	d105      	bne.n	800393a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003932:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 ff92 	bl	8004864 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2202      	movs	r2, #2
 8003946:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	f003 0304 	and.w	r3, r3, #4
 800394e:	2b00      	cmp	r3, #0
 8003950:	d004      	beq.n	800395c <HAL_ADC_IRQHandler+0x8c>
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10a      	bne.n	8003972 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 8083 	beq.w	8003a6e <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	2b00      	cmp	r3, #0
 8003970:	d07d      	beq.n	8003a6e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003976:	f003 0310 	and.w	r3, r3, #16
 800397a:	2b00      	cmp	r3, #0
 800397c:	d105      	bne.n	800398a <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003982:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f7ff fbb7 	bl	8003102 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d062      	beq.n	8003a60 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a5d      	ldr	r2, [pc, #372]	@ (8003b14 <HAL_ADC_IRQHandler+0x244>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d002      	beq.n	80039aa <HAL_ADC_IRQHandler+0xda>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	e000      	b.n	80039ac <HAL_ADC_IRQHandler+0xdc>
 80039aa:	4b59      	ldr	r3, [pc, #356]	@ (8003b10 <HAL_ADC_IRQHandler+0x240>)
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6812      	ldr	r2, [r2, #0]
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d008      	beq.n	80039c6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d005      	beq.n	80039c6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	2b05      	cmp	r3, #5
 80039be:	d002      	beq.n	80039c6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	2b09      	cmp	r3, #9
 80039c4:	d104      	bne.n	80039d0 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	623b      	str	r3, [r7, #32]
 80039ce:	e00c      	b.n	80039ea <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a4f      	ldr	r2, [pc, #316]	@ (8003b14 <HAL_ADC_IRQHandler+0x244>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d002      	beq.n	80039e0 <HAL_ADC_IRQHandler+0x110>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	e000      	b.n	80039e2 <HAL_ADC_IRQHandler+0x112>
 80039e0:	4b4b      	ldr	r3, [pc, #300]	@ (8003b10 <HAL_ADC_IRQHandler+0x240>)
 80039e2:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80039ea:	6a3b      	ldr	r3, [r7, #32]
 80039ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d135      	bne.n	8003a60 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0308 	and.w	r3, r3, #8
 80039fe:	2b08      	cmp	r3, #8
 8003a00:	d12e      	bne.n	8003a60 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff fcd6 	bl	80033b8 <LL_ADC_REG_IsConversionOngoing>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d11a      	bne.n	8003a48 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 020c 	bic.w	r2, r2, #12
 8003a20:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a26:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d112      	bne.n	8003a60 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a3e:	f043 0201 	orr.w	r2, r3, #1
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	655a      	str	r2, [r3, #84]	@ 0x54
 8003a46:	e00b      	b.n	8003a60 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a4c:	f043 0210 	orr.w	r2, r3, #16
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a58:	f043 0201 	orr.w	r2, r3, #1
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 f96f 	bl	8003d44 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	220c      	movs	r2, #12
 8003a6c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	f003 0320 	and.w	r3, r3, #32
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d004      	beq.n	8003a82 <HAL_ADC_IRQHandler+0x1b2>
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	f003 0320 	and.w	r3, r3, #32
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10b      	bne.n	8003a9a <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 80a0 	beq.w	8003bce <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 809a 	beq.w	8003bce <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a9e:	f003 0310 	and.w	r3, r3, #16
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d105      	bne.n	8003ab2 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aaa:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff fb75 	bl	80031a6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003abc:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7ff fb1d 	bl	8003102 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003ac8:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a11      	ldr	r2, [pc, #68]	@ (8003b14 <HAL_ADC_IRQHandler+0x244>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d002      	beq.n	8003ada <HAL_ADC_IRQHandler+0x20a>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	e000      	b.n	8003adc <HAL_ADC_IRQHandler+0x20c>
 8003ada:	4b0d      	ldr	r3, [pc, #52]	@ (8003b10 <HAL_ADC_IRQHandler+0x240>)
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	6812      	ldr	r2, [r2, #0]
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d008      	beq.n	8003af6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d005      	beq.n	8003af6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2b06      	cmp	r3, #6
 8003aee:	d002      	beq.n	8003af6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	2b07      	cmp	r3, #7
 8003af4:	d104      	bne.n	8003b00 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	623b      	str	r3, [r7, #32]
 8003afe:	e014      	b.n	8003b2a <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a03      	ldr	r2, [pc, #12]	@ (8003b14 <HAL_ADC_IRQHandler+0x244>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d00a      	beq.n	8003b20 <HAL_ADC_IRQHandler+0x250>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	e008      	b.n	8003b22 <HAL_ADC_IRQHandler+0x252>
 8003b10:	40022000 	.word	0x40022000
 8003b14:	40022100 	.word	0x40022100
 8003b18:	40022300 	.word	0x40022300
 8003b1c:	58026300 	.word	0x58026300
 8003b20:	4b84      	ldr	r3, [pc, #528]	@ (8003d34 <HAL_ADC_IRQHandler+0x464>)
 8003b22:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d047      	beq.n	8003bc0 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d007      	beq.n	8003b4a <HAL_ADC_IRQHandler+0x27a>
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d03f      	beq.n	8003bc0 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d13a      	bne.n	8003bc0 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b54:	2b40      	cmp	r3, #64	@ 0x40
 8003b56:	d133      	bne.n	8003bc0 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003b58:	6a3b      	ldr	r3, [r7, #32]
 8003b5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d12e      	bne.n	8003bc0 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7ff fc39 	bl	80033de <LL_ADC_INJ_IsConversionOngoing>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d11a      	bne.n	8003ba8 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003b80:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b86:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d112      	bne.n	8003bc0 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b9e:	f043 0201 	orr.w	r2, r3, #1
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	655a      	str	r2, [r3, #84]	@ 0x54
 8003ba6:	e00b      	b.n	8003bc0 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bac:	f043 0210 	orr.w	r2, r3, #16
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb8:	f043 0201 	orr.w	r2, r3, #1
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 fe27 	bl	8004814 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2260      	movs	r2, #96	@ 0x60
 8003bcc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d011      	beq.n	8003bfc <HAL_ADC_IRQHandler+0x32c>
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00c      	beq.n	8003bfc <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003be6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f8bc 	bl	8003d6c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2280      	movs	r2, #128	@ 0x80
 8003bfa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d012      	beq.n	8003c2c <HAL_ADC_IRQHandler+0x35c>
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00d      	beq.n	8003c2c <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c14:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 fe0d 	bl	800483c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c2a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d012      	beq.n	8003c5c <HAL_ADC_IRQHandler+0x38c>
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00d      	beq.n	8003c5c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c44:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 fdff 	bl	8004850 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c5a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	f003 0310 	and.w	r3, r3, #16
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d043      	beq.n	8003cee <HAL_ADC_IRQHandler+0x41e>
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	f003 0310 	and.w	r3, r3, #16
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d03e      	beq.n	8003cee <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d102      	bne.n	8003c7e <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c7c:	e021      	b.n	8003cc2 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d015      	beq.n	8003cb0 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a2a      	ldr	r2, [pc, #168]	@ (8003d34 <HAL_ADC_IRQHandler+0x464>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d004      	beq.n	8003c98 <HAL_ADC_IRQHandler+0x3c8>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a29      	ldr	r2, [pc, #164]	@ (8003d38 <HAL_ADC_IRQHandler+0x468>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d101      	bne.n	8003c9c <HAL_ADC_IRQHandler+0x3cc>
 8003c98:	4b28      	ldr	r3, [pc, #160]	@ (8003d3c <HAL_ADC_IRQHandler+0x46c>)
 8003c9a:	e000      	b.n	8003c9e <HAL_ADC_IRQHandler+0x3ce>
 8003c9c:	4b28      	ldr	r3, [pc, #160]	@ (8003d40 <HAL_ADC_IRQHandler+0x470>)
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7ff faf2 	bl	8003288 <LL_ADC_GetMultiDMATransfer>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00b      	beq.n	8003cc2 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003caa:	2301      	movs	r3, #1
 8003cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cae:	e008      	b.n	8003cc2 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f003 0303 	and.w	r3, r3, #3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d10e      	bne.n	8003ce6 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ccc:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cd8:	f043 0202 	orr.w	r2, r3, #2
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 f84d 	bl	8003d80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2210      	movs	r2, #16
 8003cec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d018      	beq.n	8003d2a <HAL_ADC_IRQHandler+0x45a>
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d013      	beq.n	8003d2a <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d06:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d12:	f043 0208 	orr.w	r2, r3, #8
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d22:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 fd7f 	bl	8004828 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003d2a:	bf00      	nop
 8003d2c:	3728      	adds	r7, #40	@ 0x28
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	40022000 	.word	0x40022000
 8003d38:	40022100 	.word	0x40022100
 8003d3c:	40022300 	.word	0x40022300
 8003d40:	58026300 	.word	0x58026300

08003d44 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003d94:	b590      	push	{r4, r7, lr}
 8003d96:	b08d      	sub	sp, #52	@ 0x34
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003da4:	2300      	movs	r3, #0
 8003da6:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	4a65      	ldr	r2, [pc, #404]	@ (8003f44 <HAL_ADC_ConfigChannel+0x1b0>)
 8003dae:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d101      	bne.n	8003dbe <HAL_ADC_ConfigChannel+0x2a>
 8003dba:	2302      	movs	r3, #2
 8003dbc:	e2c7      	b.n	800434e <HAL_ADC_ConfigChannel+0x5ba>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff faf4 	bl	80033b8 <LL_ADC_REG_IsConversionOngoing>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f040 82ac 	bne.w	8004330 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	db2c      	blt.n	8003e3a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d108      	bne.n	8003dfe <HAL_ADC_ConfigChannel+0x6a>
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	0e9b      	lsrs	r3, r3, #26
 8003df2:	f003 031f 	and.w	r3, r3, #31
 8003df6:	2201      	movs	r2, #1
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	e016      	b.n	8003e2c <HAL_ADC_ConfigChannel+0x98>
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	fa93 f3a3 	rbit	r3, r3
 8003e0a:	613b      	str	r3, [r7, #16]
  return result;
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8003e16:	2320      	movs	r3, #32
 8003e18:	e003      	b.n	8003e22 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	fab3 f383 	clz	r3, r3
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	f003 031f 	and.w	r3, r3, #31
 8003e26:	2201      	movs	r2, #1
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6812      	ldr	r2, [r2, #0]
 8003e30:	69d1      	ldr	r1, [r2, #28]
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6812      	ldr	r2, [r2, #0]
 8003e36:	430b      	orrs	r3, r1
 8003e38:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6818      	ldr	r0, [r3, #0]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	6859      	ldr	r1, [r3, #4]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	461a      	mov	r2, r3
 8003e48:	f7ff f96e 	bl	8003128 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff fab1 	bl	80033b8 <LL_ADC_REG_IsConversionOngoing>
 8003e56:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7ff fabe 	bl	80033de <LL_ADC_INJ_IsConversionOngoing>
 8003e62:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f040 80b8 	bne.w	8003fdc <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f040 80b4 	bne.w	8003fdc <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6818      	ldr	r0, [r3, #0]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	6819      	ldr	r1, [r3, #0]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	461a      	mov	r2, r3
 8003e82:	f7ff f9a3 	bl	80031cc <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003e86:	4b30      	ldr	r3, [pc, #192]	@ (8003f48 <HAL_ADC_ConfigChannel+0x1b4>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003e8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e92:	d10b      	bne.n	8003eac <HAL_ADC_ConfigChannel+0x118>
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	695a      	ldr	r2, [r3, #20]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	089b      	lsrs	r3, r3, #2
 8003ea0:	f003 0307 	and.w	r3, r3, #7
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eaa:	e01d      	b.n	8003ee8 <HAL_ADC_ConfigChannel+0x154>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f003 0310 	and.w	r3, r3, #16
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10b      	bne.n	8003ed2 <HAL_ADC_ConfigChannel+0x13e>
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	695a      	ldr	r2, [r3, #20]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	089b      	lsrs	r3, r3, #2
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	e00a      	b.n	8003ee8 <HAL_ADC_ConfigChannel+0x154>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	695a      	ldr	r2, [r3, #20]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	089b      	lsrs	r3, r3, #2
 8003ede:	f003 0304 	and.w	r3, r3, #4
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee8:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d02c      	beq.n	8003f4c <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6818      	ldr	r0, [r3, #0]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	6919      	ldr	r1, [r3, #16]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	f7ff f8ab 	bl	800305a <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6818      	ldr	r0, [r3, #0]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	6919      	ldr	r1, [r3, #16]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	7e5b      	ldrb	r3, [r3, #25]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d102      	bne.n	8003f1a <HAL_ADC_ConfigChannel+0x186>
 8003f14:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003f18:	e000      	b.n	8003f1c <HAL_ADC_ConfigChannel+0x188>
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	f7ff f8d5 	bl	80030cc <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6818      	ldr	r0, [r3, #0]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	6919      	ldr	r1, [r3, #16]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	7e1b      	ldrb	r3, [r3, #24]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d102      	bne.n	8003f38 <HAL_ADC_ConfigChannel+0x1a4>
 8003f32:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003f36:	e000      	b.n	8003f3a <HAL_ADC_ConfigChannel+0x1a6>
 8003f38:	2300      	movs	r3, #0
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	f7ff f8ad 	bl	800309a <LL_ADC_SetDataRightShift>
 8003f40:	e04c      	b.n	8003fdc <HAL_ADC_ConfigChannel+0x248>
 8003f42:	bf00      	nop
 8003f44:	47ff0000 	.word	0x47ff0000
 8003f48:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f52:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	069b      	lsls	r3, r3, #26
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d107      	bne.n	8003f70 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003f6e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f76:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	069b      	lsls	r3, r3, #26
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d107      	bne.n	8003f94 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003f92:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f9a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	069b      	lsls	r3, r3, #26
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d107      	bne.n	8003fb8 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003fb6:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fbe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	069b      	lsls	r3, r3, #26
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d107      	bne.n	8003fdc <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003fda:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7ff f9c1 	bl	8003368 <LL_ADC_IsEnabled>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f040 81aa 	bne.w	8004342 <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6818      	ldr	r0, [r3, #0]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	6819      	ldr	r1, [r3, #0]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	f7ff f912 	bl	8003224 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	4a87      	ldr	r2, [pc, #540]	@ (8004224 <HAL_ADC_ConfigChannel+0x490>)
 8004006:	4293      	cmp	r3, r2
 8004008:	f040 809a 	bne.w	8004140 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4984      	ldr	r1, [pc, #528]	@ (8004228 <HAL_ADC_ConfigChannel+0x494>)
 8004016:	428b      	cmp	r3, r1
 8004018:	d147      	bne.n	80040aa <HAL_ADC_ConfigChannel+0x316>
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4983      	ldr	r1, [pc, #524]	@ (800422c <HAL_ADC_ConfigChannel+0x498>)
 8004020:	428b      	cmp	r3, r1
 8004022:	d040      	beq.n	80040a6 <HAL_ADC_ConfigChannel+0x312>
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4981      	ldr	r1, [pc, #516]	@ (8004230 <HAL_ADC_ConfigChannel+0x49c>)
 800402a:	428b      	cmp	r3, r1
 800402c:	d039      	beq.n	80040a2 <HAL_ADC_ConfigChannel+0x30e>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4980      	ldr	r1, [pc, #512]	@ (8004234 <HAL_ADC_ConfigChannel+0x4a0>)
 8004034:	428b      	cmp	r3, r1
 8004036:	d032      	beq.n	800409e <HAL_ADC_ConfigChannel+0x30a>
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	497e      	ldr	r1, [pc, #504]	@ (8004238 <HAL_ADC_ConfigChannel+0x4a4>)
 800403e:	428b      	cmp	r3, r1
 8004040:	d02b      	beq.n	800409a <HAL_ADC_ConfigChannel+0x306>
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	497d      	ldr	r1, [pc, #500]	@ (800423c <HAL_ADC_ConfigChannel+0x4a8>)
 8004048:	428b      	cmp	r3, r1
 800404a:	d024      	beq.n	8004096 <HAL_ADC_ConfigChannel+0x302>
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	497b      	ldr	r1, [pc, #492]	@ (8004240 <HAL_ADC_ConfigChannel+0x4ac>)
 8004052:	428b      	cmp	r3, r1
 8004054:	d01d      	beq.n	8004092 <HAL_ADC_ConfigChannel+0x2fe>
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	497a      	ldr	r1, [pc, #488]	@ (8004244 <HAL_ADC_ConfigChannel+0x4b0>)
 800405c:	428b      	cmp	r3, r1
 800405e:	d016      	beq.n	800408e <HAL_ADC_ConfigChannel+0x2fa>
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4978      	ldr	r1, [pc, #480]	@ (8004248 <HAL_ADC_ConfigChannel+0x4b4>)
 8004066:	428b      	cmp	r3, r1
 8004068:	d00f      	beq.n	800408a <HAL_ADC_ConfigChannel+0x2f6>
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4977      	ldr	r1, [pc, #476]	@ (800424c <HAL_ADC_ConfigChannel+0x4b8>)
 8004070:	428b      	cmp	r3, r1
 8004072:	d008      	beq.n	8004086 <HAL_ADC_ConfigChannel+0x2f2>
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4975      	ldr	r1, [pc, #468]	@ (8004250 <HAL_ADC_ConfigChannel+0x4bc>)
 800407a:	428b      	cmp	r3, r1
 800407c:	d101      	bne.n	8004082 <HAL_ADC_ConfigChannel+0x2ee>
 800407e:	4b75      	ldr	r3, [pc, #468]	@ (8004254 <HAL_ADC_ConfigChannel+0x4c0>)
 8004080:	e05a      	b.n	8004138 <HAL_ADC_ConfigChannel+0x3a4>
 8004082:	2300      	movs	r3, #0
 8004084:	e058      	b.n	8004138 <HAL_ADC_ConfigChannel+0x3a4>
 8004086:	4b74      	ldr	r3, [pc, #464]	@ (8004258 <HAL_ADC_ConfigChannel+0x4c4>)
 8004088:	e056      	b.n	8004138 <HAL_ADC_ConfigChannel+0x3a4>
 800408a:	4b74      	ldr	r3, [pc, #464]	@ (800425c <HAL_ADC_ConfigChannel+0x4c8>)
 800408c:	e054      	b.n	8004138 <HAL_ADC_ConfigChannel+0x3a4>
 800408e:	4b6e      	ldr	r3, [pc, #440]	@ (8004248 <HAL_ADC_ConfigChannel+0x4b4>)
 8004090:	e052      	b.n	8004138 <HAL_ADC_ConfigChannel+0x3a4>
 8004092:	4b6c      	ldr	r3, [pc, #432]	@ (8004244 <HAL_ADC_ConfigChannel+0x4b0>)
 8004094:	e050      	b.n	8004138 <HAL_ADC_ConfigChannel+0x3a4>
 8004096:	4b72      	ldr	r3, [pc, #456]	@ (8004260 <HAL_ADC_ConfigChannel+0x4cc>)
 8004098:	e04e      	b.n	8004138 <HAL_ADC_ConfigChannel+0x3a4>
 800409a:	4b72      	ldr	r3, [pc, #456]	@ (8004264 <HAL_ADC_ConfigChannel+0x4d0>)
 800409c:	e04c      	b.n	8004138 <HAL_ADC_ConfigChannel+0x3a4>
 800409e:	4b72      	ldr	r3, [pc, #456]	@ (8004268 <HAL_ADC_ConfigChannel+0x4d4>)
 80040a0:	e04a      	b.n	8004138 <HAL_ADC_ConfigChannel+0x3a4>
 80040a2:	4b72      	ldr	r3, [pc, #456]	@ (800426c <HAL_ADC_ConfigChannel+0x4d8>)
 80040a4:	e048      	b.n	8004138 <HAL_ADC_ConfigChannel+0x3a4>
 80040a6:	2301      	movs	r3, #1
 80040a8:	e046      	b.n	8004138 <HAL_ADC_ConfigChannel+0x3a4>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4970      	ldr	r1, [pc, #448]	@ (8004270 <HAL_ADC_ConfigChannel+0x4dc>)
 80040b0:	428b      	cmp	r3, r1
 80040b2:	d140      	bne.n	8004136 <HAL_ADC_ConfigChannel+0x3a2>
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	495c      	ldr	r1, [pc, #368]	@ (800422c <HAL_ADC_ConfigChannel+0x498>)
 80040ba:	428b      	cmp	r3, r1
 80040bc:	d039      	beq.n	8004132 <HAL_ADC_ConfigChannel+0x39e>
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	495b      	ldr	r1, [pc, #364]	@ (8004230 <HAL_ADC_ConfigChannel+0x49c>)
 80040c4:	428b      	cmp	r3, r1
 80040c6:	d032      	beq.n	800412e <HAL_ADC_ConfigChannel+0x39a>
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4959      	ldr	r1, [pc, #356]	@ (8004234 <HAL_ADC_ConfigChannel+0x4a0>)
 80040ce:	428b      	cmp	r3, r1
 80040d0:	d02b      	beq.n	800412a <HAL_ADC_ConfigChannel+0x396>
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4958      	ldr	r1, [pc, #352]	@ (8004238 <HAL_ADC_ConfigChannel+0x4a4>)
 80040d8:	428b      	cmp	r3, r1
 80040da:	d024      	beq.n	8004126 <HAL_ADC_ConfigChannel+0x392>
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4956      	ldr	r1, [pc, #344]	@ (800423c <HAL_ADC_ConfigChannel+0x4a8>)
 80040e2:	428b      	cmp	r3, r1
 80040e4:	d01d      	beq.n	8004122 <HAL_ADC_ConfigChannel+0x38e>
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4955      	ldr	r1, [pc, #340]	@ (8004240 <HAL_ADC_ConfigChannel+0x4ac>)
 80040ec:	428b      	cmp	r3, r1
 80040ee:	d016      	beq.n	800411e <HAL_ADC_ConfigChannel+0x38a>
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4953      	ldr	r1, [pc, #332]	@ (8004244 <HAL_ADC_ConfigChannel+0x4b0>)
 80040f6:	428b      	cmp	r3, r1
 80040f8:	d00f      	beq.n	800411a <HAL_ADC_ConfigChannel+0x386>
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4952      	ldr	r1, [pc, #328]	@ (8004248 <HAL_ADC_ConfigChannel+0x4b4>)
 8004100:	428b      	cmp	r3, r1
 8004102:	d008      	beq.n	8004116 <HAL_ADC_ConfigChannel+0x382>
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4951      	ldr	r1, [pc, #324]	@ (8004250 <HAL_ADC_ConfigChannel+0x4bc>)
 800410a:	428b      	cmp	r3, r1
 800410c:	d101      	bne.n	8004112 <HAL_ADC_ConfigChannel+0x37e>
 800410e:	4b51      	ldr	r3, [pc, #324]	@ (8004254 <HAL_ADC_ConfigChannel+0x4c0>)
 8004110:	e012      	b.n	8004138 <HAL_ADC_ConfigChannel+0x3a4>
 8004112:	2300      	movs	r3, #0
 8004114:	e010      	b.n	8004138 <HAL_ADC_ConfigChannel+0x3a4>
 8004116:	4b51      	ldr	r3, [pc, #324]	@ (800425c <HAL_ADC_ConfigChannel+0x4c8>)
 8004118:	e00e      	b.n	8004138 <HAL_ADC_ConfigChannel+0x3a4>
 800411a:	4b4b      	ldr	r3, [pc, #300]	@ (8004248 <HAL_ADC_ConfigChannel+0x4b4>)
 800411c:	e00c      	b.n	8004138 <HAL_ADC_ConfigChannel+0x3a4>
 800411e:	4b49      	ldr	r3, [pc, #292]	@ (8004244 <HAL_ADC_ConfigChannel+0x4b0>)
 8004120:	e00a      	b.n	8004138 <HAL_ADC_ConfigChannel+0x3a4>
 8004122:	4b4f      	ldr	r3, [pc, #316]	@ (8004260 <HAL_ADC_ConfigChannel+0x4cc>)
 8004124:	e008      	b.n	8004138 <HAL_ADC_ConfigChannel+0x3a4>
 8004126:	4b4f      	ldr	r3, [pc, #316]	@ (8004264 <HAL_ADC_ConfigChannel+0x4d0>)
 8004128:	e006      	b.n	8004138 <HAL_ADC_ConfigChannel+0x3a4>
 800412a:	4b4f      	ldr	r3, [pc, #316]	@ (8004268 <HAL_ADC_ConfigChannel+0x4d4>)
 800412c:	e004      	b.n	8004138 <HAL_ADC_ConfigChannel+0x3a4>
 800412e:	4b4f      	ldr	r3, [pc, #316]	@ (800426c <HAL_ADC_ConfigChannel+0x4d8>)
 8004130:	e002      	b.n	8004138 <HAL_ADC_ConfigChannel+0x3a4>
 8004132:	2301      	movs	r3, #1
 8004134:	e000      	b.n	8004138 <HAL_ADC_ConfigChannel+0x3a4>
 8004136:	2300      	movs	r3, #0
 8004138:	4619      	mov	r1, r3
 800413a:	4610      	mov	r0, r2
 800413c:	f7fe ff5a 	bl	8002ff4 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	f280 80fc 	bge.w	8004342 <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a36      	ldr	r2, [pc, #216]	@ (8004228 <HAL_ADC_ConfigChannel+0x494>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d004      	beq.n	800415e <HAL_ADC_ConfigChannel+0x3ca>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a45      	ldr	r2, [pc, #276]	@ (8004270 <HAL_ADC_ConfigChannel+0x4dc>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d101      	bne.n	8004162 <HAL_ADC_ConfigChannel+0x3ce>
 800415e:	4b45      	ldr	r3, [pc, #276]	@ (8004274 <HAL_ADC_ConfigChannel+0x4e0>)
 8004160:	e000      	b.n	8004164 <HAL_ADC_ConfigChannel+0x3d0>
 8004162:	4b45      	ldr	r3, [pc, #276]	@ (8004278 <HAL_ADC_ConfigChannel+0x4e4>)
 8004164:	4618      	mov	r0, r3
 8004166:	f7fe ff37 	bl	8002fd8 <LL_ADC_GetCommonPathInternalCh>
 800416a:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a2d      	ldr	r2, [pc, #180]	@ (8004228 <HAL_ADC_ConfigChannel+0x494>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d004      	beq.n	8004180 <HAL_ADC_ConfigChannel+0x3ec>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a3d      	ldr	r2, [pc, #244]	@ (8004270 <HAL_ADC_ConfigChannel+0x4dc>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d10e      	bne.n	800419e <HAL_ADC_ConfigChannel+0x40a>
 8004180:	4829      	ldr	r0, [pc, #164]	@ (8004228 <HAL_ADC_ConfigChannel+0x494>)
 8004182:	f7ff f8f1 	bl	8003368 <LL_ADC_IsEnabled>
 8004186:	4604      	mov	r4, r0
 8004188:	4839      	ldr	r0, [pc, #228]	@ (8004270 <HAL_ADC_ConfigChannel+0x4dc>)
 800418a:	f7ff f8ed 	bl	8003368 <LL_ADC_IsEnabled>
 800418e:	4603      	mov	r3, r0
 8004190:	4323      	orrs	r3, r4
 8004192:	2b00      	cmp	r3, #0
 8004194:	bf0c      	ite	eq
 8004196:	2301      	moveq	r3, #1
 8004198:	2300      	movne	r3, #0
 800419a:	b2db      	uxtb	r3, r3
 800419c:	e008      	b.n	80041b0 <HAL_ADC_ConfigChannel+0x41c>
 800419e:	4837      	ldr	r0, [pc, #220]	@ (800427c <HAL_ADC_ConfigChannel+0x4e8>)
 80041a0:	f7ff f8e2 	bl	8003368 <LL_ADC_IsEnabled>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	bf0c      	ite	eq
 80041aa:	2301      	moveq	r3, #1
 80041ac:	2300      	movne	r3, #0
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 80b3 	beq.w	800431c <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a31      	ldr	r2, [pc, #196]	@ (8004280 <HAL_ADC_ConfigChannel+0x4ec>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d165      	bne.n	800428c <HAL_ADC_ConfigChannel+0x4f8>
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d160      	bne.n	800428c <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a2b      	ldr	r2, [pc, #172]	@ (800427c <HAL_ADC_ConfigChannel+0x4e8>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	f040 80b6 	bne.w	8004342 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a13      	ldr	r2, [pc, #76]	@ (8004228 <HAL_ADC_ConfigChannel+0x494>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d004      	beq.n	80041ea <HAL_ADC_ConfigChannel+0x456>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a22      	ldr	r2, [pc, #136]	@ (8004270 <HAL_ADC_ConfigChannel+0x4dc>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d101      	bne.n	80041ee <HAL_ADC_ConfigChannel+0x45a>
 80041ea:	4a22      	ldr	r2, [pc, #136]	@ (8004274 <HAL_ADC_ConfigChannel+0x4e0>)
 80041ec:	e000      	b.n	80041f0 <HAL_ADC_ConfigChannel+0x45c>
 80041ee:	4a22      	ldr	r2, [pc, #136]	@ (8004278 <HAL_ADC_ConfigChannel+0x4e4>)
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80041f6:	4619      	mov	r1, r3
 80041f8:	4610      	mov	r0, r2
 80041fa:	f7fe feda 	bl	8002fb2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041fe:	4b21      	ldr	r3, [pc, #132]	@ (8004284 <HAL_ADC_ConfigChannel+0x4f0>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	099b      	lsrs	r3, r3, #6
 8004204:	4a20      	ldr	r2, [pc, #128]	@ (8004288 <HAL_ADC_ConfigChannel+0x4f4>)
 8004206:	fba2 2303 	umull	r2, r3, r2, r3
 800420a:	099b      	lsrs	r3, r3, #6
 800420c:	3301      	adds	r3, #1
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8004212:	e002      	b.n	800421a <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	3b01      	subs	r3, #1
 8004218:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1f9      	bne.n	8004214 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004220:	e08f      	b.n	8004342 <HAL_ADC_ConfigChannel+0x5ae>
 8004222:	bf00      	nop
 8004224:	47ff0000 	.word	0x47ff0000
 8004228:	40022000 	.word	0x40022000
 800422c:	04300002 	.word	0x04300002
 8004230:	08600004 	.word	0x08600004
 8004234:	0c900008 	.word	0x0c900008
 8004238:	10c00010 	.word	0x10c00010
 800423c:	14f00020 	.word	0x14f00020
 8004240:	2a000400 	.word	0x2a000400
 8004244:	2e300800 	.word	0x2e300800
 8004248:	32601000 	.word	0x32601000
 800424c:	43210000 	.word	0x43210000
 8004250:	4b840000 	.word	0x4b840000
 8004254:	4fb80000 	.word	0x4fb80000
 8004258:	47520000 	.word	0x47520000
 800425c:	36902000 	.word	0x36902000
 8004260:	25b00200 	.word	0x25b00200
 8004264:	21800100 	.word	0x21800100
 8004268:	1d500080 	.word	0x1d500080
 800426c:	19200040 	.word	0x19200040
 8004270:	40022100 	.word	0x40022100
 8004274:	40022300 	.word	0x40022300
 8004278:	58026300 	.word	0x58026300
 800427c:	58026000 	.word	0x58026000
 8004280:	cb840000 	.word	0xcb840000
 8004284:	24000000 	.word	0x24000000
 8004288:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a31      	ldr	r2, [pc, #196]	@ (8004358 <HAL_ADC_ConfigChannel+0x5c4>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d11e      	bne.n	80042d4 <HAL_ADC_ConfigChannel+0x540>
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d119      	bne.n	80042d4 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a2d      	ldr	r2, [pc, #180]	@ (800435c <HAL_ADC_ConfigChannel+0x5c8>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d14b      	bne.n	8004342 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a2c      	ldr	r2, [pc, #176]	@ (8004360 <HAL_ADC_ConfigChannel+0x5cc>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d004      	beq.n	80042be <HAL_ADC_ConfigChannel+0x52a>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a2a      	ldr	r2, [pc, #168]	@ (8004364 <HAL_ADC_ConfigChannel+0x5d0>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d101      	bne.n	80042c2 <HAL_ADC_ConfigChannel+0x52e>
 80042be:	4a2a      	ldr	r2, [pc, #168]	@ (8004368 <HAL_ADC_ConfigChannel+0x5d4>)
 80042c0:	e000      	b.n	80042c4 <HAL_ADC_ConfigChannel+0x530>
 80042c2:	4a2a      	ldr	r2, [pc, #168]	@ (800436c <HAL_ADC_ConfigChannel+0x5d8>)
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042ca:	4619      	mov	r1, r3
 80042cc:	4610      	mov	r0, r2
 80042ce:	f7fe fe70 	bl	8002fb2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042d2:	e036      	b.n	8004342 <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a25      	ldr	r2, [pc, #148]	@ (8004370 <HAL_ADC_ConfigChannel+0x5dc>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d131      	bne.n	8004342 <HAL_ADC_ConfigChannel+0x5ae>
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d12c      	bne.n	8004342 <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a1b      	ldr	r2, [pc, #108]	@ (800435c <HAL_ADC_ConfigChannel+0x5c8>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d127      	bne.n	8004342 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a1a      	ldr	r2, [pc, #104]	@ (8004360 <HAL_ADC_ConfigChannel+0x5cc>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d004      	beq.n	8004306 <HAL_ADC_ConfigChannel+0x572>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a18      	ldr	r2, [pc, #96]	@ (8004364 <HAL_ADC_ConfigChannel+0x5d0>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d101      	bne.n	800430a <HAL_ADC_ConfigChannel+0x576>
 8004306:	4a18      	ldr	r2, [pc, #96]	@ (8004368 <HAL_ADC_ConfigChannel+0x5d4>)
 8004308:	e000      	b.n	800430c <HAL_ADC_ConfigChannel+0x578>
 800430a:	4a18      	ldr	r2, [pc, #96]	@ (800436c <HAL_ADC_ConfigChannel+0x5d8>)
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004312:	4619      	mov	r1, r3
 8004314:	4610      	mov	r0, r2
 8004316:	f7fe fe4c 	bl	8002fb2 <LL_ADC_SetCommonPathInternalCh>
 800431a:	e012      	b.n	8004342 <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004320:	f043 0220 	orr.w	r2, r3, #32
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800432e:	e008      	b.n	8004342 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004334:	f043 0220 	orr.w	r2, r3, #32
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800434a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800434e:	4618      	mov	r0, r3
 8004350:	3734      	adds	r7, #52	@ 0x34
 8004352:	46bd      	mov	sp, r7
 8004354:	bd90      	pop	{r4, r7, pc}
 8004356:	bf00      	nop
 8004358:	c7520000 	.word	0xc7520000
 800435c:	58026000 	.word	0x58026000
 8004360:	40022000 	.word	0x40022000
 8004364:	40022100 	.word	0x40022100
 8004368:	40022300 	.word	0x40022300
 800436c:	58026300 	.word	0x58026300
 8004370:	cfb80000 	.word	0xcfb80000

08004374 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4618      	mov	r0, r3
 8004382:	f7fe fff1 	bl	8003368 <LL_ADC_IsEnabled>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d16e      	bne.n	800446a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689a      	ldr	r2, [r3, #8]
 8004392:	4b38      	ldr	r3, [pc, #224]	@ (8004474 <ADC_Enable+0x100>)
 8004394:	4013      	ands	r3, r2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00d      	beq.n	80043b6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800439e:	f043 0210 	orr.w	r2, r3, #16
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043aa:	f043 0201 	orr.w	r2, r3, #1
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e05a      	b.n	800446c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fe ffc0 	bl	8003340 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80043c0:	f7fe fdb6 	bl	8002f30 <HAL_GetTick>
 80043c4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a2b      	ldr	r2, [pc, #172]	@ (8004478 <ADC_Enable+0x104>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d004      	beq.n	80043da <ADC_Enable+0x66>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a29      	ldr	r2, [pc, #164]	@ (800447c <ADC_Enable+0x108>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d101      	bne.n	80043de <ADC_Enable+0x6a>
 80043da:	4b29      	ldr	r3, [pc, #164]	@ (8004480 <ADC_Enable+0x10c>)
 80043dc:	e000      	b.n	80043e0 <ADC_Enable+0x6c>
 80043de:	4b29      	ldr	r3, [pc, #164]	@ (8004484 <ADC_Enable+0x110>)
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7fe ff43 	bl	800326c <LL_ADC_GetMultimode>
 80043e6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a23      	ldr	r2, [pc, #140]	@ (800447c <ADC_Enable+0x108>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d002      	beq.n	80043f8 <ADC_Enable+0x84>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	e000      	b.n	80043fa <ADC_Enable+0x86>
 80043f8:	4b1f      	ldr	r3, [pc, #124]	@ (8004478 <ADC_Enable+0x104>)
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6812      	ldr	r2, [r2, #0]
 80043fe:	4293      	cmp	r3, r2
 8004400:	d02c      	beq.n	800445c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d130      	bne.n	800446a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004408:	e028      	b.n	800445c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4618      	mov	r0, r3
 8004410:	f7fe ffaa 	bl	8003368 <LL_ADC_IsEnabled>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d104      	bne.n	8004424 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f7fe ff8e 	bl	8003340 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004424:	f7fe fd84 	bl	8002f30 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d914      	bls.n	800445c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b01      	cmp	r3, #1
 800443e:	d00d      	beq.n	800445c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004444:	f043 0210 	orr.w	r2, r3, #16
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004450:	f043 0201 	orr.w	r2, r3, #1
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e007      	b.n	800446c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b01      	cmp	r3, #1
 8004468:	d1cf      	bne.n	800440a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	8000003f 	.word	0x8000003f
 8004478:	40022000 	.word	0x40022000
 800447c:	40022100 	.word	0x40022100
 8004480:	40022300 	.word	0x40022300
 8004484:	58026300 	.word	0x58026300

08004488 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004494:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800449a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d14b      	bne.n	800453a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0308 	and.w	r3, r3, #8
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d021      	beq.n	8004500 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7fe fe1e 	bl	8003102 <LL_ADC_REG_IsTriggerSourceSWStart>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d032      	beq.n	8004532 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d12b      	bne.n	8004532 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044de:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d11f      	bne.n	8004532 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044f6:	f043 0201 	orr.w	r2, r3, #1
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	655a      	str	r2, [r3, #84]	@ 0x54
 80044fe:	e018      	b.n	8004532 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d111      	bne.n	8004532 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004512:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800451e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d105      	bne.n	8004532 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800452a:	f043 0201 	orr.w	r2, r3, #1
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f7ff fc06 	bl	8003d44 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004538:	e00e      	b.n	8004558 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800453e:	f003 0310 	and.w	r3, r3, #16
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f7ff fc1a 	bl	8003d80 <HAL_ADC_ErrorCallback>
}
 800454c:	e004      	b.n	8004558 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004552:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	4798      	blx	r3
}
 8004558:	bf00      	nop
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800456c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f7ff fbf2 	bl	8003d58 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004574:	bf00      	nop
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004588:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800458e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800459a:	f043 0204 	orr.w	r2, r3, #4
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f7ff fbec 	bl	8003d80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045a8:	bf00      	nop
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a7a      	ldr	r2, [pc, #488]	@ (80047a8 <ADC_ConfigureBoostMode+0x1f8>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d004      	beq.n	80045cc <ADC_ConfigureBoostMode+0x1c>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a79      	ldr	r2, [pc, #484]	@ (80047ac <ADC_ConfigureBoostMode+0x1fc>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d109      	bne.n	80045e0 <ADC_ConfigureBoostMode+0x30>
 80045cc:	4b78      	ldr	r3, [pc, #480]	@ (80047b0 <ADC_ConfigureBoostMode+0x200>)
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	bf14      	ite	ne
 80045d8:	2301      	movne	r3, #1
 80045da:	2300      	moveq	r3, #0
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	e008      	b.n	80045f2 <ADC_ConfigureBoostMode+0x42>
 80045e0:	4b74      	ldr	r3, [pc, #464]	@ (80047b4 <ADC_ConfigureBoostMode+0x204>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	bf14      	ite	ne
 80045ec:	2301      	movne	r3, #1
 80045ee:	2300      	moveq	r3, #0
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d01c      	beq.n	8004630 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80045f6:	f004 fbe1 	bl	8008dbc <HAL_RCC_GetHCLKFreq>
 80045fa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004604:	d010      	beq.n	8004628 <ADC_ConfigureBoostMode+0x78>
 8004606:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800460a:	d873      	bhi.n	80046f4 <ADC_ConfigureBoostMode+0x144>
 800460c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004610:	d002      	beq.n	8004618 <ADC_ConfigureBoostMode+0x68>
 8004612:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004616:	d16d      	bne.n	80046f4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	0c1b      	lsrs	r3, r3, #16
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	fbb2 f3f3 	udiv	r3, r2, r3
 8004624:	60fb      	str	r3, [r7, #12]
        break;
 8004626:	e068      	b.n	80046fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	089b      	lsrs	r3, r3, #2
 800462c:	60fb      	str	r3, [r7, #12]
        break;
 800462e:	e064      	b.n	80046fa <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004630:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004634:	f04f 0100 	mov.w	r1, #0
 8004638:	f005 fe26 	bl	800a288 <HAL_RCCEx_GetPeriphCLKFreq>
 800463c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004646:	d051      	beq.n	80046ec <ADC_ConfigureBoostMode+0x13c>
 8004648:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800464c:	d854      	bhi.n	80046f8 <ADC_ConfigureBoostMode+0x148>
 800464e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004652:	d047      	beq.n	80046e4 <ADC_ConfigureBoostMode+0x134>
 8004654:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004658:	d84e      	bhi.n	80046f8 <ADC_ConfigureBoostMode+0x148>
 800465a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800465e:	d03d      	beq.n	80046dc <ADC_ConfigureBoostMode+0x12c>
 8004660:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004664:	d848      	bhi.n	80046f8 <ADC_ConfigureBoostMode+0x148>
 8004666:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800466a:	d033      	beq.n	80046d4 <ADC_ConfigureBoostMode+0x124>
 800466c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004670:	d842      	bhi.n	80046f8 <ADC_ConfigureBoostMode+0x148>
 8004672:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004676:	d029      	beq.n	80046cc <ADC_ConfigureBoostMode+0x11c>
 8004678:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800467c:	d83c      	bhi.n	80046f8 <ADC_ConfigureBoostMode+0x148>
 800467e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004682:	d01a      	beq.n	80046ba <ADC_ConfigureBoostMode+0x10a>
 8004684:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004688:	d836      	bhi.n	80046f8 <ADC_ConfigureBoostMode+0x148>
 800468a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800468e:	d014      	beq.n	80046ba <ADC_ConfigureBoostMode+0x10a>
 8004690:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004694:	d830      	bhi.n	80046f8 <ADC_ConfigureBoostMode+0x148>
 8004696:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800469a:	d00e      	beq.n	80046ba <ADC_ConfigureBoostMode+0x10a>
 800469c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046a0:	d82a      	bhi.n	80046f8 <ADC_ConfigureBoostMode+0x148>
 80046a2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80046a6:	d008      	beq.n	80046ba <ADC_ConfigureBoostMode+0x10a>
 80046a8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80046ac:	d824      	bhi.n	80046f8 <ADC_ConfigureBoostMode+0x148>
 80046ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80046b2:	d002      	beq.n	80046ba <ADC_ConfigureBoostMode+0x10a>
 80046b4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80046b8:	d11e      	bne.n	80046f8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	0c9b      	lsrs	r3, r3, #18
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c8:	60fb      	str	r3, [r7, #12]
        break;
 80046ca:	e016      	b.n	80046fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	091b      	lsrs	r3, r3, #4
 80046d0:	60fb      	str	r3, [r7, #12]
        break;
 80046d2:	e012      	b.n	80046fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	095b      	lsrs	r3, r3, #5
 80046d8:	60fb      	str	r3, [r7, #12]
        break;
 80046da:	e00e      	b.n	80046fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	099b      	lsrs	r3, r3, #6
 80046e0:	60fb      	str	r3, [r7, #12]
        break;
 80046e2:	e00a      	b.n	80046fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	09db      	lsrs	r3, r3, #7
 80046e8:	60fb      	str	r3, [r7, #12]
        break;
 80046ea:	e006      	b.n	80046fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	0a1b      	lsrs	r3, r3, #8
 80046f0:	60fb      	str	r3, [r7, #12]
        break;
 80046f2:	e002      	b.n	80046fa <ADC_ConfigureBoostMode+0x14a>
        break;
 80046f4:	bf00      	nop
 80046f6:	e000      	b.n	80046fa <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80046f8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80046fa:	f7fe fc25 	bl	8002f48 <HAL_GetREVID>
 80046fe:	4603      	mov	r3, r0
 8004700:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004704:	4293      	cmp	r3, r2
 8004706:	d815      	bhi.n	8004734 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4a2b      	ldr	r2, [pc, #172]	@ (80047b8 <ADC_ConfigureBoostMode+0x208>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d908      	bls.n	8004722 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689a      	ldr	r2, [r3, #8]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800471e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004720:	e03e      	b.n	80047a0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	689a      	ldr	r2, [r3, #8]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004730:	609a      	str	r2, [r3, #8]
}
 8004732:	e035      	b.n	80047a0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	085b      	lsrs	r3, r3, #1
 8004738:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	4a1f      	ldr	r2, [pc, #124]	@ (80047bc <ADC_ConfigureBoostMode+0x20c>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d808      	bhi.n	8004754 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689a      	ldr	r2, [r3, #8]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004750:	609a      	str	r2, [r3, #8]
}
 8004752:	e025      	b.n	80047a0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4a1a      	ldr	r2, [pc, #104]	@ (80047c0 <ADC_ConfigureBoostMode+0x210>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d80a      	bhi.n	8004772 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800476e:	609a      	str	r2, [r3, #8]
}
 8004770:	e016      	b.n	80047a0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4a13      	ldr	r2, [pc, #76]	@ (80047c4 <ADC_ConfigureBoostMode+0x214>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d80a      	bhi.n	8004790 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800478c:	609a      	str	r2, [r3, #8]
}
 800478e:	e007      	b.n	80047a0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689a      	ldr	r2, [r3, #8]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800479e:	609a      	str	r2, [r3, #8]
}
 80047a0:	bf00      	nop
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	40022000 	.word	0x40022000
 80047ac:	40022100 	.word	0x40022100
 80047b0:	40022300 	.word	0x40022300
 80047b4:	58026300 	.word	0x58026300
 80047b8:	01312d00 	.word	0x01312d00
 80047bc:	005f5e10 	.word	0x005f5e10
 80047c0:	00bebc20 	.word	0x00bebc20
 80047c4:	017d7840 	.word	0x017d7840

080047c8 <LL_ADC_IsEnabled>:
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d101      	bne.n	80047e0 <LL_ADC_IsEnabled+0x18>
 80047dc:	2301      	movs	r3, #1
 80047de:	e000      	b.n	80047e2 <LL_ADC_IsEnabled+0x1a>
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <LL_ADC_REG_IsConversionOngoing>:
{
 80047ee:	b480      	push	{r7}
 80047f0:	b083      	sub	sp, #12
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f003 0304 	and.w	r3, r3, #4
 80047fe:	2b04      	cmp	r3, #4
 8004800:	d101      	bne.n	8004806 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004802:	2301      	movs	r3, #1
 8004804:	e000      	b.n	8004808 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004878:	b590      	push	{r4, r7, lr}
 800487a:	b09f      	sub	sp, #124	@ 0x7c
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004882:	2300      	movs	r3, #0
 8004884:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800488e:	2b01      	cmp	r3, #1
 8004890:	d101      	bne.n	8004896 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004892:	2302      	movs	r3, #2
 8004894:	e0be      	b.n	8004a14 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800489e:	2300      	movs	r3, #0
 80048a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80048a2:	2300      	movs	r3, #0
 80048a4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a5c      	ldr	r2, [pc, #368]	@ (8004a1c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d102      	bne.n	80048b6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80048b0:	4b5b      	ldr	r3, [pc, #364]	@ (8004a20 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80048b2:	60bb      	str	r3, [r7, #8]
 80048b4:	e001      	b.n	80048ba <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80048b6:	2300      	movs	r3, #0
 80048b8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10b      	bne.n	80048d8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048c4:	f043 0220 	orr.w	r2, r3, #32
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e09d      	b.n	8004a14 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff ff87 	bl	80047ee <LL_ADC_REG_IsConversionOngoing>
 80048e0:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7ff ff81 	bl	80047ee <LL_ADC_REG_IsConversionOngoing>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d17f      	bne.n	80049f2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80048f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d17c      	bne.n	80049f2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a47      	ldr	r2, [pc, #284]	@ (8004a1c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d004      	beq.n	800490c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a46      	ldr	r2, [pc, #280]	@ (8004a20 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d101      	bne.n	8004910 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800490c:	4b45      	ldr	r3, [pc, #276]	@ (8004a24 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800490e:	e000      	b.n	8004912 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004910:	4b45      	ldr	r3, [pc, #276]	@ (8004a28 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004912:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d039      	beq.n	8004990 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800491c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	431a      	orrs	r2, r3
 800492a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800492c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a3a      	ldr	r2, [pc, #232]	@ (8004a1c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d004      	beq.n	8004942 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a38      	ldr	r2, [pc, #224]	@ (8004a20 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d10e      	bne.n	8004960 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004942:	4836      	ldr	r0, [pc, #216]	@ (8004a1c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004944:	f7ff ff40 	bl	80047c8 <LL_ADC_IsEnabled>
 8004948:	4604      	mov	r4, r0
 800494a:	4835      	ldr	r0, [pc, #212]	@ (8004a20 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800494c:	f7ff ff3c 	bl	80047c8 <LL_ADC_IsEnabled>
 8004950:	4603      	mov	r3, r0
 8004952:	4323      	orrs	r3, r4
 8004954:	2b00      	cmp	r3, #0
 8004956:	bf0c      	ite	eq
 8004958:	2301      	moveq	r3, #1
 800495a:	2300      	movne	r3, #0
 800495c:	b2db      	uxtb	r3, r3
 800495e:	e008      	b.n	8004972 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004960:	4832      	ldr	r0, [pc, #200]	@ (8004a2c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004962:	f7ff ff31 	bl	80047c8 <LL_ADC_IsEnabled>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	bf0c      	ite	eq
 800496c:	2301      	moveq	r3, #1
 800496e:	2300      	movne	r3, #0
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d047      	beq.n	8004a06 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004976:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004978:	689a      	ldr	r2, [r3, #8]
 800497a:	4b2d      	ldr	r3, [pc, #180]	@ (8004a30 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800497c:	4013      	ands	r3, r2
 800497e:	683a      	ldr	r2, [r7, #0]
 8004980:	6811      	ldr	r1, [r2, #0]
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	6892      	ldr	r2, [r2, #8]
 8004986:	430a      	orrs	r2, r1
 8004988:	431a      	orrs	r2, r3
 800498a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800498c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800498e:	e03a      	b.n	8004a06 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004990:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004998:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800499a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a1e      	ldr	r2, [pc, #120]	@ (8004a1c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d004      	beq.n	80049b0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a1d      	ldr	r2, [pc, #116]	@ (8004a20 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d10e      	bne.n	80049ce <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80049b0:	481a      	ldr	r0, [pc, #104]	@ (8004a1c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80049b2:	f7ff ff09 	bl	80047c8 <LL_ADC_IsEnabled>
 80049b6:	4604      	mov	r4, r0
 80049b8:	4819      	ldr	r0, [pc, #100]	@ (8004a20 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80049ba:	f7ff ff05 	bl	80047c8 <LL_ADC_IsEnabled>
 80049be:	4603      	mov	r3, r0
 80049c0:	4323      	orrs	r3, r4
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	bf0c      	ite	eq
 80049c6:	2301      	moveq	r3, #1
 80049c8:	2300      	movne	r3, #0
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	e008      	b.n	80049e0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80049ce:	4817      	ldr	r0, [pc, #92]	@ (8004a2c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80049d0:	f7ff fefa 	bl	80047c8 <LL_ADC_IsEnabled>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	bf0c      	ite	eq
 80049da:	2301      	moveq	r3, #1
 80049dc:	2300      	movne	r3, #0
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d010      	beq.n	8004a06 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80049e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049e6:	689a      	ldr	r2, [r3, #8]
 80049e8:	4b11      	ldr	r3, [pc, #68]	@ (8004a30 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80049ea:	4013      	ands	r3, r2
 80049ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80049ee:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049f0:	e009      	b.n	8004a06 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049f6:	f043 0220 	orr.w	r2, r3, #32
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8004a04:	e000      	b.n	8004a08 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a06:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004a10:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	377c      	adds	r7, #124	@ 0x7c
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd90      	pop	{r4, r7, pc}
 8004a1c:	40022000 	.word	0x40022000
 8004a20:	40022100 	.word	0x40022100
 8004a24:	40022300 	.word	0x40022300
 8004a28:	58026300 	.word	0x58026300
 8004a2c:	58026000 	.word	0x58026000
 8004a30:	fffff0e0 	.word	0xfffff0e0

08004a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f003 0307 	and.w	r3, r3, #7
 8004a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a44:	4b0b      	ldr	r3, [pc, #44]	@ (8004a74 <__NVIC_SetPriorityGrouping+0x40>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a50:	4013      	ands	r3, r2
 8004a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004a5c:	4b06      	ldr	r3, [pc, #24]	@ (8004a78 <__NVIC_SetPriorityGrouping+0x44>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a62:	4a04      	ldr	r2, [pc, #16]	@ (8004a74 <__NVIC_SetPriorityGrouping+0x40>)
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	60d3      	str	r3, [r2, #12]
}
 8004a68:	bf00      	nop
 8004a6a:	3714      	adds	r7, #20
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr
 8004a74:	e000ed00 	.word	0xe000ed00
 8004a78:	05fa0000 	.word	0x05fa0000

08004a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a80:	4b04      	ldr	r3, [pc, #16]	@ (8004a94 <__NVIC_GetPriorityGrouping+0x18>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	0a1b      	lsrs	r3, r3, #8
 8004a86:	f003 0307 	and.w	r3, r3, #7
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	e000ed00 	.word	0xe000ed00

08004a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004aa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	db0b      	blt.n	8004ac2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004aaa:	88fb      	ldrh	r3, [r7, #6]
 8004aac:	f003 021f 	and.w	r2, r3, #31
 8004ab0:	4907      	ldr	r1, [pc, #28]	@ (8004ad0 <__NVIC_EnableIRQ+0x38>)
 8004ab2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ab6:	095b      	lsrs	r3, r3, #5
 8004ab8:	2001      	movs	r0, #1
 8004aba:	fa00 f202 	lsl.w	r2, r0, r2
 8004abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ac2:	bf00      	nop
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	e000e100 	.word	0xe000e100

08004ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	4603      	mov	r3, r0
 8004adc:	6039      	str	r1, [r7, #0]
 8004ade:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ae0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	db0a      	blt.n	8004afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	b2da      	uxtb	r2, r3
 8004aec:	490c      	ldr	r1, [pc, #48]	@ (8004b20 <__NVIC_SetPriority+0x4c>)
 8004aee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004af2:	0112      	lsls	r2, r2, #4
 8004af4:	b2d2      	uxtb	r2, r2
 8004af6:	440b      	add	r3, r1
 8004af8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004afc:	e00a      	b.n	8004b14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	b2da      	uxtb	r2, r3
 8004b02:	4908      	ldr	r1, [pc, #32]	@ (8004b24 <__NVIC_SetPriority+0x50>)
 8004b04:	88fb      	ldrh	r3, [r7, #6]
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	3b04      	subs	r3, #4
 8004b0c:	0112      	lsls	r2, r2, #4
 8004b0e:	b2d2      	uxtb	r2, r2
 8004b10:	440b      	add	r3, r1
 8004b12:	761a      	strb	r2, [r3, #24]
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	e000e100 	.word	0xe000e100
 8004b24:	e000ed00 	.word	0xe000ed00

08004b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b089      	sub	sp, #36	@ 0x24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f003 0307 	and.w	r3, r3, #7
 8004b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	f1c3 0307 	rsb	r3, r3, #7
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	bf28      	it	cs
 8004b46:	2304      	movcs	r3, #4
 8004b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	2b06      	cmp	r3, #6
 8004b50:	d902      	bls.n	8004b58 <NVIC_EncodePriority+0x30>
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	3b03      	subs	r3, #3
 8004b56:	e000      	b.n	8004b5a <NVIC_EncodePriority+0x32>
 8004b58:	2300      	movs	r3, #0
 8004b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	fa02 f303 	lsl.w	r3, r2, r3
 8004b66:	43da      	mvns	r2, r3
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	401a      	ands	r2, r3
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b70:	f04f 31ff 	mov.w	r1, #4294967295
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7a:	43d9      	mvns	r1, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b80:	4313      	orrs	r3, r2
         );
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3724      	adds	r7, #36	@ 0x24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
	...

08004b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ba0:	d301      	bcc.n	8004ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e00f      	b.n	8004bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8004bd0 <SysTick_Config+0x40>)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	3b01      	subs	r3, #1
 8004bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004bae:	210f      	movs	r1, #15
 8004bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb4:	f7ff ff8e 	bl	8004ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bb8:	4b05      	ldr	r3, [pc, #20]	@ (8004bd0 <SysTick_Config+0x40>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bbe:	4b04      	ldr	r3, [pc, #16]	@ (8004bd0 <SysTick_Config+0x40>)
 8004bc0:	2207      	movs	r2, #7
 8004bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	e000e010 	.word	0xe000e010

08004bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f7ff ff29 	bl	8004a34 <__NVIC_SetPriorityGrouping>
}
 8004be2:	bf00      	nop
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b086      	sub	sp, #24
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	60b9      	str	r1, [r7, #8]
 8004bf4:	607a      	str	r2, [r7, #4]
 8004bf6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004bf8:	f7ff ff40 	bl	8004a7c <__NVIC_GetPriorityGrouping>
 8004bfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	68b9      	ldr	r1, [r7, #8]
 8004c02:	6978      	ldr	r0, [r7, #20]
 8004c04:	f7ff ff90 	bl	8004b28 <NVIC_EncodePriority>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c0e:	4611      	mov	r1, r2
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7ff ff5f 	bl	8004ad4 <__NVIC_SetPriority>
}
 8004c16:	bf00      	nop
 8004c18:	3718      	adds	r7, #24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b082      	sub	sp, #8
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	4603      	mov	r3, r0
 8004c26:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7ff ff33 	bl	8004a98 <__NVIC_EnableIRQ>
}
 8004c32:	bf00      	nop
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b082      	sub	sp, #8
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7ff ffa4 	bl	8004b90 <SysTick_Config>
 8004c48:	4603      	mov	r3, r0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
	...

08004c54 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8004c54:	b480      	push	{r7}
 8004c56:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8004c58:	4b06      	ldr	r3, [pc, #24]	@ (8004c74 <HAL_GetCurrentCPUID+0x20>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c60:	2b70      	cmp	r3, #112	@ 0x70
 8004c62:	d101      	bne.n	8004c68 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e000      	b.n	8004c6a <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8004c68:	2301      	movs	r3, #1
  }
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr
 8004c74:	e000ed00 	.word	0xe000ed00

08004c78 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004c80:	f7fe f956 	bl	8002f30 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d101      	bne.n	8004c90 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e316      	b.n	80052be <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a66      	ldr	r2, [pc, #408]	@ (8004e30 <HAL_DMA_Init+0x1b8>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d04a      	beq.n	8004d30 <HAL_DMA_Init+0xb8>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a65      	ldr	r2, [pc, #404]	@ (8004e34 <HAL_DMA_Init+0x1bc>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d045      	beq.n	8004d30 <HAL_DMA_Init+0xb8>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a63      	ldr	r2, [pc, #396]	@ (8004e38 <HAL_DMA_Init+0x1c0>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d040      	beq.n	8004d30 <HAL_DMA_Init+0xb8>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a62      	ldr	r2, [pc, #392]	@ (8004e3c <HAL_DMA_Init+0x1c4>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d03b      	beq.n	8004d30 <HAL_DMA_Init+0xb8>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a60      	ldr	r2, [pc, #384]	@ (8004e40 <HAL_DMA_Init+0x1c8>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d036      	beq.n	8004d30 <HAL_DMA_Init+0xb8>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a5f      	ldr	r2, [pc, #380]	@ (8004e44 <HAL_DMA_Init+0x1cc>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d031      	beq.n	8004d30 <HAL_DMA_Init+0xb8>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a5d      	ldr	r2, [pc, #372]	@ (8004e48 <HAL_DMA_Init+0x1d0>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d02c      	beq.n	8004d30 <HAL_DMA_Init+0xb8>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a5c      	ldr	r2, [pc, #368]	@ (8004e4c <HAL_DMA_Init+0x1d4>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d027      	beq.n	8004d30 <HAL_DMA_Init+0xb8>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a5a      	ldr	r2, [pc, #360]	@ (8004e50 <HAL_DMA_Init+0x1d8>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d022      	beq.n	8004d30 <HAL_DMA_Init+0xb8>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a59      	ldr	r2, [pc, #356]	@ (8004e54 <HAL_DMA_Init+0x1dc>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d01d      	beq.n	8004d30 <HAL_DMA_Init+0xb8>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a57      	ldr	r2, [pc, #348]	@ (8004e58 <HAL_DMA_Init+0x1e0>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d018      	beq.n	8004d30 <HAL_DMA_Init+0xb8>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a56      	ldr	r2, [pc, #344]	@ (8004e5c <HAL_DMA_Init+0x1e4>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d013      	beq.n	8004d30 <HAL_DMA_Init+0xb8>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a54      	ldr	r2, [pc, #336]	@ (8004e60 <HAL_DMA_Init+0x1e8>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d00e      	beq.n	8004d30 <HAL_DMA_Init+0xb8>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a53      	ldr	r2, [pc, #332]	@ (8004e64 <HAL_DMA_Init+0x1ec>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d009      	beq.n	8004d30 <HAL_DMA_Init+0xb8>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a51      	ldr	r2, [pc, #324]	@ (8004e68 <HAL_DMA_Init+0x1f0>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d004      	beq.n	8004d30 <HAL_DMA_Init+0xb8>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a50      	ldr	r2, [pc, #320]	@ (8004e6c <HAL_DMA_Init+0x1f4>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d101      	bne.n	8004d34 <HAL_DMA_Init+0xbc>
 8004d30:	2301      	movs	r3, #1
 8004d32:	e000      	b.n	8004d36 <HAL_DMA_Init+0xbe>
 8004d34:	2300      	movs	r3, #0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f000 813b 	beq.w	8004fb2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2202      	movs	r2, #2
 8004d40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a37      	ldr	r2, [pc, #220]	@ (8004e30 <HAL_DMA_Init+0x1b8>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d04a      	beq.n	8004dec <HAL_DMA_Init+0x174>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a36      	ldr	r2, [pc, #216]	@ (8004e34 <HAL_DMA_Init+0x1bc>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d045      	beq.n	8004dec <HAL_DMA_Init+0x174>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a34      	ldr	r2, [pc, #208]	@ (8004e38 <HAL_DMA_Init+0x1c0>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d040      	beq.n	8004dec <HAL_DMA_Init+0x174>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a33      	ldr	r2, [pc, #204]	@ (8004e3c <HAL_DMA_Init+0x1c4>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d03b      	beq.n	8004dec <HAL_DMA_Init+0x174>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a31      	ldr	r2, [pc, #196]	@ (8004e40 <HAL_DMA_Init+0x1c8>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d036      	beq.n	8004dec <HAL_DMA_Init+0x174>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a30      	ldr	r2, [pc, #192]	@ (8004e44 <HAL_DMA_Init+0x1cc>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d031      	beq.n	8004dec <HAL_DMA_Init+0x174>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a2e      	ldr	r2, [pc, #184]	@ (8004e48 <HAL_DMA_Init+0x1d0>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d02c      	beq.n	8004dec <HAL_DMA_Init+0x174>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a2d      	ldr	r2, [pc, #180]	@ (8004e4c <HAL_DMA_Init+0x1d4>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d027      	beq.n	8004dec <HAL_DMA_Init+0x174>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a2b      	ldr	r2, [pc, #172]	@ (8004e50 <HAL_DMA_Init+0x1d8>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d022      	beq.n	8004dec <HAL_DMA_Init+0x174>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a2a      	ldr	r2, [pc, #168]	@ (8004e54 <HAL_DMA_Init+0x1dc>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d01d      	beq.n	8004dec <HAL_DMA_Init+0x174>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a28      	ldr	r2, [pc, #160]	@ (8004e58 <HAL_DMA_Init+0x1e0>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d018      	beq.n	8004dec <HAL_DMA_Init+0x174>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a27      	ldr	r2, [pc, #156]	@ (8004e5c <HAL_DMA_Init+0x1e4>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d013      	beq.n	8004dec <HAL_DMA_Init+0x174>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a25      	ldr	r2, [pc, #148]	@ (8004e60 <HAL_DMA_Init+0x1e8>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d00e      	beq.n	8004dec <HAL_DMA_Init+0x174>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a24      	ldr	r2, [pc, #144]	@ (8004e64 <HAL_DMA_Init+0x1ec>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d009      	beq.n	8004dec <HAL_DMA_Init+0x174>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a22      	ldr	r2, [pc, #136]	@ (8004e68 <HAL_DMA_Init+0x1f0>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d004      	beq.n	8004dec <HAL_DMA_Init+0x174>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a21      	ldr	r2, [pc, #132]	@ (8004e6c <HAL_DMA_Init+0x1f4>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d108      	bne.n	8004dfe <HAL_DMA_Init+0x186>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 0201 	bic.w	r2, r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]
 8004dfc:	e007      	b.n	8004e0e <HAL_DMA_Init+0x196>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 0201 	bic.w	r2, r2, #1
 8004e0c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e0e:	e02f      	b.n	8004e70 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e10:	f7fe f88e 	bl	8002f30 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b05      	cmp	r3, #5
 8004e1c:	d928      	bls.n	8004e70 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2220      	movs	r2, #32
 8004e22:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2203      	movs	r2, #3
 8004e28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e246      	b.n	80052be <HAL_DMA_Init+0x646>
 8004e30:	40020010 	.word	0x40020010
 8004e34:	40020028 	.word	0x40020028
 8004e38:	40020040 	.word	0x40020040
 8004e3c:	40020058 	.word	0x40020058
 8004e40:	40020070 	.word	0x40020070
 8004e44:	40020088 	.word	0x40020088
 8004e48:	400200a0 	.word	0x400200a0
 8004e4c:	400200b8 	.word	0x400200b8
 8004e50:	40020410 	.word	0x40020410
 8004e54:	40020428 	.word	0x40020428
 8004e58:	40020440 	.word	0x40020440
 8004e5c:	40020458 	.word	0x40020458
 8004e60:	40020470 	.word	0x40020470
 8004e64:	40020488 	.word	0x40020488
 8004e68:	400204a0 	.word	0x400204a0
 8004e6c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1c8      	bne.n	8004e10 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	4b83      	ldr	r3, [pc, #524]	@ (8005098 <HAL_DMA_Init+0x420>)
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004e96:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ea2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004eae:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a1b      	ldr	r3, [r3, #32]
 8004eb4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec0:	2b04      	cmp	r3, #4
 8004ec2:	d107      	bne.n	8004ed4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004ed4:	4b71      	ldr	r3, [pc, #452]	@ (800509c <HAL_DMA_Init+0x424>)
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	4b71      	ldr	r3, [pc, #452]	@ (80050a0 <HAL_DMA_Init+0x428>)
 8004eda:	4013      	ands	r3, r2
 8004edc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ee0:	d328      	bcc.n	8004f34 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	2b28      	cmp	r3, #40	@ 0x28
 8004ee8:	d903      	bls.n	8004ef2 <HAL_DMA_Init+0x27a>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	2b2e      	cmp	r3, #46	@ 0x2e
 8004ef0:	d917      	bls.n	8004f22 <HAL_DMA_Init+0x2aa>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	2b3e      	cmp	r3, #62	@ 0x3e
 8004ef8:	d903      	bls.n	8004f02 <HAL_DMA_Init+0x28a>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	2b42      	cmp	r3, #66	@ 0x42
 8004f00:	d90f      	bls.n	8004f22 <HAL_DMA_Init+0x2aa>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	2b46      	cmp	r3, #70	@ 0x46
 8004f08:	d903      	bls.n	8004f12 <HAL_DMA_Init+0x29a>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	2b48      	cmp	r3, #72	@ 0x48
 8004f10:	d907      	bls.n	8004f22 <HAL_DMA_Init+0x2aa>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	2b4e      	cmp	r3, #78	@ 0x4e
 8004f18:	d905      	bls.n	8004f26 <HAL_DMA_Init+0x2ae>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	2b52      	cmp	r3, #82	@ 0x52
 8004f20:	d801      	bhi.n	8004f26 <HAL_DMA_Init+0x2ae>
 8004f22:	2301      	movs	r3, #1
 8004f24:	e000      	b.n	8004f28 <HAL_DMA_Init+0x2b0>
 8004f26:	2300      	movs	r3, #0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d003      	beq.n	8004f34 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f32:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f023 0307 	bic.w	r3, r3, #7
 8004f4a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	d117      	bne.n	8004f8e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00e      	beq.n	8004f8e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f002 fb33 	bl	80075dc <DMA_CheckFifoParam>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d008      	beq.n	8004f8e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2240      	movs	r2, #64	@ 0x40
 8004f80:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e197      	b.n	80052be <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	697a      	ldr	r2, [r7, #20]
 8004f94:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f002 fa6e 	bl	8007478 <DMA_CalcBaseAndBitshift>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fa4:	f003 031f 	and.w	r3, r3, #31
 8004fa8:	223f      	movs	r2, #63	@ 0x3f
 8004faa:	409a      	lsls	r2, r3
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	609a      	str	r2, [r3, #8]
 8004fb0:	e0cd      	b.n	800514e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a3b      	ldr	r2, [pc, #236]	@ (80050a4 <HAL_DMA_Init+0x42c>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d022      	beq.n	8005002 <HAL_DMA_Init+0x38a>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a39      	ldr	r2, [pc, #228]	@ (80050a8 <HAL_DMA_Init+0x430>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d01d      	beq.n	8005002 <HAL_DMA_Init+0x38a>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a38      	ldr	r2, [pc, #224]	@ (80050ac <HAL_DMA_Init+0x434>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d018      	beq.n	8005002 <HAL_DMA_Init+0x38a>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a36      	ldr	r2, [pc, #216]	@ (80050b0 <HAL_DMA_Init+0x438>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d013      	beq.n	8005002 <HAL_DMA_Init+0x38a>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a35      	ldr	r2, [pc, #212]	@ (80050b4 <HAL_DMA_Init+0x43c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d00e      	beq.n	8005002 <HAL_DMA_Init+0x38a>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a33      	ldr	r2, [pc, #204]	@ (80050b8 <HAL_DMA_Init+0x440>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d009      	beq.n	8005002 <HAL_DMA_Init+0x38a>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a32      	ldr	r2, [pc, #200]	@ (80050bc <HAL_DMA_Init+0x444>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d004      	beq.n	8005002 <HAL_DMA_Init+0x38a>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a30      	ldr	r2, [pc, #192]	@ (80050c0 <HAL_DMA_Init+0x448>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d101      	bne.n	8005006 <HAL_DMA_Init+0x38e>
 8005002:	2301      	movs	r3, #1
 8005004:	e000      	b.n	8005008 <HAL_DMA_Init+0x390>
 8005006:	2300      	movs	r3, #0
 8005008:	2b00      	cmp	r3, #0
 800500a:	f000 8097 	beq.w	800513c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a24      	ldr	r2, [pc, #144]	@ (80050a4 <HAL_DMA_Init+0x42c>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d021      	beq.n	800505c <HAL_DMA_Init+0x3e4>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a22      	ldr	r2, [pc, #136]	@ (80050a8 <HAL_DMA_Init+0x430>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d01c      	beq.n	800505c <HAL_DMA_Init+0x3e4>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a21      	ldr	r2, [pc, #132]	@ (80050ac <HAL_DMA_Init+0x434>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d017      	beq.n	800505c <HAL_DMA_Init+0x3e4>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a1f      	ldr	r2, [pc, #124]	@ (80050b0 <HAL_DMA_Init+0x438>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d012      	beq.n	800505c <HAL_DMA_Init+0x3e4>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a1e      	ldr	r2, [pc, #120]	@ (80050b4 <HAL_DMA_Init+0x43c>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d00d      	beq.n	800505c <HAL_DMA_Init+0x3e4>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a1c      	ldr	r2, [pc, #112]	@ (80050b8 <HAL_DMA_Init+0x440>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d008      	beq.n	800505c <HAL_DMA_Init+0x3e4>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a1b      	ldr	r2, [pc, #108]	@ (80050bc <HAL_DMA_Init+0x444>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d003      	beq.n	800505c <HAL_DMA_Init+0x3e4>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a19      	ldr	r2, [pc, #100]	@ (80050c0 <HAL_DMA_Init+0x448>)
 800505a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	4b13      	ldr	r3, [pc, #76]	@ (80050c4 <HAL_DMA_Init+0x44c>)
 8005078:	4013      	ands	r3, r2
 800507a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	2b40      	cmp	r3, #64	@ 0x40
 8005082:	d021      	beq.n	80050c8 <HAL_DMA_Init+0x450>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	2b80      	cmp	r3, #128	@ 0x80
 800508a:	d102      	bne.n	8005092 <HAL_DMA_Init+0x41a>
 800508c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005090:	e01b      	b.n	80050ca <HAL_DMA_Init+0x452>
 8005092:	2300      	movs	r3, #0
 8005094:	e019      	b.n	80050ca <HAL_DMA_Init+0x452>
 8005096:	bf00      	nop
 8005098:	fe10803f 	.word	0xfe10803f
 800509c:	5c001000 	.word	0x5c001000
 80050a0:	ffff0000 	.word	0xffff0000
 80050a4:	58025408 	.word	0x58025408
 80050a8:	5802541c 	.word	0x5802541c
 80050ac:	58025430 	.word	0x58025430
 80050b0:	58025444 	.word	0x58025444
 80050b4:	58025458 	.word	0x58025458
 80050b8:	5802546c 	.word	0x5802546c
 80050bc:	58025480 	.word	0x58025480
 80050c0:	58025494 	.word	0x58025494
 80050c4:	fffe000f 	.word	0xfffe000f
 80050c8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	68d2      	ldr	r2, [r2, #12]
 80050ce:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80050d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80050d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80050e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80050e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80050f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80050f8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	461a      	mov	r2, r3
 800510e:	4b6e      	ldr	r3, [pc, #440]	@ (80052c8 <HAL_DMA_Init+0x650>)
 8005110:	4413      	add	r3, r2
 8005112:	4a6e      	ldr	r2, [pc, #440]	@ (80052cc <HAL_DMA_Init+0x654>)
 8005114:	fba2 2303 	umull	r2, r3, r2, r3
 8005118:	091b      	lsrs	r3, r3, #4
 800511a:	009a      	lsls	r2, r3, #2
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f002 f9a9 	bl	8007478 <DMA_CalcBaseAndBitshift>
 8005126:	4603      	mov	r3, r0
 8005128:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800512e:	f003 031f 	and.w	r3, r3, #31
 8005132:	2201      	movs	r2, #1
 8005134:	409a      	lsls	r2, r3
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	605a      	str	r2, [r3, #4]
 800513a:	e008      	b.n	800514e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2240      	movs	r2, #64	@ 0x40
 8005140:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2203      	movs	r2, #3
 8005146:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e0b7      	b.n	80052be <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a5f      	ldr	r2, [pc, #380]	@ (80052d0 <HAL_DMA_Init+0x658>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d072      	beq.n	800523e <HAL_DMA_Init+0x5c6>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a5d      	ldr	r2, [pc, #372]	@ (80052d4 <HAL_DMA_Init+0x65c>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d06d      	beq.n	800523e <HAL_DMA_Init+0x5c6>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a5c      	ldr	r2, [pc, #368]	@ (80052d8 <HAL_DMA_Init+0x660>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d068      	beq.n	800523e <HAL_DMA_Init+0x5c6>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a5a      	ldr	r2, [pc, #360]	@ (80052dc <HAL_DMA_Init+0x664>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d063      	beq.n	800523e <HAL_DMA_Init+0x5c6>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a59      	ldr	r2, [pc, #356]	@ (80052e0 <HAL_DMA_Init+0x668>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d05e      	beq.n	800523e <HAL_DMA_Init+0x5c6>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a57      	ldr	r2, [pc, #348]	@ (80052e4 <HAL_DMA_Init+0x66c>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d059      	beq.n	800523e <HAL_DMA_Init+0x5c6>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a56      	ldr	r2, [pc, #344]	@ (80052e8 <HAL_DMA_Init+0x670>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d054      	beq.n	800523e <HAL_DMA_Init+0x5c6>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a54      	ldr	r2, [pc, #336]	@ (80052ec <HAL_DMA_Init+0x674>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d04f      	beq.n	800523e <HAL_DMA_Init+0x5c6>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a53      	ldr	r2, [pc, #332]	@ (80052f0 <HAL_DMA_Init+0x678>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d04a      	beq.n	800523e <HAL_DMA_Init+0x5c6>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a51      	ldr	r2, [pc, #324]	@ (80052f4 <HAL_DMA_Init+0x67c>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d045      	beq.n	800523e <HAL_DMA_Init+0x5c6>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a50      	ldr	r2, [pc, #320]	@ (80052f8 <HAL_DMA_Init+0x680>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d040      	beq.n	800523e <HAL_DMA_Init+0x5c6>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a4e      	ldr	r2, [pc, #312]	@ (80052fc <HAL_DMA_Init+0x684>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d03b      	beq.n	800523e <HAL_DMA_Init+0x5c6>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a4d      	ldr	r2, [pc, #308]	@ (8005300 <HAL_DMA_Init+0x688>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d036      	beq.n	800523e <HAL_DMA_Init+0x5c6>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a4b      	ldr	r2, [pc, #300]	@ (8005304 <HAL_DMA_Init+0x68c>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d031      	beq.n	800523e <HAL_DMA_Init+0x5c6>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a4a      	ldr	r2, [pc, #296]	@ (8005308 <HAL_DMA_Init+0x690>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d02c      	beq.n	800523e <HAL_DMA_Init+0x5c6>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a48      	ldr	r2, [pc, #288]	@ (800530c <HAL_DMA_Init+0x694>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d027      	beq.n	800523e <HAL_DMA_Init+0x5c6>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a47      	ldr	r2, [pc, #284]	@ (8005310 <HAL_DMA_Init+0x698>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d022      	beq.n	800523e <HAL_DMA_Init+0x5c6>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a45      	ldr	r2, [pc, #276]	@ (8005314 <HAL_DMA_Init+0x69c>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d01d      	beq.n	800523e <HAL_DMA_Init+0x5c6>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a44      	ldr	r2, [pc, #272]	@ (8005318 <HAL_DMA_Init+0x6a0>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d018      	beq.n	800523e <HAL_DMA_Init+0x5c6>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a42      	ldr	r2, [pc, #264]	@ (800531c <HAL_DMA_Init+0x6a4>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d013      	beq.n	800523e <HAL_DMA_Init+0x5c6>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a41      	ldr	r2, [pc, #260]	@ (8005320 <HAL_DMA_Init+0x6a8>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d00e      	beq.n	800523e <HAL_DMA_Init+0x5c6>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a3f      	ldr	r2, [pc, #252]	@ (8005324 <HAL_DMA_Init+0x6ac>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d009      	beq.n	800523e <HAL_DMA_Init+0x5c6>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a3e      	ldr	r2, [pc, #248]	@ (8005328 <HAL_DMA_Init+0x6b0>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d004      	beq.n	800523e <HAL_DMA_Init+0x5c6>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a3c      	ldr	r2, [pc, #240]	@ (800532c <HAL_DMA_Init+0x6b4>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d101      	bne.n	8005242 <HAL_DMA_Init+0x5ca>
 800523e:	2301      	movs	r3, #1
 8005240:	e000      	b.n	8005244 <HAL_DMA_Init+0x5cc>
 8005242:	2300      	movs	r3, #0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d032      	beq.n	80052ae <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f002 fa43 	bl	80076d4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	2b80      	cmp	r3, #128	@ 0x80
 8005254:	d102      	bne.n	800525c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005264:	b2d2      	uxtb	r2, r2
 8005266:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005270:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d010      	beq.n	800529c <HAL_DMA_Init+0x624>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	2b08      	cmp	r3, #8
 8005280:	d80c      	bhi.n	800529c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f002 fac0 	bl	8007808 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800528c:	2200      	movs	r2, #0
 800528e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005298:	605a      	str	r2, [r3, #4]
 800529a:	e008      	b.n	80052ae <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3718      	adds	r7, #24
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	a7fdabf8 	.word	0xa7fdabf8
 80052cc:	cccccccd 	.word	0xcccccccd
 80052d0:	40020010 	.word	0x40020010
 80052d4:	40020028 	.word	0x40020028
 80052d8:	40020040 	.word	0x40020040
 80052dc:	40020058 	.word	0x40020058
 80052e0:	40020070 	.word	0x40020070
 80052e4:	40020088 	.word	0x40020088
 80052e8:	400200a0 	.word	0x400200a0
 80052ec:	400200b8 	.word	0x400200b8
 80052f0:	40020410 	.word	0x40020410
 80052f4:	40020428 	.word	0x40020428
 80052f8:	40020440 	.word	0x40020440
 80052fc:	40020458 	.word	0x40020458
 8005300:	40020470 	.word	0x40020470
 8005304:	40020488 	.word	0x40020488
 8005308:	400204a0 	.word	0x400204a0
 800530c:	400204b8 	.word	0x400204b8
 8005310:	58025408 	.word	0x58025408
 8005314:	5802541c 	.word	0x5802541c
 8005318:	58025430 	.word	0x58025430
 800531c:	58025444 	.word	0x58025444
 8005320:	58025458 	.word	0x58025458
 8005324:	5802546c 	.word	0x5802546c
 8005328:	58025480 	.word	0x58025480
 800532c:	58025494 	.word	0x58025494

08005330 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
 800533c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800533e:	2300      	movs	r3, #0
 8005340:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e226      	b.n	800579a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005352:	2b01      	cmp	r3, #1
 8005354:	d101      	bne.n	800535a <HAL_DMA_Start_IT+0x2a>
 8005356:	2302      	movs	r3, #2
 8005358:	e21f      	b.n	800579a <HAL_DMA_Start_IT+0x46a>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b01      	cmp	r3, #1
 800536c:	f040 820a 	bne.w	8005784 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2202      	movs	r2, #2
 8005374:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a68      	ldr	r2, [pc, #416]	@ (8005524 <HAL_DMA_Start_IT+0x1f4>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d04a      	beq.n	800541e <HAL_DMA_Start_IT+0xee>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a66      	ldr	r2, [pc, #408]	@ (8005528 <HAL_DMA_Start_IT+0x1f8>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d045      	beq.n	800541e <HAL_DMA_Start_IT+0xee>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a65      	ldr	r2, [pc, #404]	@ (800552c <HAL_DMA_Start_IT+0x1fc>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d040      	beq.n	800541e <HAL_DMA_Start_IT+0xee>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a63      	ldr	r2, [pc, #396]	@ (8005530 <HAL_DMA_Start_IT+0x200>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d03b      	beq.n	800541e <HAL_DMA_Start_IT+0xee>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a62      	ldr	r2, [pc, #392]	@ (8005534 <HAL_DMA_Start_IT+0x204>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d036      	beq.n	800541e <HAL_DMA_Start_IT+0xee>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a60      	ldr	r2, [pc, #384]	@ (8005538 <HAL_DMA_Start_IT+0x208>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d031      	beq.n	800541e <HAL_DMA_Start_IT+0xee>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a5f      	ldr	r2, [pc, #380]	@ (800553c <HAL_DMA_Start_IT+0x20c>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d02c      	beq.n	800541e <HAL_DMA_Start_IT+0xee>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a5d      	ldr	r2, [pc, #372]	@ (8005540 <HAL_DMA_Start_IT+0x210>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d027      	beq.n	800541e <HAL_DMA_Start_IT+0xee>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a5c      	ldr	r2, [pc, #368]	@ (8005544 <HAL_DMA_Start_IT+0x214>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d022      	beq.n	800541e <HAL_DMA_Start_IT+0xee>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a5a      	ldr	r2, [pc, #360]	@ (8005548 <HAL_DMA_Start_IT+0x218>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d01d      	beq.n	800541e <HAL_DMA_Start_IT+0xee>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a59      	ldr	r2, [pc, #356]	@ (800554c <HAL_DMA_Start_IT+0x21c>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d018      	beq.n	800541e <HAL_DMA_Start_IT+0xee>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a57      	ldr	r2, [pc, #348]	@ (8005550 <HAL_DMA_Start_IT+0x220>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d013      	beq.n	800541e <HAL_DMA_Start_IT+0xee>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a56      	ldr	r2, [pc, #344]	@ (8005554 <HAL_DMA_Start_IT+0x224>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d00e      	beq.n	800541e <HAL_DMA_Start_IT+0xee>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a54      	ldr	r2, [pc, #336]	@ (8005558 <HAL_DMA_Start_IT+0x228>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d009      	beq.n	800541e <HAL_DMA_Start_IT+0xee>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a53      	ldr	r2, [pc, #332]	@ (800555c <HAL_DMA_Start_IT+0x22c>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d004      	beq.n	800541e <HAL_DMA_Start_IT+0xee>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a51      	ldr	r2, [pc, #324]	@ (8005560 <HAL_DMA_Start_IT+0x230>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d108      	bne.n	8005430 <HAL_DMA_Start_IT+0x100>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f022 0201 	bic.w	r2, r2, #1
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	e007      	b.n	8005440 <HAL_DMA_Start_IT+0x110>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 0201 	bic.w	r2, r2, #1
 800543e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	68b9      	ldr	r1, [r7, #8]
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f001 fe6a 	bl	8007120 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a34      	ldr	r2, [pc, #208]	@ (8005524 <HAL_DMA_Start_IT+0x1f4>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d04a      	beq.n	80054ec <HAL_DMA_Start_IT+0x1bc>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a33      	ldr	r2, [pc, #204]	@ (8005528 <HAL_DMA_Start_IT+0x1f8>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d045      	beq.n	80054ec <HAL_DMA_Start_IT+0x1bc>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a31      	ldr	r2, [pc, #196]	@ (800552c <HAL_DMA_Start_IT+0x1fc>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d040      	beq.n	80054ec <HAL_DMA_Start_IT+0x1bc>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a30      	ldr	r2, [pc, #192]	@ (8005530 <HAL_DMA_Start_IT+0x200>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d03b      	beq.n	80054ec <HAL_DMA_Start_IT+0x1bc>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a2e      	ldr	r2, [pc, #184]	@ (8005534 <HAL_DMA_Start_IT+0x204>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d036      	beq.n	80054ec <HAL_DMA_Start_IT+0x1bc>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a2d      	ldr	r2, [pc, #180]	@ (8005538 <HAL_DMA_Start_IT+0x208>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d031      	beq.n	80054ec <HAL_DMA_Start_IT+0x1bc>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a2b      	ldr	r2, [pc, #172]	@ (800553c <HAL_DMA_Start_IT+0x20c>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d02c      	beq.n	80054ec <HAL_DMA_Start_IT+0x1bc>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a2a      	ldr	r2, [pc, #168]	@ (8005540 <HAL_DMA_Start_IT+0x210>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d027      	beq.n	80054ec <HAL_DMA_Start_IT+0x1bc>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a28      	ldr	r2, [pc, #160]	@ (8005544 <HAL_DMA_Start_IT+0x214>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d022      	beq.n	80054ec <HAL_DMA_Start_IT+0x1bc>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a27      	ldr	r2, [pc, #156]	@ (8005548 <HAL_DMA_Start_IT+0x218>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d01d      	beq.n	80054ec <HAL_DMA_Start_IT+0x1bc>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a25      	ldr	r2, [pc, #148]	@ (800554c <HAL_DMA_Start_IT+0x21c>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d018      	beq.n	80054ec <HAL_DMA_Start_IT+0x1bc>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a24      	ldr	r2, [pc, #144]	@ (8005550 <HAL_DMA_Start_IT+0x220>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d013      	beq.n	80054ec <HAL_DMA_Start_IT+0x1bc>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a22      	ldr	r2, [pc, #136]	@ (8005554 <HAL_DMA_Start_IT+0x224>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d00e      	beq.n	80054ec <HAL_DMA_Start_IT+0x1bc>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a21      	ldr	r2, [pc, #132]	@ (8005558 <HAL_DMA_Start_IT+0x228>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d009      	beq.n	80054ec <HAL_DMA_Start_IT+0x1bc>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a1f      	ldr	r2, [pc, #124]	@ (800555c <HAL_DMA_Start_IT+0x22c>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d004      	beq.n	80054ec <HAL_DMA_Start_IT+0x1bc>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a1e      	ldr	r2, [pc, #120]	@ (8005560 <HAL_DMA_Start_IT+0x230>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d101      	bne.n	80054f0 <HAL_DMA_Start_IT+0x1c0>
 80054ec:	2301      	movs	r3, #1
 80054ee:	e000      	b.n	80054f2 <HAL_DMA_Start_IT+0x1c2>
 80054f0:	2300      	movs	r3, #0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d036      	beq.n	8005564 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f023 021e 	bic.w	r2, r3, #30
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f042 0216 	orr.w	r2, r2, #22
 8005508:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800550e:	2b00      	cmp	r3, #0
 8005510:	d03e      	beq.n	8005590 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f042 0208 	orr.w	r2, r2, #8
 8005520:	601a      	str	r2, [r3, #0]
 8005522:	e035      	b.n	8005590 <HAL_DMA_Start_IT+0x260>
 8005524:	40020010 	.word	0x40020010
 8005528:	40020028 	.word	0x40020028
 800552c:	40020040 	.word	0x40020040
 8005530:	40020058 	.word	0x40020058
 8005534:	40020070 	.word	0x40020070
 8005538:	40020088 	.word	0x40020088
 800553c:	400200a0 	.word	0x400200a0
 8005540:	400200b8 	.word	0x400200b8
 8005544:	40020410 	.word	0x40020410
 8005548:	40020428 	.word	0x40020428
 800554c:	40020440 	.word	0x40020440
 8005550:	40020458 	.word	0x40020458
 8005554:	40020470 	.word	0x40020470
 8005558:	40020488 	.word	0x40020488
 800555c:	400204a0 	.word	0x400204a0
 8005560:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f023 020e 	bic.w	r2, r3, #14
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f042 020a 	orr.w	r2, r2, #10
 8005576:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800557c:	2b00      	cmp	r3, #0
 800557e:	d007      	beq.n	8005590 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f042 0204 	orr.w	r2, r2, #4
 800558e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a83      	ldr	r2, [pc, #524]	@ (80057a4 <HAL_DMA_Start_IT+0x474>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d072      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a82      	ldr	r2, [pc, #520]	@ (80057a8 <HAL_DMA_Start_IT+0x478>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d06d      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a80      	ldr	r2, [pc, #512]	@ (80057ac <HAL_DMA_Start_IT+0x47c>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d068      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a7f      	ldr	r2, [pc, #508]	@ (80057b0 <HAL_DMA_Start_IT+0x480>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d063      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a7d      	ldr	r2, [pc, #500]	@ (80057b4 <HAL_DMA_Start_IT+0x484>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d05e      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a7c      	ldr	r2, [pc, #496]	@ (80057b8 <HAL_DMA_Start_IT+0x488>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d059      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a7a      	ldr	r2, [pc, #488]	@ (80057bc <HAL_DMA_Start_IT+0x48c>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d054      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a79      	ldr	r2, [pc, #484]	@ (80057c0 <HAL_DMA_Start_IT+0x490>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d04f      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a77      	ldr	r2, [pc, #476]	@ (80057c4 <HAL_DMA_Start_IT+0x494>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d04a      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a76      	ldr	r2, [pc, #472]	@ (80057c8 <HAL_DMA_Start_IT+0x498>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d045      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a74      	ldr	r2, [pc, #464]	@ (80057cc <HAL_DMA_Start_IT+0x49c>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d040      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a73      	ldr	r2, [pc, #460]	@ (80057d0 <HAL_DMA_Start_IT+0x4a0>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d03b      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a71      	ldr	r2, [pc, #452]	@ (80057d4 <HAL_DMA_Start_IT+0x4a4>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d036      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a70      	ldr	r2, [pc, #448]	@ (80057d8 <HAL_DMA_Start_IT+0x4a8>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d031      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a6e      	ldr	r2, [pc, #440]	@ (80057dc <HAL_DMA_Start_IT+0x4ac>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d02c      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a6d      	ldr	r2, [pc, #436]	@ (80057e0 <HAL_DMA_Start_IT+0x4b0>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d027      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a6b      	ldr	r2, [pc, #428]	@ (80057e4 <HAL_DMA_Start_IT+0x4b4>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d022      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a6a      	ldr	r2, [pc, #424]	@ (80057e8 <HAL_DMA_Start_IT+0x4b8>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d01d      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a68      	ldr	r2, [pc, #416]	@ (80057ec <HAL_DMA_Start_IT+0x4bc>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d018      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a67      	ldr	r2, [pc, #412]	@ (80057f0 <HAL_DMA_Start_IT+0x4c0>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d013      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a65      	ldr	r2, [pc, #404]	@ (80057f4 <HAL_DMA_Start_IT+0x4c4>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d00e      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a64      	ldr	r2, [pc, #400]	@ (80057f8 <HAL_DMA_Start_IT+0x4c8>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d009      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a62      	ldr	r2, [pc, #392]	@ (80057fc <HAL_DMA_Start_IT+0x4cc>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d004      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a61      	ldr	r2, [pc, #388]	@ (8005800 <HAL_DMA_Start_IT+0x4d0>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d101      	bne.n	8005684 <HAL_DMA_Start_IT+0x354>
 8005680:	2301      	movs	r3, #1
 8005682:	e000      	b.n	8005686 <HAL_DMA_Start_IT+0x356>
 8005684:	2300      	movs	r3, #0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d01a      	beq.n	80056c0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d007      	beq.n	80056a8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056a6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d007      	beq.n	80056c0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056be:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a37      	ldr	r2, [pc, #220]	@ (80057a4 <HAL_DMA_Start_IT+0x474>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d04a      	beq.n	8005760 <HAL_DMA_Start_IT+0x430>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a36      	ldr	r2, [pc, #216]	@ (80057a8 <HAL_DMA_Start_IT+0x478>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d045      	beq.n	8005760 <HAL_DMA_Start_IT+0x430>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a34      	ldr	r2, [pc, #208]	@ (80057ac <HAL_DMA_Start_IT+0x47c>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d040      	beq.n	8005760 <HAL_DMA_Start_IT+0x430>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a33      	ldr	r2, [pc, #204]	@ (80057b0 <HAL_DMA_Start_IT+0x480>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d03b      	beq.n	8005760 <HAL_DMA_Start_IT+0x430>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a31      	ldr	r2, [pc, #196]	@ (80057b4 <HAL_DMA_Start_IT+0x484>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d036      	beq.n	8005760 <HAL_DMA_Start_IT+0x430>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a30      	ldr	r2, [pc, #192]	@ (80057b8 <HAL_DMA_Start_IT+0x488>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d031      	beq.n	8005760 <HAL_DMA_Start_IT+0x430>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a2e      	ldr	r2, [pc, #184]	@ (80057bc <HAL_DMA_Start_IT+0x48c>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d02c      	beq.n	8005760 <HAL_DMA_Start_IT+0x430>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a2d      	ldr	r2, [pc, #180]	@ (80057c0 <HAL_DMA_Start_IT+0x490>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d027      	beq.n	8005760 <HAL_DMA_Start_IT+0x430>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a2b      	ldr	r2, [pc, #172]	@ (80057c4 <HAL_DMA_Start_IT+0x494>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d022      	beq.n	8005760 <HAL_DMA_Start_IT+0x430>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a2a      	ldr	r2, [pc, #168]	@ (80057c8 <HAL_DMA_Start_IT+0x498>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d01d      	beq.n	8005760 <HAL_DMA_Start_IT+0x430>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a28      	ldr	r2, [pc, #160]	@ (80057cc <HAL_DMA_Start_IT+0x49c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d018      	beq.n	8005760 <HAL_DMA_Start_IT+0x430>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a27      	ldr	r2, [pc, #156]	@ (80057d0 <HAL_DMA_Start_IT+0x4a0>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d013      	beq.n	8005760 <HAL_DMA_Start_IT+0x430>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a25      	ldr	r2, [pc, #148]	@ (80057d4 <HAL_DMA_Start_IT+0x4a4>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d00e      	beq.n	8005760 <HAL_DMA_Start_IT+0x430>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a24      	ldr	r2, [pc, #144]	@ (80057d8 <HAL_DMA_Start_IT+0x4a8>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d009      	beq.n	8005760 <HAL_DMA_Start_IT+0x430>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a22      	ldr	r2, [pc, #136]	@ (80057dc <HAL_DMA_Start_IT+0x4ac>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d004      	beq.n	8005760 <HAL_DMA_Start_IT+0x430>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a21      	ldr	r2, [pc, #132]	@ (80057e0 <HAL_DMA_Start_IT+0x4b0>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d108      	bne.n	8005772 <HAL_DMA_Start_IT+0x442>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f042 0201 	orr.w	r2, r2, #1
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	e012      	b.n	8005798 <HAL_DMA_Start_IT+0x468>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f042 0201 	orr.w	r2, r2, #1
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	e009      	b.n	8005798 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800578a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005798:	7dfb      	ldrb	r3, [r7, #23]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3718      	adds	r7, #24
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	40020010 	.word	0x40020010
 80057a8:	40020028 	.word	0x40020028
 80057ac:	40020040 	.word	0x40020040
 80057b0:	40020058 	.word	0x40020058
 80057b4:	40020070 	.word	0x40020070
 80057b8:	40020088 	.word	0x40020088
 80057bc:	400200a0 	.word	0x400200a0
 80057c0:	400200b8 	.word	0x400200b8
 80057c4:	40020410 	.word	0x40020410
 80057c8:	40020428 	.word	0x40020428
 80057cc:	40020440 	.word	0x40020440
 80057d0:	40020458 	.word	0x40020458
 80057d4:	40020470 	.word	0x40020470
 80057d8:	40020488 	.word	0x40020488
 80057dc:	400204a0 	.word	0x400204a0
 80057e0:	400204b8 	.word	0x400204b8
 80057e4:	58025408 	.word	0x58025408
 80057e8:	5802541c 	.word	0x5802541c
 80057ec:	58025430 	.word	0x58025430
 80057f0:	58025444 	.word	0x58025444
 80057f4:	58025458 	.word	0x58025458
 80057f8:	5802546c 	.word	0x5802546c
 80057fc:	58025480 	.word	0x58025480
 8005800:	58025494 	.word	0x58025494

08005804 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b086      	sub	sp, #24
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800580c:	f7fd fb90 	bl	8002f30 <HAL_GetTick>
 8005810:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d101      	bne.n	800581c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e2dc      	b.n	8005dd6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b02      	cmp	r3, #2
 8005826:	d008      	beq.n	800583a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2280      	movs	r2, #128	@ 0x80
 800582c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e2cd      	b.n	8005dd6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a76      	ldr	r2, [pc, #472]	@ (8005a18 <HAL_DMA_Abort+0x214>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d04a      	beq.n	80058da <HAL_DMA_Abort+0xd6>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a74      	ldr	r2, [pc, #464]	@ (8005a1c <HAL_DMA_Abort+0x218>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d045      	beq.n	80058da <HAL_DMA_Abort+0xd6>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a73      	ldr	r2, [pc, #460]	@ (8005a20 <HAL_DMA_Abort+0x21c>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d040      	beq.n	80058da <HAL_DMA_Abort+0xd6>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a71      	ldr	r2, [pc, #452]	@ (8005a24 <HAL_DMA_Abort+0x220>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d03b      	beq.n	80058da <HAL_DMA_Abort+0xd6>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a70      	ldr	r2, [pc, #448]	@ (8005a28 <HAL_DMA_Abort+0x224>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d036      	beq.n	80058da <HAL_DMA_Abort+0xd6>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a6e      	ldr	r2, [pc, #440]	@ (8005a2c <HAL_DMA_Abort+0x228>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d031      	beq.n	80058da <HAL_DMA_Abort+0xd6>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a6d      	ldr	r2, [pc, #436]	@ (8005a30 <HAL_DMA_Abort+0x22c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d02c      	beq.n	80058da <HAL_DMA_Abort+0xd6>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a6b      	ldr	r2, [pc, #428]	@ (8005a34 <HAL_DMA_Abort+0x230>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d027      	beq.n	80058da <HAL_DMA_Abort+0xd6>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a6a      	ldr	r2, [pc, #424]	@ (8005a38 <HAL_DMA_Abort+0x234>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d022      	beq.n	80058da <HAL_DMA_Abort+0xd6>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a68      	ldr	r2, [pc, #416]	@ (8005a3c <HAL_DMA_Abort+0x238>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d01d      	beq.n	80058da <HAL_DMA_Abort+0xd6>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a67      	ldr	r2, [pc, #412]	@ (8005a40 <HAL_DMA_Abort+0x23c>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d018      	beq.n	80058da <HAL_DMA_Abort+0xd6>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a65      	ldr	r2, [pc, #404]	@ (8005a44 <HAL_DMA_Abort+0x240>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d013      	beq.n	80058da <HAL_DMA_Abort+0xd6>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a64      	ldr	r2, [pc, #400]	@ (8005a48 <HAL_DMA_Abort+0x244>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d00e      	beq.n	80058da <HAL_DMA_Abort+0xd6>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a62      	ldr	r2, [pc, #392]	@ (8005a4c <HAL_DMA_Abort+0x248>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d009      	beq.n	80058da <HAL_DMA_Abort+0xd6>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a61      	ldr	r2, [pc, #388]	@ (8005a50 <HAL_DMA_Abort+0x24c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d004      	beq.n	80058da <HAL_DMA_Abort+0xd6>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a5f      	ldr	r2, [pc, #380]	@ (8005a54 <HAL_DMA_Abort+0x250>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d101      	bne.n	80058de <HAL_DMA_Abort+0xda>
 80058da:	2301      	movs	r3, #1
 80058dc:	e000      	b.n	80058e0 <HAL_DMA_Abort+0xdc>
 80058de:	2300      	movs	r3, #0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d013      	beq.n	800590c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f022 021e 	bic.w	r2, r2, #30
 80058f2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	695a      	ldr	r2, [r3, #20]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005902:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	617b      	str	r3, [r7, #20]
 800590a:	e00a      	b.n	8005922 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 020e 	bic.w	r2, r2, #14
 800591a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a3c      	ldr	r2, [pc, #240]	@ (8005a18 <HAL_DMA_Abort+0x214>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d072      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a3a      	ldr	r2, [pc, #232]	@ (8005a1c <HAL_DMA_Abort+0x218>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d06d      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a39      	ldr	r2, [pc, #228]	@ (8005a20 <HAL_DMA_Abort+0x21c>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d068      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a37      	ldr	r2, [pc, #220]	@ (8005a24 <HAL_DMA_Abort+0x220>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d063      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a36      	ldr	r2, [pc, #216]	@ (8005a28 <HAL_DMA_Abort+0x224>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d05e      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a34      	ldr	r2, [pc, #208]	@ (8005a2c <HAL_DMA_Abort+0x228>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d059      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a33      	ldr	r2, [pc, #204]	@ (8005a30 <HAL_DMA_Abort+0x22c>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d054      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a31      	ldr	r2, [pc, #196]	@ (8005a34 <HAL_DMA_Abort+0x230>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d04f      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a30      	ldr	r2, [pc, #192]	@ (8005a38 <HAL_DMA_Abort+0x234>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d04a      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a2e      	ldr	r2, [pc, #184]	@ (8005a3c <HAL_DMA_Abort+0x238>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d045      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a2d      	ldr	r2, [pc, #180]	@ (8005a40 <HAL_DMA_Abort+0x23c>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d040      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a2b      	ldr	r2, [pc, #172]	@ (8005a44 <HAL_DMA_Abort+0x240>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d03b      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a2a      	ldr	r2, [pc, #168]	@ (8005a48 <HAL_DMA_Abort+0x244>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d036      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a28      	ldr	r2, [pc, #160]	@ (8005a4c <HAL_DMA_Abort+0x248>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d031      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a27      	ldr	r2, [pc, #156]	@ (8005a50 <HAL_DMA_Abort+0x24c>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d02c      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a25      	ldr	r2, [pc, #148]	@ (8005a54 <HAL_DMA_Abort+0x250>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d027      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a24      	ldr	r2, [pc, #144]	@ (8005a58 <HAL_DMA_Abort+0x254>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d022      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a22      	ldr	r2, [pc, #136]	@ (8005a5c <HAL_DMA_Abort+0x258>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d01d      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a21      	ldr	r2, [pc, #132]	@ (8005a60 <HAL_DMA_Abort+0x25c>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d018      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a1f      	ldr	r2, [pc, #124]	@ (8005a64 <HAL_DMA_Abort+0x260>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d013      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a1e      	ldr	r2, [pc, #120]	@ (8005a68 <HAL_DMA_Abort+0x264>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d00e      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a1c      	ldr	r2, [pc, #112]	@ (8005a6c <HAL_DMA_Abort+0x268>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d009      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a1b      	ldr	r2, [pc, #108]	@ (8005a70 <HAL_DMA_Abort+0x26c>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d004      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a19      	ldr	r2, [pc, #100]	@ (8005a74 <HAL_DMA_Abort+0x270>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d132      	bne.n	8005a78 <HAL_DMA_Abort+0x274>
 8005a12:	2301      	movs	r3, #1
 8005a14:	e031      	b.n	8005a7a <HAL_DMA_Abort+0x276>
 8005a16:	bf00      	nop
 8005a18:	40020010 	.word	0x40020010
 8005a1c:	40020028 	.word	0x40020028
 8005a20:	40020040 	.word	0x40020040
 8005a24:	40020058 	.word	0x40020058
 8005a28:	40020070 	.word	0x40020070
 8005a2c:	40020088 	.word	0x40020088
 8005a30:	400200a0 	.word	0x400200a0
 8005a34:	400200b8 	.word	0x400200b8
 8005a38:	40020410 	.word	0x40020410
 8005a3c:	40020428 	.word	0x40020428
 8005a40:	40020440 	.word	0x40020440
 8005a44:	40020458 	.word	0x40020458
 8005a48:	40020470 	.word	0x40020470
 8005a4c:	40020488 	.word	0x40020488
 8005a50:	400204a0 	.word	0x400204a0
 8005a54:	400204b8 	.word	0x400204b8
 8005a58:	58025408 	.word	0x58025408
 8005a5c:	5802541c 	.word	0x5802541c
 8005a60:	58025430 	.word	0x58025430
 8005a64:	58025444 	.word	0x58025444
 8005a68:	58025458 	.word	0x58025458
 8005a6c:	5802546c 	.word	0x5802546c
 8005a70:	58025480 	.word	0x58025480
 8005a74:	58025494 	.word	0x58025494
 8005a78:	2300      	movs	r3, #0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d007      	beq.n	8005a8e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a6d      	ldr	r2, [pc, #436]	@ (8005c48 <HAL_DMA_Abort+0x444>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d04a      	beq.n	8005b2e <HAL_DMA_Abort+0x32a>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a6b      	ldr	r2, [pc, #428]	@ (8005c4c <HAL_DMA_Abort+0x448>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d045      	beq.n	8005b2e <HAL_DMA_Abort+0x32a>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a6a      	ldr	r2, [pc, #424]	@ (8005c50 <HAL_DMA_Abort+0x44c>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d040      	beq.n	8005b2e <HAL_DMA_Abort+0x32a>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a68      	ldr	r2, [pc, #416]	@ (8005c54 <HAL_DMA_Abort+0x450>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d03b      	beq.n	8005b2e <HAL_DMA_Abort+0x32a>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a67      	ldr	r2, [pc, #412]	@ (8005c58 <HAL_DMA_Abort+0x454>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d036      	beq.n	8005b2e <HAL_DMA_Abort+0x32a>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a65      	ldr	r2, [pc, #404]	@ (8005c5c <HAL_DMA_Abort+0x458>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d031      	beq.n	8005b2e <HAL_DMA_Abort+0x32a>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a64      	ldr	r2, [pc, #400]	@ (8005c60 <HAL_DMA_Abort+0x45c>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d02c      	beq.n	8005b2e <HAL_DMA_Abort+0x32a>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a62      	ldr	r2, [pc, #392]	@ (8005c64 <HAL_DMA_Abort+0x460>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d027      	beq.n	8005b2e <HAL_DMA_Abort+0x32a>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a61      	ldr	r2, [pc, #388]	@ (8005c68 <HAL_DMA_Abort+0x464>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d022      	beq.n	8005b2e <HAL_DMA_Abort+0x32a>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a5f      	ldr	r2, [pc, #380]	@ (8005c6c <HAL_DMA_Abort+0x468>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d01d      	beq.n	8005b2e <HAL_DMA_Abort+0x32a>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a5e      	ldr	r2, [pc, #376]	@ (8005c70 <HAL_DMA_Abort+0x46c>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d018      	beq.n	8005b2e <HAL_DMA_Abort+0x32a>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a5c      	ldr	r2, [pc, #368]	@ (8005c74 <HAL_DMA_Abort+0x470>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d013      	beq.n	8005b2e <HAL_DMA_Abort+0x32a>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a5b      	ldr	r2, [pc, #364]	@ (8005c78 <HAL_DMA_Abort+0x474>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d00e      	beq.n	8005b2e <HAL_DMA_Abort+0x32a>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a59      	ldr	r2, [pc, #356]	@ (8005c7c <HAL_DMA_Abort+0x478>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d009      	beq.n	8005b2e <HAL_DMA_Abort+0x32a>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a58      	ldr	r2, [pc, #352]	@ (8005c80 <HAL_DMA_Abort+0x47c>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d004      	beq.n	8005b2e <HAL_DMA_Abort+0x32a>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a56      	ldr	r2, [pc, #344]	@ (8005c84 <HAL_DMA_Abort+0x480>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d108      	bne.n	8005b40 <HAL_DMA_Abort+0x33c>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f022 0201 	bic.w	r2, r2, #1
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	e007      	b.n	8005b50 <HAL_DMA_Abort+0x34c>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f022 0201 	bic.w	r2, r2, #1
 8005b4e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005b50:	e013      	b.n	8005b7a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b52:	f7fd f9ed 	bl	8002f30 <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	2b05      	cmp	r3, #5
 8005b5e:	d90c      	bls.n	8005b7a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2220      	movs	r2, #32
 8005b64:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2203      	movs	r2, #3
 8005b6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e12d      	b.n	8005dd6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1e5      	bne.n	8005b52 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a2f      	ldr	r2, [pc, #188]	@ (8005c48 <HAL_DMA_Abort+0x444>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d04a      	beq.n	8005c26 <HAL_DMA_Abort+0x422>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a2d      	ldr	r2, [pc, #180]	@ (8005c4c <HAL_DMA_Abort+0x448>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d045      	beq.n	8005c26 <HAL_DMA_Abort+0x422>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a2c      	ldr	r2, [pc, #176]	@ (8005c50 <HAL_DMA_Abort+0x44c>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d040      	beq.n	8005c26 <HAL_DMA_Abort+0x422>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a2a      	ldr	r2, [pc, #168]	@ (8005c54 <HAL_DMA_Abort+0x450>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d03b      	beq.n	8005c26 <HAL_DMA_Abort+0x422>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a29      	ldr	r2, [pc, #164]	@ (8005c58 <HAL_DMA_Abort+0x454>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d036      	beq.n	8005c26 <HAL_DMA_Abort+0x422>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a27      	ldr	r2, [pc, #156]	@ (8005c5c <HAL_DMA_Abort+0x458>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d031      	beq.n	8005c26 <HAL_DMA_Abort+0x422>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a26      	ldr	r2, [pc, #152]	@ (8005c60 <HAL_DMA_Abort+0x45c>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d02c      	beq.n	8005c26 <HAL_DMA_Abort+0x422>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a24      	ldr	r2, [pc, #144]	@ (8005c64 <HAL_DMA_Abort+0x460>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d027      	beq.n	8005c26 <HAL_DMA_Abort+0x422>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a23      	ldr	r2, [pc, #140]	@ (8005c68 <HAL_DMA_Abort+0x464>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d022      	beq.n	8005c26 <HAL_DMA_Abort+0x422>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a21      	ldr	r2, [pc, #132]	@ (8005c6c <HAL_DMA_Abort+0x468>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d01d      	beq.n	8005c26 <HAL_DMA_Abort+0x422>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a20      	ldr	r2, [pc, #128]	@ (8005c70 <HAL_DMA_Abort+0x46c>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d018      	beq.n	8005c26 <HAL_DMA_Abort+0x422>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a1e      	ldr	r2, [pc, #120]	@ (8005c74 <HAL_DMA_Abort+0x470>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d013      	beq.n	8005c26 <HAL_DMA_Abort+0x422>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a1d      	ldr	r2, [pc, #116]	@ (8005c78 <HAL_DMA_Abort+0x474>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d00e      	beq.n	8005c26 <HAL_DMA_Abort+0x422>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a1b      	ldr	r2, [pc, #108]	@ (8005c7c <HAL_DMA_Abort+0x478>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d009      	beq.n	8005c26 <HAL_DMA_Abort+0x422>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a1a      	ldr	r2, [pc, #104]	@ (8005c80 <HAL_DMA_Abort+0x47c>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d004      	beq.n	8005c26 <HAL_DMA_Abort+0x422>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a18      	ldr	r2, [pc, #96]	@ (8005c84 <HAL_DMA_Abort+0x480>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d101      	bne.n	8005c2a <HAL_DMA_Abort+0x426>
 8005c26:	2301      	movs	r3, #1
 8005c28:	e000      	b.n	8005c2c <HAL_DMA_Abort+0x428>
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d02b      	beq.n	8005c88 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c34:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c3a:	f003 031f 	and.w	r3, r3, #31
 8005c3e:	223f      	movs	r2, #63	@ 0x3f
 8005c40:	409a      	lsls	r2, r3
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	609a      	str	r2, [r3, #8]
 8005c46:	e02a      	b.n	8005c9e <HAL_DMA_Abort+0x49a>
 8005c48:	40020010 	.word	0x40020010
 8005c4c:	40020028 	.word	0x40020028
 8005c50:	40020040 	.word	0x40020040
 8005c54:	40020058 	.word	0x40020058
 8005c58:	40020070 	.word	0x40020070
 8005c5c:	40020088 	.word	0x40020088
 8005c60:	400200a0 	.word	0x400200a0
 8005c64:	400200b8 	.word	0x400200b8
 8005c68:	40020410 	.word	0x40020410
 8005c6c:	40020428 	.word	0x40020428
 8005c70:	40020440 	.word	0x40020440
 8005c74:	40020458 	.word	0x40020458
 8005c78:	40020470 	.word	0x40020470
 8005c7c:	40020488 	.word	0x40020488
 8005c80:	400204a0 	.word	0x400204a0
 8005c84:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c8c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c92:	f003 031f 	and.w	r3, r3, #31
 8005c96:	2201      	movs	r2, #1
 8005c98:	409a      	lsls	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a4f      	ldr	r2, [pc, #316]	@ (8005de0 <HAL_DMA_Abort+0x5dc>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d072      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a4d      	ldr	r2, [pc, #308]	@ (8005de4 <HAL_DMA_Abort+0x5e0>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d06d      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a4c      	ldr	r2, [pc, #304]	@ (8005de8 <HAL_DMA_Abort+0x5e4>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d068      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a4a      	ldr	r2, [pc, #296]	@ (8005dec <HAL_DMA_Abort+0x5e8>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d063      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a49      	ldr	r2, [pc, #292]	@ (8005df0 <HAL_DMA_Abort+0x5ec>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d05e      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a47      	ldr	r2, [pc, #284]	@ (8005df4 <HAL_DMA_Abort+0x5f0>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d059      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a46      	ldr	r2, [pc, #280]	@ (8005df8 <HAL_DMA_Abort+0x5f4>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d054      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a44      	ldr	r2, [pc, #272]	@ (8005dfc <HAL_DMA_Abort+0x5f8>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d04f      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a43      	ldr	r2, [pc, #268]	@ (8005e00 <HAL_DMA_Abort+0x5fc>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d04a      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a41      	ldr	r2, [pc, #260]	@ (8005e04 <HAL_DMA_Abort+0x600>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d045      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a40      	ldr	r2, [pc, #256]	@ (8005e08 <HAL_DMA_Abort+0x604>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d040      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a3e      	ldr	r2, [pc, #248]	@ (8005e0c <HAL_DMA_Abort+0x608>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d03b      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a3d      	ldr	r2, [pc, #244]	@ (8005e10 <HAL_DMA_Abort+0x60c>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d036      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a3b      	ldr	r2, [pc, #236]	@ (8005e14 <HAL_DMA_Abort+0x610>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d031      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a3a      	ldr	r2, [pc, #232]	@ (8005e18 <HAL_DMA_Abort+0x614>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d02c      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a38      	ldr	r2, [pc, #224]	@ (8005e1c <HAL_DMA_Abort+0x618>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d027      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a37      	ldr	r2, [pc, #220]	@ (8005e20 <HAL_DMA_Abort+0x61c>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d022      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a35      	ldr	r2, [pc, #212]	@ (8005e24 <HAL_DMA_Abort+0x620>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d01d      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a34      	ldr	r2, [pc, #208]	@ (8005e28 <HAL_DMA_Abort+0x624>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d018      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a32      	ldr	r2, [pc, #200]	@ (8005e2c <HAL_DMA_Abort+0x628>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d013      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a31      	ldr	r2, [pc, #196]	@ (8005e30 <HAL_DMA_Abort+0x62c>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d00e      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a2f      	ldr	r2, [pc, #188]	@ (8005e34 <HAL_DMA_Abort+0x630>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d009      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a2e      	ldr	r2, [pc, #184]	@ (8005e38 <HAL_DMA_Abort+0x634>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d004      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a2c      	ldr	r2, [pc, #176]	@ (8005e3c <HAL_DMA_Abort+0x638>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d101      	bne.n	8005d92 <HAL_DMA_Abort+0x58e>
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e000      	b.n	8005d94 <HAL_DMA_Abort+0x590>
 8005d92:	2300      	movs	r3, #0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d015      	beq.n	8005dc4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005da0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00c      	beq.n	8005dc4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005db4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005db8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005dc2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3718      	adds	r7, #24
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	40020010 	.word	0x40020010
 8005de4:	40020028 	.word	0x40020028
 8005de8:	40020040 	.word	0x40020040
 8005dec:	40020058 	.word	0x40020058
 8005df0:	40020070 	.word	0x40020070
 8005df4:	40020088 	.word	0x40020088
 8005df8:	400200a0 	.word	0x400200a0
 8005dfc:	400200b8 	.word	0x400200b8
 8005e00:	40020410 	.word	0x40020410
 8005e04:	40020428 	.word	0x40020428
 8005e08:	40020440 	.word	0x40020440
 8005e0c:	40020458 	.word	0x40020458
 8005e10:	40020470 	.word	0x40020470
 8005e14:	40020488 	.word	0x40020488
 8005e18:	400204a0 	.word	0x400204a0
 8005e1c:	400204b8 	.word	0x400204b8
 8005e20:	58025408 	.word	0x58025408
 8005e24:	5802541c 	.word	0x5802541c
 8005e28:	58025430 	.word	0x58025430
 8005e2c:	58025444 	.word	0x58025444
 8005e30:	58025458 	.word	0x58025458
 8005e34:	5802546c 	.word	0x5802546c
 8005e38:	58025480 	.word	0x58025480
 8005e3c:	58025494 	.word	0x58025494

08005e40 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e237      	b.n	80062c2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d004      	beq.n	8005e68 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2280      	movs	r2, #128	@ 0x80
 8005e62:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e22c      	b.n	80062c2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a5c      	ldr	r2, [pc, #368]	@ (8005fe0 <HAL_DMA_Abort_IT+0x1a0>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d04a      	beq.n	8005f08 <HAL_DMA_Abort_IT+0xc8>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a5b      	ldr	r2, [pc, #364]	@ (8005fe4 <HAL_DMA_Abort_IT+0x1a4>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d045      	beq.n	8005f08 <HAL_DMA_Abort_IT+0xc8>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a59      	ldr	r2, [pc, #356]	@ (8005fe8 <HAL_DMA_Abort_IT+0x1a8>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d040      	beq.n	8005f08 <HAL_DMA_Abort_IT+0xc8>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a58      	ldr	r2, [pc, #352]	@ (8005fec <HAL_DMA_Abort_IT+0x1ac>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d03b      	beq.n	8005f08 <HAL_DMA_Abort_IT+0xc8>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a56      	ldr	r2, [pc, #344]	@ (8005ff0 <HAL_DMA_Abort_IT+0x1b0>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d036      	beq.n	8005f08 <HAL_DMA_Abort_IT+0xc8>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a55      	ldr	r2, [pc, #340]	@ (8005ff4 <HAL_DMA_Abort_IT+0x1b4>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d031      	beq.n	8005f08 <HAL_DMA_Abort_IT+0xc8>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a53      	ldr	r2, [pc, #332]	@ (8005ff8 <HAL_DMA_Abort_IT+0x1b8>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d02c      	beq.n	8005f08 <HAL_DMA_Abort_IT+0xc8>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a52      	ldr	r2, [pc, #328]	@ (8005ffc <HAL_DMA_Abort_IT+0x1bc>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d027      	beq.n	8005f08 <HAL_DMA_Abort_IT+0xc8>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a50      	ldr	r2, [pc, #320]	@ (8006000 <HAL_DMA_Abort_IT+0x1c0>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d022      	beq.n	8005f08 <HAL_DMA_Abort_IT+0xc8>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a4f      	ldr	r2, [pc, #316]	@ (8006004 <HAL_DMA_Abort_IT+0x1c4>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d01d      	beq.n	8005f08 <HAL_DMA_Abort_IT+0xc8>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a4d      	ldr	r2, [pc, #308]	@ (8006008 <HAL_DMA_Abort_IT+0x1c8>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d018      	beq.n	8005f08 <HAL_DMA_Abort_IT+0xc8>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a4c      	ldr	r2, [pc, #304]	@ (800600c <HAL_DMA_Abort_IT+0x1cc>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d013      	beq.n	8005f08 <HAL_DMA_Abort_IT+0xc8>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a4a      	ldr	r2, [pc, #296]	@ (8006010 <HAL_DMA_Abort_IT+0x1d0>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d00e      	beq.n	8005f08 <HAL_DMA_Abort_IT+0xc8>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a49      	ldr	r2, [pc, #292]	@ (8006014 <HAL_DMA_Abort_IT+0x1d4>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d009      	beq.n	8005f08 <HAL_DMA_Abort_IT+0xc8>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a47      	ldr	r2, [pc, #284]	@ (8006018 <HAL_DMA_Abort_IT+0x1d8>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d004      	beq.n	8005f08 <HAL_DMA_Abort_IT+0xc8>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a46      	ldr	r2, [pc, #280]	@ (800601c <HAL_DMA_Abort_IT+0x1dc>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d101      	bne.n	8005f0c <HAL_DMA_Abort_IT+0xcc>
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e000      	b.n	8005f0e <HAL_DMA_Abort_IT+0xce>
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f000 8086 	beq.w	8006020 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2204      	movs	r2, #4
 8005f18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a2f      	ldr	r2, [pc, #188]	@ (8005fe0 <HAL_DMA_Abort_IT+0x1a0>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d04a      	beq.n	8005fbc <HAL_DMA_Abort_IT+0x17c>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a2e      	ldr	r2, [pc, #184]	@ (8005fe4 <HAL_DMA_Abort_IT+0x1a4>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d045      	beq.n	8005fbc <HAL_DMA_Abort_IT+0x17c>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a2c      	ldr	r2, [pc, #176]	@ (8005fe8 <HAL_DMA_Abort_IT+0x1a8>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d040      	beq.n	8005fbc <HAL_DMA_Abort_IT+0x17c>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a2b      	ldr	r2, [pc, #172]	@ (8005fec <HAL_DMA_Abort_IT+0x1ac>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d03b      	beq.n	8005fbc <HAL_DMA_Abort_IT+0x17c>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a29      	ldr	r2, [pc, #164]	@ (8005ff0 <HAL_DMA_Abort_IT+0x1b0>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d036      	beq.n	8005fbc <HAL_DMA_Abort_IT+0x17c>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a28      	ldr	r2, [pc, #160]	@ (8005ff4 <HAL_DMA_Abort_IT+0x1b4>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d031      	beq.n	8005fbc <HAL_DMA_Abort_IT+0x17c>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a26      	ldr	r2, [pc, #152]	@ (8005ff8 <HAL_DMA_Abort_IT+0x1b8>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d02c      	beq.n	8005fbc <HAL_DMA_Abort_IT+0x17c>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a25      	ldr	r2, [pc, #148]	@ (8005ffc <HAL_DMA_Abort_IT+0x1bc>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d027      	beq.n	8005fbc <HAL_DMA_Abort_IT+0x17c>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a23      	ldr	r2, [pc, #140]	@ (8006000 <HAL_DMA_Abort_IT+0x1c0>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d022      	beq.n	8005fbc <HAL_DMA_Abort_IT+0x17c>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a22      	ldr	r2, [pc, #136]	@ (8006004 <HAL_DMA_Abort_IT+0x1c4>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d01d      	beq.n	8005fbc <HAL_DMA_Abort_IT+0x17c>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a20      	ldr	r2, [pc, #128]	@ (8006008 <HAL_DMA_Abort_IT+0x1c8>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d018      	beq.n	8005fbc <HAL_DMA_Abort_IT+0x17c>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a1f      	ldr	r2, [pc, #124]	@ (800600c <HAL_DMA_Abort_IT+0x1cc>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d013      	beq.n	8005fbc <HAL_DMA_Abort_IT+0x17c>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a1d      	ldr	r2, [pc, #116]	@ (8006010 <HAL_DMA_Abort_IT+0x1d0>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d00e      	beq.n	8005fbc <HAL_DMA_Abort_IT+0x17c>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a1c      	ldr	r2, [pc, #112]	@ (8006014 <HAL_DMA_Abort_IT+0x1d4>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d009      	beq.n	8005fbc <HAL_DMA_Abort_IT+0x17c>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a1a      	ldr	r2, [pc, #104]	@ (8006018 <HAL_DMA_Abort_IT+0x1d8>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d004      	beq.n	8005fbc <HAL_DMA_Abort_IT+0x17c>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a19      	ldr	r2, [pc, #100]	@ (800601c <HAL_DMA_Abort_IT+0x1dc>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d108      	bne.n	8005fce <HAL_DMA_Abort_IT+0x18e>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f022 0201 	bic.w	r2, r2, #1
 8005fca:	601a      	str	r2, [r3, #0]
 8005fcc:	e178      	b.n	80062c0 <HAL_DMA_Abort_IT+0x480>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f022 0201 	bic.w	r2, r2, #1
 8005fdc:	601a      	str	r2, [r3, #0]
 8005fde:	e16f      	b.n	80062c0 <HAL_DMA_Abort_IT+0x480>
 8005fe0:	40020010 	.word	0x40020010
 8005fe4:	40020028 	.word	0x40020028
 8005fe8:	40020040 	.word	0x40020040
 8005fec:	40020058 	.word	0x40020058
 8005ff0:	40020070 	.word	0x40020070
 8005ff4:	40020088 	.word	0x40020088
 8005ff8:	400200a0 	.word	0x400200a0
 8005ffc:	400200b8 	.word	0x400200b8
 8006000:	40020410 	.word	0x40020410
 8006004:	40020428 	.word	0x40020428
 8006008:	40020440 	.word	0x40020440
 800600c:	40020458 	.word	0x40020458
 8006010:	40020470 	.word	0x40020470
 8006014:	40020488 	.word	0x40020488
 8006018:	400204a0 	.word	0x400204a0
 800601c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 020e 	bic.w	r2, r2, #14
 800602e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a6c      	ldr	r2, [pc, #432]	@ (80061e8 <HAL_DMA_Abort_IT+0x3a8>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d04a      	beq.n	80060d0 <HAL_DMA_Abort_IT+0x290>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a6b      	ldr	r2, [pc, #428]	@ (80061ec <HAL_DMA_Abort_IT+0x3ac>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d045      	beq.n	80060d0 <HAL_DMA_Abort_IT+0x290>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a69      	ldr	r2, [pc, #420]	@ (80061f0 <HAL_DMA_Abort_IT+0x3b0>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d040      	beq.n	80060d0 <HAL_DMA_Abort_IT+0x290>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a68      	ldr	r2, [pc, #416]	@ (80061f4 <HAL_DMA_Abort_IT+0x3b4>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d03b      	beq.n	80060d0 <HAL_DMA_Abort_IT+0x290>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a66      	ldr	r2, [pc, #408]	@ (80061f8 <HAL_DMA_Abort_IT+0x3b8>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d036      	beq.n	80060d0 <HAL_DMA_Abort_IT+0x290>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a65      	ldr	r2, [pc, #404]	@ (80061fc <HAL_DMA_Abort_IT+0x3bc>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d031      	beq.n	80060d0 <HAL_DMA_Abort_IT+0x290>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a63      	ldr	r2, [pc, #396]	@ (8006200 <HAL_DMA_Abort_IT+0x3c0>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d02c      	beq.n	80060d0 <HAL_DMA_Abort_IT+0x290>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a62      	ldr	r2, [pc, #392]	@ (8006204 <HAL_DMA_Abort_IT+0x3c4>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d027      	beq.n	80060d0 <HAL_DMA_Abort_IT+0x290>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a60      	ldr	r2, [pc, #384]	@ (8006208 <HAL_DMA_Abort_IT+0x3c8>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d022      	beq.n	80060d0 <HAL_DMA_Abort_IT+0x290>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a5f      	ldr	r2, [pc, #380]	@ (800620c <HAL_DMA_Abort_IT+0x3cc>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d01d      	beq.n	80060d0 <HAL_DMA_Abort_IT+0x290>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a5d      	ldr	r2, [pc, #372]	@ (8006210 <HAL_DMA_Abort_IT+0x3d0>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d018      	beq.n	80060d0 <HAL_DMA_Abort_IT+0x290>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a5c      	ldr	r2, [pc, #368]	@ (8006214 <HAL_DMA_Abort_IT+0x3d4>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d013      	beq.n	80060d0 <HAL_DMA_Abort_IT+0x290>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a5a      	ldr	r2, [pc, #360]	@ (8006218 <HAL_DMA_Abort_IT+0x3d8>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d00e      	beq.n	80060d0 <HAL_DMA_Abort_IT+0x290>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a59      	ldr	r2, [pc, #356]	@ (800621c <HAL_DMA_Abort_IT+0x3dc>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d009      	beq.n	80060d0 <HAL_DMA_Abort_IT+0x290>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a57      	ldr	r2, [pc, #348]	@ (8006220 <HAL_DMA_Abort_IT+0x3e0>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d004      	beq.n	80060d0 <HAL_DMA_Abort_IT+0x290>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a56      	ldr	r2, [pc, #344]	@ (8006224 <HAL_DMA_Abort_IT+0x3e4>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d108      	bne.n	80060e2 <HAL_DMA_Abort_IT+0x2a2>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f022 0201 	bic.w	r2, r2, #1
 80060de:	601a      	str	r2, [r3, #0]
 80060e0:	e007      	b.n	80060f2 <HAL_DMA_Abort_IT+0x2b2>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f022 0201 	bic.w	r2, r2, #1
 80060f0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a3c      	ldr	r2, [pc, #240]	@ (80061e8 <HAL_DMA_Abort_IT+0x3a8>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d072      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a3a      	ldr	r2, [pc, #232]	@ (80061ec <HAL_DMA_Abort_IT+0x3ac>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d06d      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a39      	ldr	r2, [pc, #228]	@ (80061f0 <HAL_DMA_Abort_IT+0x3b0>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d068      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a37      	ldr	r2, [pc, #220]	@ (80061f4 <HAL_DMA_Abort_IT+0x3b4>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d063      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a36      	ldr	r2, [pc, #216]	@ (80061f8 <HAL_DMA_Abort_IT+0x3b8>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d05e      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a34      	ldr	r2, [pc, #208]	@ (80061fc <HAL_DMA_Abort_IT+0x3bc>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d059      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a33      	ldr	r2, [pc, #204]	@ (8006200 <HAL_DMA_Abort_IT+0x3c0>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d054      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a31      	ldr	r2, [pc, #196]	@ (8006204 <HAL_DMA_Abort_IT+0x3c4>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d04f      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a30      	ldr	r2, [pc, #192]	@ (8006208 <HAL_DMA_Abort_IT+0x3c8>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d04a      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a2e      	ldr	r2, [pc, #184]	@ (800620c <HAL_DMA_Abort_IT+0x3cc>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d045      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a2d      	ldr	r2, [pc, #180]	@ (8006210 <HAL_DMA_Abort_IT+0x3d0>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d040      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a2b      	ldr	r2, [pc, #172]	@ (8006214 <HAL_DMA_Abort_IT+0x3d4>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d03b      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a2a      	ldr	r2, [pc, #168]	@ (8006218 <HAL_DMA_Abort_IT+0x3d8>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d036      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a28      	ldr	r2, [pc, #160]	@ (800621c <HAL_DMA_Abort_IT+0x3dc>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d031      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a27      	ldr	r2, [pc, #156]	@ (8006220 <HAL_DMA_Abort_IT+0x3e0>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d02c      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a25      	ldr	r2, [pc, #148]	@ (8006224 <HAL_DMA_Abort_IT+0x3e4>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d027      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a24      	ldr	r2, [pc, #144]	@ (8006228 <HAL_DMA_Abort_IT+0x3e8>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d022      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a22      	ldr	r2, [pc, #136]	@ (800622c <HAL_DMA_Abort_IT+0x3ec>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d01d      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a21      	ldr	r2, [pc, #132]	@ (8006230 <HAL_DMA_Abort_IT+0x3f0>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d018      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a1f      	ldr	r2, [pc, #124]	@ (8006234 <HAL_DMA_Abort_IT+0x3f4>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d013      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a1e      	ldr	r2, [pc, #120]	@ (8006238 <HAL_DMA_Abort_IT+0x3f8>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d00e      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a1c      	ldr	r2, [pc, #112]	@ (800623c <HAL_DMA_Abort_IT+0x3fc>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d009      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a1b      	ldr	r2, [pc, #108]	@ (8006240 <HAL_DMA_Abort_IT+0x400>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d004      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a19      	ldr	r2, [pc, #100]	@ (8006244 <HAL_DMA_Abort_IT+0x404>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d132      	bne.n	8006248 <HAL_DMA_Abort_IT+0x408>
 80061e2:	2301      	movs	r3, #1
 80061e4:	e031      	b.n	800624a <HAL_DMA_Abort_IT+0x40a>
 80061e6:	bf00      	nop
 80061e8:	40020010 	.word	0x40020010
 80061ec:	40020028 	.word	0x40020028
 80061f0:	40020040 	.word	0x40020040
 80061f4:	40020058 	.word	0x40020058
 80061f8:	40020070 	.word	0x40020070
 80061fc:	40020088 	.word	0x40020088
 8006200:	400200a0 	.word	0x400200a0
 8006204:	400200b8 	.word	0x400200b8
 8006208:	40020410 	.word	0x40020410
 800620c:	40020428 	.word	0x40020428
 8006210:	40020440 	.word	0x40020440
 8006214:	40020458 	.word	0x40020458
 8006218:	40020470 	.word	0x40020470
 800621c:	40020488 	.word	0x40020488
 8006220:	400204a0 	.word	0x400204a0
 8006224:	400204b8 	.word	0x400204b8
 8006228:	58025408 	.word	0x58025408
 800622c:	5802541c 	.word	0x5802541c
 8006230:	58025430 	.word	0x58025430
 8006234:	58025444 	.word	0x58025444
 8006238:	58025458 	.word	0x58025458
 800623c:	5802546c 	.word	0x5802546c
 8006240:	58025480 	.word	0x58025480
 8006244:	58025494 	.word	0x58025494
 8006248:	2300      	movs	r3, #0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d028      	beq.n	80062a0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006258:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800625c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006262:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006268:	f003 031f 	and.w	r3, r3, #31
 800626c:	2201      	movs	r2, #1
 800626e:	409a      	lsls	r2, r3
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800627c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00c      	beq.n	80062a0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006290:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006294:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800629e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d003      	beq.n	80062c0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop

080062cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b08a      	sub	sp, #40	@ 0x28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80062d4:	2300      	movs	r3, #0
 80062d6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80062d8:	4b67      	ldr	r3, [pc, #412]	@ (8006478 <HAL_DMA_IRQHandler+0x1ac>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a67      	ldr	r2, [pc, #412]	@ (800647c <HAL_DMA_IRQHandler+0x1b0>)
 80062de:	fba2 2303 	umull	r2, r3, r2, r3
 80062e2:	0a9b      	lsrs	r3, r3, #10
 80062e4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062ea:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062f0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80062f2:	6a3b      	ldr	r3, [r7, #32]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a5f      	ldr	r2, [pc, #380]	@ (8006480 <HAL_DMA_IRQHandler+0x1b4>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d04a      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a5d      	ldr	r2, [pc, #372]	@ (8006484 <HAL_DMA_IRQHandler+0x1b8>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d045      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a5c      	ldr	r2, [pc, #368]	@ (8006488 <HAL_DMA_IRQHandler+0x1bc>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d040      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a5a      	ldr	r2, [pc, #360]	@ (800648c <HAL_DMA_IRQHandler+0x1c0>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d03b      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a59      	ldr	r2, [pc, #356]	@ (8006490 <HAL_DMA_IRQHandler+0x1c4>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d036      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a57      	ldr	r2, [pc, #348]	@ (8006494 <HAL_DMA_IRQHandler+0x1c8>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d031      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a56      	ldr	r2, [pc, #344]	@ (8006498 <HAL_DMA_IRQHandler+0x1cc>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d02c      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a54      	ldr	r2, [pc, #336]	@ (800649c <HAL_DMA_IRQHandler+0x1d0>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d027      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a53      	ldr	r2, [pc, #332]	@ (80064a0 <HAL_DMA_IRQHandler+0x1d4>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d022      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a51      	ldr	r2, [pc, #324]	@ (80064a4 <HAL_DMA_IRQHandler+0x1d8>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d01d      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a50      	ldr	r2, [pc, #320]	@ (80064a8 <HAL_DMA_IRQHandler+0x1dc>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d018      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a4e      	ldr	r2, [pc, #312]	@ (80064ac <HAL_DMA_IRQHandler+0x1e0>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d013      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a4d      	ldr	r2, [pc, #308]	@ (80064b0 <HAL_DMA_IRQHandler+0x1e4>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d00e      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a4b      	ldr	r2, [pc, #300]	@ (80064b4 <HAL_DMA_IRQHandler+0x1e8>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d009      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a4a      	ldr	r2, [pc, #296]	@ (80064b8 <HAL_DMA_IRQHandler+0x1ec>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d004      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a48      	ldr	r2, [pc, #288]	@ (80064bc <HAL_DMA_IRQHandler+0x1f0>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d101      	bne.n	80063a2 <HAL_DMA_IRQHandler+0xd6>
 800639e:	2301      	movs	r3, #1
 80063a0:	e000      	b.n	80063a4 <HAL_DMA_IRQHandler+0xd8>
 80063a2:	2300      	movs	r3, #0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f000 842b 	beq.w	8006c00 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063ae:	f003 031f 	and.w	r3, r3, #31
 80063b2:	2208      	movs	r2, #8
 80063b4:	409a      	lsls	r2, r3
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	4013      	ands	r3, r2
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f000 80a2 	beq.w	8006504 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a2e      	ldr	r2, [pc, #184]	@ (8006480 <HAL_DMA_IRQHandler+0x1b4>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d04a      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a2d      	ldr	r2, [pc, #180]	@ (8006484 <HAL_DMA_IRQHandler+0x1b8>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d045      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a2b      	ldr	r2, [pc, #172]	@ (8006488 <HAL_DMA_IRQHandler+0x1bc>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d040      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a2a      	ldr	r2, [pc, #168]	@ (800648c <HAL_DMA_IRQHandler+0x1c0>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d03b      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a28      	ldr	r2, [pc, #160]	@ (8006490 <HAL_DMA_IRQHandler+0x1c4>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d036      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a27      	ldr	r2, [pc, #156]	@ (8006494 <HAL_DMA_IRQHandler+0x1c8>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d031      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a25      	ldr	r2, [pc, #148]	@ (8006498 <HAL_DMA_IRQHandler+0x1cc>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d02c      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a24      	ldr	r2, [pc, #144]	@ (800649c <HAL_DMA_IRQHandler+0x1d0>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d027      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a22      	ldr	r2, [pc, #136]	@ (80064a0 <HAL_DMA_IRQHandler+0x1d4>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d022      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a21      	ldr	r2, [pc, #132]	@ (80064a4 <HAL_DMA_IRQHandler+0x1d8>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d01d      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a1f      	ldr	r2, [pc, #124]	@ (80064a8 <HAL_DMA_IRQHandler+0x1dc>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d018      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a1e      	ldr	r2, [pc, #120]	@ (80064ac <HAL_DMA_IRQHandler+0x1e0>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d013      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a1c      	ldr	r2, [pc, #112]	@ (80064b0 <HAL_DMA_IRQHandler+0x1e4>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d00e      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a1b      	ldr	r2, [pc, #108]	@ (80064b4 <HAL_DMA_IRQHandler+0x1e8>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d009      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a19      	ldr	r2, [pc, #100]	@ (80064b8 <HAL_DMA_IRQHandler+0x1ec>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d004      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a18      	ldr	r2, [pc, #96]	@ (80064bc <HAL_DMA_IRQHandler+0x1f0>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d12f      	bne.n	80064c0 <HAL_DMA_IRQHandler+0x1f4>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 0304 	and.w	r3, r3, #4
 800646a:	2b00      	cmp	r3, #0
 800646c:	bf14      	ite	ne
 800646e:	2301      	movne	r3, #1
 8006470:	2300      	moveq	r3, #0
 8006472:	b2db      	uxtb	r3, r3
 8006474:	e02e      	b.n	80064d4 <HAL_DMA_IRQHandler+0x208>
 8006476:	bf00      	nop
 8006478:	24000000 	.word	0x24000000
 800647c:	1b4e81b5 	.word	0x1b4e81b5
 8006480:	40020010 	.word	0x40020010
 8006484:	40020028 	.word	0x40020028
 8006488:	40020040 	.word	0x40020040
 800648c:	40020058 	.word	0x40020058
 8006490:	40020070 	.word	0x40020070
 8006494:	40020088 	.word	0x40020088
 8006498:	400200a0 	.word	0x400200a0
 800649c:	400200b8 	.word	0x400200b8
 80064a0:	40020410 	.word	0x40020410
 80064a4:	40020428 	.word	0x40020428
 80064a8:	40020440 	.word	0x40020440
 80064ac:	40020458 	.word	0x40020458
 80064b0:	40020470 	.word	0x40020470
 80064b4:	40020488 	.word	0x40020488
 80064b8:	400204a0 	.word	0x400204a0
 80064bc:	400204b8 	.word	0x400204b8
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0308 	and.w	r3, r3, #8
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	bf14      	ite	ne
 80064ce:	2301      	movne	r3, #1
 80064d0:	2300      	moveq	r3, #0
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d015      	beq.n	8006504 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f022 0204 	bic.w	r2, r2, #4
 80064e6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064ec:	f003 031f 	and.w	r3, r3, #31
 80064f0:	2208      	movs	r2, #8
 80064f2:	409a      	lsls	r2, r3
 80064f4:	6a3b      	ldr	r3, [r7, #32]
 80064f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064fc:	f043 0201 	orr.w	r2, r3, #1
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006508:	f003 031f 	and.w	r3, r3, #31
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	fa22 f303 	lsr.w	r3, r2, r3
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b00      	cmp	r3, #0
 8006518:	d06e      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a69      	ldr	r2, [pc, #420]	@ (80066c4 <HAL_DMA_IRQHandler+0x3f8>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d04a      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a67      	ldr	r2, [pc, #412]	@ (80066c8 <HAL_DMA_IRQHandler+0x3fc>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d045      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a66      	ldr	r2, [pc, #408]	@ (80066cc <HAL_DMA_IRQHandler+0x400>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d040      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a64      	ldr	r2, [pc, #400]	@ (80066d0 <HAL_DMA_IRQHandler+0x404>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d03b      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a63      	ldr	r2, [pc, #396]	@ (80066d4 <HAL_DMA_IRQHandler+0x408>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d036      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a61      	ldr	r2, [pc, #388]	@ (80066d8 <HAL_DMA_IRQHandler+0x40c>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d031      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a60      	ldr	r2, [pc, #384]	@ (80066dc <HAL_DMA_IRQHandler+0x410>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d02c      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a5e      	ldr	r2, [pc, #376]	@ (80066e0 <HAL_DMA_IRQHandler+0x414>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d027      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a5d      	ldr	r2, [pc, #372]	@ (80066e4 <HAL_DMA_IRQHandler+0x418>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d022      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a5b      	ldr	r2, [pc, #364]	@ (80066e8 <HAL_DMA_IRQHandler+0x41c>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d01d      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a5a      	ldr	r2, [pc, #360]	@ (80066ec <HAL_DMA_IRQHandler+0x420>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d018      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a58      	ldr	r2, [pc, #352]	@ (80066f0 <HAL_DMA_IRQHandler+0x424>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d013      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a57      	ldr	r2, [pc, #348]	@ (80066f4 <HAL_DMA_IRQHandler+0x428>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d00e      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a55      	ldr	r2, [pc, #340]	@ (80066f8 <HAL_DMA_IRQHandler+0x42c>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d009      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a54      	ldr	r2, [pc, #336]	@ (80066fc <HAL_DMA_IRQHandler+0x430>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d004      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a52      	ldr	r2, [pc, #328]	@ (8006700 <HAL_DMA_IRQHandler+0x434>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d10a      	bne.n	80065d0 <HAL_DMA_IRQHandler+0x304>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	695b      	ldr	r3, [r3, #20]
 80065c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	bf14      	ite	ne
 80065c8:	2301      	movne	r3, #1
 80065ca:	2300      	moveq	r3, #0
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	e003      	b.n	80065d8 <HAL_DMA_IRQHandler+0x30c>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2300      	movs	r3, #0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00d      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065e0:	f003 031f 	and.w	r3, r3, #31
 80065e4:	2201      	movs	r2, #1
 80065e6:	409a      	lsls	r2, r3
 80065e8:	6a3b      	ldr	r3, [r7, #32]
 80065ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065f0:	f043 0202 	orr.w	r2, r3, #2
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065fc:	f003 031f 	and.w	r3, r3, #31
 8006600:	2204      	movs	r2, #4
 8006602:	409a      	lsls	r2, r3
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	4013      	ands	r3, r2
 8006608:	2b00      	cmp	r3, #0
 800660a:	f000 808f 	beq.w	800672c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a2c      	ldr	r2, [pc, #176]	@ (80066c4 <HAL_DMA_IRQHandler+0x3f8>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d04a      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a2a      	ldr	r2, [pc, #168]	@ (80066c8 <HAL_DMA_IRQHandler+0x3fc>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d045      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a29      	ldr	r2, [pc, #164]	@ (80066cc <HAL_DMA_IRQHandler+0x400>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d040      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a27      	ldr	r2, [pc, #156]	@ (80066d0 <HAL_DMA_IRQHandler+0x404>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d03b      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a26      	ldr	r2, [pc, #152]	@ (80066d4 <HAL_DMA_IRQHandler+0x408>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d036      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a24      	ldr	r2, [pc, #144]	@ (80066d8 <HAL_DMA_IRQHandler+0x40c>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d031      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a23      	ldr	r2, [pc, #140]	@ (80066dc <HAL_DMA_IRQHandler+0x410>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d02c      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a21      	ldr	r2, [pc, #132]	@ (80066e0 <HAL_DMA_IRQHandler+0x414>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d027      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a20      	ldr	r2, [pc, #128]	@ (80066e4 <HAL_DMA_IRQHandler+0x418>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d022      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a1e      	ldr	r2, [pc, #120]	@ (80066e8 <HAL_DMA_IRQHandler+0x41c>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d01d      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a1d      	ldr	r2, [pc, #116]	@ (80066ec <HAL_DMA_IRQHandler+0x420>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d018      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a1b      	ldr	r2, [pc, #108]	@ (80066f0 <HAL_DMA_IRQHandler+0x424>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d013      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a1a      	ldr	r2, [pc, #104]	@ (80066f4 <HAL_DMA_IRQHandler+0x428>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d00e      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a18      	ldr	r2, [pc, #96]	@ (80066f8 <HAL_DMA_IRQHandler+0x42c>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d009      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a17      	ldr	r2, [pc, #92]	@ (80066fc <HAL_DMA_IRQHandler+0x430>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d004      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a15      	ldr	r2, [pc, #84]	@ (8006700 <HAL_DMA_IRQHandler+0x434>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d12a      	bne.n	8006704 <HAL_DMA_IRQHandler+0x438>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 0302 	and.w	r3, r3, #2
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	bf14      	ite	ne
 80066bc:	2301      	movne	r3, #1
 80066be:	2300      	moveq	r3, #0
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	e023      	b.n	800670c <HAL_DMA_IRQHandler+0x440>
 80066c4:	40020010 	.word	0x40020010
 80066c8:	40020028 	.word	0x40020028
 80066cc:	40020040 	.word	0x40020040
 80066d0:	40020058 	.word	0x40020058
 80066d4:	40020070 	.word	0x40020070
 80066d8:	40020088 	.word	0x40020088
 80066dc:	400200a0 	.word	0x400200a0
 80066e0:	400200b8 	.word	0x400200b8
 80066e4:	40020410 	.word	0x40020410
 80066e8:	40020428 	.word	0x40020428
 80066ec:	40020440 	.word	0x40020440
 80066f0:	40020458 	.word	0x40020458
 80066f4:	40020470 	.word	0x40020470
 80066f8:	40020488 	.word	0x40020488
 80066fc:	400204a0 	.word	0x400204a0
 8006700:	400204b8 	.word	0x400204b8
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2300      	movs	r3, #0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00d      	beq.n	800672c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006714:	f003 031f 	and.w	r3, r3, #31
 8006718:	2204      	movs	r2, #4
 800671a:	409a      	lsls	r2, r3
 800671c:	6a3b      	ldr	r3, [r7, #32]
 800671e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006724:	f043 0204 	orr.w	r2, r3, #4
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006730:	f003 031f 	and.w	r3, r3, #31
 8006734:	2210      	movs	r2, #16
 8006736:	409a      	lsls	r2, r3
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	4013      	ands	r3, r2
 800673c:	2b00      	cmp	r3, #0
 800673e:	f000 80a6 	beq.w	800688e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a85      	ldr	r2, [pc, #532]	@ (800695c <HAL_DMA_IRQHandler+0x690>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d04a      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a83      	ldr	r2, [pc, #524]	@ (8006960 <HAL_DMA_IRQHandler+0x694>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d045      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a82      	ldr	r2, [pc, #520]	@ (8006964 <HAL_DMA_IRQHandler+0x698>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d040      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a80      	ldr	r2, [pc, #512]	@ (8006968 <HAL_DMA_IRQHandler+0x69c>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d03b      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a7f      	ldr	r2, [pc, #508]	@ (800696c <HAL_DMA_IRQHandler+0x6a0>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d036      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a7d      	ldr	r2, [pc, #500]	@ (8006970 <HAL_DMA_IRQHandler+0x6a4>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d031      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a7c      	ldr	r2, [pc, #496]	@ (8006974 <HAL_DMA_IRQHandler+0x6a8>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d02c      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a7a      	ldr	r2, [pc, #488]	@ (8006978 <HAL_DMA_IRQHandler+0x6ac>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d027      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a79      	ldr	r2, [pc, #484]	@ (800697c <HAL_DMA_IRQHandler+0x6b0>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d022      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a77      	ldr	r2, [pc, #476]	@ (8006980 <HAL_DMA_IRQHandler+0x6b4>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d01d      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a76      	ldr	r2, [pc, #472]	@ (8006984 <HAL_DMA_IRQHandler+0x6b8>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d018      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a74      	ldr	r2, [pc, #464]	@ (8006988 <HAL_DMA_IRQHandler+0x6bc>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d013      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a73      	ldr	r2, [pc, #460]	@ (800698c <HAL_DMA_IRQHandler+0x6c0>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d00e      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a71      	ldr	r2, [pc, #452]	@ (8006990 <HAL_DMA_IRQHandler+0x6c4>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d009      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a70      	ldr	r2, [pc, #448]	@ (8006994 <HAL_DMA_IRQHandler+0x6c8>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d004      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a6e      	ldr	r2, [pc, #440]	@ (8006998 <HAL_DMA_IRQHandler+0x6cc>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d10a      	bne.n	80067f8 <HAL_DMA_IRQHandler+0x52c>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0308 	and.w	r3, r3, #8
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	bf14      	ite	ne
 80067f0:	2301      	movne	r3, #1
 80067f2:	2300      	moveq	r3, #0
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	e009      	b.n	800680c <HAL_DMA_IRQHandler+0x540>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0304 	and.w	r3, r3, #4
 8006802:	2b00      	cmp	r3, #0
 8006804:	bf14      	ite	ne
 8006806:	2301      	movne	r3, #1
 8006808:	2300      	moveq	r3, #0
 800680a:	b2db      	uxtb	r3, r3
 800680c:	2b00      	cmp	r3, #0
 800680e:	d03e      	beq.n	800688e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006814:	f003 031f 	and.w	r3, r3, #31
 8006818:	2210      	movs	r2, #16
 800681a:	409a      	lsls	r2, r3
 800681c:	6a3b      	ldr	r3, [r7, #32]
 800681e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d018      	beq.n	8006860 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d108      	bne.n	800684e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006840:	2b00      	cmp	r3, #0
 8006842:	d024      	beq.n	800688e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	4798      	blx	r3
 800684c:	e01f      	b.n	800688e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006852:	2b00      	cmp	r3, #0
 8006854:	d01b      	beq.n	800688e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	4798      	blx	r3
 800685e:	e016      	b.n	800688e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800686a:	2b00      	cmp	r3, #0
 800686c:	d107      	bne.n	800687e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 0208 	bic.w	r2, r2, #8
 800687c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006882:	2b00      	cmp	r3, #0
 8006884:	d003      	beq.n	800688e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006892:	f003 031f 	and.w	r3, r3, #31
 8006896:	2220      	movs	r2, #32
 8006898:	409a      	lsls	r2, r3
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	4013      	ands	r3, r2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f000 8110 	beq.w	8006ac4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a2c      	ldr	r2, [pc, #176]	@ (800695c <HAL_DMA_IRQHandler+0x690>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d04a      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a2b      	ldr	r2, [pc, #172]	@ (8006960 <HAL_DMA_IRQHandler+0x694>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d045      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a29      	ldr	r2, [pc, #164]	@ (8006964 <HAL_DMA_IRQHandler+0x698>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d040      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a28      	ldr	r2, [pc, #160]	@ (8006968 <HAL_DMA_IRQHandler+0x69c>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d03b      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a26      	ldr	r2, [pc, #152]	@ (800696c <HAL_DMA_IRQHandler+0x6a0>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d036      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a25      	ldr	r2, [pc, #148]	@ (8006970 <HAL_DMA_IRQHandler+0x6a4>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d031      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a23      	ldr	r2, [pc, #140]	@ (8006974 <HAL_DMA_IRQHandler+0x6a8>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d02c      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a22      	ldr	r2, [pc, #136]	@ (8006978 <HAL_DMA_IRQHandler+0x6ac>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d027      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a20      	ldr	r2, [pc, #128]	@ (800697c <HAL_DMA_IRQHandler+0x6b0>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d022      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a1f      	ldr	r2, [pc, #124]	@ (8006980 <HAL_DMA_IRQHandler+0x6b4>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d01d      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a1d      	ldr	r2, [pc, #116]	@ (8006984 <HAL_DMA_IRQHandler+0x6b8>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d018      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a1c      	ldr	r2, [pc, #112]	@ (8006988 <HAL_DMA_IRQHandler+0x6bc>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d013      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a1a      	ldr	r2, [pc, #104]	@ (800698c <HAL_DMA_IRQHandler+0x6c0>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d00e      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a19      	ldr	r2, [pc, #100]	@ (8006990 <HAL_DMA_IRQHandler+0x6c4>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d009      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a17      	ldr	r2, [pc, #92]	@ (8006994 <HAL_DMA_IRQHandler+0x6c8>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d004      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a16      	ldr	r2, [pc, #88]	@ (8006998 <HAL_DMA_IRQHandler+0x6cc>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d12b      	bne.n	800699c <HAL_DMA_IRQHandler+0x6d0>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0310 	and.w	r3, r3, #16
 800694e:	2b00      	cmp	r3, #0
 8006950:	bf14      	ite	ne
 8006952:	2301      	movne	r3, #1
 8006954:	2300      	moveq	r3, #0
 8006956:	b2db      	uxtb	r3, r3
 8006958:	e02a      	b.n	80069b0 <HAL_DMA_IRQHandler+0x6e4>
 800695a:	bf00      	nop
 800695c:	40020010 	.word	0x40020010
 8006960:	40020028 	.word	0x40020028
 8006964:	40020040 	.word	0x40020040
 8006968:	40020058 	.word	0x40020058
 800696c:	40020070 	.word	0x40020070
 8006970:	40020088 	.word	0x40020088
 8006974:	400200a0 	.word	0x400200a0
 8006978:	400200b8 	.word	0x400200b8
 800697c:	40020410 	.word	0x40020410
 8006980:	40020428 	.word	0x40020428
 8006984:	40020440 	.word	0x40020440
 8006988:	40020458 	.word	0x40020458
 800698c:	40020470 	.word	0x40020470
 8006990:	40020488 	.word	0x40020488
 8006994:	400204a0 	.word	0x400204a0
 8006998:	400204b8 	.word	0x400204b8
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 0302 	and.w	r3, r3, #2
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	bf14      	ite	ne
 80069aa:	2301      	movne	r3, #1
 80069ac:	2300      	moveq	r3, #0
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f000 8087 	beq.w	8006ac4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069ba:	f003 031f 	and.w	r3, r3, #31
 80069be:	2220      	movs	r2, #32
 80069c0:	409a      	lsls	r2, r3
 80069c2:	6a3b      	ldr	r3, [r7, #32]
 80069c4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b04      	cmp	r3, #4
 80069d0:	d139      	bne.n	8006a46 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f022 0216 	bic.w	r2, r2, #22
 80069e0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	695a      	ldr	r2, [r3, #20]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80069f0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d103      	bne.n	8006a02 <HAL_DMA_IRQHandler+0x736>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d007      	beq.n	8006a12 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f022 0208 	bic.w	r2, r2, #8
 8006a10:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a16:	f003 031f 	and.w	r3, r3, #31
 8006a1a:	223f      	movs	r2, #63	@ 0x3f
 8006a1c:	409a      	lsls	r2, r3
 8006a1e:	6a3b      	ldr	r3, [r7, #32]
 8006a20:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2201      	movs	r2, #1
 8006a26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f000 834a 	beq.w	80070d0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	4798      	blx	r3
          }
          return;
 8006a44:	e344      	b.n	80070d0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d018      	beq.n	8006a86 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d108      	bne.n	8006a74 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d02c      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	4798      	blx	r3
 8006a72:	e027      	b.n	8006ac4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d023      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	4798      	blx	r3
 8006a84:	e01e      	b.n	8006ac4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d10f      	bne.n	8006ab4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f022 0210 	bic.w	r2, r2, #16
 8006aa2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d003      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	f000 8306 	beq.w	80070da <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ad2:	f003 0301 	and.w	r3, r3, #1
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f000 8088 	beq.w	8006bec <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2204      	movs	r2, #4
 8006ae0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a7a      	ldr	r2, [pc, #488]	@ (8006cd4 <HAL_DMA_IRQHandler+0xa08>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d04a      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a79      	ldr	r2, [pc, #484]	@ (8006cd8 <HAL_DMA_IRQHandler+0xa0c>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d045      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a77      	ldr	r2, [pc, #476]	@ (8006cdc <HAL_DMA_IRQHandler+0xa10>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d040      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a76      	ldr	r2, [pc, #472]	@ (8006ce0 <HAL_DMA_IRQHandler+0xa14>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d03b      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a74      	ldr	r2, [pc, #464]	@ (8006ce4 <HAL_DMA_IRQHandler+0xa18>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d036      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a73      	ldr	r2, [pc, #460]	@ (8006ce8 <HAL_DMA_IRQHandler+0xa1c>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d031      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a71      	ldr	r2, [pc, #452]	@ (8006cec <HAL_DMA_IRQHandler+0xa20>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d02c      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a70      	ldr	r2, [pc, #448]	@ (8006cf0 <HAL_DMA_IRQHandler+0xa24>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d027      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a6e      	ldr	r2, [pc, #440]	@ (8006cf4 <HAL_DMA_IRQHandler+0xa28>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d022      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a6d      	ldr	r2, [pc, #436]	@ (8006cf8 <HAL_DMA_IRQHandler+0xa2c>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d01d      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a6b      	ldr	r2, [pc, #428]	@ (8006cfc <HAL_DMA_IRQHandler+0xa30>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d018      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a6a      	ldr	r2, [pc, #424]	@ (8006d00 <HAL_DMA_IRQHandler+0xa34>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d013      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a68      	ldr	r2, [pc, #416]	@ (8006d04 <HAL_DMA_IRQHandler+0xa38>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d00e      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a67      	ldr	r2, [pc, #412]	@ (8006d08 <HAL_DMA_IRQHandler+0xa3c>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d009      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a65      	ldr	r2, [pc, #404]	@ (8006d0c <HAL_DMA_IRQHandler+0xa40>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d004      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a64      	ldr	r2, [pc, #400]	@ (8006d10 <HAL_DMA_IRQHandler+0xa44>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d108      	bne.n	8006b96 <HAL_DMA_IRQHandler+0x8ca>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 0201 	bic.w	r2, r2, #1
 8006b92:	601a      	str	r2, [r3, #0]
 8006b94:	e007      	b.n	8006ba6 <HAL_DMA_IRQHandler+0x8da>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f022 0201 	bic.w	r2, r2, #1
 8006ba4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	60fb      	str	r3, [r7, #12]
 8006bac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d307      	bcc.n	8006bc2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0301 	and.w	r3, r3, #1
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1f2      	bne.n	8006ba6 <HAL_DMA_IRQHandler+0x8da>
 8006bc0:	e000      	b.n	8006bc4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006bc2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0301 	and.w	r3, r3, #1
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d004      	beq.n	8006bdc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2203      	movs	r2, #3
 8006bd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006bda:	e003      	b.n	8006be4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f000 8272 	beq.w	80070da <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	4798      	blx	r3
 8006bfe:	e26c      	b.n	80070da <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a43      	ldr	r2, [pc, #268]	@ (8006d14 <HAL_DMA_IRQHandler+0xa48>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d022      	beq.n	8006c50 <HAL_DMA_IRQHandler+0x984>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a42      	ldr	r2, [pc, #264]	@ (8006d18 <HAL_DMA_IRQHandler+0xa4c>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d01d      	beq.n	8006c50 <HAL_DMA_IRQHandler+0x984>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a40      	ldr	r2, [pc, #256]	@ (8006d1c <HAL_DMA_IRQHandler+0xa50>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d018      	beq.n	8006c50 <HAL_DMA_IRQHandler+0x984>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a3f      	ldr	r2, [pc, #252]	@ (8006d20 <HAL_DMA_IRQHandler+0xa54>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d013      	beq.n	8006c50 <HAL_DMA_IRQHandler+0x984>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a3d      	ldr	r2, [pc, #244]	@ (8006d24 <HAL_DMA_IRQHandler+0xa58>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d00e      	beq.n	8006c50 <HAL_DMA_IRQHandler+0x984>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a3c      	ldr	r2, [pc, #240]	@ (8006d28 <HAL_DMA_IRQHandler+0xa5c>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d009      	beq.n	8006c50 <HAL_DMA_IRQHandler+0x984>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a3a      	ldr	r2, [pc, #232]	@ (8006d2c <HAL_DMA_IRQHandler+0xa60>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d004      	beq.n	8006c50 <HAL_DMA_IRQHandler+0x984>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a39      	ldr	r2, [pc, #228]	@ (8006d30 <HAL_DMA_IRQHandler+0xa64>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d101      	bne.n	8006c54 <HAL_DMA_IRQHandler+0x988>
 8006c50:	2301      	movs	r3, #1
 8006c52:	e000      	b.n	8006c56 <HAL_DMA_IRQHandler+0x98a>
 8006c54:	2300      	movs	r3, #0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f000 823f 	beq.w	80070da <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c68:	f003 031f 	and.w	r3, r3, #31
 8006c6c:	2204      	movs	r2, #4
 8006c6e:	409a      	lsls	r2, r3
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	4013      	ands	r3, r2
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f000 80cd 	beq.w	8006e14 <HAL_DMA_IRQHandler+0xb48>
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	f003 0304 	and.w	r3, r3, #4
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f000 80c7 	beq.w	8006e14 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c8a:	f003 031f 	and.w	r3, r3, #31
 8006c8e:	2204      	movs	r2, #4
 8006c90:	409a      	lsls	r2, r3
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d049      	beq.n	8006d34 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d109      	bne.n	8006cbe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f000 8210 	beq.w	80070d4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cbc:	e20a      	b.n	80070d4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f000 8206 	beq.w	80070d4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cd0:	e200      	b.n	80070d4 <HAL_DMA_IRQHandler+0xe08>
 8006cd2:	bf00      	nop
 8006cd4:	40020010 	.word	0x40020010
 8006cd8:	40020028 	.word	0x40020028
 8006cdc:	40020040 	.word	0x40020040
 8006ce0:	40020058 	.word	0x40020058
 8006ce4:	40020070 	.word	0x40020070
 8006ce8:	40020088 	.word	0x40020088
 8006cec:	400200a0 	.word	0x400200a0
 8006cf0:	400200b8 	.word	0x400200b8
 8006cf4:	40020410 	.word	0x40020410
 8006cf8:	40020428 	.word	0x40020428
 8006cfc:	40020440 	.word	0x40020440
 8006d00:	40020458 	.word	0x40020458
 8006d04:	40020470 	.word	0x40020470
 8006d08:	40020488 	.word	0x40020488
 8006d0c:	400204a0 	.word	0x400204a0
 8006d10:	400204b8 	.word	0x400204b8
 8006d14:	58025408 	.word	0x58025408
 8006d18:	5802541c 	.word	0x5802541c
 8006d1c:	58025430 	.word	0x58025430
 8006d20:	58025444 	.word	0x58025444
 8006d24:	58025458 	.word	0x58025458
 8006d28:	5802546c 	.word	0x5802546c
 8006d2c:	58025480 	.word	0x58025480
 8006d30:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	f003 0320 	and.w	r3, r3, #32
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d160      	bne.n	8006e00 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a7f      	ldr	r2, [pc, #508]	@ (8006f40 <HAL_DMA_IRQHandler+0xc74>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d04a      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a7d      	ldr	r2, [pc, #500]	@ (8006f44 <HAL_DMA_IRQHandler+0xc78>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d045      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a7c      	ldr	r2, [pc, #496]	@ (8006f48 <HAL_DMA_IRQHandler+0xc7c>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d040      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a7a      	ldr	r2, [pc, #488]	@ (8006f4c <HAL_DMA_IRQHandler+0xc80>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d03b      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a79      	ldr	r2, [pc, #484]	@ (8006f50 <HAL_DMA_IRQHandler+0xc84>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d036      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a77      	ldr	r2, [pc, #476]	@ (8006f54 <HAL_DMA_IRQHandler+0xc88>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d031      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a76      	ldr	r2, [pc, #472]	@ (8006f58 <HAL_DMA_IRQHandler+0xc8c>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d02c      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a74      	ldr	r2, [pc, #464]	@ (8006f5c <HAL_DMA_IRQHandler+0xc90>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d027      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a73      	ldr	r2, [pc, #460]	@ (8006f60 <HAL_DMA_IRQHandler+0xc94>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d022      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a71      	ldr	r2, [pc, #452]	@ (8006f64 <HAL_DMA_IRQHandler+0xc98>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d01d      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a70      	ldr	r2, [pc, #448]	@ (8006f68 <HAL_DMA_IRQHandler+0xc9c>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d018      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a6e      	ldr	r2, [pc, #440]	@ (8006f6c <HAL_DMA_IRQHandler+0xca0>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d013      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a6d      	ldr	r2, [pc, #436]	@ (8006f70 <HAL_DMA_IRQHandler+0xca4>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d00e      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a6b      	ldr	r2, [pc, #428]	@ (8006f74 <HAL_DMA_IRQHandler+0xca8>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d009      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a6a      	ldr	r2, [pc, #424]	@ (8006f78 <HAL_DMA_IRQHandler+0xcac>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d004      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a68      	ldr	r2, [pc, #416]	@ (8006f7c <HAL_DMA_IRQHandler+0xcb0>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d108      	bne.n	8006df0 <HAL_DMA_IRQHandler+0xb24>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f022 0208 	bic.w	r2, r2, #8
 8006dec:	601a      	str	r2, [r3, #0]
 8006dee:	e007      	b.n	8006e00 <HAL_DMA_IRQHandler+0xb34>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f022 0204 	bic.w	r2, r2, #4
 8006dfe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f000 8165 	beq.w	80070d4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e12:	e15f      	b.n	80070d4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e18:	f003 031f 	and.w	r3, r3, #31
 8006e1c:	2202      	movs	r2, #2
 8006e1e:	409a      	lsls	r2, r3
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	4013      	ands	r3, r2
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	f000 80c5 	beq.w	8006fb4 <HAL_DMA_IRQHandler+0xce8>
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	f003 0302 	and.w	r3, r3, #2
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 80bf 	beq.w	8006fb4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e3a:	f003 031f 	and.w	r3, r3, #31
 8006e3e:	2202      	movs	r2, #2
 8006e40:	409a      	lsls	r2, r3
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d018      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d109      	bne.n	8006e6e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	f000 813a 	beq.w	80070d8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e6c:	e134      	b.n	80070d8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f000 8130 	beq.w	80070d8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e80:	e12a      	b.n	80070d8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	f003 0320 	and.w	r3, r3, #32
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f040 8089 	bne.w	8006fa0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a2b      	ldr	r2, [pc, #172]	@ (8006f40 <HAL_DMA_IRQHandler+0xc74>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d04a      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a29      	ldr	r2, [pc, #164]	@ (8006f44 <HAL_DMA_IRQHandler+0xc78>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d045      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a28      	ldr	r2, [pc, #160]	@ (8006f48 <HAL_DMA_IRQHandler+0xc7c>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d040      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a26      	ldr	r2, [pc, #152]	@ (8006f4c <HAL_DMA_IRQHandler+0xc80>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d03b      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a25      	ldr	r2, [pc, #148]	@ (8006f50 <HAL_DMA_IRQHandler+0xc84>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d036      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a23      	ldr	r2, [pc, #140]	@ (8006f54 <HAL_DMA_IRQHandler+0xc88>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d031      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a22      	ldr	r2, [pc, #136]	@ (8006f58 <HAL_DMA_IRQHandler+0xc8c>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d02c      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a20      	ldr	r2, [pc, #128]	@ (8006f5c <HAL_DMA_IRQHandler+0xc90>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d027      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a1f      	ldr	r2, [pc, #124]	@ (8006f60 <HAL_DMA_IRQHandler+0xc94>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d022      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a1d      	ldr	r2, [pc, #116]	@ (8006f64 <HAL_DMA_IRQHandler+0xc98>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d01d      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a1c      	ldr	r2, [pc, #112]	@ (8006f68 <HAL_DMA_IRQHandler+0xc9c>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d018      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a1a      	ldr	r2, [pc, #104]	@ (8006f6c <HAL_DMA_IRQHandler+0xca0>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d013      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a19      	ldr	r2, [pc, #100]	@ (8006f70 <HAL_DMA_IRQHandler+0xca4>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d00e      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a17      	ldr	r2, [pc, #92]	@ (8006f74 <HAL_DMA_IRQHandler+0xca8>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d009      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a16      	ldr	r2, [pc, #88]	@ (8006f78 <HAL_DMA_IRQHandler+0xcac>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d004      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a14      	ldr	r2, [pc, #80]	@ (8006f7c <HAL_DMA_IRQHandler+0xcb0>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d128      	bne.n	8006f80 <HAL_DMA_IRQHandler+0xcb4>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f022 0214 	bic.w	r2, r2, #20
 8006f3c:	601a      	str	r2, [r3, #0]
 8006f3e:	e027      	b.n	8006f90 <HAL_DMA_IRQHandler+0xcc4>
 8006f40:	40020010 	.word	0x40020010
 8006f44:	40020028 	.word	0x40020028
 8006f48:	40020040 	.word	0x40020040
 8006f4c:	40020058 	.word	0x40020058
 8006f50:	40020070 	.word	0x40020070
 8006f54:	40020088 	.word	0x40020088
 8006f58:	400200a0 	.word	0x400200a0
 8006f5c:	400200b8 	.word	0x400200b8
 8006f60:	40020410 	.word	0x40020410
 8006f64:	40020428 	.word	0x40020428
 8006f68:	40020440 	.word	0x40020440
 8006f6c:	40020458 	.word	0x40020458
 8006f70:	40020470 	.word	0x40020470
 8006f74:	40020488 	.word	0x40020488
 8006f78:	400204a0 	.word	0x400204a0
 8006f7c:	400204b8 	.word	0x400204b8
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f022 020a 	bic.w	r2, r2, #10
 8006f8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 8097 	beq.w	80070d8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006fb2:	e091      	b.n	80070d8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fb8:	f003 031f 	and.w	r3, r3, #31
 8006fbc:	2208      	movs	r2, #8
 8006fbe:	409a      	lsls	r2, r3
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f000 8088 	beq.w	80070da <HAL_DMA_IRQHandler+0xe0e>
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	f003 0308 	and.w	r3, r3, #8
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f000 8082 	beq.w	80070da <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a41      	ldr	r2, [pc, #260]	@ (80070e0 <HAL_DMA_IRQHandler+0xe14>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d04a      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a3f      	ldr	r2, [pc, #252]	@ (80070e4 <HAL_DMA_IRQHandler+0xe18>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d045      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a3e      	ldr	r2, [pc, #248]	@ (80070e8 <HAL_DMA_IRQHandler+0xe1c>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d040      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a3c      	ldr	r2, [pc, #240]	@ (80070ec <HAL_DMA_IRQHandler+0xe20>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d03b      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a3b      	ldr	r2, [pc, #236]	@ (80070f0 <HAL_DMA_IRQHandler+0xe24>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d036      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a39      	ldr	r2, [pc, #228]	@ (80070f4 <HAL_DMA_IRQHandler+0xe28>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d031      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a38      	ldr	r2, [pc, #224]	@ (80070f8 <HAL_DMA_IRQHandler+0xe2c>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d02c      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a36      	ldr	r2, [pc, #216]	@ (80070fc <HAL_DMA_IRQHandler+0xe30>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d027      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a35      	ldr	r2, [pc, #212]	@ (8007100 <HAL_DMA_IRQHandler+0xe34>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d022      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a33      	ldr	r2, [pc, #204]	@ (8007104 <HAL_DMA_IRQHandler+0xe38>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d01d      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a32      	ldr	r2, [pc, #200]	@ (8007108 <HAL_DMA_IRQHandler+0xe3c>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d018      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a30      	ldr	r2, [pc, #192]	@ (800710c <HAL_DMA_IRQHandler+0xe40>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d013      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a2f      	ldr	r2, [pc, #188]	@ (8007110 <HAL_DMA_IRQHandler+0xe44>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d00e      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a2d      	ldr	r2, [pc, #180]	@ (8007114 <HAL_DMA_IRQHandler+0xe48>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d009      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a2c      	ldr	r2, [pc, #176]	@ (8007118 <HAL_DMA_IRQHandler+0xe4c>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d004      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a2a      	ldr	r2, [pc, #168]	@ (800711c <HAL_DMA_IRQHandler+0xe50>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d108      	bne.n	8007088 <HAL_DMA_IRQHandler+0xdbc>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f022 021c 	bic.w	r2, r2, #28
 8007084:	601a      	str	r2, [r3, #0]
 8007086:	e007      	b.n	8007098 <HAL_DMA_IRQHandler+0xdcc>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f022 020e 	bic.w	r2, r2, #14
 8007096:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800709c:	f003 031f 	and.w	r3, r3, #31
 80070a0:	2201      	movs	r2, #1
 80070a2:	409a      	lsls	r2, r3
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d009      	beq.n	80070da <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	4798      	blx	r3
 80070ce:	e004      	b.n	80070da <HAL_DMA_IRQHandler+0xe0e>
          return;
 80070d0:	bf00      	nop
 80070d2:	e002      	b.n	80070da <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070d4:	bf00      	nop
 80070d6:	e000      	b.n	80070da <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070d8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80070da:	3728      	adds	r7, #40	@ 0x28
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	40020010 	.word	0x40020010
 80070e4:	40020028 	.word	0x40020028
 80070e8:	40020040 	.word	0x40020040
 80070ec:	40020058 	.word	0x40020058
 80070f0:	40020070 	.word	0x40020070
 80070f4:	40020088 	.word	0x40020088
 80070f8:	400200a0 	.word	0x400200a0
 80070fc:	400200b8 	.word	0x400200b8
 8007100:	40020410 	.word	0x40020410
 8007104:	40020428 	.word	0x40020428
 8007108:	40020440 	.word	0x40020440
 800710c:	40020458 	.word	0x40020458
 8007110:	40020470 	.word	0x40020470
 8007114:	40020488 	.word	0x40020488
 8007118:	400204a0 	.word	0x400204a0
 800711c:	400204b8 	.word	0x400204b8

08007120 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007120:	b480      	push	{r7}
 8007122:	b087      	sub	sp, #28
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
 800712c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007132:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007138:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a7f      	ldr	r2, [pc, #508]	@ (800733c <DMA_SetConfig+0x21c>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d072      	beq.n	800722a <DMA_SetConfig+0x10a>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a7d      	ldr	r2, [pc, #500]	@ (8007340 <DMA_SetConfig+0x220>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d06d      	beq.n	800722a <DMA_SetConfig+0x10a>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a7c      	ldr	r2, [pc, #496]	@ (8007344 <DMA_SetConfig+0x224>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d068      	beq.n	800722a <DMA_SetConfig+0x10a>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a7a      	ldr	r2, [pc, #488]	@ (8007348 <DMA_SetConfig+0x228>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d063      	beq.n	800722a <DMA_SetConfig+0x10a>
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a79      	ldr	r2, [pc, #484]	@ (800734c <DMA_SetConfig+0x22c>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d05e      	beq.n	800722a <DMA_SetConfig+0x10a>
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a77      	ldr	r2, [pc, #476]	@ (8007350 <DMA_SetConfig+0x230>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d059      	beq.n	800722a <DMA_SetConfig+0x10a>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a76      	ldr	r2, [pc, #472]	@ (8007354 <DMA_SetConfig+0x234>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d054      	beq.n	800722a <DMA_SetConfig+0x10a>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a74      	ldr	r2, [pc, #464]	@ (8007358 <DMA_SetConfig+0x238>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d04f      	beq.n	800722a <DMA_SetConfig+0x10a>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a73      	ldr	r2, [pc, #460]	@ (800735c <DMA_SetConfig+0x23c>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d04a      	beq.n	800722a <DMA_SetConfig+0x10a>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a71      	ldr	r2, [pc, #452]	@ (8007360 <DMA_SetConfig+0x240>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d045      	beq.n	800722a <DMA_SetConfig+0x10a>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a70      	ldr	r2, [pc, #448]	@ (8007364 <DMA_SetConfig+0x244>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d040      	beq.n	800722a <DMA_SetConfig+0x10a>
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a6e      	ldr	r2, [pc, #440]	@ (8007368 <DMA_SetConfig+0x248>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d03b      	beq.n	800722a <DMA_SetConfig+0x10a>
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a6d      	ldr	r2, [pc, #436]	@ (800736c <DMA_SetConfig+0x24c>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d036      	beq.n	800722a <DMA_SetConfig+0x10a>
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a6b      	ldr	r2, [pc, #428]	@ (8007370 <DMA_SetConfig+0x250>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d031      	beq.n	800722a <DMA_SetConfig+0x10a>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a6a      	ldr	r2, [pc, #424]	@ (8007374 <DMA_SetConfig+0x254>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d02c      	beq.n	800722a <DMA_SetConfig+0x10a>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a68      	ldr	r2, [pc, #416]	@ (8007378 <DMA_SetConfig+0x258>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d027      	beq.n	800722a <DMA_SetConfig+0x10a>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a67      	ldr	r2, [pc, #412]	@ (800737c <DMA_SetConfig+0x25c>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d022      	beq.n	800722a <DMA_SetConfig+0x10a>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a65      	ldr	r2, [pc, #404]	@ (8007380 <DMA_SetConfig+0x260>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d01d      	beq.n	800722a <DMA_SetConfig+0x10a>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a64      	ldr	r2, [pc, #400]	@ (8007384 <DMA_SetConfig+0x264>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d018      	beq.n	800722a <DMA_SetConfig+0x10a>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a62      	ldr	r2, [pc, #392]	@ (8007388 <DMA_SetConfig+0x268>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d013      	beq.n	800722a <DMA_SetConfig+0x10a>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a61      	ldr	r2, [pc, #388]	@ (800738c <DMA_SetConfig+0x26c>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d00e      	beq.n	800722a <DMA_SetConfig+0x10a>
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a5f      	ldr	r2, [pc, #380]	@ (8007390 <DMA_SetConfig+0x270>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d009      	beq.n	800722a <DMA_SetConfig+0x10a>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a5e      	ldr	r2, [pc, #376]	@ (8007394 <DMA_SetConfig+0x274>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d004      	beq.n	800722a <DMA_SetConfig+0x10a>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a5c      	ldr	r2, [pc, #368]	@ (8007398 <DMA_SetConfig+0x278>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d101      	bne.n	800722e <DMA_SetConfig+0x10e>
 800722a:	2301      	movs	r3, #1
 800722c:	e000      	b.n	8007230 <DMA_SetConfig+0x110>
 800722e:	2300      	movs	r3, #0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00d      	beq.n	8007250 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800723c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007242:	2b00      	cmp	r3, #0
 8007244:	d004      	beq.n	8007250 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800724e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a39      	ldr	r2, [pc, #228]	@ (800733c <DMA_SetConfig+0x21c>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d04a      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a38      	ldr	r2, [pc, #224]	@ (8007340 <DMA_SetConfig+0x220>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d045      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a36      	ldr	r2, [pc, #216]	@ (8007344 <DMA_SetConfig+0x224>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d040      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a35      	ldr	r2, [pc, #212]	@ (8007348 <DMA_SetConfig+0x228>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d03b      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a33      	ldr	r2, [pc, #204]	@ (800734c <DMA_SetConfig+0x22c>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d036      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a32      	ldr	r2, [pc, #200]	@ (8007350 <DMA_SetConfig+0x230>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d031      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a30      	ldr	r2, [pc, #192]	@ (8007354 <DMA_SetConfig+0x234>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d02c      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a2f      	ldr	r2, [pc, #188]	@ (8007358 <DMA_SetConfig+0x238>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d027      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a2d      	ldr	r2, [pc, #180]	@ (800735c <DMA_SetConfig+0x23c>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d022      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a2c      	ldr	r2, [pc, #176]	@ (8007360 <DMA_SetConfig+0x240>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d01d      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a2a      	ldr	r2, [pc, #168]	@ (8007364 <DMA_SetConfig+0x244>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d018      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a29      	ldr	r2, [pc, #164]	@ (8007368 <DMA_SetConfig+0x248>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d013      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a27      	ldr	r2, [pc, #156]	@ (800736c <DMA_SetConfig+0x24c>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d00e      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a26      	ldr	r2, [pc, #152]	@ (8007370 <DMA_SetConfig+0x250>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d009      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a24      	ldr	r2, [pc, #144]	@ (8007374 <DMA_SetConfig+0x254>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d004      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a23      	ldr	r2, [pc, #140]	@ (8007378 <DMA_SetConfig+0x258>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d101      	bne.n	80072f4 <DMA_SetConfig+0x1d4>
 80072f0:	2301      	movs	r3, #1
 80072f2:	e000      	b.n	80072f6 <DMA_SetConfig+0x1d6>
 80072f4:	2300      	movs	r3, #0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d059      	beq.n	80073ae <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072fe:	f003 031f 	and.w	r3, r3, #31
 8007302:	223f      	movs	r2, #63	@ 0x3f
 8007304:	409a      	lsls	r2, r3
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007318:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	2b40      	cmp	r3, #64	@ 0x40
 8007328:	d138      	bne.n	800739c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68ba      	ldr	r2, [r7, #8]
 8007338:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800733a:	e086      	b.n	800744a <DMA_SetConfig+0x32a>
 800733c:	40020010 	.word	0x40020010
 8007340:	40020028 	.word	0x40020028
 8007344:	40020040 	.word	0x40020040
 8007348:	40020058 	.word	0x40020058
 800734c:	40020070 	.word	0x40020070
 8007350:	40020088 	.word	0x40020088
 8007354:	400200a0 	.word	0x400200a0
 8007358:	400200b8 	.word	0x400200b8
 800735c:	40020410 	.word	0x40020410
 8007360:	40020428 	.word	0x40020428
 8007364:	40020440 	.word	0x40020440
 8007368:	40020458 	.word	0x40020458
 800736c:	40020470 	.word	0x40020470
 8007370:	40020488 	.word	0x40020488
 8007374:	400204a0 	.word	0x400204a0
 8007378:	400204b8 	.word	0x400204b8
 800737c:	58025408 	.word	0x58025408
 8007380:	5802541c 	.word	0x5802541c
 8007384:	58025430 	.word	0x58025430
 8007388:	58025444 	.word	0x58025444
 800738c:	58025458 	.word	0x58025458
 8007390:	5802546c 	.word	0x5802546c
 8007394:	58025480 	.word	0x58025480
 8007398:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	60da      	str	r2, [r3, #12]
}
 80073ac:	e04d      	b.n	800744a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a29      	ldr	r2, [pc, #164]	@ (8007458 <DMA_SetConfig+0x338>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d022      	beq.n	80073fe <DMA_SetConfig+0x2de>
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a27      	ldr	r2, [pc, #156]	@ (800745c <DMA_SetConfig+0x33c>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d01d      	beq.n	80073fe <DMA_SetConfig+0x2de>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a26      	ldr	r2, [pc, #152]	@ (8007460 <DMA_SetConfig+0x340>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d018      	beq.n	80073fe <DMA_SetConfig+0x2de>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a24      	ldr	r2, [pc, #144]	@ (8007464 <DMA_SetConfig+0x344>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d013      	beq.n	80073fe <DMA_SetConfig+0x2de>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a23      	ldr	r2, [pc, #140]	@ (8007468 <DMA_SetConfig+0x348>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d00e      	beq.n	80073fe <DMA_SetConfig+0x2de>
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a21      	ldr	r2, [pc, #132]	@ (800746c <DMA_SetConfig+0x34c>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d009      	beq.n	80073fe <DMA_SetConfig+0x2de>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a20      	ldr	r2, [pc, #128]	@ (8007470 <DMA_SetConfig+0x350>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d004      	beq.n	80073fe <DMA_SetConfig+0x2de>
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a1e      	ldr	r2, [pc, #120]	@ (8007474 <DMA_SetConfig+0x354>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d101      	bne.n	8007402 <DMA_SetConfig+0x2e2>
 80073fe:	2301      	movs	r3, #1
 8007400:	e000      	b.n	8007404 <DMA_SetConfig+0x2e4>
 8007402:	2300      	movs	r3, #0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d020      	beq.n	800744a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800740c:	f003 031f 	and.w	r3, r3, #31
 8007410:	2201      	movs	r2, #1
 8007412:	409a      	lsls	r2, r3
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	683a      	ldr	r2, [r7, #0]
 800741e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	2b40      	cmp	r3, #64	@ 0x40
 8007426:	d108      	bne.n	800743a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	68ba      	ldr	r2, [r7, #8]
 8007436:	60da      	str	r2, [r3, #12]
}
 8007438:	e007      	b.n	800744a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68ba      	ldr	r2, [r7, #8]
 8007440:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	60da      	str	r2, [r3, #12]
}
 800744a:	bf00      	nop
 800744c:	371c      	adds	r7, #28
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	58025408 	.word	0x58025408
 800745c:	5802541c 	.word	0x5802541c
 8007460:	58025430 	.word	0x58025430
 8007464:	58025444 	.word	0x58025444
 8007468:	58025458 	.word	0x58025458
 800746c:	5802546c 	.word	0x5802546c
 8007470:	58025480 	.word	0x58025480
 8007474:	58025494 	.word	0x58025494

08007478 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a42      	ldr	r2, [pc, #264]	@ (8007590 <DMA_CalcBaseAndBitshift+0x118>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d04a      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a41      	ldr	r2, [pc, #260]	@ (8007594 <DMA_CalcBaseAndBitshift+0x11c>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d045      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a3f      	ldr	r2, [pc, #252]	@ (8007598 <DMA_CalcBaseAndBitshift+0x120>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d040      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a3e      	ldr	r2, [pc, #248]	@ (800759c <DMA_CalcBaseAndBitshift+0x124>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d03b      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a3c      	ldr	r2, [pc, #240]	@ (80075a0 <DMA_CalcBaseAndBitshift+0x128>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d036      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a3b      	ldr	r2, [pc, #236]	@ (80075a4 <DMA_CalcBaseAndBitshift+0x12c>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d031      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a39      	ldr	r2, [pc, #228]	@ (80075a8 <DMA_CalcBaseAndBitshift+0x130>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d02c      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a38      	ldr	r2, [pc, #224]	@ (80075ac <DMA_CalcBaseAndBitshift+0x134>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d027      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a36      	ldr	r2, [pc, #216]	@ (80075b0 <DMA_CalcBaseAndBitshift+0x138>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d022      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a35      	ldr	r2, [pc, #212]	@ (80075b4 <DMA_CalcBaseAndBitshift+0x13c>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d01d      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a33      	ldr	r2, [pc, #204]	@ (80075b8 <DMA_CalcBaseAndBitshift+0x140>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d018      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a32      	ldr	r2, [pc, #200]	@ (80075bc <DMA_CalcBaseAndBitshift+0x144>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d013      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a30      	ldr	r2, [pc, #192]	@ (80075c0 <DMA_CalcBaseAndBitshift+0x148>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d00e      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a2f      	ldr	r2, [pc, #188]	@ (80075c4 <DMA_CalcBaseAndBitshift+0x14c>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d009      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a2d      	ldr	r2, [pc, #180]	@ (80075c8 <DMA_CalcBaseAndBitshift+0x150>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d004      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a2c      	ldr	r2, [pc, #176]	@ (80075cc <DMA_CalcBaseAndBitshift+0x154>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d101      	bne.n	8007524 <DMA_CalcBaseAndBitshift+0xac>
 8007520:	2301      	movs	r3, #1
 8007522:	e000      	b.n	8007526 <DMA_CalcBaseAndBitshift+0xae>
 8007524:	2300      	movs	r3, #0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d024      	beq.n	8007574 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	b2db      	uxtb	r3, r3
 8007530:	3b10      	subs	r3, #16
 8007532:	4a27      	ldr	r2, [pc, #156]	@ (80075d0 <DMA_CalcBaseAndBitshift+0x158>)
 8007534:	fba2 2303 	umull	r2, r3, r2, r3
 8007538:	091b      	lsrs	r3, r3, #4
 800753a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f003 0307 	and.w	r3, r3, #7
 8007542:	4a24      	ldr	r2, [pc, #144]	@ (80075d4 <DMA_CalcBaseAndBitshift+0x15c>)
 8007544:	5cd3      	ldrb	r3, [r2, r3]
 8007546:	461a      	mov	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2b03      	cmp	r3, #3
 8007550:	d908      	bls.n	8007564 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	461a      	mov	r2, r3
 8007558:	4b1f      	ldr	r3, [pc, #124]	@ (80075d8 <DMA_CalcBaseAndBitshift+0x160>)
 800755a:	4013      	ands	r3, r2
 800755c:	1d1a      	adds	r2, r3, #4
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	659a      	str	r2, [r3, #88]	@ 0x58
 8007562:	e00d      	b.n	8007580 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	461a      	mov	r2, r3
 800756a:	4b1b      	ldr	r3, [pc, #108]	@ (80075d8 <DMA_CalcBaseAndBitshift+0x160>)
 800756c:	4013      	ands	r3, r2
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	6593      	str	r3, [r2, #88]	@ 0x58
 8007572:	e005      	b.n	8007580 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007584:	4618      	mov	r0, r3
 8007586:	3714      	adds	r7, #20
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr
 8007590:	40020010 	.word	0x40020010
 8007594:	40020028 	.word	0x40020028
 8007598:	40020040 	.word	0x40020040
 800759c:	40020058 	.word	0x40020058
 80075a0:	40020070 	.word	0x40020070
 80075a4:	40020088 	.word	0x40020088
 80075a8:	400200a0 	.word	0x400200a0
 80075ac:	400200b8 	.word	0x400200b8
 80075b0:	40020410 	.word	0x40020410
 80075b4:	40020428 	.word	0x40020428
 80075b8:	40020440 	.word	0x40020440
 80075bc:	40020458 	.word	0x40020458
 80075c0:	40020470 	.word	0x40020470
 80075c4:	40020488 	.word	0x40020488
 80075c8:	400204a0 	.word	0x400204a0
 80075cc:	400204b8 	.word	0x400204b8
 80075d0:	aaaaaaab 	.word	0xaaaaaaab
 80075d4:	08010240 	.word	0x08010240
 80075d8:	fffffc00 	.word	0xfffffc00

080075dc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075e4:	2300      	movs	r3, #0
 80075e6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	699b      	ldr	r3, [r3, #24]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d120      	bne.n	8007632 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075f4:	2b03      	cmp	r3, #3
 80075f6:	d858      	bhi.n	80076aa <DMA_CheckFifoParam+0xce>
 80075f8:	a201      	add	r2, pc, #4	@ (adr r2, 8007600 <DMA_CheckFifoParam+0x24>)
 80075fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075fe:	bf00      	nop
 8007600:	08007611 	.word	0x08007611
 8007604:	08007623 	.word	0x08007623
 8007608:	08007611 	.word	0x08007611
 800760c:	080076ab 	.word	0x080076ab
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007614:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007618:	2b00      	cmp	r3, #0
 800761a:	d048      	beq.n	80076ae <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007620:	e045      	b.n	80076ae <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007626:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800762a:	d142      	bne.n	80076b2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007630:	e03f      	b.n	80076b2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	699b      	ldr	r3, [r3, #24]
 8007636:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800763a:	d123      	bne.n	8007684 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007640:	2b03      	cmp	r3, #3
 8007642:	d838      	bhi.n	80076b6 <DMA_CheckFifoParam+0xda>
 8007644:	a201      	add	r2, pc, #4	@ (adr r2, 800764c <DMA_CheckFifoParam+0x70>)
 8007646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800764a:	bf00      	nop
 800764c:	0800765d 	.word	0x0800765d
 8007650:	08007663 	.word	0x08007663
 8007654:	0800765d 	.word	0x0800765d
 8007658:	08007675 	.word	0x08007675
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	73fb      	strb	r3, [r7, #15]
        break;
 8007660:	e030      	b.n	80076c4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007666:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d025      	beq.n	80076ba <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007672:	e022      	b.n	80076ba <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007678:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800767c:	d11f      	bne.n	80076be <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007682:	e01c      	b.n	80076be <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007688:	2b02      	cmp	r3, #2
 800768a:	d902      	bls.n	8007692 <DMA_CheckFifoParam+0xb6>
 800768c:	2b03      	cmp	r3, #3
 800768e:	d003      	beq.n	8007698 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007690:	e018      	b.n	80076c4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	73fb      	strb	r3, [r7, #15]
        break;
 8007696:	e015      	b.n	80076c4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800769c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00e      	beq.n	80076c2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	73fb      	strb	r3, [r7, #15]
    break;
 80076a8:	e00b      	b.n	80076c2 <DMA_CheckFifoParam+0xe6>
        break;
 80076aa:	bf00      	nop
 80076ac:	e00a      	b.n	80076c4 <DMA_CheckFifoParam+0xe8>
        break;
 80076ae:	bf00      	nop
 80076b0:	e008      	b.n	80076c4 <DMA_CheckFifoParam+0xe8>
        break;
 80076b2:	bf00      	nop
 80076b4:	e006      	b.n	80076c4 <DMA_CheckFifoParam+0xe8>
        break;
 80076b6:	bf00      	nop
 80076b8:	e004      	b.n	80076c4 <DMA_CheckFifoParam+0xe8>
        break;
 80076ba:	bf00      	nop
 80076bc:	e002      	b.n	80076c4 <DMA_CheckFifoParam+0xe8>
        break;
 80076be:	bf00      	nop
 80076c0:	e000      	b.n	80076c4 <DMA_CheckFifoParam+0xe8>
    break;
 80076c2:	bf00      	nop
    }
  }

  return status;
 80076c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3714      	adds	r7, #20
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr
 80076d2:	bf00      	nop

080076d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a38      	ldr	r2, [pc, #224]	@ (80077c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d022      	beq.n	8007732 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a36      	ldr	r2, [pc, #216]	@ (80077cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d01d      	beq.n	8007732 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a35      	ldr	r2, [pc, #212]	@ (80077d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d018      	beq.n	8007732 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a33      	ldr	r2, [pc, #204]	@ (80077d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d013      	beq.n	8007732 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a32      	ldr	r2, [pc, #200]	@ (80077d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d00e      	beq.n	8007732 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a30      	ldr	r2, [pc, #192]	@ (80077dc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d009      	beq.n	8007732 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a2f      	ldr	r2, [pc, #188]	@ (80077e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d004      	beq.n	8007732 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a2d      	ldr	r2, [pc, #180]	@ (80077e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d101      	bne.n	8007736 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007732:	2301      	movs	r3, #1
 8007734:	e000      	b.n	8007738 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007736:	2300      	movs	r3, #0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d01a      	beq.n	8007772 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	b2db      	uxtb	r3, r3
 8007742:	3b08      	subs	r3, #8
 8007744:	4a28      	ldr	r2, [pc, #160]	@ (80077e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007746:	fba2 2303 	umull	r2, r3, r2, r3
 800774a:	091b      	lsrs	r3, r3, #4
 800774c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	4b26      	ldr	r3, [pc, #152]	@ (80077ec <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007752:	4413      	add	r3, r2
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	461a      	mov	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4a24      	ldr	r2, [pc, #144]	@ (80077f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007760:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f003 031f 	and.w	r3, r3, #31
 8007768:	2201      	movs	r2, #1
 800776a:	409a      	lsls	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007770:	e024      	b.n	80077bc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	b2db      	uxtb	r3, r3
 8007778:	3b10      	subs	r3, #16
 800777a:	4a1e      	ldr	r2, [pc, #120]	@ (80077f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800777c:	fba2 2303 	umull	r2, r3, r2, r3
 8007780:	091b      	lsrs	r3, r3, #4
 8007782:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	4a1c      	ldr	r2, [pc, #112]	@ (80077f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d806      	bhi.n	800779a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	4a1b      	ldr	r2, [pc, #108]	@ (80077fc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d902      	bls.n	800779a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	3308      	adds	r3, #8
 8007798:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	4b18      	ldr	r3, [pc, #96]	@ (8007800 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800779e:	4413      	add	r3, r2
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	461a      	mov	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4a16      	ldr	r2, [pc, #88]	@ (8007804 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80077ac:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f003 031f 	and.w	r3, r3, #31
 80077b4:	2201      	movs	r2, #1
 80077b6:	409a      	lsls	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80077bc:	bf00      	nop
 80077be:	3714      	adds	r7, #20
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr
 80077c8:	58025408 	.word	0x58025408
 80077cc:	5802541c 	.word	0x5802541c
 80077d0:	58025430 	.word	0x58025430
 80077d4:	58025444 	.word	0x58025444
 80077d8:	58025458 	.word	0x58025458
 80077dc:	5802546c 	.word	0x5802546c
 80077e0:	58025480 	.word	0x58025480
 80077e4:	58025494 	.word	0x58025494
 80077e8:	cccccccd 	.word	0xcccccccd
 80077ec:	16009600 	.word	0x16009600
 80077f0:	58025880 	.word	0x58025880
 80077f4:	aaaaaaab 	.word	0xaaaaaaab
 80077f8:	400204b8 	.word	0x400204b8
 80077fc:	4002040f 	.word	0x4002040f
 8007800:	10008200 	.word	0x10008200
 8007804:	40020880 	.word	0x40020880

08007808 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	b2db      	uxtb	r3, r3
 8007816:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d04a      	beq.n	80078b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2b08      	cmp	r3, #8
 8007822:	d847      	bhi.n	80078b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a25      	ldr	r2, [pc, #148]	@ (80078c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d022      	beq.n	8007874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a24      	ldr	r2, [pc, #144]	@ (80078c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d01d      	beq.n	8007874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a22      	ldr	r2, [pc, #136]	@ (80078c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d018      	beq.n	8007874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a21      	ldr	r2, [pc, #132]	@ (80078cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d013      	beq.n	8007874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a1f      	ldr	r2, [pc, #124]	@ (80078d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d00e      	beq.n	8007874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a1e      	ldr	r2, [pc, #120]	@ (80078d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d009      	beq.n	8007874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a1c      	ldr	r2, [pc, #112]	@ (80078d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d004      	beq.n	8007874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a1b      	ldr	r2, [pc, #108]	@ (80078dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d101      	bne.n	8007878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007874:	2301      	movs	r3, #1
 8007876:	e000      	b.n	800787a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007878:	2300      	movs	r3, #0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00a      	beq.n	8007894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800787e:	68fa      	ldr	r2, [r7, #12]
 8007880:	4b17      	ldr	r3, [pc, #92]	@ (80078e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007882:	4413      	add	r3, r2
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	461a      	mov	r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4a15      	ldr	r2, [pc, #84]	@ (80078e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007890:	671a      	str	r2, [r3, #112]	@ 0x70
 8007892:	e009      	b.n	80078a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	4b14      	ldr	r3, [pc, #80]	@ (80078e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007898:	4413      	add	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	461a      	mov	r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a11      	ldr	r2, [pc, #68]	@ (80078ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80078a6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	3b01      	subs	r3, #1
 80078ac:	2201      	movs	r2, #1
 80078ae:	409a      	lsls	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80078b4:	bf00      	nop
 80078b6:	3714      	adds	r7, #20
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr
 80078c0:	58025408 	.word	0x58025408
 80078c4:	5802541c 	.word	0x5802541c
 80078c8:	58025430 	.word	0x58025430
 80078cc:	58025444 	.word	0x58025444
 80078d0:	58025458 	.word	0x58025458
 80078d4:	5802546c 	.word	0x5802546c
 80078d8:	58025480 	.word	0x58025480
 80078dc:	58025494 	.word	0x58025494
 80078e0:	1600963f 	.word	0x1600963f
 80078e4:	58025940 	.word	0x58025940
 80078e8:	1000823f 	.word	0x1000823f
 80078ec:	40020940 	.word	0x40020940

080078f0 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80078f0:	b480      	push	{r7}
 80078f2:	b087      	sub	sp, #28
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	460b      	mov	r3, r1
 80078fa:	607a      	str	r2, [r7, #4]
 80078fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80078fe:	2300      	movs	r3, #0
 8007900:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d101      	bne.n	800790c <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	e00a      	b.n	8007922 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 800790c:	7afb      	ldrb	r3, [r7, #11]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d103      	bne.n	800791a <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	605a      	str	r2, [r3, #4]
      break;
 8007918:	e002      	b.n	8007920 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	75fb      	strb	r3, [r7, #23]
      break;
 800791e:	bf00      	nop
  }

  return status;
 8007920:	7dfb      	ldrb	r3, [r7, #23]
}
 8007922:	4618      	mov	r0, r3
 8007924:	371c      	adds	r7, #28
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr

0800792e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800792e:	b480      	push	{r7}
 8007930:	b083      	sub	sp, #12
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
 8007936:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d101      	bne.n	8007942 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e003      	b.n	800794a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	683a      	ldr	r2, [r7, #0]
 8007946:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007948:	2300      	movs	r3, #0
  }
}
 800794a:	4618      	mov	r0, r3
 800794c:	370c      	adds	r7, #12
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr
	...

08007958 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b086      	sub	sp, #24
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	0c1b      	lsrs	r3, r3, #16
 8007966:	f003 0303 	and.w	r3, r3, #3
 800796a:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 031f 	and.w	r3, r3, #31
 8007974:	2201      	movs	r2, #1
 8007976:	fa02 f303 	lsl.w	r3, r2, r3
 800797a:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 800797c:	f7fd f96a 	bl	8004c54 <HAL_GetCurrentCPUID>
 8007980:	4603      	mov	r3, r0
 8007982:	2b03      	cmp	r3, #3
 8007984:	d105      	bne.n	8007992 <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	011a      	lsls	r2, r3, #4
 800798a:	4b0f      	ldr	r3, [pc, #60]	@ (80079c8 <HAL_EXTI_IRQHandler+0x70>)
 800798c:	4413      	add	r3, r2
 800798e:	617b      	str	r3, [r7, #20]
 8007990:	e004      	b.n	800799c <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	011a      	lsls	r2, r3, #4
 8007996:	4b0d      	ldr	r3, [pc, #52]	@ (80079cc <HAL_EXTI_IRQHandler+0x74>)
 8007998:	4413      	add	r3, r2
 800799a:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	68fa      	ldr	r2, [r7, #12]
 80079a2:	4013      	ands	r3, r2
 80079a4:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d009      	beq.n	80079c0 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d002      	beq.n	80079c0 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	4798      	blx	r3
    }
  }
}
 80079c0:	bf00      	nop
 80079c2:	3718      	adds	r7, #24
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	58000088 	.word	0x58000088
 80079cc:	580000c8 	.word	0x580000c8

080079d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b089      	sub	sp, #36	@ 0x24
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80079da:	2300      	movs	r3, #0
 80079dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80079de:	4b89      	ldr	r3, [pc, #548]	@ (8007c04 <HAL_GPIO_Init+0x234>)
 80079e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80079e2:	e194      	b.n	8007d0e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	2101      	movs	r1, #1
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	fa01 f303 	lsl.w	r3, r1, r3
 80079f0:	4013      	ands	r3, r2
 80079f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	f000 8186 	beq.w	8007d08 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	f003 0303 	and.w	r3, r3, #3
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d005      	beq.n	8007a14 <HAL_GPIO_Init+0x44>
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	f003 0303 	and.w	r3, r3, #3
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d130      	bne.n	8007a76 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	005b      	lsls	r3, r3, #1
 8007a1e:	2203      	movs	r2, #3
 8007a20:	fa02 f303 	lsl.w	r3, r2, r3
 8007a24:	43db      	mvns	r3, r3
 8007a26:	69ba      	ldr	r2, [r7, #24]
 8007a28:	4013      	ands	r3, r2
 8007a2a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	68da      	ldr	r2, [r3, #12]
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	005b      	lsls	r3, r3, #1
 8007a34:	fa02 f303 	lsl.w	r3, r2, r3
 8007a38:	69ba      	ldr	r2, [r7, #24]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	69ba      	ldr	r2, [r7, #24]
 8007a42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a52:	43db      	mvns	r3, r3
 8007a54:	69ba      	ldr	r2, [r7, #24]
 8007a56:	4013      	ands	r3, r2
 8007a58:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	091b      	lsrs	r3, r3, #4
 8007a60:	f003 0201 	and.w	r2, r3, #1
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	fa02 f303 	lsl.w	r3, r2, r3
 8007a6a:	69ba      	ldr	r2, [r7, #24]
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	69ba      	ldr	r2, [r7, #24]
 8007a74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	f003 0303 	and.w	r3, r3, #3
 8007a7e:	2b03      	cmp	r3, #3
 8007a80:	d017      	beq.n	8007ab2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	005b      	lsls	r3, r3, #1
 8007a8c:	2203      	movs	r2, #3
 8007a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a92:	43db      	mvns	r3, r3
 8007a94:	69ba      	ldr	r2, [r7, #24]
 8007a96:	4013      	ands	r3, r2
 8007a98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	689a      	ldr	r2, [r3, #8]
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	005b      	lsls	r3, r3, #1
 8007aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa6:	69ba      	ldr	r2, [r7, #24]
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	69ba      	ldr	r2, [r7, #24]
 8007ab0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	f003 0303 	and.w	r3, r3, #3
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d123      	bne.n	8007b06 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	08da      	lsrs	r2, r3, #3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	3208      	adds	r2, #8
 8007ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	f003 0307 	and.w	r3, r3, #7
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	220f      	movs	r2, #15
 8007ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8007ada:	43db      	mvns	r3, r3
 8007adc:	69ba      	ldr	r2, [r7, #24]
 8007ade:	4013      	ands	r3, r2
 8007ae0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	691a      	ldr	r2, [r3, #16]
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	f003 0307 	and.w	r3, r3, #7
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	fa02 f303 	lsl.w	r3, r2, r3
 8007af2:	69ba      	ldr	r2, [r7, #24]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	08da      	lsrs	r2, r3, #3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	3208      	adds	r2, #8
 8007b00:	69b9      	ldr	r1, [r7, #24]
 8007b02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	005b      	lsls	r3, r3, #1
 8007b10:	2203      	movs	r2, #3
 8007b12:	fa02 f303 	lsl.w	r3, r2, r3
 8007b16:	43db      	mvns	r3, r3
 8007b18:	69ba      	ldr	r2, [r7, #24]
 8007b1a:	4013      	ands	r3, r2
 8007b1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	f003 0203 	and.w	r2, r3, #3
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	005b      	lsls	r3, r3, #1
 8007b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b2e:	69ba      	ldr	r2, [r7, #24]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	69ba      	ldr	r2, [r7, #24]
 8007b38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f000 80e0 	beq.w	8007d08 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b48:	4b2f      	ldr	r3, [pc, #188]	@ (8007c08 <HAL_GPIO_Init+0x238>)
 8007b4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007b4e:	4a2e      	ldr	r2, [pc, #184]	@ (8007c08 <HAL_GPIO_Init+0x238>)
 8007b50:	f043 0302 	orr.w	r3, r3, #2
 8007b54:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007b58:	4b2b      	ldr	r3, [pc, #172]	@ (8007c08 <HAL_GPIO_Init+0x238>)
 8007b5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007b5e:	f003 0302 	and.w	r3, r3, #2
 8007b62:	60fb      	str	r3, [r7, #12]
 8007b64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007b66:	4a29      	ldr	r2, [pc, #164]	@ (8007c0c <HAL_GPIO_Init+0x23c>)
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	089b      	lsrs	r3, r3, #2
 8007b6c:	3302      	adds	r3, #2
 8007b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	f003 0303 	and.w	r3, r3, #3
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	220f      	movs	r2, #15
 8007b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b82:	43db      	mvns	r3, r3
 8007b84:	69ba      	ldr	r2, [r7, #24]
 8007b86:	4013      	ands	r3, r2
 8007b88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a20      	ldr	r2, [pc, #128]	@ (8007c10 <HAL_GPIO_Init+0x240>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d052      	beq.n	8007c38 <HAL_GPIO_Init+0x268>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a1f      	ldr	r2, [pc, #124]	@ (8007c14 <HAL_GPIO_Init+0x244>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d031      	beq.n	8007bfe <HAL_GPIO_Init+0x22e>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a1e      	ldr	r2, [pc, #120]	@ (8007c18 <HAL_GPIO_Init+0x248>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d02b      	beq.n	8007bfa <HAL_GPIO_Init+0x22a>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a1d      	ldr	r2, [pc, #116]	@ (8007c1c <HAL_GPIO_Init+0x24c>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d025      	beq.n	8007bf6 <HAL_GPIO_Init+0x226>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a1c      	ldr	r2, [pc, #112]	@ (8007c20 <HAL_GPIO_Init+0x250>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d01f      	beq.n	8007bf2 <HAL_GPIO_Init+0x222>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4a1b      	ldr	r2, [pc, #108]	@ (8007c24 <HAL_GPIO_Init+0x254>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d019      	beq.n	8007bee <HAL_GPIO_Init+0x21e>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a1a      	ldr	r2, [pc, #104]	@ (8007c28 <HAL_GPIO_Init+0x258>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d013      	beq.n	8007bea <HAL_GPIO_Init+0x21a>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a19      	ldr	r2, [pc, #100]	@ (8007c2c <HAL_GPIO_Init+0x25c>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d00d      	beq.n	8007be6 <HAL_GPIO_Init+0x216>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a18      	ldr	r2, [pc, #96]	@ (8007c30 <HAL_GPIO_Init+0x260>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d007      	beq.n	8007be2 <HAL_GPIO_Init+0x212>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4a17      	ldr	r2, [pc, #92]	@ (8007c34 <HAL_GPIO_Init+0x264>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d101      	bne.n	8007bde <HAL_GPIO_Init+0x20e>
 8007bda:	2309      	movs	r3, #9
 8007bdc:	e02d      	b.n	8007c3a <HAL_GPIO_Init+0x26a>
 8007bde:	230a      	movs	r3, #10
 8007be0:	e02b      	b.n	8007c3a <HAL_GPIO_Init+0x26a>
 8007be2:	2308      	movs	r3, #8
 8007be4:	e029      	b.n	8007c3a <HAL_GPIO_Init+0x26a>
 8007be6:	2307      	movs	r3, #7
 8007be8:	e027      	b.n	8007c3a <HAL_GPIO_Init+0x26a>
 8007bea:	2306      	movs	r3, #6
 8007bec:	e025      	b.n	8007c3a <HAL_GPIO_Init+0x26a>
 8007bee:	2305      	movs	r3, #5
 8007bf0:	e023      	b.n	8007c3a <HAL_GPIO_Init+0x26a>
 8007bf2:	2304      	movs	r3, #4
 8007bf4:	e021      	b.n	8007c3a <HAL_GPIO_Init+0x26a>
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	e01f      	b.n	8007c3a <HAL_GPIO_Init+0x26a>
 8007bfa:	2302      	movs	r3, #2
 8007bfc:	e01d      	b.n	8007c3a <HAL_GPIO_Init+0x26a>
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e01b      	b.n	8007c3a <HAL_GPIO_Init+0x26a>
 8007c02:	bf00      	nop
 8007c04:	58000080 	.word	0x58000080
 8007c08:	58024400 	.word	0x58024400
 8007c0c:	58000400 	.word	0x58000400
 8007c10:	58020000 	.word	0x58020000
 8007c14:	58020400 	.word	0x58020400
 8007c18:	58020800 	.word	0x58020800
 8007c1c:	58020c00 	.word	0x58020c00
 8007c20:	58021000 	.word	0x58021000
 8007c24:	58021400 	.word	0x58021400
 8007c28:	58021800 	.word	0x58021800
 8007c2c:	58021c00 	.word	0x58021c00
 8007c30:	58022000 	.word	0x58022000
 8007c34:	58022400 	.word	0x58022400
 8007c38:	2300      	movs	r3, #0
 8007c3a:	69fa      	ldr	r2, [r7, #28]
 8007c3c:	f002 0203 	and.w	r2, r2, #3
 8007c40:	0092      	lsls	r2, r2, #2
 8007c42:	4093      	lsls	r3, r2
 8007c44:	69ba      	ldr	r2, [r7, #24]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007c4a:	4938      	ldr	r1, [pc, #224]	@ (8007d2c <HAL_GPIO_Init+0x35c>)
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	089b      	lsrs	r3, r3, #2
 8007c50:	3302      	adds	r3, #2
 8007c52:	69ba      	ldr	r2, [r7, #24]
 8007c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007c58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	43db      	mvns	r3, r3
 8007c64:	69ba      	ldr	r2, [r7, #24]
 8007c66:	4013      	ands	r3, r2
 8007c68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d003      	beq.n	8007c7e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007c76:	69ba      	ldr	r2, [r7, #24]
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007c7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007c82:	69bb      	ldr	r3, [r7, #24]
 8007c84:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007c86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	43db      	mvns	r3, r3
 8007c92:	69ba      	ldr	r2, [r7, #24]
 8007c94:	4013      	ands	r3, r2
 8007c96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d003      	beq.n	8007cac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007ca4:	69ba      	ldr	r2, [r7, #24]
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007cac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	43db      	mvns	r3, r3
 8007cbe:	69ba      	ldr	r2, [r7, #24]
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d003      	beq.n	8007cd8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007cd0:	69ba      	ldr	r2, [r7, #24]
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	69ba      	ldr	r2, [r7, #24]
 8007cdc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	43db      	mvns	r3, r3
 8007ce8:	69ba      	ldr	r2, [r7, #24]
 8007cea:	4013      	ands	r3, r2
 8007cec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d003      	beq.n	8007d02 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007cfa:	69ba      	ldr	r2, [r7, #24]
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	69ba      	ldr	r2, [r7, #24]
 8007d06:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	fa22 f303 	lsr.w	r3, r2, r3
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f47f ae63 	bne.w	80079e4 <HAL_GPIO_Init+0x14>
  }
}
 8007d1e:	bf00      	nop
 8007d20:	bf00      	nop
 8007d22:	3724      	adds	r7, #36	@ 0x24
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr
 8007d2c:	58000400 	.word	0x58000400

08007d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	460b      	mov	r3, r1
 8007d3a:	807b      	strh	r3, [r7, #2]
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007d40:	787b      	ldrb	r3, [r7, #1]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d003      	beq.n	8007d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007d46:	887a      	ldrh	r2, [r7, #2]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007d4c:	e003      	b.n	8007d56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007d4e:	887b      	ldrh	r3, [r7, #2]
 8007d50:	041a      	lsls	r2, r3, #16
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	619a      	str	r2, [r3, #24]
}
 8007d56:	bf00      	nop
 8007d58:	370c      	adds	r7, #12
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr

08007d62 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007d62:	b480      	push	{r7}
 8007d64:	b085      	sub	sp, #20
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	695b      	ldr	r3, [r3, #20]
 8007d72:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007d74:	887a      	ldrh	r2, [r7, #2]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	4013      	ands	r3, r2
 8007d7a:	041a      	lsls	r2, r3, #16
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	43d9      	mvns	r1, r3
 8007d80:	887b      	ldrh	r3, [r7, #2]
 8007d82:	400b      	ands	r3, r1
 8007d84:	431a      	orrs	r2, r3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	619a      	str	r2, [r3, #24]
}
 8007d8a:	bf00      	nop
 8007d8c:	3714      	adds	r7, #20
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr
	...

08007d98 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8007da0:	4a08      	ldr	r2, [pc, #32]	@ (8007dc4 <HAL_HSEM_FastTake+0x2c>)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	3320      	adds	r3, #32
 8007da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007daa:	4a07      	ldr	r2, [pc, #28]	@ (8007dc8 <HAL_HSEM_FastTake+0x30>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d101      	bne.n	8007db4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8007db0:	2300      	movs	r3, #0
 8007db2:	e000      	b.n	8007db6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	370c      	adds	r7, #12
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr
 8007dc2:	bf00      	nop
 8007dc4:	58026400 	.word	0x58026400
 8007dc8:	80000300 	.word	0x80000300

08007dcc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8007dd6:	4906      	ldr	r1, [pc, #24]	@ (8007df0 <HAL_HSEM_Release+0x24>)
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8007de4:	bf00      	nop
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr
 8007df0:	58026400 	.word	0x58026400

08007df4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007dfc:	4b29      	ldr	r3, [pc, #164]	@ (8007ea4 <HAL_PWREx_ConfigSupply+0xb0>)
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	f003 0307 	and.w	r3, r3, #7
 8007e04:	2b06      	cmp	r3, #6
 8007e06:	d00a      	beq.n	8007e1e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007e08:	4b26      	ldr	r3, [pc, #152]	@ (8007ea4 <HAL_PWREx_ConfigSupply+0xb0>)
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d001      	beq.n	8007e1a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e040      	b.n	8007e9c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	e03e      	b.n	8007e9c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007e1e:	4b21      	ldr	r3, [pc, #132]	@ (8007ea4 <HAL_PWREx_ConfigSupply+0xb0>)
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8007e26:	491f      	ldr	r1, [pc, #124]	@ (8007ea4 <HAL_PWREx_ConfigSupply+0xb0>)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007e2e:	f7fb f87f 	bl	8002f30 <HAL_GetTick>
 8007e32:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007e34:	e009      	b.n	8007e4a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007e36:	f7fb f87b 	bl	8002f30 <HAL_GetTick>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	1ad3      	subs	r3, r2, r3
 8007e40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007e44:	d901      	bls.n	8007e4a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	e028      	b.n	8007e9c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007e4a:	4b16      	ldr	r3, [pc, #88]	@ (8007ea4 <HAL_PWREx_ConfigSupply+0xb0>)
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007e52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e56:	d1ee      	bne.n	8007e36 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2b1e      	cmp	r3, #30
 8007e5c:	d008      	beq.n	8007e70 <HAL_PWREx_ConfigSupply+0x7c>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e62:	d005      	beq.n	8007e70 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2b1d      	cmp	r3, #29
 8007e68:	d002      	beq.n	8007e70 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2b2d      	cmp	r3, #45	@ 0x2d
 8007e6e:	d114      	bne.n	8007e9a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007e70:	f7fb f85e 	bl	8002f30 <HAL_GetTick>
 8007e74:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007e76:	e009      	b.n	8007e8c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007e78:	f7fb f85a 	bl	8002f30 <HAL_GetTick>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007e86:	d901      	bls.n	8007e8c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e007      	b.n	8007e9c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007e8c:	4b05      	ldr	r3, [pc, #20]	@ (8007ea4 <HAL_PWREx_ConfigSupply+0xb0>)
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e98:	d1ee      	bne.n	8007e78 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3710      	adds	r7, #16
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}
 8007ea4:	58024800 	.word	0x58024800

08007ea8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b08c      	sub	sp, #48	@ 0x30
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d102      	bne.n	8007ebc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	f000 bc48 	b.w	800874c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 0301 	and.w	r3, r3, #1
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	f000 8088 	beq.w	8007fda <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007eca:	4b99      	ldr	r3, [pc, #612]	@ (8008130 <HAL_RCC_OscConfig+0x288>)
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007ed4:	4b96      	ldr	r3, [pc, #600]	@ (8008130 <HAL_RCC_OscConfig+0x288>)
 8007ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007edc:	2b10      	cmp	r3, #16
 8007ede:	d007      	beq.n	8007ef0 <HAL_RCC_OscConfig+0x48>
 8007ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ee2:	2b18      	cmp	r3, #24
 8007ee4:	d111      	bne.n	8007f0a <HAL_RCC_OscConfig+0x62>
 8007ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ee8:	f003 0303 	and.w	r3, r3, #3
 8007eec:	2b02      	cmp	r3, #2
 8007eee:	d10c      	bne.n	8007f0a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ef0:	4b8f      	ldr	r3, [pc, #572]	@ (8008130 <HAL_RCC_OscConfig+0x288>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d06d      	beq.n	8007fd8 <HAL_RCC_OscConfig+0x130>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d169      	bne.n	8007fd8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	f000 bc21 	b.w	800874c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f12:	d106      	bne.n	8007f22 <HAL_RCC_OscConfig+0x7a>
 8007f14:	4b86      	ldr	r3, [pc, #536]	@ (8008130 <HAL_RCC_OscConfig+0x288>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a85      	ldr	r2, [pc, #532]	@ (8008130 <HAL_RCC_OscConfig+0x288>)
 8007f1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f1e:	6013      	str	r3, [r2, #0]
 8007f20:	e02e      	b.n	8007f80 <HAL_RCC_OscConfig+0xd8>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d10c      	bne.n	8007f44 <HAL_RCC_OscConfig+0x9c>
 8007f2a:	4b81      	ldr	r3, [pc, #516]	@ (8008130 <HAL_RCC_OscConfig+0x288>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a80      	ldr	r2, [pc, #512]	@ (8008130 <HAL_RCC_OscConfig+0x288>)
 8007f30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f34:	6013      	str	r3, [r2, #0]
 8007f36:	4b7e      	ldr	r3, [pc, #504]	@ (8008130 <HAL_RCC_OscConfig+0x288>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a7d      	ldr	r2, [pc, #500]	@ (8008130 <HAL_RCC_OscConfig+0x288>)
 8007f3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007f40:	6013      	str	r3, [r2, #0]
 8007f42:	e01d      	b.n	8007f80 <HAL_RCC_OscConfig+0xd8>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007f4c:	d10c      	bne.n	8007f68 <HAL_RCC_OscConfig+0xc0>
 8007f4e:	4b78      	ldr	r3, [pc, #480]	@ (8008130 <HAL_RCC_OscConfig+0x288>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a77      	ldr	r2, [pc, #476]	@ (8008130 <HAL_RCC_OscConfig+0x288>)
 8007f54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007f58:	6013      	str	r3, [r2, #0]
 8007f5a:	4b75      	ldr	r3, [pc, #468]	@ (8008130 <HAL_RCC_OscConfig+0x288>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a74      	ldr	r2, [pc, #464]	@ (8008130 <HAL_RCC_OscConfig+0x288>)
 8007f60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f64:	6013      	str	r3, [r2, #0]
 8007f66:	e00b      	b.n	8007f80 <HAL_RCC_OscConfig+0xd8>
 8007f68:	4b71      	ldr	r3, [pc, #452]	@ (8008130 <HAL_RCC_OscConfig+0x288>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a70      	ldr	r2, [pc, #448]	@ (8008130 <HAL_RCC_OscConfig+0x288>)
 8007f6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f72:	6013      	str	r3, [r2, #0]
 8007f74:	4b6e      	ldr	r3, [pc, #440]	@ (8008130 <HAL_RCC_OscConfig+0x288>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a6d      	ldr	r2, [pc, #436]	@ (8008130 <HAL_RCC_OscConfig+0x288>)
 8007f7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d013      	beq.n	8007fb0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f88:	f7fa ffd2 	bl	8002f30 <HAL_GetTick>
 8007f8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f8e:	e008      	b.n	8007fa2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f90:	f7fa ffce 	bl	8002f30 <HAL_GetTick>
 8007f94:	4602      	mov	r2, r0
 8007f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f98:	1ad3      	subs	r3, r2, r3
 8007f9a:	2b64      	cmp	r3, #100	@ 0x64
 8007f9c:	d901      	bls.n	8007fa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e3d4      	b.n	800874c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007fa2:	4b63      	ldr	r3, [pc, #396]	@ (8008130 <HAL_RCC_OscConfig+0x288>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d0f0      	beq.n	8007f90 <HAL_RCC_OscConfig+0xe8>
 8007fae:	e014      	b.n	8007fda <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fb0:	f7fa ffbe 	bl	8002f30 <HAL_GetTick>
 8007fb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007fb6:	e008      	b.n	8007fca <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007fb8:	f7fa ffba 	bl	8002f30 <HAL_GetTick>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc0:	1ad3      	subs	r3, r2, r3
 8007fc2:	2b64      	cmp	r3, #100	@ 0x64
 8007fc4:	d901      	bls.n	8007fca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	e3c0      	b.n	800874c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007fca:	4b59      	ldr	r3, [pc, #356]	@ (8008130 <HAL_RCC_OscConfig+0x288>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1f0      	bne.n	8007fb8 <HAL_RCC_OscConfig+0x110>
 8007fd6:	e000      	b.n	8007fda <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f003 0302 	and.w	r3, r3, #2
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	f000 80ca 	beq.w	800817c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007fe8:	4b51      	ldr	r3, [pc, #324]	@ (8008130 <HAL_RCC_OscConfig+0x288>)
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ff0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007ff2:	4b4f      	ldr	r3, [pc, #316]	@ (8008130 <HAL_RCC_OscConfig+0x288>)
 8007ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ff6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007ff8:	6a3b      	ldr	r3, [r7, #32]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d007      	beq.n	800800e <HAL_RCC_OscConfig+0x166>
 8007ffe:	6a3b      	ldr	r3, [r7, #32]
 8008000:	2b18      	cmp	r3, #24
 8008002:	d156      	bne.n	80080b2 <HAL_RCC_OscConfig+0x20a>
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	f003 0303 	and.w	r3, r3, #3
 800800a:	2b00      	cmp	r3, #0
 800800c:	d151      	bne.n	80080b2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800800e:	4b48      	ldr	r3, [pc, #288]	@ (8008130 <HAL_RCC_OscConfig+0x288>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f003 0304 	and.w	r3, r3, #4
 8008016:	2b00      	cmp	r3, #0
 8008018:	d005      	beq.n	8008026 <HAL_RCC_OscConfig+0x17e>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d101      	bne.n	8008026 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	e392      	b.n	800874c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008026:	4b42      	ldr	r3, [pc, #264]	@ (8008130 <HAL_RCC_OscConfig+0x288>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f023 0219 	bic.w	r2, r3, #25
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	493f      	ldr	r1, [pc, #252]	@ (8008130 <HAL_RCC_OscConfig+0x288>)
 8008034:	4313      	orrs	r3, r2
 8008036:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008038:	f7fa ff7a 	bl	8002f30 <HAL_GetTick>
 800803c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800803e:	e008      	b.n	8008052 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008040:	f7fa ff76 	bl	8002f30 <HAL_GetTick>
 8008044:	4602      	mov	r2, r0
 8008046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008048:	1ad3      	subs	r3, r2, r3
 800804a:	2b02      	cmp	r3, #2
 800804c:	d901      	bls.n	8008052 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800804e:	2303      	movs	r3, #3
 8008050:	e37c      	b.n	800874c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008052:	4b37      	ldr	r3, [pc, #220]	@ (8008130 <HAL_RCC_OscConfig+0x288>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f003 0304 	and.w	r3, r3, #4
 800805a:	2b00      	cmp	r3, #0
 800805c:	d0f0      	beq.n	8008040 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800805e:	f7fa ff73 	bl	8002f48 <HAL_GetREVID>
 8008062:	4603      	mov	r3, r0
 8008064:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008068:	4293      	cmp	r3, r2
 800806a:	d817      	bhi.n	800809c <HAL_RCC_OscConfig+0x1f4>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	691b      	ldr	r3, [r3, #16]
 8008070:	2b40      	cmp	r3, #64	@ 0x40
 8008072:	d108      	bne.n	8008086 <HAL_RCC_OscConfig+0x1de>
 8008074:	4b2e      	ldr	r3, [pc, #184]	@ (8008130 <HAL_RCC_OscConfig+0x288>)
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800807c:	4a2c      	ldr	r2, [pc, #176]	@ (8008130 <HAL_RCC_OscConfig+0x288>)
 800807e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008082:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008084:	e07a      	b.n	800817c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008086:	4b2a      	ldr	r3, [pc, #168]	@ (8008130 <HAL_RCC_OscConfig+0x288>)
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	031b      	lsls	r3, r3, #12
 8008094:	4926      	ldr	r1, [pc, #152]	@ (8008130 <HAL_RCC_OscConfig+0x288>)
 8008096:	4313      	orrs	r3, r2
 8008098:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800809a:	e06f      	b.n	800817c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800809c:	4b24      	ldr	r3, [pc, #144]	@ (8008130 <HAL_RCC_OscConfig+0x288>)
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	691b      	ldr	r3, [r3, #16]
 80080a8:	061b      	lsls	r3, r3, #24
 80080aa:	4921      	ldr	r1, [pc, #132]	@ (8008130 <HAL_RCC_OscConfig+0x288>)
 80080ac:	4313      	orrs	r3, r2
 80080ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080b0:	e064      	b.n	800817c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d047      	beq.n	800814a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80080ba:	4b1d      	ldr	r3, [pc, #116]	@ (8008130 <HAL_RCC_OscConfig+0x288>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f023 0219 	bic.w	r2, r3, #25
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	491a      	ldr	r1, [pc, #104]	@ (8008130 <HAL_RCC_OscConfig+0x288>)
 80080c8:	4313      	orrs	r3, r2
 80080ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080cc:	f7fa ff30 	bl	8002f30 <HAL_GetTick>
 80080d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80080d2:	e008      	b.n	80080e6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80080d4:	f7fa ff2c 	bl	8002f30 <HAL_GetTick>
 80080d8:	4602      	mov	r2, r0
 80080da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080dc:	1ad3      	subs	r3, r2, r3
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d901      	bls.n	80080e6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80080e2:	2303      	movs	r3, #3
 80080e4:	e332      	b.n	800874c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80080e6:	4b12      	ldr	r3, [pc, #72]	@ (8008130 <HAL_RCC_OscConfig+0x288>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f003 0304 	and.w	r3, r3, #4
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d0f0      	beq.n	80080d4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080f2:	f7fa ff29 	bl	8002f48 <HAL_GetREVID>
 80080f6:	4603      	mov	r3, r0
 80080f8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d819      	bhi.n	8008134 <HAL_RCC_OscConfig+0x28c>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	691b      	ldr	r3, [r3, #16]
 8008104:	2b40      	cmp	r3, #64	@ 0x40
 8008106:	d108      	bne.n	800811a <HAL_RCC_OscConfig+0x272>
 8008108:	4b09      	ldr	r3, [pc, #36]	@ (8008130 <HAL_RCC_OscConfig+0x288>)
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008110:	4a07      	ldr	r2, [pc, #28]	@ (8008130 <HAL_RCC_OscConfig+0x288>)
 8008112:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008116:	6053      	str	r3, [r2, #4]
 8008118:	e030      	b.n	800817c <HAL_RCC_OscConfig+0x2d4>
 800811a:	4b05      	ldr	r3, [pc, #20]	@ (8008130 <HAL_RCC_OscConfig+0x288>)
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	031b      	lsls	r3, r3, #12
 8008128:	4901      	ldr	r1, [pc, #4]	@ (8008130 <HAL_RCC_OscConfig+0x288>)
 800812a:	4313      	orrs	r3, r2
 800812c:	604b      	str	r3, [r1, #4]
 800812e:	e025      	b.n	800817c <HAL_RCC_OscConfig+0x2d4>
 8008130:	58024400 	.word	0x58024400
 8008134:	4b9a      	ldr	r3, [pc, #616]	@ (80083a0 <HAL_RCC_OscConfig+0x4f8>)
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	061b      	lsls	r3, r3, #24
 8008142:	4997      	ldr	r1, [pc, #604]	@ (80083a0 <HAL_RCC_OscConfig+0x4f8>)
 8008144:	4313      	orrs	r3, r2
 8008146:	604b      	str	r3, [r1, #4]
 8008148:	e018      	b.n	800817c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800814a:	4b95      	ldr	r3, [pc, #596]	@ (80083a0 <HAL_RCC_OscConfig+0x4f8>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a94      	ldr	r2, [pc, #592]	@ (80083a0 <HAL_RCC_OscConfig+0x4f8>)
 8008150:	f023 0301 	bic.w	r3, r3, #1
 8008154:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008156:	f7fa feeb 	bl	8002f30 <HAL_GetTick>
 800815a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800815c:	e008      	b.n	8008170 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800815e:	f7fa fee7 	bl	8002f30 <HAL_GetTick>
 8008162:	4602      	mov	r2, r0
 8008164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008166:	1ad3      	subs	r3, r2, r3
 8008168:	2b02      	cmp	r3, #2
 800816a:	d901      	bls.n	8008170 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800816c:	2303      	movs	r3, #3
 800816e:	e2ed      	b.n	800874c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008170:	4b8b      	ldr	r3, [pc, #556]	@ (80083a0 <HAL_RCC_OscConfig+0x4f8>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f003 0304 	and.w	r3, r3, #4
 8008178:	2b00      	cmp	r3, #0
 800817a:	d1f0      	bne.n	800815e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f003 0310 	and.w	r3, r3, #16
 8008184:	2b00      	cmp	r3, #0
 8008186:	f000 80a9 	beq.w	80082dc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800818a:	4b85      	ldr	r3, [pc, #532]	@ (80083a0 <HAL_RCC_OscConfig+0x4f8>)
 800818c:	691b      	ldr	r3, [r3, #16]
 800818e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008192:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008194:	4b82      	ldr	r3, [pc, #520]	@ (80083a0 <HAL_RCC_OscConfig+0x4f8>)
 8008196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008198:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	2b08      	cmp	r3, #8
 800819e:	d007      	beq.n	80081b0 <HAL_RCC_OscConfig+0x308>
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	2b18      	cmp	r3, #24
 80081a4:	d13a      	bne.n	800821c <HAL_RCC_OscConfig+0x374>
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	f003 0303 	and.w	r3, r3, #3
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d135      	bne.n	800821c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80081b0:	4b7b      	ldr	r3, [pc, #492]	@ (80083a0 <HAL_RCC_OscConfig+0x4f8>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d005      	beq.n	80081c8 <HAL_RCC_OscConfig+0x320>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	69db      	ldr	r3, [r3, #28]
 80081c0:	2b80      	cmp	r3, #128	@ 0x80
 80081c2:	d001      	beq.n	80081c8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	e2c1      	b.n	800874c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80081c8:	f7fa febe 	bl	8002f48 <HAL_GetREVID>
 80081cc:	4603      	mov	r3, r0
 80081ce:	f241 0203 	movw	r2, #4099	@ 0x1003
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d817      	bhi.n	8008206 <HAL_RCC_OscConfig+0x35e>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a1b      	ldr	r3, [r3, #32]
 80081da:	2b20      	cmp	r3, #32
 80081dc:	d108      	bne.n	80081f0 <HAL_RCC_OscConfig+0x348>
 80081de:	4b70      	ldr	r3, [pc, #448]	@ (80083a0 <HAL_RCC_OscConfig+0x4f8>)
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80081e6:	4a6e      	ldr	r2, [pc, #440]	@ (80083a0 <HAL_RCC_OscConfig+0x4f8>)
 80081e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80081ec:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80081ee:	e075      	b.n	80082dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80081f0:	4b6b      	ldr	r3, [pc, #428]	@ (80083a0 <HAL_RCC_OscConfig+0x4f8>)
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6a1b      	ldr	r3, [r3, #32]
 80081fc:	069b      	lsls	r3, r3, #26
 80081fe:	4968      	ldr	r1, [pc, #416]	@ (80083a0 <HAL_RCC_OscConfig+0x4f8>)
 8008200:	4313      	orrs	r3, r2
 8008202:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008204:	e06a      	b.n	80082dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008206:	4b66      	ldr	r3, [pc, #408]	@ (80083a0 <HAL_RCC_OscConfig+0x4f8>)
 8008208:	68db      	ldr	r3, [r3, #12]
 800820a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6a1b      	ldr	r3, [r3, #32]
 8008212:	061b      	lsls	r3, r3, #24
 8008214:	4962      	ldr	r1, [pc, #392]	@ (80083a0 <HAL_RCC_OscConfig+0x4f8>)
 8008216:	4313      	orrs	r3, r2
 8008218:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800821a:	e05f      	b.n	80082dc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	69db      	ldr	r3, [r3, #28]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d042      	beq.n	80082aa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008224:	4b5e      	ldr	r3, [pc, #376]	@ (80083a0 <HAL_RCC_OscConfig+0x4f8>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a5d      	ldr	r2, [pc, #372]	@ (80083a0 <HAL_RCC_OscConfig+0x4f8>)
 800822a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800822e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008230:	f7fa fe7e 	bl	8002f30 <HAL_GetTick>
 8008234:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008236:	e008      	b.n	800824a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008238:	f7fa fe7a 	bl	8002f30 <HAL_GetTick>
 800823c:	4602      	mov	r2, r0
 800823e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008240:	1ad3      	subs	r3, r2, r3
 8008242:	2b02      	cmp	r3, #2
 8008244:	d901      	bls.n	800824a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008246:	2303      	movs	r3, #3
 8008248:	e280      	b.n	800874c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800824a:	4b55      	ldr	r3, [pc, #340]	@ (80083a0 <HAL_RCC_OscConfig+0x4f8>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008252:	2b00      	cmp	r3, #0
 8008254:	d0f0      	beq.n	8008238 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008256:	f7fa fe77 	bl	8002f48 <HAL_GetREVID>
 800825a:	4603      	mov	r3, r0
 800825c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008260:	4293      	cmp	r3, r2
 8008262:	d817      	bhi.n	8008294 <HAL_RCC_OscConfig+0x3ec>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6a1b      	ldr	r3, [r3, #32]
 8008268:	2b20      	cmp	r3, #32
 800826a:	d108      	bne.n	800827e <HAL_RCC_OscConfig+0x3d6>
 800826c:	4b4c      	ldr	r3, [pc, #304]	@ (80083a0 <HAL_RCC_OscConfig+0x4f8>)
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008274:	4a4a      	ldr	r2, [pc, #296]	@ (80083a0 <HAL_RCC_OscConfig+0x4f8>)
 8008276:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800827a:	6053      	str	r3, [r2, #4]
 800827c:	e02e      	b.n	80082dc <HAL_RCC_OscConfig+0x434>
 800827e:	4b48      	ldr	r3, [pc, #288]	@ (80083a0 <HAL_RCC_OscConfig+0x4f8>)
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a1b      	ldr	r3, [r3, #32]
 800828a:	069b      	lsls	r3, r3, #26
 800828c:	4944      	ldr	r1, [pc, #272]	@ (80083a0 <HAL_RCC_OscConfig+0x4f8>)
 800828e:	4313      	orrs	r3, r2
 8008290:	604b      	str	r3, [r1, #4]
 8008292:	e023      	b.n	80082dc <HAL_RCC_OscConfig+0x434>
 8008294:	4b42      	ldr	r3, [pc, #264]	@ (80083a0 <HAL_RCC_OscConfig+0x4f8>)
 8008296:	68db      	ldr	r3, [r3, #12]
 8008298:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a1b      	ldr	r3, [r3, #32]
 80082a0:	061b      	lsls	r3, r3, #24
 80082a2:	493f      	ldr	r1, [pc, #252]	@ (80083a0 <HAL_RCC_OscConfig+0x4f8>)
 80082a4:	4313      	orrs	r3, r2
 80082a6:	60cb      	str	r3, [r1, #12]
 80082a8:	e018      	b.n	80082dc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80082aa:	4b3d      	ldr	r3, [pc, #244]	@ (80083a0 <HAL_RCC_OscConfig+0x4f8>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a3c      	ldr	r2, [pc, #240]	@ (80083a0 <HAL_RCC_OscConfig+0x4f8>)
 80082b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082b6:	f7fa fe3b 	bl	8002f30 <HAL_GetTick>
 80082ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80082bc:	e008      	b.n	80082d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80082be:	f7fa fe37 	bl	8002f30 <HAL_GetTick>
 80082c2:	4602      	mov	r2, r0
 80082c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c6:	1ad3      	subs	r3, r2, r3
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d901      	bls.n	80082d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80082cc:	2303      	movs	r3, #3
 80082ce:	e23d      	b.n	800874c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80082d0:	4b33      	ldr	r3, [pc, #204]	@ (80083a0 <HAL_RCC_OscConfig+0x4f8>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d1f0      	bne.n	80082be <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 0308 	and.w	r3, r3, #8
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d036      	beq.n	8008356 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	695b      	ldr	r3, [r3, #20]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d019      	beq.n	8008324 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80082f0:	4b2b      	ldr	r3, [pc, #172]	@ (80083a0 <HAL_RCC_OscConfig+0x4f8>)
 80082f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082f4:	4a2a      	ldr	r2, [pc, #168]	@ (80083a0 <HAL_RCC_OscConfig+0x4f8>)
 80082f6:	f043 0301 	orr.w	r3, r3, #1
 80082fa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082fc:	f7fa fe18 	bl	8002f30 <HAL_GetTick>
 8008300:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008302:	e008      	b.n	8008316 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008304:	f7fa fe14 	bl	8002f30 <HAL_GetTick>
 8008308:	4602      	mov	r2, r0
 800830a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800830c:	1ad3      	subs	r3, r2, r3
 800830e:	2b02      	cmp	r3, #2
 8008310:	d901      	bls.n	8008316 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008312:	2303      	movs	r3, #3
 8008314:	e21a      	b.n	800874c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008316:	4b22      	ldr	r3, [pc, #136]	@ (80083a0 <HAL_RCC_OscConfig+0x4f8>)
 8008318:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800831a:	f003 0302 	and.w	r3, r3, #2
 800831e:	2b00      	cmp	r3, #0
 8008320:	d0f0      	beq.n	8008304 <HAL_RCC_OscConfig+0x45c>
 8008322:	e018      	b.n	8008356 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008324:	4b1e      	ldr	r3, [pc, #120]	@ (80083a0 <HAL_RCC_OscConfig+0x4f8>)
 8008326:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008328:	4a1d      	ldr	r2, [pc, #116]	@ (80083a0 <HAL_RCC_OscConfig+0x4f8>)
 800832a:	f023 0301 	bic.w	r3, r3, #1
 800832e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008330:	f7fa fdfe 	bl	8002f30 <HAL_GetTick>
 8008334:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008336:	e008      	b.n	800834a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008338:	f7fa fdfa 	bl	8002f30 <HAL_GetTick>
 800833c:	4602      	mov	r2, r0
 800833e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008340:	1ad3      	subs	r3, r2, r3
 8008342:	2b02      	cmp	r3, #2
 8008344:	d901      	bls.n	800834a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008346:	2303      	movs	r3, #3
 8008348:	e200      	b.n	800874c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800834a:	4b15      	ldr	r3, [pc, #84]	@ (80083a0 <HAL_RCC_OscConfig+0x4f8>)
 800834c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800834e:	f003 0302 	and.w	r3, r3, #2
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1f0      	bne.n	8008338 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 0320 	and.w	r3, r3, #32
 800835e:	2b00      	cmp	r3, #0
 8008360:	d039      	beq.n	80083d6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d01c      	beq.n	80083a4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800836a:	4b0d      	ldr	r3, [pc, #52]	@ (80083a0 <HAL_RCC_OscConfig+0x4f8>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a0c      	ldr	r2, [pc, #48]	@ (80083a0 <HAL_RCC_OscConfig+0x4f8>)
 8008370:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008374:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008376:	f7fa fddb 	bl	8002f30 <HAL_GetTick>
 800837a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800837c:	e008      	b.n	8008390 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800837e:	f7fa fdd7 	bl	8002f30 <HAL_GetTick>
 8008382:	4602      	mov	r2, r0
 8008384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	2b02      	cmp	r3, #2
 800838a:	d901      	bls.n	8008390 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800838c:	2303      	movs	r3, #3
 800838e:	e1dd      	b.n	800874c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008390:	4b03      	ldr	r3, [pc, #12]	@ (80083a0 <HAL_RCC_OscConfig+0x4f8>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008398:	2b00      	cmp	r3, #0
 800839a:	d0f0      	beq.n	800837e <HAL_RCC_OscConfig+0x4d6>
 800839c:	e01b      	b.n	80083d6 <HAL_RCC_OscConfig+0x52e>
 800839e:	bf00      	nop
 80083a0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80083a4:	4b9b      	ldr	r3, [pc, #620]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a9a      	ldr	r2, [pc, #616]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 80083aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80083ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80083b0:	f7fa fdbe 	bl	8002f30 <HAL_GetTick>
 80083b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80083b6:	e008      	b.n	80083ca <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80083b8:	f7fa fdba 	bl	8002f30 <HAL_GetTick>
 80083bc:	4602      	mov	r2, r0
 80083be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c0:	1ad3      	subs	r3, r2, r3
 80083c2:	2b02      	cmp	r3, #2
 80083c4:	d901      	bls.n	80083ca <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80083c6:	2303      	movs	r3, #3
 80083c8:	e1c0      	b.n	800874c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80083ca:	4b92      	ldr	r3, [pc, #584]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d1f0      	bne.n	80083b8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f003 0304 	and.w	r3, r3, #4
 80083de:	2b00      	cmp	r3, #0
 80083e0:	f000 8081 	beq.w	80084e6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80083e4:	4b8c      	ldr	r3, [pc, #560]	@ (8008618 <HAL_RCC_OscConfig+0x770>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a8b      	ldr	r2, [pc, #556]	@ (8008618 <HAL_RCC_OscConfig+0x770>)
 80083ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80083f0:	f7fa fd9e 	bl	8002f30 <HAL_GetTick>
 80083f4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80083f6:	e008      	b.n	800840a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083f8:	f7fa fd9a 	bl	8002f30 <HAL_GetTick>
 80083fc:	4602      	mov	r2, r0
 80083fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008400:	1ad3      	subs	r3, r2, r3
 8008402:	2b64      	cmp	r3, #100	@ 0x64
 8008404:	d901      	bls.n	800840a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008406:	2303      	movs	r3, #3
 8008408:	e1a0      	b.n	800874c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800840a:	4b83      	ldr	r3, [pc, #524]	@ (8008618 <HAL_RCC_OscConfig+0x770>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008412:	2b00      	cmp	r3, #0
 8008414:	d0f0      	beq.n	80083f8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	2b01      	cmp	r3, #1
 800841c:	d106      	bne.n	800842c <HAL_RCC_OscConfig+0x584>
 800841e:	4b7d      	ldr	r3, [pc, #500]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 8008420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008422:	4a7c      	ldr	r2, [pc, #496]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 8008424:	f043 0301 	orr.w	r3, r3, #1
 8008428:	6713      	str	r3, [r2, #112]	@ 0x70
 800842a:	e02d      	b.n	8008488 <HAL_RCC_OscConfig+0x5e0>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d10c      	bne.n	800844e <HAL_RCC_OscConfig+0x5a6>
 8008434:	4b77      	ldr	r3, [pc, #476]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 8008436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008438:	4a76      	ldr	r2, [pc, #472]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 800843a:	f023 0301 	bic.w	r3, r3, #1
 800843e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008440:	4b74      	ldr	r3, [pc, #464]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 8008442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008444:	4a73      	ldr	r2, [pc, #460]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 8008446:	f023 0304 	bic.w	r3, r3, #4
 800844a:	6713      	str	r3, [r2, #112]	@ 0x70
 800844c:	e01c      	b.n	8008488 <HAL_RCC_OscConfig+0x5e0>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	2b05      	cmp	r3, #5
 8008454:	d10c      	bne.n	8008470 <HAL_RCC_OscConfig+0x5c8>
 8008456:	4b6f      	ldr	r3, [pc, #444]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 8008458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800845a:	4a6e      	ldr	r2, [pc, #440]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 800845c:	f043 0304 	orr.w	r3, r3, #4
 8008460:	6713      	str	r3, [r2, #112]	@ 0x70
 8008462:	4b6c      	ldr	r3, [pc, #432]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 8008464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008466:	4a6b      	ldr	r2, [pc, #428]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 8008468:	f043 0301 	orr.w	r3, r3, #1
 800846c:	6713      	str	r3, [r2, #112]	@ 0x70
 800846e:	e00b      	b.n	8008488 <HAL_RCC_OscConfig+0x5e0>
 8008470:	4b68      	ldr	r3, [pc, #416]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 8008472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008474:	4a67      	ldr	r2, [pc, #412]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 8008476:	f023 0301 	bic.w	r3, r3, #1
 800847a:	6713      	str	r3, [r2, #112]	@ 0x70
 800847c:	4b65      	ldr	r3, [pc, #404]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 800847e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008480:	4a64      	ldr	r2, [pc, #400]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 8008482:	f023 0304 	bic.w	r3, r3, #4
 8008486:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d015      	beq.n	80084bc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008490:	f7fa fd4e 	bl	8002f30 <HAL_GetTick>
 8008494:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008496:	e00a      	b.n	80084ae <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008498:	f7fa fd4a 	bl	8002f30 <HAL_GetTick>
 800849c:	4602      	mov	r2, r0
 800849e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a0:	1ad3      	subs	r3, r2, r3
 80084a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d901      	bls.n	80084ae <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80084aa:	2303      	movs	r3, #3
 80084ac:	e14e      	b.n	800874c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084ae:	4b59      	ldr	r3, [pc, #356]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 80084b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084b2:	f003 0302 	and.w	r3, r3, #2
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d0ee      	beq.n	8008498 <HAL_RCC_OscConfig+0x5f0>
 80084ba:	e014      	b.n	80084e6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084bc:	f7fa fd38 	bl	8002f30 <HAL_GetTick>
 80084c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80084c2:	e00a      	b.n	80084da <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084c4:	f7fa fd34 	bl	8002f30 <HAL_GetTick>
 80084c8:	4602      	mov	r2, r0
 80084ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084cc:	1ad3      	subs	r3, r2, r3
 80084ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d901      	bls.n	80084da <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80084d6:	2303      	movs	r3, #3
 80084d8:	e138      	b.n	800874c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80084da:	4b4e      	ldr	r3, [pc, #312]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 80084dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084de:	f003 0302 	and.w	r3, r3, #2
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d1ee      	bne.n	80084c4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f000 812d 	beq.w	800874a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80084f0:	4b48      	ldr	r3, [pc, #288]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80084f8:	2b18      	cmp	r3, #24
 80084fa:	f000 80bd 	beq.w	8008678 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008502:	2b02      	cmp	r3, #2
 8008504:	f040 809e 	bne.w	8008644 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008508:	4b42      	ldr	r3, [pc, #264]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a41      	ldr	r2, [pc, #260]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 800850e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008514:	f7fa fd0c 	bl	8002f30 <HAL_GetTick>
 8008518:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800851a:	e008      	b.n	800852e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800851c:	f7fa fd08 	bl	8002f30 <HAL_GetTick>
 8008520:	4602      	mov	r2, r0
 8008522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008524:	1ad3      	subs	r3, r2, r3
 8008526:	2b02      	cmp	r3, #2
 8008528:	d901      	bls.n	800852e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800852a:	2303      	movs	r3, #3
 800852c:	e10e      	b.n	800874c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800852e:	4b39      	ldr	r3, [pc, #228]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008536:	2b00      	cmp	r3, #0
 8008538:	d1f0      	bne.n	800851c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800853a:	4b36      	ldr	r3, [pc, #216]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 800853c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800853e:	4b37      	ldr	r3, [pc, #220]	@ (800861c <HAL_RCC_OscConfig+0x774>)
 8008540:	4013      	ands	r3, r2
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800854a:	0112      	lsls	r2, r2, #4
 800854c:	430a      	orrs	r2, r1
 800854e:	4931      	ldr	r1, [pc, #196]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 8008550:	4313      	orrs	r3, r2
 8008552:	628b      	str	r3, [r1, #40]	@ 0x28
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008558:	3b01      	subs	r3, #1
 800855a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008562:	3b01      	subs	r3, #1
 8008564:	025b      	lsls	r3, r3, #9
 8008566:	b29b      	uxth	r3, r3
 8008568:	431a      	orrs	r2, r3
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800856e:	3b01      	subs	r3, #1
 8008570:	041b      	lsls	r3, r3, #16
 8008572:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008576:	431a      	orrs	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800857c:	3b01      	subs	r3, #1
 800857e:	061b      	lsls	r3, r3, #24
 8008580:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008584:	4923      	ldr	r1, [pc, #140]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 8008586:	4313      	orrs	r3, r2
 8008588:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800858a:	4b22      	ldr	r3, [pc, #136]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 800858c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800858e:	4a21      	ldr	r2, [pc, #132]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 8008590:	f023 0301 	bic.w	r3, r3, #1
 8008594:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008596:	4b1f      	ldr	r3, [pc, #124]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 8008598:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800859a:	4b21      	ldr	r3, [pc, #132]	@ (8008620 <HAL_RCC_OscConfig+0x778>)
 800859c:	4013      	ands	r3, r2
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80085a2:	00d2      	lsls	r2, r2, #3
 80085a4:	491b      	ldr	r1, [pc, #108]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 80085a6:	4313      	orrs	r3, r2
 80085a8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80085aa:	4b1a      	ldr	r3, [pc, #104]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 80085ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085ae:	f023 020c 	bic.w	r2, r3, #12
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085b6:	4917      	ldr	r1, [pc, #92]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 80085b8:	4313      	orrs	r3, r2
 80085ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80085bc:	4b15      	ldr	r3, [pc, #84]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 80085be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085c0:	f023 0202 	bic.w	r2, r3, #2
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085c8:	4912      	ldr	r1, [pc, #72]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 80085ca:	4313      	orrs	r3, r2
 80085cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80085ce:	4b11      	ldr	r3, [pc, #68]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 80085d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085d2:	4a10      	ldr	r2, [pc, #64]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 80085d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085da:	4b0e      	ldr	r3, [pc, #56]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 80085dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085de:	4a0d      	ldr	r2, [pc, #52]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 80085e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80085e6:	4b0b      	ldr	r3, [pc, #44]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 80085e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085ea:	4a0a      	ldr	r2, [pc, #40]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 80085ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80085f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80085f2:	4b08      	ldr	r3, [pc, #32]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 80085f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085f6:	4a07      	ldr	r2, [pc, #28]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 80085f8:	f043 0301 	orr.w	r3, r3, #1
 80085fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80085fe:	4b05      	ldr	r3, [pc, #20]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a04      	ldr	r2, [pc, #16]	@ (8008614 <HAL_RCC_OscConfig+0x76c>)
 8008604:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800860a:	f7fa fc91 	bl	8002f30 <HAL_GetTick>
 800860e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008610:	e011      	b.n	8008636 <HAL_RCC_OscConfig+0x78e>
 8008612:	bf00      	nop
 8008614:	58024400 	.word	0x58024400
 8008618:	58024800 	.word	0x58024800
 800861c:	fffffc0c 	.word	0xfffffc0c
 8008620:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008624:	f7fa fc84 	bl	8002f30 <HAL_GetTick>
 8008628:	4602      	mov	r2, r0
 800862a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800862c:	1ad3      	subs	r3, r2, r3
 800862e:	2b02      	cmp	r3, #2
 8008630:	d901      	bls.n	8008636 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008632:	2303      	movs	r3, #3
 8008634:	e08a      	b.n	800874c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008636:	4b47      	ldr	r3, [pc, #284]	@ (8008754 <HAL_RCC_OscConfig+0x8ac>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800863e:	2b00      	cmp	r3, #0
 8008640:	d0f0      	beq.n	8008624 <HAL_RCC_OscConfig+0x77c>
 8008642:	e082      	b.n	800874a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008644:	4b43      	ldr	r3, [pc, #268]	@ (8008754 <HAL_RCC_OscConfig+0x8ac>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a42      	ldr	r2, [pc, #264]	@ (8008754 <HAL_RCC_OscConfig+0x8ac>)
 800864a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800864e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008650:	f7fa fc6e 	bl	8002f30 <HAL_GetTick>
 8008654:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008656:	e008      	b.n	800866a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008658:	f7fa fc6a 	bl	8002f30 <HAL_GetTick>
 800865c:	4602      	mov	r2, r0
 800865e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	2b02      	cmp	r3, #2
 8008664:	d901      	bls.n	800866a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008666:	2303      	movs	r3, #3
 8008668:	e070      	b.n	800874c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800866a:	4b3a      	ldr	r3, [pc, #232]	@ (8008754 <HAL_RCC_OscConfig+0x8ac>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008672:	2b00      	cmp	r3, #0
 8008674:	d1f0      	bne.n	8008658 <HAL_RCC_OscConfig+0x7b0>
 8008676:	e068      	b.n	800874a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008678:	4b36      	ldr	r3, [pc, #216]	@ (8008754 <HAL_RCC_OscConfig+0x8ac>)
 800867a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800867c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800867e:	4b35      	ldr	r3, [pc, #212]	@ (8008754 <HAL_RCC_OscConfig+0x8ac>)
 8008680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008682:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008688:	2b01      	cmp	r3, #1
 800868a:	d031      	beq.n	80086f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	f003 0203 	and.w	r2, r3, #3
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008696:	429a      	cmp	r2, r3
 8008698:	d12a      	bne.n	80086f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	091b      	lsrs	r3, r3, #4
 800869e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d122      	bne.n	80086f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d11a      	bne.n	80086f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	0a5b      	lsrs	r3, r3, #9
 80086be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086c6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d111      	bne.n	80086f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	0c1b      	lsrs	r3, r3, #16
 80086d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80086da:	429a      	cmp	r2, r3
 80086dc:	d108      	bne.n	80086f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	0e1b      	lsrs	r3, r3, #24
 80086e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086ea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d001      	beq.n	80086f4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	e02b      	b.n	800874c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80086f4:	4b17      	ldr	r3, [pc, #92]	@ (8008754 <HAL_RCC_OscConfig+0x8ac>)
 80086f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086f8:	08db      	lsrs	r3, r3, #3
 80086fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80086fe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008704:	693a      	ldr	r2, [r7, #16]
 8008706:	429a      	cmp	r2, r3
 8008708:	d01f      	beq.n	800874a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800870a:	4b12      	ldr	r3, [pc, #72]	@ (8008754 <HAL_RCC_OscConfig+0x8ac>)
 800870c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800870e:	4a11      	ldr	r2, [pc, #68]	@ (8008754 <HAL_RCC_OscConfig+0x8ac>)
 8008710:	f023 0301 	bic.w	r3, r3, #1
 8008714:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008716:	f7fa fc0b 	bl	8002f30 <HAL_GetTick>
 800871a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800871c:	bf00      	nop
 800871e:	f7fa fc07 	bl	8002f30 <HAL_GetTick>
 8008722:	4602      	mov	r2, r0
 8008724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008726:	4293      	cmp	r3, r2
 8008728:	d0f9      	beq.n	800871e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800872a:	4b0a      	ldr	r3, [pc, #40]	@ (8008754 <HAL_RCC_OscConfig+0x8ac>)
 800872c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800872e:	4b0a      	ldr	r3, [pc, #40]	@ (8008758 <HAL_RCC_OscConfig+0x8b0>)
 8008730:	4013      	ands	r3, r2
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008736:	00d2      	lsls	r2, r2, #3
 8008738:	4906      	ldr	r1, [pc, #24]	@ (8008754 <HAL_RCC_OscConfig+0x8ac>)
 800873a:	4313      	orrs	r3, r2
 800873c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800873e:	4b05      	ldr	r3, [pc, #20]	@ (8008754 <HAL_RCC_OscConfig+0x8ac>)
 8008740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008742:	4a04      	ldr	r2, [pc, #16]	@ (8008754 <HAL_RCC_OscConfig+0x8ac>)
 8008744:	f043 0301 	orr.w	r3, r3, #1
 8008748:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	3730      	adds	r7, #48	@ 0x30
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}
 8008754:	58024400 	.word	0x58024400
 8008758:	ffff0007 	.word	0xffff0007

0800875c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b086      	sub	sp, #24
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d101      	bne.n	8008770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800876c:	2301      	movs	r3, #1
 800876e:	e19c      	b.n	8008aaa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008770:	4b8a      	ldr	r3, [pc, #552]	@ (800899c <HAL_RCC_ClockConfig+0x240>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f003 030f 	and.w	r3, r3, #15
 8008778:	683a      	ldr	r2, [r7, #0]
 800877a:	429a      	cmp	r2, r3
 800877c:	d910      	bls.n	80087a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800877e:	4b87      	ldr	r3, [pc, #540]	@ (800899c <HAL_RCC_ClockConfig+0x240>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f023 020f 	bic.w	r2, r3, #15
 8008786:	4985      	ldr	r1, [pc, #532]	@ (800899c <HAL_RCC_ClockConfig+0x240>)
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	4313      	orrs	r3, r2
 800878c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800878e:	4b83      	ldr	r3, [pc, #524]	@ (800899c <HAL_RCC_ClockConfig+0x240>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f003 030f 	and.w	r3, r3, #15
 8008796:	683a      	ldr	r2, [r7, #0]
 8008798:	429a      	cmp	r2, r3
 800879a:	d001      	beq.n	80087a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800879c:	2301      	movs	r3, #1
 800879e:	e184      	b.n	8008aaa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f003 0304 	and.w	r3, r3, #4
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d010      	beq.n	80087ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	691a      	ldr	r2, [r3, #16]
 80087b0:	4b7b      	ldr	r3, [pc, #492]	@ (80089a0 <HAL_RCC_ClockConfig+0x244>)
 80087b2:	699b      	ldr	r3, [r3, #24]
 80087b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d908      	bls.n	80087ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80087bc:	4b78      	ldr	r3, [pc, #480]	@ (80089a0 <HAL_RCC_ClockConfig+0x244>)
 80087be:	699b      	ldr	r3, [r3, #24]
 80087c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	691b      	ldr	r3, [r3, #16]
 80087c8:	4975      	ldr	r1, [pc, #468]	@ (80089a0 <HAL_RCC_ClockConfig+0x244>)
 80087ca:	4313      	orrs	r3, r2
 80087cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f003 0308 	and.w	r3, r3, #8
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d010      	beq.n	80087fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	695a      	ldr	r2, [r3, #20]
 80087de:	4b70      	ldr	r3, [pc, #448]	@ (80089a0 <HAL_RCC_ClockConfig+0x244>)
 80087e0:	69db      	ldr	r3, [r3, #28]
 80087e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d908      	bls.n	80087fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80087ea:	4b6d      	ldr	r3, [pc, #436]	@ (80089a0 <HAL_RCC_ClockConfig+0x244>)
 80087ec:	69db      	ldr	r3, [r3, #28]
 80087ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	695b      	ldr	r3, [r3, #20]
 80087f6:	496a      	ldr	r1, [pc, #424]	@ (80089a0 <HAL_RCC_ClockConfig+0x244>)
 80087f8:	4313      	orrs	r3, r2
 80087fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f003 0310 	and.w	r3, r3, #16
 8008804:	2b00      	cmp	r3, #0
 8008806:	d010      	beq.n	800882a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	699a      	ldr	r2, [r3, #24]
 800880c:	4b64      	ldr	r3, [pc, #400]	@ (80089a0 <HAL_RCC_ClockConfig+0x244>)
 800880e:	69db      	ldr	r3, [r3, #28]
 8008810:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008814:	429a      	cmp	r2, r3
 8008816:	d908      	bls.n	800882a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008818:	4b61      	ldr	r3, [pc, #388]	@ (80089a0 <HAL_RCC_ClockConfig+0x244>)
 800881a:	69db      	ldr	r3, [r3, #28]
 800881c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	699b      	ldr	r3, [r3, #24]
 8008824:	495e      	ldr	r1, [pc, #376]	@ (80089a0 <HAL_RCC_ClockConfig+0x244>)
 8008826:	4313      	orrs	r3, r2
 8008828:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f003 0320 	and.w	r3, r3, #32
 8008832:	2b00      	cmp	r3, #0
 8008834:	d010      	beq.n	8008858 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	69da      	ldr	r2, [r3, #28]
 800883a:	4b59      	ldr	r3, [pc, #356]	@ (80089a0 <HAL_RCC_ClockConfig+0x244>)
 800883c:	6a1b      	ldr	r3, [r3, #32]
 800883e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008842:	429a      	cmp	r2, r3
 8008844:	d908      	bls.n	8008858 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008846:	4b56      	ldr	r3, [pc, #344]	@ (80089a0 <HAL_RCC_ClockConfig+0x244>)
 8008848:	6a1b      	ldr	r3, [r3, #32]
 800884a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	69db      	ldr	r3, [r3, #28]
 8008852:	4953      	ldr	r1, [pc, #332]	@ (80089a0 <HAL_RCC_ClockConfig+0x244>)
 8008854:	4313      	orrs	r3, r2
 8008856:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f003 0302 	and.w	r3, r3, #2
 8008860:	2b00      	cmp	r3, #0
 8008862:	d010      	beq.n	8008886 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	68da      	ldr	r2, [r3, #12]
 8008868:	4b4d      	ldr	r3, [pc, #308]	@ (80089a0 <HAL_RCC_ClockConfig+0x244>)
 800886a:	699b      	ldr	r3, [r3, #24]
 800886c:	f003 030f 	and.w	r3, r3, #15
 8008870:	429a      	cmp	r2, r3
 8008872:	d908      	bls.n	8008886 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008874:	4b4a      	ldr	r3, [pc, #296]	@ (80089a0 <HAL_RCC_ClockConfig+0x244>)
 8008876:	699b      	ldr	r3, [r3, #24]
 8008878:	f023 020f 	bic.w	r2, r3, #15
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	4947      	ldr	r1, [pc, #284]	@ (80089a0 <HAL_RCC_ClockConfig+0x244>)
 8008882:	4313      	orrs	r3, r2
 8008884:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f003 0301 	and.w	r3, r3, #1
 800888e:	2b00      	cmp	r3, #0
 8008890:	d055      	beq.n	800893e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008892:	4b43      	ldr	r3, [pc, #268]	@ (80089a0 <HAL_RCC_ClockConfig+0x244>)
 8008894:	699b      	ldr	r3, [r3, #24]
 8008896:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	4940      	ldr	r1, [pc, #256]	@ (80089a0 <HAL_RCC_ClockConfig+0x244>)
 80088a0:	4313      	orrs	r3, r2
 80088a2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	2b02      	cmp	r3, #2
 80088aa:	d107      	bne.n	80088bc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80088ac:	4b3c      	ldr	r3, [pc, #240]	@ (80089a0 <HAL_RCC_ClockConfig+0x244>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d121      	bne.n	80088fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80088b8:	2301      	movs	r3, #1
 80088ba:	e0f6      	b.n	8008aaa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	2b03      	cmp	r3, #3
 80088c2:	d107      	bne.n	80088d4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80088c4:	4b36      	ldr	r3, [pc, #216]	@ (80089a0 <HAL_RCC_ClockConfig+0x244>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d115      	bne.n	80088fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80088d0:	2301      	movs	r3, #1
 80088d2:	e0ea      	b.n	8008aaa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d107      	bne.n	80088ec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80088dc:	4b30      	ldr	r3, [pc, #192]	@ (80089a0 <HAL_RCC_ClockConfig+0x244>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d109      	bne.n	80088fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e0de      	b.n	8008aaa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088ec:	4b2c      	ldr	r3, [pc, #176]	@ (80089a0 <HAL_RCC_ClockConfig+0x244>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f003 0304 	and.w	r3, r3, #4
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d101      	bne.n	80088fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80088f8:	2301      	movs	r3, #1
 80088fa:	e0d6      	b.n	8008aaa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80088fc:	4b28      	ldr	r3, [pc, #160]	@ (80089a0 <HAL_RCC_ClockConfig+0x244>)
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	f023 0207 	bic.w	r2, r3, #7
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	4925      	ldr	r1, [pc, #148]	@ (80089a0 <HAL_RCC_ClockConfig+0x244>)
 800890a:	4313      	orrs	r3, r2
 800890c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800890e:	f7fa fb0f 	bl	8002f30 <HAL_GetTick>
 8008912:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008914:	e00a      	b.n	800892c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008916:	f7fa fb0b 	bl	8002f30 <HAL_GetTick>
 800891a:	4602      	mov	r2, r0
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	1ad3      	subs	r3, r2, r3
 8008920:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008924:	4293      	cmp	r3, r2
 8008926:	d901      	bls.n	800892c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008928:	2303      	movs	r3, #3
 800892a:	e0be      	b.n	8008aaa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800892c:	4b1c      	ldr	r3, [pc, #112]	@ (80089a0 <HAL_RCC_ClockConfig+0x244>)
 800892e:	691b      	ldr	r3, [r3, #16]
 8008930:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	00db      	lsls	r3, r3, #3
 800893a:	429a      	cmp	r2, r3
 800893c:	d1eb      	bne.n	8008916 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f003 0302 	and.w	r3, r3, #2
 8008946:	2b00      	cmp	r3, #0
 8008948:	d010      	beq.n	800896c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	68da      	ldr	r2, [r3, #12]
 800894e:	4b14      	ldr	r3, [pc, #80]	@ (80089a0 <HAL_RCC_ClockConfig+0x244>)
 8008950:	699b      	ldr	r3, [r3, #24]
 8008952:	f003 030f 	and.w	r3, r3, #15
 8008956:	429a      	cmp	r2, r3
 8008958:	d208      	bcs.n	800896c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800895a:	4b11      	ldr	r3, [pc, #68]	@ (80089a0 <HAL_RCC_ClockConfig+0x244>)
 800895c:	699b      	ldr	r3, [r3, #24]
 800895e:	f023 020f 	bic.w	r2, r3, #15
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	490e      	ldr	r1, [pc, #56]	@ (80089a0 <HAL_RCC_ClockConfig+0x244>)
 8008968:	4313      	orrs	r3, r2
 800896a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800896c:	4b0b      	ldr	r3, [pc, #44]	@ (800899c <HAL_RCC_ClockConfig+0x240>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f003 030f 	and.w	r3, r3, #15
 8008974:	683a      	ldr	r2, [r7, #0]
 8008976:	429a      	cmp	r2, r3
 8008978:	d214      	bcs.n	80089a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800897a:	4b08      	ldr	r3, [pc, #32]	@ (800899c <HAL_RCC_ClockConfig+0x240>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f023 020f 	bic.w	r2, r3, #15
 8008982:	4906      	ldr	r1, [pc, #24]	@ (800899c <HAL_RCC_ClockConfig+0x240>)
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	4313      	orrs	r3, r2
 8008988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800898a:	4b04      	ldr	r3, [pc, #16]	@ (800899c <HAL_RCC_ClockConfig+0x240>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f003 030f 	and.w	r3, r3, #15
 8008992:	683a      	ldr	r2, [r7, #0]
 8008994:	429a      	cmp	r2, r3
 8008996:	d005      	beq.n	80089a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	e086      	b.n	8008aaa <HAL_RCC_ClockConfig+0x34e>
 800899c:	52002000 	.word	0x52002000
 80089a0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f003 0304 	and.w	r3, r3, #4
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d010      	beq.n	80089d2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	691a      	ldr	r2, [r3, #16]
 80089b4:	4b3f      	ldr	r3, [pc, #252]	@ (8008ab4 <HAL_RCC_ClockConfig+0x358>)
 80089b6:	699b      	ldr	r3, [r3, #24]
 80089b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80089bc:	429a      	cmp	r2, r3
 80089be:	d208      	bcs.n	80089d2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80089c0:	4b3c      	ldr	r3, [pc, #240]	@ (8008ab4 <HAL_RCC_ClockConfig+0x358>)
 80089c2:	699b      	ldr	r3, [r3, #24]
 80089c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	691b      	ldr	r3, [r3, #16]
 80089cc:	4939      	ldr	r1, [pc, #228]	@ (8008ab4 <HAL_RCC_ClockConfig+0x358>)
 80089ce:	4313      	orrs	r3, r2
 80089d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f003 0308 	and.w	r3, r3, #8
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d010      	beq.n	8008a00 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	695a      	ldr	r2, [r3, #20]
 80089e2:	4b34      	ldr	r3, [pc, #208]	@ (8008ab4 <HAL_RCC_ClockConfig+0x358>)
 80089e4:	69db      	ldr	r3, [r3, #28]
 80089e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d208      	bcs.n	8008a00 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80089ee:	4b31      	ldr	r3, [pc, #196]	@ (8008ab4 <HAL_RCC_ClockConfig+0x358>)
 80089f0:	69db      	ldr	r3, [r3, #28]
 80089f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	695b      	ldr	r3, [r3, #20]
 80089fa:	492e      	ldr	r1, [pc, #184]	@ (8008ab4 <HAL_RCC_ClockConfig+0x358>)
 80089fc:	4313      	orrs	r3, r2
 80089fe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 0310 	and.w	r3, r3, #16
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d010      	beq.n	8008a2e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	699a      	ldr	r2, [r3, #24]
 8008a10:	4b28      	ldr	r3, [pc, #160]	@ (8008ab4 <HAL_RCC_ClockConfig+0x358>)
 8008a12:	69db      	ldr	r3, [r3, #28]
 8008a14:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d208      	bcs.n	8008a2e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008a1c:	4b25      	ldr	r3, [pc, #148]	@ (8008ab4 <HAL_RCC_ClockConfig+0x358>)
 8008a1e:	69db      	ldr	r3, [r3, #28]
 8008a20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	699b      	ldr	r3, [r3, #24]
 8008a28:	4922      	ldr	r1, [pc, #136]	@ (8008ab4 <HAL_RCC_ClockConfig+0x358>)
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f003 0320 	and.w	r3, r3, #32
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d010      	beq.n	8008a5c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	69da      	ldr	r2, [r3, #28]
 8008a3e:	4b1d      	ldr	r3, [pc, #116]	@ (8008ab4 <HAL_RCC_ClockConfig+0x358>)
 8008a40:	6a1b      	ldr	r3, [r3, #32]
 8008a42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d208      	bcs.n	8008a5c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8008ab4 <HAL_RCC_ClockConfig+0x358>)
 8008a4c:	6a1b      	ldr	r3, [r3, #32]
 8008a4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	69db      	ldr	r3, [r3, #28]
 8008a56:	4917      	ldr	r1, [pc, #92]	@ (8008ab4 <HAL_RCC_ClockConfig+0x358>)
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008a5c:	f000 f834 	bl	8008ac8 <HAL_RCC_GetSysClockFreq>
 8008a60:	4602      	mov	r2, r0
 8008a62:	4b14      	ldr	r3, [pc, #80]	@ (8008ab4 <HAL_RCC_ClockConfig+0x358>)
 8008a64:	699b      	ldr	r3, [r3, #24]
 8008a66:	0a1b      	lsrs	r3, r3, #8
 8008a68:	f003 030f 	and.w	r3, r3, #15
 8008a6c:	4912      	ldr	r1, [pc, #72]	@ (8008ab8 <HAL_RCC_ClockConfig+0x35c>)
 8008a6e:	5ccb      	ldrb	r3, [r1, r3]
 8008a70:	f003 031f 	and.w	r3, r3, #31
 8008a74:	fa22 f303 	lsr.w	r3, r2, r3
 8008a78:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8008ab4 <HAL_RCC_ClockConfig+0x358>)
 8008a7c:	699b      	ldr	r3, [r3, #24]
 8008a7e:	f003 030f 	and.w	r3, r3, #15
 8008a82:	4a0d      	ldr	r2, [pc, #52]	@ (8008ab8 <HAL_RCC_ClockConfig+0x35c>)
 8008a84:	5cd3      	ldrb	r3, [r2, r3]
 8008a86:	f003 031f 	and.w	r3, r3, #31
 8008a8a:	693a      	ldr	r2, [r7, #16]
 8008a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8008a90:	4a0a      	ldr	r2, [pc, #40]	@ (8008abc <HAL_RCC_ClockConfig+0x360>)
 8008a92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008a94:	4a0a      	ldr	r2, [pc, #40]	@ (8008ac0 <HAL_RCC_ClockConfig+0x364>)
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8008ac4 <HAL_RCC_ClockConfig+0x368>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7fa f9fc 	bl	8002e9c <HAL_InitTick>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3718      	adds	r7, #24
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	58024400 	.word	0x58024400
 8008ab8:	08010224 	.word	0x08010224
 8008abc:	24000004 	.word	0x24000004
 8008ac0:	24000000 	.word	0x24000000
 8008ac4:	24000024 	.word	0x24000024

08008ac8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b089      	sub	sp, #36	@ 0x24
 8008acc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ace:	4bb3      	ldr	r3, [pc, #716]	@ (8008d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ad0:	691b      	ldr	r3, [r3, #16]
 8008ad2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ad6:	2b18      	cmp	r3, #24
 8008ad8:	f200 8155 	bhi.w	8008d86 <HAL_RCC_GetSysClockFreq+0x2be>
 8008adc:	a201      	add	r2, pc, #4	@ (adr r2, 8008ae4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae2:	bf00      	nop
 8008ae4:	08008b49 	.word	0x08008b49
 8008ae8:	08008d87 	.word	0x08008d87
 8008aec:	08008d87 	.word	0x08008d87
 8008af0:	08008d87 	.word	0x08008d87
 8008af4:	08008d87 	.word	0x08008d87
 8008af8:	08008d87 	.word	0x08008d87
 8008afc:	08008d87 	.word	0x08008d87
 8008b00:	08008d87 	.word	0x08008d87
 8008b04:	08008b6f 	.word	0x08008b6f
 8008b08:	08008d87 	.word	0x08008d87
 8008b0c:	08008d87 	.word	0x08008d87
 8008b10:	08008d87 	.word	0x08008d87
 8008b14:	08008d87 	.word	0x08008d87
 8008b18:	08008d87 	.word	0x08008d87
 8008b1c:	08008d87 	.word	0x08008d87
 8008b20:	08008d87 	.word	0x08008d87
 8008b24:	08008b75 	.word	0x08008b75
 8008b28:	08008d87 	.word	0x08008d87
 8008b2c:	08008d87 	.word	0x08008d87
 8008b30:	08008d87 	.word	0x08008d87
 8008b34:	08008d87 	.word	0x08008d87
 8008b38:	08008d87 	.word	0x08008d87
 8008b3c:	08008d87 	.word	0x08008d87
 8008b40:	08008d87 	.word	0x08008d87
 8008b44:	08008b7b 	.word	0x08008b7b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b48:	4b94      	ldr	r3, [pc, #592]	@ (8008d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f003 0320 	and.w	r3, r3, #32
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d009      	beq.n	8008b68 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b54:	4b91      	ldr	r3, [pc, #580]	@ (8008d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	08db      	lsrs	r3, r3, #3
 8008b5a:	f003 0303 	and.w	r3, r3, #3
 8008b5e:	4a90      	ldr	r2, [pc, #576]	@ (8008da0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008b60:	fa22 f303 	lsr.w	r3, r2, r3
 8008b64:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008b66:	e111      	b.n	8008d8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008b68:	4b8d      	ldr	r3, [pc, #564]	@ (8008da0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008b6a:	61bb      	str	r3, [r7, #24]
      break;
 8008b6c:	e10e      	b.n	8008d8c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008b6e:	4b8d      	ldr	r3, [pc, #564]	@ (8008da4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008b70:	61bb      	str	r3, [r7, #24]
      break;
 8008b72:	e10b      	b.n	8008d8c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008b74:	4b8c      	ldr	r3, [pc, #560]	@ (8008da8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008b76:	61bb      	str	r3, [r7, #24]
      break;
 8008b78:	e108      	b.n	8008d8c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b7a:	4b88      	ldr	r3, [pc, #544]	@ (8008d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b7e:	f003 0303 	and.w	r3, r3, #3
 8008b82:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008b84:	4b85      	ldr	r3, [pc, #532]	@ (8008d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b88:	091b      	lsrs	r3, r3, #4
 8008b8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b8e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008b90:	4b82      	ldr	r3, [pc, #520]	@ (8008d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b94:	f003 0301 	and.w	r3, r3, #1
 8008b98:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008b9a:	4b80      	ldr	r3, [pc, #512]	@ (8008d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b9e:	08db      	lsrs	r3, r3, #3
 8008ba0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	fb02 f303 	mul.w	r3, r2, r3
 8008baa:	ee07 3a90 	vmov	s15, r3
 8008bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bb2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	f000 80e1 	beq.w	8008d80 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	2b02      	cmp	r3, #2
 8008bc2:	f000 8083 	beq.w	8008ccc <HAL_RCC_GetSysClockFreq+0x204>
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	2b02      	cmp	r3, #2
 8008bca:	f200 80a1 	bhi.w	8008d10 <HAL_RCC_GetSysClockFreq+0x248>
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d003      	beq.n	8008bdc <HAL_RCC_GetSysClockFreq+0x114>
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d056      	beq.n	8008c88 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008bda:	e099      	b.n	8008d10 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bdc:	4b6f      	ldr	r3, [pc, #444]	@ (8008d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f003 0320 	and.w	r3, r3, #32
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d02d      	beq.n	8008c44 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008be8:	4b6c      	ldr	r3, [pc, #432]	@ (8008d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	08db      	lsrs	r3, r3, #3
 8008bee:	f003 0303 	and.w	r3, r3, #3
 8008bf2:	4a6b      	ldr	r2, [pc, #428]	@ (8008da0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8008bf8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	ee07 3a90 	vmov	s15, r3
 8008c00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	ee07 3a90 	vmov	s15, r3
 8008c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c12:	4b62      	ldr	r3, [pc, #392]	@ (8008d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c1a:	ee07 3a90 	vmov	s15, r3
 8008c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c22:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c26:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008dac <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c3e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008c42:	e087      	b.n	8008d54 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	ee07 3a90 	vmov	s15, r3
 8008c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c4e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008db0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c56:	4b51      	ldr	r3, [pc, #324]	@ (8008d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c5e:	ee07 3a90 	vmov	s15, r3
 8008c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c66:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c6a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008dac <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008c86:	e065      	b.n	8008d54 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	ee07 3a90 	vmov	s15, r3
 8008c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c92:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008db4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c9a:	4b40      	ldr	r3, [pc, #256]	@ (8008d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ca2:	ee07 3a90 	vmov	s15, r3
 8008ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008caa:	ed97 6a02 	vldr	s12, [r7, #8]
 8008cae:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008dac <HAL_RCC_GetSysClockFreq+0x2e4>
 8008cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008cca:	e043      	b.n	8008d54 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	ee07 3a90 	vmov	s15, r3
 8008cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cd6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008db8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cde:	4b2f      	ldr	r3, [pc, #188]	@ (8008d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ce6:	ee07 3a90 	vmov	s15, r3
 8008cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cee:	ed97 6a02 	vldr	s12, [r7, #8]
 8008cf2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008dac <HAL_RCC_GetSysClockFreq+0x2e4>
 8008cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008d0e:	e021      	b.n	8008d54 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	ee07 3a90 	vmov	s15, r3
 8008d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d1a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008db4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d22:	4b1e      	ldr	r3, [pc, #120]	@ (8008d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d2a:	ee07 3a90 	vmov	s15, r3
 8008d2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d32:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d36:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008dac <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008d52:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008d54:	4b11      	ldr	r3, [pc, #68]	@ (8008d9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d58:	0a5b      	lsrs	r3, r3, #9
 8008d5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d5e:	3301      	adds	r3, #1
 8008d60:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	ee07 3a90 	vmov	s15, r3
 8008d68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008d6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d78:	ee17 3a90 	vmov	r3, s15
 8008d7c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008d7e:	e005      	b.n	8008d8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008d80:	2300      	movs	r3, #0
 8008d82:	61bb      	str	r3, [r7, #24]
      break;
 8008d84:	e002      	b.n	8008d8c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008d86:	4b07      	ldr	r3, [pc, #28]	@ (8008da4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008d88:	61bb      	str	r3, [r7, #24]
      break;
 8008d8a:	bf00      	nop
  }

  return sysclockfreq;
 8008d8c:	69bb      	ldr	r3, [r7, #24]
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3724      	adds	r7, #36	@ 0x24
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop
 8008d9c:	58024400 	.word	0x58024400
 8008da0:	03d09000 	.word	0x03d09000
 8008da4:	003d0900 	.word	0x003d0900
 8008da8:	017d7840 	.word	0x017d7840
 8008dac:	46000000 	.word	0x46000000
 8008db0:	4c742400 	.word	0x4c742400
 8008db4:	4a742400 	.word	0x4a742400
 8008db8:	4bbebc20 	.word	0x4bbebc20

08008dbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008dc2:	f7ff fe81 	bl	8008ac8 <HAL_RCC_GetSysClockFreq>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	4b10      	ldr	r3, [pc, #64]	@ (8008e0c <HAL_RCC_GetHCLKFreq+0x50>)
 8008dca:	699b      	ldr	r3, [r3, #24]
 8008dcc:	0a1b      	lsrs	r3, r3, #8
 8008dce:	f003 030f 	and.w	r3, r3, #15
 8008dd2:	490f      	ldr	r1, [pc, #60]	@ (8008e10 <HAL_RCC_GetHCLKFreq+0x54>)
 8008dd4:	5ccb      	ldrb	r3, [r1, r3]
 8008dd6:	f003 031f 	and.w	r3, r3, #31
 8008dda:	fa22 f303 	lsr.w	r3, r2, r3
 8008dde:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008de0:	4b0a      	ldr	r3, [pc, #40]	@ (8008e0c <HAL_RCC_GetHCLKFreq+0x50>)
 8008de2:	699b      	ldr	r3, [r3, #24]
 8008de4:	f003 030f 	and.w	r3, r3, #15
 8008de8:	4a09      	ldr	r2, [pc, #36]	@ (8008e10 <HAL_RCC_GetHCLKFreq+0x54>)
 8008dea:	5cd3      	ldrb	r3, [r2, r3]
 8008dec:	f003 031f 	and.w	r3, r3, #31
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	fa22 f303 	lsr.w	r3, r2, r3
 8008df6:	4a07      	ldr	r2, [pc, #28]	@ (8008e14 <HAL_RCC_GetHCLKFreq+0x58>)
 8008df8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008dfa:	4a07      	ldr	r2, [pc, #28]	@ (8008e18 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008e00:	4b04      	ldr	r3, [pc, #16]	@ (8008e14 <HAL_RCC_GetHCLKFreq+0x58>)
 8008e02:	681b      	ldr	r3, [r3, #0]
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3708      	adds	r7, #8
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}
 8008e0c:	58024400 	.word	0x58024400
 8008e10:	08010224 	.word	0x08010224
 8008e14:	24000004 	.word	0x24000004
 8008e18:	24000000 	.word	0x24000000

08008e1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008e20:	f7ff ffcc 	bl	8008dbc <HAL_RCC_GetHCLKFreq>
 8008e24:	4602      	mov	r2, r0
 8008e26:	4b06      	ldr	r3, [pc, #24]	@ (8008e40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e28:	69db      	ldr	r3, [r3, #28]
 8008e2a:	091b      	lsrs	r3, r3, #4
 8008e2c:	f003 0307 	and.w	r3, r3, #7
 8008e30:	4904      	ldr	r1, [pc, #16]	@ (8008e44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008e32:	5ccb      	ldrb	r3, [r1, r3]
 8008e34:	f003 031f 	and.w	r3, r3, #31
 8008e38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	58024400 	.word	0x58024400
 8008e44:	08010224 	.word	0x08010224

08008e48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008e4c:	f7ff ffb6 	bl	8008dbc <HAL_RCC_GetHCLKFreq>
 8008e50:	4602      	mov	r2, r0
 8008e52:	4b06      	ldr	r3, [pc, #24]	@ (8008e6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e54:	69db      	ldr	r3, [r3, #28]
 8008e56:	0a1b      	lsrs	r3, r3, #8
 8008e58:	f003 0307 	and.w	r3, r3, #7
 8008e5c:	4904      	ldr	r1, [pc, #16]	@ (8008e70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008e5e:	5ccb      	ldrb	r3, [r1, r3]
 8008e60:	f003 031f 	and.w	r3, r3, #31
 8008e64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	58024400 	.word	0x58024400
 8008e70:	08010224 	.word	0x08010224

08008e74 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e78:	b0ca      	sub	sp, #296	@ 0x128
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008e80:	2300      	movs	r3, #0
 8008e82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008e86:	2300      	movs	r3, #0
 8008e88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e94:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008e98:	2500      	movs	r5, #0
 8008e9a:	ea54 0305 	orrs.w	r3, r4, r5
 8008e9e:	d049      	beq.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ea4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ea6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008eaa:	d02f      	beq.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008eac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008eb0:	d828      	bhi.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008eb2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008eb6:	d01a      	beq.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008eb8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ebc:	d822      	bhi.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d003      	beq.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008ec2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ec6:	d007      	beq.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008ec8:	e01c      	b.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008eca:	4bb8      	ldr	r3, [pc, #736]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ece:	4ab7      	ldr	r2, [pc, #732]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ed0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ed4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008ed6:	e01a      	b.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008edc:	3308      	adds	r3, #8
 8008ede:	2102      	movs	r1, #2
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f002 fb61 	bl	800b5a8 <RCCEx_PLL2_Config>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008eec:	e00f      	b.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ef2:	3328      	adds	r3, #40	@ 0x28
 8008ef4:	2102      	movs	r1, #2
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f002 fc08 	bl	800b70c <RCCEx_PLL3_Config>
 8008efc:	4603      	mov	r3, r0
 8008efe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008f02:	e004      	b.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f04:	2301      	movs	r3, #1
 8008f06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f0a:	e000      	b.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008f0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d10a      	bne.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008f16:	4ba5      	ldr	r3, [pc, #660]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f1a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f24:	4aa1      	ldr	r2, [pc, #644]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f26:	430b      	orrs	r3, r1
 8008f28:	6513      	str	r3, [r2, #80]	@ 0x50
 8008f2a:	e003      	b.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f3c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008f40:	f04f 0900 	mov.w	r9, #0
 8008f44:	ea58 0309 	orrs.w	r3, r8, r9
 8008f48:	d047      	beq.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f50:	2b04      	cmp	r3, #4
 8008f52:	d82a      	bhi.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008f54:	a201      	add	r2, pc, #4	@ (adr r2, 8008f5c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f5a:	bf00      	nop
 8008f5c:	08008f71 	.word	0x08008f71
 8008f60:	08008f7f 	.word	0x08008f7f
 8008f64:	08008f95 	.word	0x08008f95
 8008f68:	08008fb3 	.word	0x08008fb3
 8008f6c:	08008fb3 	.word	0x08008fb3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f70:	4b8e      	ldr	r3, [pc, #568]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f74:	4a8d      	ldr	r2, [pc, #564]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f7c:	e01a      	b.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f82:	3308      	adds	r3, #8
 8008f84:	2100      	movs	r1, #0
 8008f86:	4618      	mov	r0, r3
 8008f88:	f002 fb0e 	bl	800b5a8 <RCCEx_PLL2_Config>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f92:	e00f      	b.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f98:	3328      	adds	r3, #40	@ 0x28
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f002 fbb5 	bl	800b70c <RCCEx_PLL3_Config>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008fa8:	e004      	b.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008fb0:	e000      	b.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008fb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d10a      	bne.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008fbc:	4b7b      	ldr	r3, [pc, #492]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fc0:	f023 0107 	bic.w	r1, r3, #7
 8008fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fca:	4a78      	ldr	r2, [pc, #480]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fcc:	430b      	orrs	r3, r1
 8008fce:	6513      	str	r3, [r2, #80]	@ 0x50
 8008fd0:	e003      	b.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8008fe6:	f04f 0b00 	mov.w	fp, #0
 8008fea:	ea5a 030b 	orrs.w	r3, sl, fp
 8008fee:	d04c      	beq.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ff6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ffa:	d030      	beq.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008ffc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009000:	d829      	bhi.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009002:	2bc0      	cmp	r3, #192	@ 0xc0
 8009004:	d02d      	beq.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009006:	2bc0      	cmp	r3, #192	@ 0xc0
 8009008:	d825      	bhi.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800900a:	2b80      	cmp	r3, #128	@ 0x80
 800900c:	d018      	beq.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800900e:	2b80      	cmp	r3, #128	@ 0x80
 8009010:	d821      	bhi.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009012:	2b00      	cmp	r3, #0
 8009014:	d002      	beq.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009016:	2b40      	cmp	r3, #64	@ 0x40
 8009018:	d007      	beq.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800901a:	e01c      	b.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800901c:	4b63      	ldr	r3, [pc, #396]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800901e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009020:	4a62      	ldr	r2, [pc, #392]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009022:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009026:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009028:	e01c      	b.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800902a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800902e:	3308      	adds	r3, #8
 8009030:	2100      	movs	r1, #0
 8009032:	4618      	mov	r0, r3
 8009034:	f002 fab8 	bl	800b5a8 <RCCEx_PLL2_Config>
 8009038:	4603      	mov	r3, r0
 800903a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800903e:	e011      	b.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009044:	3328      	adds	r3, #40	@ 0x28
 8009046:	2100      	movs	r1, #0
 8009048:	4618      	mov	r0, r3
 800904a:	f002 fb5f 	bl	800b70c <RCCEx_PLL3_Config>
 800904e:	4603      	mov	r3, r0
 8009050:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009054:	e006      	b.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800905c:	e002      	b.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800905e:	bf00      	nop
 8009060:	e000      	b.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009062:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009064:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009068:	2b00      	cmp	r3, #0
 800906a:	d10a      	bne.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800906c:	4b4f      	ldr	r3, [pc, #316]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800906e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009070:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009078:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800907a:	4a4c      	ldr	r2, [pc, #304]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800907c:	430b      	orrs	r3, r1
 800907e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009080:	e003      	b.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009082:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009086:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800908a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800908e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009092:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8009096:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800909a:	2300      	movs	r3, #0
 800909c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80090a0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80090a4:	460b      	mov	r3, r1
 80090a6:	4313      	orrs	r3, r2
 80090a8:	d053      	beq.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80090aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80090b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80090b6:	d035      	beq.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80090b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80090bc:	d82e      	bhi.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80090be:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80090c2:	d031      	beq.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80090c4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80090c8:	d828      	bhi.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80090ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80090ce:	d01a      	beq.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80090d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80090d4:	d822      	bhi.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d003      	beq.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80090da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80090de:	d007      	beq.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80090e0:	e01c      	b.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090e2:	4b32      	ldr	r3, [pc, #200]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090e6:	4a31      	ldr	r2, [pc, #196]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80090ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80090ee:	e01c      	b.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80090f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090f4:	3308      	adds	r3, #8
 80090f6:	2100      	movs	r1, #0
 80090f8:	4618      	mov	r0, r3
 80090fa:	f002 fa55 	bl	800b5a8 <RCCEx_PLL2_Config>
 80090fe:	4603      	mov	r3, r0
 8009100:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009104:	e011      	b.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800910a:	3328      	adds	r3, #40	@ 0x28
 800910c:	2100      	movs	r1, #0
 800910e:	4618      	mov	r0, r3
 8009110:	f002 fafc 	bl	800b70c <RCCEx_PLL3_Config>
 8009114:	4603      	mov	r3, r0
 8009116:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800911a:	e006      	b.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800911c:	2301      	movs	r3, #1
 800911e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009122:	e002      	b.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009124:	bf00      	nop
 8009126:	e000      	b.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009128:	bf00      	nop
    }

    if (ret == HAL_OK)
 800912a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800912e:	2b00      	cmp	r3, #0
 8009130:	d10b      	bne.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009132:	4b1e      	ldr	r3, [pc, #120]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009136:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800913a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800913e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009142:	4a1a      	ldr	r2, [pc, #104]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009144:	430b      	orrs	r3, r1
 8009146:	6593      	str	r3, [r2, #88]	@ 0x58
 8009148:	e003      	b.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800914a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800914e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800915e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009162:	2300      	movs	r3, #0
 8009164:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009168:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800916c:	460b      	mov	r3, r1
 800916e:	4313      	orrs	r3, r2
 8009170:	d056      	beq.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009176:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800917a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800917e:	d038      	beq.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009180:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009184:	d831      	bhi.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009186:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800918a:	d034      	beq.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800918c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009190:	d82b      	bhi.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009192:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009196:	d01d      	beq.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009198:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800919c:	d825      	bhi.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d006      	beq.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80091a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80091a6:	d00a      	beq.n	80091be <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80091a8:	e01f      	b.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 80091aa:	bf00      	nop
 80091ac:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091b0:	4ba2      	ldr	r3, [pc, #648]	@ (800943c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091b4:	4aa1      	ldr	r2, [pc, #644]	@ (800943c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80091ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80091bc:	e01c      	b.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80091be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091c2:	3308      	adds	r3, #8
 80091c4:	2100      	movs	r1, #0
 80091c6:	4618      	mov	r0, r3
 80091c8:	f002 f9ee 	bl	800b5a8 <RCCEx_PLL2_Config>
 80091cc:	4603      	mov	r3, r0
 80091ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80091d2:	e011      	b.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80091d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091d8:	3328      	adds	r3, #40	@ 0x28
 80091da:	2100      	movs	r1, #0
 80091dc:	4618      	mov	r0, r3
 80091de:	f002 fa95 	bl	800b70c <RCCEx_PLL3_Config>
 80091e2:	4603      	mov	r3, r0
 80091e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80091e8:	e006      	b.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80091ea:	2301      	movs	r3, #1
 80091ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80091f0:	e002      	b.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80091f2:	bf00      	nop
 80091f4:	e000      	b.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80091f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d10b      	bne.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009200:	4b8e      	ldr	r3, [pc, #568]	@ (800943c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009204:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800920c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009210:	4a8a      	ldr	r2, [pc, #552]	@ (800943c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009212:	430b      	orrs	r3, r1
 8009214:	6593      	str	r3, [r2, #88]	@ 0x58
 8009216:	e003      	b.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009218:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800921c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009228:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800922c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009230:	2300      	movs	r3, #0
 8009232:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009236:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800923a:	460b      	mov	r3, r1
 800923c:	4313      	orrs	r3, r2
 800923e:	d03a      	beq.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009246:	2b30      	cmp	r3, #48	@ 0x30
 8009248:	d01f      	beq.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800924a:	2b30      	cmp	r3, #48	@ 0x30
 800924c:	d819      	bhi.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800924e:	2b20      	cmp	r3, #32
 8009250:	d00c      	beq.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009252:	2b20      	cmp	r3, #32
 8009254:	d815      	bhi.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009256:	2b00      	cmp	r3, #0
 8009258:	d019      	beq.n	800928e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800925a:	2b10      	cmp	r3, #16
 800925c:	d111      	bne.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800925e:	4b77      	ldr	r3, [pc, #476]	@ (800943c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009262:	4a76      	ldr	r2, [pc, #472]	@ (800943c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009264:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009268:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800926a:	e011      	b.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800926c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009270:	3308      	adds	r3, #8
 8009272:	2102      	movs	r1, #2
 8009274:	4618      	mov	r0, r3
 8009276:	f002 f997 	bl	800b5a8 <RCCEx_PLL2_Config>
 800927a:	4603      	mov	r3, r0
 800927c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009280:	e006      	b.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009282:	2301      	movs	r3, #1
 8009284:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009288:	e002      	b.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800928a:	bf00      	nop
 800928c:	e000      	b.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800928e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009290:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009294:	2b00      	cmp	r3, #0
 8009296:	d10a      	bne.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009298:	4b68      	ldr	r3, [pc, #416]	@ (800943c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800929a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800929c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80092a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092a6:	4a65      	ldr	r2, [pc, #404]	@ (800943c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092a8:	430b      	orrs	r3, r1
 80092aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80092ac:	e003      	b.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80092b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092be:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80092c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80092c6:	2300      	movs	r3, #0
 80092c8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80092cc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80092d0:	460b      	mov	r3, r1
 80092d2:	4313      	orrs	r3, r2
 80092d4:	d051      	beq.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80092d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80092e0:	d035      	beq.n	800934e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80092e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80092e6:	d82e      	bhi.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80092e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80092ec:	d031      	beq.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80092ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80092f2:	d828      	bhi.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80092f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092f8:	d01a      	beq.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80092fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092fe:	d822      	bhi.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009300:	2b00      	cmp	r3, #0
 8009302:	d003      	beq.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009304:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009308:	d007      	beq.n	800931a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800930a:	e01c      	b.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800930c:	4b4b      	ldr	r3, [pc, #300]	@ (800943c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800930e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009310:	4a4a      	ldr	r2, [pc, #296]	@ (800943c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009312:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009316:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009318:	e01c      	b.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800931a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800931e:	3308      	adds	r3, #8
 8009320:	2100      	movs	r1, #0
 8009322:	4618      	mov	r0, r3
 8009324:	f002 f940 	bl	800b5a8 <RCCEx_PLL2_Config>
 8009328:	4603      	mov	r3, r0
 800932a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800932e:	e011      	b.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009334:	3328      	adds	r3, #40	@ 0x28
 8009336:	2100      	movs	r1, #0
 8009338:	4618      	mov	r0, r3
 800933a:	f002 f9e7 	bl	800b70c <RCCEx_PLL3_Config>
 800933e:	4603      	mov	r3, r0
 8009340:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009344:	e006      	b.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009346:	2301      	movs	r3, #1
 8009348:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800934c:	e002      	b.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800934e:	bf00      	nop
 8009350:	e000      	b.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009352:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009354:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009358:	2b00      	cmp	r3, #0
 800935a:	d10a      	bne.n	8009372 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800935c:	4b37      	ldr	r3, [pc, #220]	@ (800943c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800935e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009360:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800936a:	4a34      	ldr	r2, [pc, #208]	@ (800943c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800936c:	430b      	orrs	r3, r1
 800936e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009370:	e003      	b.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009372:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009376:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800937a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800937e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009382:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009386:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800938a:	2300      	movs	r3, #0
 800938c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009390:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009394:	460b      	mov	r3, r1
 8009396:	4313      	orrs	r3, r2
 8009398:	d056      	beq.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800939a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800939e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80093a4:	d033      	beq.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80093a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80093aa:	d82c      	bhi.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80093ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80093b0:	d02f      	beq.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80093b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80093b6:	d826      	bhi.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80093b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80093bc:	d02b      	beq.n	8009416 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80093be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80093c2:	d820      	bhi.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80093c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093c8:	d012      	beq.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80093ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093ce:	d81a      	bhi.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d022      	beq.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80093d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093d8:	d115      	bne.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80093da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093de:	3308      	adds	r3, #8
 80093e0:	2101      	movs	r1, #1
 80093e2:	4618      	mov	r0, r3
 80093e4:	f002 f8e0 	bl	800b5a8 <RCCEx_PLL2_Config>
 80093e8:	4603      	mov	r3, r0
 80093ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80093ee:	e015      	b.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80093f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093f4:	3328      	adds	r3, #40	@ 0x28
 80093f6:	2101      	movs	r1, #1
 80093f8:	4618      	mov	r0, r3
 80093fa:	f002 f987 	bl	800b70c <RCCEx_PLL3_Config>
 80093fe:	4603      	mov	r3, r0
 8009400:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009404:	e00a      	b.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009406:	2301      	movs	r3, #1
 8009408:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800940c:	e006      	b.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800940e:	bf00      	nop
 8009410:	e004      	b.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009412:	bf00      	nop
 8009414:	e002      	b.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009416:	bf00      	nop
 8009418:	e000      	b.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800941a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800941c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009420:	2b00      	cmp	r3, #0
 8009422:	d10d      	bne.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009424:	4b05      	ldr	r3, [pc, #20]	@ (800943c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009426:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009428:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800942c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009430:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009432:	4a02      	ldr	r2, [pc, #8]	@ (800943c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009434:	430b      	orrs	r3, r1
 8009436:	6513      	str	r3, [r2, #80]	@ 0x50
 8009438:	e006      	b.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800943a:	bf00      	nop
 800943c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009440:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009444:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800944c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009450:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009454:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009458:	2300      	movs	r3, #0
 800945a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800945e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009462:	460b      	mov	r3, r1
 8009464:	4313      	orrs	r3, r2
 8009466:	d055      	beq.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800946c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009470:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009474:	d033      	beq.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009476:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800947a:	d82c      	bhi.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800947c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009480:	d02f      	beq.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009482:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009486:	d826      	bhi.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009488:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800948c:	d02b      	beq.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800948e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009492:	d820      	bhi.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009494:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009498:	d012      	beq.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800949a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800949e:	d81a      	bhi.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d022      	beq.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x676>
 80094a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094a8:	d115      	bne.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80094aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094ae:	3308      	adds	r3, #8
 80094b0:	2101      	movs	r1, #1
 80094b2:	4618      	mov	r0, r3
 80094b4:	f002 f878 	bl	800b5a8 <RCCEx_PLL2_Config>
 80094b8:	4603      	mov	r3, r0
 80094ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80094be:	e015      	b.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80094c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094c4:	3328      	adds	r3, #40	@ 0x28
 80094c6:	2101      	movs	r1, #1
 80094c8:	4618      	mov	r0, r3
 80094ca:	f002 f91f 	bl	800b70c <RCCEx_PLL3_Config>
 80094ce:	4603      	mov	r3, r0
 80094d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80094d4:	e00a      	b.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80094d6:	2301      	movs	r3, #1
 80094d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80094dc:	e006      	b.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80094de:	bf00      	nop
 80094e0:	e004      	b.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80094e2:	bf00      	nop
 80094e4:	e002      	b.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80094e6:	bf00      	nop
 80094e8:	e000      	b.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80094ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d10b      	bne.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80094f4:	4ba3      	ldr	r3, [pc, #652]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094f8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80094fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009500:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009504:	4a9f      	ldr	r2, [pc, #636]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009506:	430b      	orrs	r3, r1
 8009508:	6593      	str	r3, [r2, #88]	@ 0x58
 800950a:	e003      	b.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800950c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009510:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009520:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009524:	2300      	movs	r3, #0
 8009526:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800952a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800952e:	460b      	mov	r3, r1
 8009530:	4313      	orrs	r3, r2
 8009532:	d037      	beq.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800953a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800953e:	d00e      	beq.n	800955e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009540:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009544:	d816      	bhi.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009546:	2b00      	cmp	r3, #0
 8009548:	d018      	beq.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800954a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800954e:	d111      	bne.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009550:	4b8c      	ldr	r3, [pc, #560]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009554:	4a8b      	ldr	r2, [pc, #556]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009556:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800955a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800955c:	e00f      	b.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800955e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009562:	3308      	adds	r3, #8
 8009564:	2101      	movs	r1, #1
 8009566:	4618      	mov	r0, r3
 8009568:	f002 f81e 	bl	800b5a8 <RCCEx_PLL2_Config>
 800956c:	4603      	mov	r3, r0
 800956e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009572:	e004      	b.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009574:	2301      	movs	r3, #1
 8009576:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800957a:	e000      	b.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800957c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800957e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009582:	2b00      	cmp	r3, #0
 8009584:	d10a      	bne.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009586:	4b7f      	ldr	r3, [pc, #508]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009588:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800958a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800958e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009594:	4a7b      	ldr	r2, [pc, #492]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009596:	430b      	orrs	r3, r1
 8009598:	6513      	str	r3, [r2, #80]	@ 0x50
 800959a:	e003      	b.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800959c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80095a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ac:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80095b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80095b4:	2300      	movs	r3, #0
 80095b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80095ba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80095be:	460b      	mov	r3, r1
 80095c0:	4313      	orrs	r3, r2
 80095c2:	d039      	beq.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80095c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095ca:	2b03      	cmp	r3, #3
 80095cc:	d81c      	bhi.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80095ce:	a201      	add	r2, pc, #4	@ (adr r2, 80095d4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80095d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d4:	08009611 	.word	0x08009611
 80095d8:	080095e5 	.word	0x080095e5
 80095dc:	080095f3 	.word	0x080095f3
 80095e0:	08009611 	.word	0x08009611
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095e4:	4b67      	ldr	r3, [pc, #412]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095e8:	4a66      	ldr	r2, [pc, #408]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80095ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80095f0:	e00f      	b.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80095f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095f6:	3308      	adds	r3, #8
 80095f8:	2102      	movs	r1, #2
 80095fa:	4618      	mov	r0, r3
 80095fc:	f001 ffd4 	bl	800b5a8 <RCCEx_PLL2_Config>
 8009600:	4603      	mov	r3, r0
 8009602:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009606:	e004      	b.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009608:	2301      	movs	r3, #1
 800960a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800960e:	e000      	b.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009610:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009612:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009616:	2b00      	cmp	r3, #0
 8009618:	d10a      	bne.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800961a:	4b5a      	ldr	r3, [pc, #360]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800961c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800961e:	f023 0103 	bic.w	r1, r3, #3
 8009622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009626:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009628:	4a56      	ldr	r2, [pc, #344]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800962a:	430b      	orrs	r3, r1
 800962c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800962e:	e003      	b.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009630:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009634:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800963c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009640:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009644:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009648:	2300      	movs	r3, #0
 800964a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800964e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009652:	460b      	mov	r3, r1
 8009654:	4313      	orrs	r3, r2
 8009656:	f000 809f 	beq.w	8009798 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800965a:	4b4b      	ldr	r3, [pc, #300]	@ (8009788 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a4a      	ldr	r2, [pc, #296]	@ (8009788 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009660:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009664:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009666:	f7f9 fc63 	bl	8002f30 <HAL_GetTick>
 800966a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800966e:	e00b      	b.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009670:	f7f9 fc5e 	bl	8002f30 <HAL_GetTick>
 8009674:	4602      	mov	r2, r0
 8009676:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800967a:	1ad3      	subs	r3, r2, r3
 800967c:	2b64      	cmp	r3, #100	@ 0x64
 800967e:	d903      	bls.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009680:	2303      	movs	r3, #3
 8009682:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009686:	e005      	b.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009688:	4b3f      	ldr	r3, [pc, #252]	@ (8009788 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009690:	2b00      	cmp	r3, #0
 8009692:	d0ed      	beq.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009694:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009698:	2b00      	cmp	r3, #0
 800969a:	d179      	bne.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800969c:	4b39      	ldr	r3, [pc, #228]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800969e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80096a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80096a8:	4053      	eors	r3, r2
 80096aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d015      	beq.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80096b2:	4b34      	ldr	r3, [pc, #208]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80096ba:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80096be:	4b31      	ldr	r3, [pc, #196]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096c2:	4a30      	ldr	r2, [pc, #192]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096c8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80096ca:	4b2e      	ldr	r3, [pc, #184]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096ce:	4a2d      	ldr	r2, [pc, #180]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80096d4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80096d6:	4a2b      	ldr	r2, [pc, #172]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80096dc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80096de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80096e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096ea:	d118      	bne.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096ec:	f7f9 fc20 	bl	8002f30 <HAL_GetTick>
 80096f0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80096f4:	e00d      	b.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80096f6:	f7f9 fc1b 	bl	8002f30 <HAL_GetTick>
 80096fa:	4602      	mov	r2, r0
 80096fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009700:	1ad2      	subs	r2, r2, r3
 8009702:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009706:	429a      	cmp	r2, r3
 8009708:	d903      	bls.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800970a:	2303      	movs	r3, #3
 800970c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8009710:	e005      	b.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009712:	4b1c      	ldr	r3, [pc, #112]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009716:	f003 0302 	and.w	r3, r3, #2
 800971a:	2b00      	cmp	r3, #0
 800971c:	d0eb      	beq.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800971e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009722:	2b00      	cmp	r3, #0
 8009724:	d129      	bne.n	800977a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800972a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800972e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009732:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009736:	d10e      	bne.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009738:	4b12      	ldr	r3, [pc, #72]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800973a:	691b      	ldr	r3, [r3, #16]
 800973c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009744:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009748:	091a      	lsrs	r2, r3, #4
 800974a:	4b10      	ldr	r3, [pc, #64]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800974c:	4013      	ands	r3, r2
 800974e:	4a0d      	ldr	r2, [pc, #52]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009750:	430b      	orrs	r3, r1
 8009752:	6113      	str	r3, [r2, #16]
 8009754:	e005      	b.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009756:	4b0b      	ldr	r3, [pc, #44]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009758:	691b      	ldr	r3, [r3, #16]
 800975a:	4a0a      	ldr	r2, [pc, #40]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800975c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009760:	6113      	str	r3, [r2, #16]
 8009762:	4b08      	ldr	r3, [pc, #32]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009764:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800976a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800976e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009772:	4a04      	ldr	r2, [pc, #16]	@ (8009784 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009774:	430b      	orrs	r3, r1
 8009776:	6713      	str	r3, [r2, #112]	@ 0x70
 8009778:	e00e      	b.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800977a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800977e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8009782:	e009      	b.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009784:	58024400 	.word	0x58024400
 8009788:	58024800 	.word	0x58024800
 800978c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009790:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009794:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800979c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a0:	f002 0301 	and.w	r3, r2, #1
 80097a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80097a8:	2300      	movs	r3, #0
 80097aa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80097ae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80097b2:	460b      	mov	r3, r1
 80097b4:	4313      	orrs	r3, r2
 80097b6:	f000 8089 	beq.w	80098cc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80097ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097c0:	2b28      	cmp	r3, #40	@ 0x28
 80097c2:	d86b      	bhi.n	800989c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80097c4:	a201      	add	r2, pc, #4	@ (adr r2, 80097cc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80097c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ca:	bf00      	nop
 80097cc:	080098a5 	.word	0x080098a5
 80097d0:	0800989d 	.word	0x0800989d
 80097d4:	0800989d 	.word	0x0800989d
 80097d8:	0800989d 	.word	0x0800989d
 80097dc:	0800989d 	.word	0x0800989d
 80097e0:	0800989d 	.word	0x0800989d
 80097e4:	0800989d 	.word	0x0800989d
 80097e8:	0800989d 	.word	0x0800989d
 80097ec:	08009871 	.word	0x08009871
 80097f0:	0800989d 	.word	0x0800989d
 80097f4:	0800989d 	.word	0x0800989d
 80097f8:	0800989d 	.word	0x0800989d
 80097fc:	0800989d 	.word	0x0800989d
 8009800:	0800989d 	.word	0x0800989d
 8009804:	0800989d 	.word	0x0800989d
 8009808:	0800989d 	.word	0x0800989d
 800980c:	08009887 	.word	0x08009887
 8009810:	0800989d 	.word	0x0800989d
 8009814:	0800989d 	.word	0x0800989d
 8009818:	0800989d 	.word	0x0800989d
 800981c:	0800989d 	.word	0x0800989d
 8009820:	0800989d 	.word	0x0800989d
 8009824:	0800989d 	.word	0x0800989d
 8009828:	0800989d 	.word	0x0800989d
 800982c:	080098a5 	.word	0x080098a5
 8009830:	0800989d 	.word	0x0800989d
 8009834:	0800989d 	.word	0x0800989d
 8009838:	0800989d 	.word	0x0800989d
 800983c:	0800989d 	.word	0x0800989d
 8009840:	0800989d 	.word	0x0800989d
 8009844:	0800989d 	.word	0x0800989d
 8009848:	0800989d 	.word	0x0800989d
 800984c:	080098a5 	.word	0x080098a5
 8009850:	0800989d 	.word	0x0800989d
 8009854:	0800989d 	.word	0x0800989d
 8009858:	0800989d 	.word	0x0800989d
 800985c:	0800989d 	.word	0x0800989d
 8009860:	0800989d 	.word	0x0800989d
 8009864:	0800989d 	.word	0x0800989d
 8009868:	0800989d 	.word	0x0800989d
 800986c:	080098a5 	.word	0x080098a5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009874:	3308      	adds	r3, #8
 8009876:	2101      	movs	r1, #1
 8009878:	4618      	mov	r0, r3
 800987a:	f001 fe95 	bl	800b5a8 <RCCEx_PLL2_Config>
 800987e:	4603      	mov	r3, r0
 8009880:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009884:	e00f      	b.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800988a:	3328      	adds	r3, #40	@ 0x28
 800988c:	2101      	movs	r1, #1
 800988e:	4618      	mov	r0, r3
 8009890:	f001 ff3c 	bl	800b70c <RCCEx_PLL3_Config>
 8009894:	4603      	mov	r3, r0
 8009896:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800989a:	e004      	b.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800989c:	2301      	movs	r3, #1
 800989e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80098a2:	e000      	b.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80098a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d10a      	bne.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80098ae:	4bbf      	ldr	r3, [pc, #764]	@ (8009bac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80098b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098b2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80098b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80098bc:	4abb      	ldr	r2, [pc, #748]	@ (8009bac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80098be:	430b      	orrs	r3, r1
 80098c0:	6553      	str	r3, [r2, #84]	@ 0x54
 80098c2:	e003      	b.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80098cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d4:	f002 0302 	and.w	r3, r2, #2
 80098d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80098dc:	2300      	movs	r3, #0
 80098de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80098e2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80098e6:	460b      	mov	r3, r1
 80098e8:	4313      	orrs	r3, r2
 80098ea:	d041      	beq.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80098ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80098f2:	2b05      	cmp	r3, #5
 80098f4:	d824      	bhi.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80098f6:	a201      	add	r2, pc, #4	@ (adr r2, 80098fc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80098f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098fc:	08009949 	.word	0x08009949
 8009900:	08009915 	.word	0x08009915
 8009904:	0800992b 	.word	0x0800992b
 8009908:	08009949 	.word	0x08009949
 800990c:	08009949 	.word	0x08009949
 8009910:	08009949 	.word	0x08009949
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009918:	3308      	adds	r3, #8
 800991a:	2101      	movs	r1, #1
 800991c:	4618      	mov	r0, r3
 800991e:	f001 fe43 	bl	800b5a8 <RCCEx_PLL2_Config>
 8009922:	4603      	mov	r3, r0
 8009924:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009928:	e00f      	b.n	800994a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800992a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800992e:	3328      	adds	r3, #40	@ 0x28
 8009930:	2101      	movs	r1, #1
 8009932:	4618      	mov	r0, r3
 8009934:	f001 feea 	bl	800b70c <RCCEx_PLL3_Config>
 8009938:	4603      	mov	r3, r0
 800993a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800993e:	e004      	b.n	800994a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009940:	2301      	movs	r3, #1
 8009942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009946:	e000      	b.n	800994a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800994a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800994e:	2b00      	cmp	r3, #0
 8009950:	d10a      	bne.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009952:	4b96      	ldr	r3, [pc, #600]	@ (8009bac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009956:	f023 0107 	bic.w	r1, r3, #7
 800995a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800995e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009960:	4a92      	ldr	r2, [pc, #584]	@ (8009bac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009962:	430b      	orrs	r3, r1
 8009964:	6553      	str	r3, [r2, #84]	@ 0x54
 8009966:	e003      	b.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009968:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800996c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009978:	f002 0304 	and.w	r3, r2, #4
 800997c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009980:	2300      	movs	r3, #0
 8009982:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009986:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800998a:	460b      	mov	r3, r1
 800998c:	4313      	orrs	r3, r2
 800998e:	d044      	beq.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009994:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009998:	2b05      	cmp	r3, #5
 800999a:	d825      	bhi.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800999c:	a201      	add	r2, pc, #4	@ (adr r2, 80099a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800999e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a2:	bf00      	nop
 80099a4:	080099f1 	.word	0x080099f1
 80099a8:	080099bd 	.word	0x080099bd
 80099ac:	080099d3 	.word	0x080099d3
 80099b0:	080099f1 	.word	0x080099f1
 80099b4:	080099f1 	.word	0x080099f1
 80099b8:	080099f1 	.word	0x080099f1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80099bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099c0:	3308      	adds	r3, #8
 80099c2:	2101      	movs	r1, #1
 80099c4:	4618      	mov	r0, r3
 80099c6:	f001 fdef 	bl	800b5a8 <RCCEx_PLL2_Config>
 80099ca:	4603      	mov	r3, r0
 80099cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80099d0:	e00f      	b.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80099d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099d6:	3328      	adds	r3, #40	@ 0x28
 80099d8:	2101      	movs	r1, #1
 80099da:	4618      	mov	r0, r3
 80099dc:	f001 fe96 	bl	800b70c <RCCEx_PLL3_Config>
 80099e0:	4603      	mov	r3, r0
 80099e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80099e6:	e004      	b.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099e8:	2301      	movs	r3, #1
 80099ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80099ee:	e000      	b.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80099f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d10b      	bne.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80099fa:	4b6c      	ldr	r3, [pc, #432]	@ (8009bac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80099fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099fe:	f023 0107 	bic.w	r1, r3, #7
 8009a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009a0a:	4a68      	ldr	r2, [pc, #416]	@ (8009bac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a0c:	430b      	orrs	r3, r1
 8009a0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a10:	e003      	b.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a22:	f002 0320 	and.w	r3, r2, #32
 8009a26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009a30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009a34:	460b      	mov	r3, r1
 8009a36:	4313      	orrs	r3, r2
 8009a38:	d055      	beq.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a46:	d033      	beq.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009a48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a4c:	d82c      	bhi.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a52:	d02f      	beq.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009a54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a58:	d826      	bhi.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009a5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009a5e:	d02b      	beq.n	8009ab8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009a60:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009a64:	d820      	bhi.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009a66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a6a:	d012      	beq.n	8009a92 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009a6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a70:	d81a      	bhi.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d022      	beq.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009a76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a7a:	d115      	bne.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a80:	3308      	adds	r3, #8
 8009a82:	2100      	movs	r1, #0
 8009a84:	4618      	mov	r0, r3
 8009a86:	f001 fd8f 	bl	800b5a8 <RCCEx_PLL2_Config>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009a90:	e015      	b.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a96:	3328      	adds	r3, #40	@ 0x28
 8009a98:	2102      	movs	r1, #2
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f001 fe36 	bl	800b70c <RCCEx_PLL3_Config>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009aa6:	e00a      	b.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009aae:	e006      	b.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009ab0:	bf00      	nop
 8009ab2:	e004      	b.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009ab4:	bf00      	nop
 8009ab6:	e002      	b.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009ab8:	bf00      	nop
 8009aba:	e000      	b.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009abc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009abe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d10b      	bne.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009ac6:	4b39      	ldr	r3, [pc, #228]	@ (8009bac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009aca:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ad6:	4a35      	ldr	r2, [pc, #212]	@ (8009bac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ad8:	430b      	orrs	r3, r1
 8009ada:	6553      	str	r3, [r2, #84]	@ 0x54
 8009adc:	e003      	b.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ade:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ae2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aee:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009af2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009af6:	2300      	movs	r3, #0
 8009af8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009afc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009b00:	460b      	mov	r3, r1
 8009b02:	4313      	orrs	r3, r2
 8009b04:	d058      	beq.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009b0e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009b12:	d033      	beq.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009b14:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009b18:	d82c      	bhi.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009b1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b1e:	d02f      	beq.n	8009b80 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009b20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b24:	d826      	bhi.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009b26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009b2a:	d02b      	beq.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009b2c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009b30:	d820      	bhi.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009b32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b36:	d012      	beq.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009b38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b3c:	d81a      	bhi.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d022      	beq.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009b42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b46:	d115      	bne.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b4c:	3308      	adds	r3, #8
 8009b4e:	2100      	movs	r1, #0
 8009b50:	4618      	mov	r0, r3
 8009b52:	f001 fd29 	bl	800b5a8 <RCCEx_PLL2_Config>
 8009b56:	4603      	mov	r3, r0
 8009b58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009b5c:	e015      	b.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b62:	3328      	adds	r3, #40	@ 0x28
 8009b64:	2102      	movs	r1, #2
 8009b66:	4618      	mov	r0, r3
 8009b68:	f001 fdd0 	bl	800b70c <RCCEx_PLL3_Config>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009b72:	e00a      	b.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b74:	2301      	movs	r3, #1
 8009b76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009b7a:	e006      	b.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009b7c:	bf00      	nop
 8009b7e:	e004      	b.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009b80:	bf00      	nop
 8009b82:	e002      	b.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009b84:	bf00      	nop
 8009b86:	e000      	b.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009b88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d10e      	bne.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009b92:	4b06      	ldr	r3, [pc, #24]	@ (8009bac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b96:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009ba2:	4a02      	ldr	r2, [pc, #8]	@ (8009bac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ba4:	430b      	orrs	r3, r1
 8009ba6:	6593      	str	r3, [r2, #88]	@ 0x58
 8009ba8:	e006      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009baa:	bf00      	nop
 8009bac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009bc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009bc8:	2300      	movs	r3, #0
 8009bca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009bce:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009bd2:	460b      	mov	r3, r1
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	d055      	beq.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bdc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009be0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009be4:	d033      	beq.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009be6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009bea:	d82c      	bhi.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009bec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bf0:	d02f      	beq.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009bf2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bf6:	d826      	bhi.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009bf8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009bfc:	d02b      	beq.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009bfe:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009c02:	d820      	bhi.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009c04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c08:	d012      	beq.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009c0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c0e:	d81a      	bhi.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d022      	beq.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009c14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c18:	d115      	bne.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c1e:	3308      	adds	r3, #8
 8009c20:	2100      	movs	r1, #0
 8009c22:	4618      	mov	r0, r3
 8009c24:	f001 fcc0 	bl	800b5a8 <RCCEx_PLL2_Config>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009c2e:	e015      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c34:	3328      	adds	r3, #40	@ 0x28
 8009c36:	2102      	movs	r1, #2
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f001 fd67 	bl	800b70c <RCCEx_PLL3_Config>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009c44:	e00a      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c46:	2301      	movs	r3, #1
 8009c48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009c4c:	e006      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009c4e:	bf00      	nop
 8009c50:	e004      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009c52:	bf00      	nop
 8009c54:	e002      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009c56:	bf00      	nop
 8009c58:	e000      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009c5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d10b      	bne.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009c64:	4ba1      	ldr	r3, [pc, #644]	@ (8009eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c68:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009c74:	4a9d      	ldr	r2, [pc, #628]	@ (8009eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c76:	430b      	orrs	r3, r1
 8009c78:	6593      	str	r3, [r2, #88]	@ 0x58
 8009c7a:	e003      	b.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c8c:	f002 0308 	and.w	r3, r2, #8
 8009c90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009c94:	2300      	movs	r3, #0
 8009c96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009c9a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009c9e:	460b      	mov	r3, r1
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	d01e      	beq.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cb0:	d10c      	bne.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cb6:	3328      	adds	r3, #40	@ 0x28
 8009cb8:	2102      	movs	r1, #2
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f001 fd26 	bl	800b70c <RCCEx_PLL3_Config>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d002      	beq.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009ccc:	4b87      	ldr	r3, [pc, #540]	@ (8009eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cd0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cdc:	4a83      	ldr	r2, [pc, #524]	@ (8009eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009cde:	430b      	orrs	r3, r1
 8009ce0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cea:	f002 0310 	and.w	r3, r2, #16
 8009cee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009cf8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	d01e      	beq.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009d0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d0e:	d10c      	bne.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d14:	3328      	adds	r3, #40	@ 0x28
 8009d16:	2102      	movs	r1, #2
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f001 fcf7 	bl	800b70c <RCCEx_PLL3_Config>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d002      	beq.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009d24:	2301      	movs	r3, #1
 8009d26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009d2a:	4b70      	ldr	r3, [pc, #448]	@ (8009eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d2e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009d3a:	4a6c      	ldr	r2, [pc, #432]	@ (8009eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d3c:	430b      	orrs	r3, r1
 8009d3e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d48:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009d4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009d50:	2300      	movs	r3, #0
 8009d52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009d56:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009d5a:	460b      	mov	r3, r1
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	d03e      	beq.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009d68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d6c:	d022      	beq.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009d6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d72:	d81b      	bhi.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d003      	beq.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009d78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d7c:	d00b      	beq.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009d7e:	e015      	b.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d84:	3308      	adds	r3, #8
 8009d86:	2100      	movs	r1, #0
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f001 fc0d 	bl	800b5a8 <RCCEx_PLL2_Config>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009d94:	e00f      	b.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d9a:	3328      	adds	r3, #40	@ 0x28
 8009d9c:	2102      	movs	r1, #2
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f001 fcb4 	bl	800b70c <RCCEx_PLL3_Config>
 8009da4:	4603      	mov	r3, r0
 8009da6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009daa:	e004      	b.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009dac:	2301      	movs	r3, #1
 8009dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009db2:	e000      	b.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009db4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009db6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d10b      	bne.n	8009dd6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009dbe:	4b4b      	ldr	r3, [pc, #300]	@ (8009eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dc2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009dce:	4a47      	ldr	r2, [pc, #284]	@ (8009eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009dd0:	430b      	orrs	r3, r1
 8009dd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8009dd4:	e003      	b.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009dda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009dea:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009dec:	2300      	movs	r3, #0
 8009dee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009df0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009df4:	460b      	mov	r3, r1
 8009df6:	4313      	orrs	r3, r2
 8009df8:	d03b      	beq.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e02:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009e06:	d01f      	beq.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009e08:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009e0c:	d818      	bhi.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009e0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e12:	d003      	beq.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009e14:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009e18:	d007      	beq.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009e1a:	e011      	b.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e1c:	4b33      	ldr	r3, [pc, #204]	@ (8009eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e20:	4a32      	ldr	r2, [pc, #200]	@ (8009eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009e28:	e00f      	b.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e2e:	3328      	adds	r3, #40	@ 0x28
 8009e30:	2101      	movs	r1, #1
 8009e32:	4618      	mov	r0, r3
 8009e34:	f001 fc6a 	bl	800b70c <RCCEx_PLL3_Config>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009e3e:	e004      	b.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e40:	2301      	movs	r3, #1
 8009e42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e46:	e000      	b.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009e48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d10b      	bne.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009e52:	4b26      	ldr	r3, [pc, #152]	@ (8009eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e56:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e62:	4a22      	ldr	r2, [pc, #136]	@ (8009eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e64:	430b      	orrs	r3, r1
 8009e66:	6553      	str	r3, [r2, #84]	@ 0x54
 8009e68:	e003      	b.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009e7e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009e80:	2300      	movs	r3, #0
 8009e82:	677b      	str	r3, [r7, #116]	@ 0x74
 8009e84:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009e88:	460b      	mov	r3, r1
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	d034      	beq.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d003      	beq.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009e98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e9c:	d007      	beq.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009e9e:	e011      	b.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ea0:	4b12      	ldr	r3, [pc, #72]	@ (8009eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ea4:	4a11      	ldr	r2, [pc, #68]	@ (8009eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ea6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009eaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009eac:	e00e      	b.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eb2:	3308      	adds	r3, #8
 8009eb4:	2102      	movs	r1, #2
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f001 fb76 	bl	800b5a8 <RCCEx_PLL2_Config>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009ec2:	e003      	b.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009eca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ecc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d10d      	bne.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009ed4:	4b05      	ldr	r3, [pc, #20]	@ (8009eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ed6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ed8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ee2:	4a02      	ldr	r2, [pc, #8]	@ (8009eec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ee4:	430b      	orrs	r3, r1
 8009ee6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009ee8:	e006      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009eea:	bf00      	nop
 8009eec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ef0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ef4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f00:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009f04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009f06:	2300      	movs	r3, #0
 8009f08:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009f0a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009f0e:	460b      	mov	r3, r1
 8009f10:	4313      	orrs	r3, r2
 8009f12:	d00c      	beq.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f18:	3328      	adds	r3, #40	@ 0x28
 8009f1a:	2102      	movs	r1, #2
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f001 fbf5 	bl	800b70c <RCCEx_PLL3_Config>
 8009f22:	4603      	mov	r3, r0
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d002      	beq.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f36:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009f3a:	663b      	str	r3, [r7, #96]	@ 0x60
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	667b      	str	r3, [r7, #100]	@ 0x64
 8009f40:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009f44:	460b      	mov	r3, r1
 8009f46:	4313      	orrs	r3, r2
 8009f48:	d038      	beq.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f56:	d018      	beq.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009f58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f5c:	d811      	bhi.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009f5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f62:	d014      	beq.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009f64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f68:	d80b      	bhi.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d011      	beq.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009f6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f72:	d106      	bne.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f74:	4bc3      	ldr	r3, [pc, #780]	@ (800a284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f78:	4ac2      	ldr	r2, [pc, #776]	@ (800a284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009f80:	e008      	b.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f82:	2301      	movs	r3, #1
 8009f84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f88:	e004      	b.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009f8a:	bf00      	nop
 8009f8c:	e002      	b.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009f8e:	bf00      	nop
 8009f90:	e000      	b.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009f92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d10b      	bne.n	8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009f9c:	4bb9      	ldr	r3, [pc, #740]	@ (800a284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fa0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009fac:	4ab5      	ldr	r2, [pc, #724]	@ (800a284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fae:	430b      	orrs	r3, r1
 8009fb0:	6553      	str	r3, [r2, #84]	@ 0x54
 8009fb2:	e003      	b.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009fc8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009fca:	2300      	movs	r3, #0
 8009fcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009fce:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009fd2:	460b      	mov	r3, r1
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	d009      	beq.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009fd8:	4baa      	ldr	r3, [pc, #680]	@ (800a284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fdc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fe4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009fe6:	4aa7      	ldr	r2, [pc, #668]	@ (800a284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fe8:	430b      	orrs	r3, r1
 8009fea:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009ff8:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	657b      	str	r3, [r7, #84]	@ 0x54
 8009ffe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a002:	460b      	mov	r3, r1
 800a004:	4313      	orrs	r3, r2
 800a006:	d00a      	beq.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a008:	4b9e      	ldr	r3, [pc, #632]	@ (800a284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a00a:	691b      	ldr	r3, [r3, #16]
 800a00c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800a010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a014:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a018:	4a9a      	ldr	r2, [pc, #616]	@ (800a284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a01a:	430b      	orrs	r3, r1
 800a01c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a01e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a026:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a02a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a02c:	2300      	movs	r3, #0
 800a02e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a030:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a034:	460b      	mov	r3, r1
 800a036:	4313      	orrs	r3, r2
 800a038:	d009      	beq.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a03a:	4b92      	ldr	r3, [pc, #584]	@ (800a284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a03c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a03e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a046:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a048:	4a8e      	ldr	r2, [pc, #568]	@ (800a284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a04a:	430b      	orrs	r3, r1
 800a04c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a04e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a056:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a05a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a05c:	2300      	movs	r3, #0
 800a05e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a060:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a064:	460b      	mov	r3, r1
 800a066:	4313      	orrs	r3, r2
 800a068:	d00e      	beq.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a06a:	4b86      	ldr	r3, [pc, #536]	@ (800a284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a06c:	691b      	ldr	r3, [r3, #16]
 800a06e:	4a85      	ldr	r2, [pc, #532]	@ (800a284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a070:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a074:	6113      	str	r3, [r2, #16]
 800a076:	4b83      	ldr	r3, [pc, #524]	@ (800a284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a078:	6919      	ldr	r1, [r3, #16]
 800a07a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a07e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a082:	4a80      	ldr	r2, [pc, #512]	@ (800a284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a084:	430b      	orrs	r3, r1
 800a086:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a090:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a094:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a096:	2300      	movs	r3, #0
 800a098:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a09a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a09e:	460b      	mov	r3, r1
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	d009      	beq.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a0a4:	4b77      	ldr	r3, [pc, #476]	@ (800a284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0a8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a0ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0b2:	4a74      	ldr	r2, [pc, #464]	@ (800a284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0b4:	430b      	orrs	r3, r1
 800a0b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a0b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a0c4:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0ca:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	d00a      	beq.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a0d4:	4b6b      	ldr	r3, [pc, #428]	@ (800a284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0d8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a0dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a0e4:	4a67      	ldr	r2, [pc, #412]	@ (800a284 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0e6:	430b      	orrs	r3, r1
 800a0e8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a0ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f2:	2100      	movs	r1, #0
 800a0f4:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a0f6:	f003 0301 	and.w	r3, r3, #1
 800a0fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a0fc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a100:	460b      	mov	r3, r1
 800a102:	4313      	orrs	r3, r2
 800a104:	d011      	beq.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a10a:	3308      	adds	r3, #8
 800a10c:	2100      	movs	r1, #0
 800a10e:	4618      	mov	r0, r3
 800a110:	f001 fa4a 	bl	800b5a8 <RCCEx_PLL2_Config>
 800a114:	4603      	mov	r3, r0
 800a116:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a11a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d003      	beq.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a122:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a126:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a12a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a132:	2100      	movs	r1, #0
 800a134:	6239      	str	r1, [r7, #32]
 800a136:	f003 0302 	and.w	r3, r3, #2
 800a13a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a13c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a140:	460b      	mov	r3, r1
 800a142:	4313      	orrs	r3, r2
 800a144:	d011      	beq.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a14a:	3308      	adds	r3, #8
 800a14c:	2101      	movs	r1, #1
 800a14e:	4618      	mov	r0, r3
 800a150:	f001 fa2a 	bl	800b5a8 <RCCEx_PLL2_Config>
 800a154:	4603      	mov	r3, r0
 800a156:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a15a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d003      	beq.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a162:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a166:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a16a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a172:	2100      	movs	r1, #0
 800a174:	61b9      	str	r1, [r7, #24]
 800a176:	f003 0304 	and.w	r3, r3, #4
 800a17a:	61fb      	str	r3, [r7, #28]
 800a17c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a180:	460b      	mov	r3, r1
 800a182:	4313      	orrs	r3, r2
 800a184:	d011      	beq.n	800a1aa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a18a:	3308      	adds	r3, #8
 800a18c:	2102      	movs	r1, #2
 800a18e:	4618      	mov	r0, r3
 800a190:	f001 fa0a 	bl	800b5a8 <RCCEx_PLL2_Config>
 800a194:	4603      	mov	r3, r0
 800a196:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a19a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d003      	beq.n	800a1aa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a1aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b2:	2100      	movs	r1, #0
 800a1b4:	6139      	str	r1, [r7, #16]
 800a1b6:	f003 0308 	and.w	r3, r3, #8
 800a1ba:	617b      	str	r3, [r7, #20]
 800a1bc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	d011      	beq.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a1c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1ca:	3328      	adds	r3, #40	@ 0x28
 800a1cc:	2100      	movs	r1, #0
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f001 fa9c 	bl	800b70c <RCCEx_PLL3_Config>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800a1da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d003      	beq.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a1ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f2:	2100      	movs	r1, #0
 800a1f4:	60b9      	str	r1, [r7, #8]
 800a1f6:	f003 0310 	and.w	r3, r3, #16
 800a1fa:	60fb      	str	r3, [r7, #12]
 800a1fc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a200:	460b      	mov	r3, r1
 800a202:	4313      	orrs	r3, r2
 800a204:	d011      	beq.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a20a:	3328      	adds	r3, #40	@ 0x28
 800a20c:	2101      	movs	r1, #1
 800a20e:	4618      	mov	r0, r3
 800a210:	f001 fa7c 	bl	800b70c <RCCEx_PLL3_Config>
 800a214:	4603      	mov	r3, r0
 800a216:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a21a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d003      	beq.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a222:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a226:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a22a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a232:	2100      	movs	r1, #0
 800a234:	6039      	str	r1, [r7, #0]
 800a236:	f003 0320 	and.w	r3, r3, #32
 800a23a:	607b      	str	r3, [r7, #4]
 800a23c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a240:	460b      	mov	r3, r1
 800a242:	4313      	orrs	r3, r2
 800a244:	d011      	beq.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a24a:	3328      	adds	r3, #40	@ 0x28
 800a24c:	2102      	movs	r1, #2
 800a24e:	4618      	mov	r0, r3
 800a250:	f001 fa5c 	bl	800b70c <RCCEx_PLL3_Config>
 800a254:	4603      	mov	r3, r0
 800a256:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a25a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d003      	beq.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a262:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a266:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800a26a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d101      	bne.n	800a276 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a272:	2300      	movs	r3, #0
 800a274:	e000      	b.n	800a278 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a276:	2301      	movs	r3, #1
}
 800a278:	4618      	mov	r0, r3
 800a27a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800a27e:	46bd      	mov	sp, r7
 800a280:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a284:	58024400 	.word	0x58024400

0800a288 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b090      	sub	sp, #64	@ 0x40
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a292:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a296:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a29a:	430b      	orrs	r3, r1
 800a29c:	f040 8094 	bne.w	800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a2a0:	4b9e      	ldr	r3, [pc, #632]	@ (800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2a4:	f003 0307 	and.w	r3, r3, #7
 800a2a8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ac:	2b04      	cmp	r3, #4
 800a2ae:	f200 8087 	bhi.w	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a2b2:	a201      	add	r2, pc, #4	@ (adr r2, 800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a2b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b8:	0800a2cd 	.word	0x0800a2cd
 800a2bc:	0800a2f5 	.word	0x0800a2f5
 800a2c0:	0800a31d 	.word	0x0800a31d
 800a2c4:	0800a3b9 	.word	0x0800a3b9
 800a2c8:	0800a345 	.word	0x0800a345
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a2cc:	4b93      	ldr	r3, [pc, #588]	@ (800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a2d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a2d8:	d108      	bne.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a2da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f001 f810 	bl	800b304 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a2e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2e8:	f000 bd45 	b.w	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2f0:	f000 bd41 	b.w	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a2f4:	4b89      	ldr	r3, [pc, #548]	@ (800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a300:	d108      	bne.n	800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a302:	f107 0318 	add.w	r3, r7, #24
 800a306:	4618      	mov	r0, r3
 800a308:	f000 fd54 	bl	800adb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a30c:	69bb      	ldr	r3, [r7, #24]
 800a30e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a310:	f000 bd31 	b.w	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a314:	2300      	movs	r3, #0
 800a316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a318:	f000 bd2d 	b.w	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a31c:	4b7f      	ldr	r3, [pc, #508]	@ (800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a324:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a328:	d108      	bne.n	800a33c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a32a:	f107 030c 	add.w	r3, r7, #12
 800a32e:	4618      	mov	r0, r3
 800a330:	f000 fe94 	bl	800b05c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a338:	f000 bd1d 	b.w	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a33c:	2300      	movs	r3, #0
 800a33e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a340:	f000 bd19 	b.w	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a344:	4b75      	ldr	r3, [pc, #468]	@ (800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a346:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a348:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a34c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a34e:	4b73      	ldr	r3, [pc, #460]	@ (800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f003 0304 	and.w	r3, r3, #4
 800a356:	2b04      	cmp	r3, #4
 800a358:	d10c      	bne.n	800a374 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a35a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d109      	bne.n	800a374 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a360:	4b6e      	ldr	r3, [pc, #440]	@ (800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	08db      	lsrs	r3, r3, #3
 800a366:	f003 0303 	and.w	r3, r3, #3
 800a36a:	4a6d      	ldr	r2, [pc, #436]	@ (800a520 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a36c:	fa22 f303 	lsr.w	r3, r2, r3
 800a370:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a372:	e01f      	b.n	800a3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a374:	4b69      	ldr	r3, [pc, #420]	@ (800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a37c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a380:	d106      	bne.n	800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a384:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a388:	d102      	bne.n	800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a38a:	4b66      	ldr	r3, [pc, #408]	@ (800a524 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a38c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a38e:	e011      	b.n	800a3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a390:	4b62      	ldr	r3, [pc, #392]	@ (800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a398:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a39c:	d106      	bne.n	800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a39e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3a4:	d102      	bne.n	800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a3a6:	4b60      	ldr	r3, [pc, #384]	@ (800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a3a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3aa:	e003      	b.n	800a3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a3b0:	f000 bce1 	b.w	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a3b4:	f000 bcdf 	b.w	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a3b8:	4b5c      	ldr	r3, [pc, #368]	@ (800a52c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a3ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3bc:	f000 bcdb 	b.w	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3c4:	f000 bcd7 	b.w	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a3c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3cc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a3d0:	430b      	orrs	r3, r1
 800a3d2:	f040 80ad 	bne.w	800a530 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a3d6:	4b51      	ldr	r3, [pc, #324]	@ (800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a3d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3da:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a3de:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a3e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3e6:	d056      	beq.n	800a496 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a3e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3ee:	f200 8090 	bhi.w	800a512 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3f4:	2bc0      	cmp	r3, #192	@ 0xc0
 800a3f6:	f000 8088 	beq.w	800a50a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3fc:	2bc0      	cmp	r3, #192	@ 0xc0
 800a3fe:	f200 8088 	bhi.w	800a512 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a404:	2b80      	cmp	r3, #128	@ 0x80
 800a406:	d032      	beq.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a40a:	2b80      	cmp	r3, #128	@ 0x80
 800a40c:	f200 8081 	bhi.w	800a512 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a412:	2b00      	cmp	r3, #0
 800a414:	d003      	beq.n	800a41e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a418:	2b40      	cmp	r3, #64	@ 0x40
 800a41a:	d014      	beq.n	800a446 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a41c:	e079      	b.n	800a512 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a41e:	4b3f      	ldr	r3, [pc, #252]	@ (800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a426:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a42a:	d108      	bne.n	800a43e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a42c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a430:	4618      	mov	r0, r3
 800a432:	f000 ff67 	bl	800b304 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a438:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a43a:	f000 bc9c 	b.w	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a43e:	2300      	movs	r3, #0
 800a440:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a442:	f000 bc98 	b.w	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a446:	4b35      	ldr	r3, [pc, #212]	@ (800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a44e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a452:	d108      	bne.n	800a466 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a454:	f107 0318 	add.w	r3, r7, #24
 800a458:	4618      	mov	r0, r3
 800a45a:	f000 fcab 	bl	800adb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a45e:	69bb      	ldr	r3, [r7, #24]
 800a460:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a462:	f000 bc88 	b.w	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a466:	2300      	movs	r3, #0
 800a468:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a46a:	f000 bc84 	b.w	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a46e:	4b2b      	ldr	r3, [pc, #172]	@ (800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a476:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a47a:	d108      	bne.n	800a48e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a47c:	f107 030c 	add.w	r3, r7, #12
 800a480:	4618      	mov	r0, r3
 800a482:	f000 fdeb 	bl	800b05c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a48a:	f000 bc74 	b.w	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a48e:	2300      	movs	r3, #0
 800a490:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a492:	f000 bc70 	b.w	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a496:	4b21      	ldr	r3, [pc, #132]	@ (800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a49a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a49e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a4a0:	4b1e      	ldr	r3, [pc, #120]	@ (800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f003 0304 	and.w	r3, r3, #4
 800a4a8:	2b04      	cmp	r3, #4
 800a4aa:	d10c      	bne.n	800a4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a4ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d109      	bne.n	800a4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4b2:	4b1a      	ldr	r3, [pc, #104]	@ (800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	08db      	lsrs	r3, r3, #3
 800a4b8:	f003 0303 	and.w	r3, r3, #3
 800a4bc:	4a18      	ldr	r2, [pc, #96]	@ (800a520 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a4be:	fa22 f303 	lsr.w	r3, r2, r3
 800a4c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4c4:	e01f      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a4c6:	4b15      	ldr	r3, [pc, #84]	@ (800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4d2:	d106      	bne.n	800a4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a4d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4da:	d102      	bne.n	800a4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a4dc:	4b11      	ldr	r3, [pc, #68]	@ (800a524 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a4de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4e0:	e011      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a4e2:	4b0e      	ldr	r3, [pc, #56]	@ (800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4ee:	d106      	bne.n	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a4f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4f6:	d102      	bne.n	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a4f8:	4b0b      	ldr	r3, [pc, #44]	@ (800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a4fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4fc:	e003      	b.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a4fe:	2300      	movs	r3, #0
 800a500:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a502:	f000 bc38 	b.w	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a506:	f000 bc36 	b.w	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a50a:	4b08      	ldr	r3, [pc, #32]	@ (800a52c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a50c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a50e:	f000 bc32 	b.w	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a512:	2300      	movs	r3, #0
 800a514:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a516:	f000 bc2e 	b.w	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a51a:	bf00      	nop
 800a51c:	58024400 	.word	0x58024400
 800a520:	03d09000 	.word	0x03d09000
 800a524:	003d0900 	.word	0x003d0900
 800a528:	017d7840 	.word	0x017d7840
 800a52c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a530:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a534:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a538:	430b      	orrs	r3, r1
 800a53a:	f040 809c 	bne.w	800a676 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a53e:	4b9e      	ldr	r3, [pc, #632]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a542:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a546:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a54a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a54e:	d054      	beq.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a552:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a556:	f200 808b 	bhi.w	800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a55c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a560:	f000 8083 	beq.w	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a566:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a56a:	f200 8081 	bhi.w	800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a56e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a570:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a574:	d02f      	beq.n	800a5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a578:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a57c:	d878      	bhi.n	800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a57e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a580:	2b00      	cmp	r3, #0
 800a582:	d004      	beq.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a586:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a58a:	d012      	beq.n	800a5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a58c:	e070      	b.n	800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a58e:	4b8a      	ldr	r3, [pc, #552]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a596:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a59a:	d107      	bne.n	800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a59c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f000 feaf 	bl	800b304 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a5a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5aa:	e3e4      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5b0:	e3e1      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5b2:	4b81      	ldr	r3, [pc, #516]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a5be:	d107      	bne.n	800a5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5c0:	f107 0318 	add.w	r3, r7, #24
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f000 fbf5 	bl	800adb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a5ca:	69bb      	ldr	r3, [r7, #24]
 800a5cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5ce:	e3d2      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5d4:	e3cf      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a5d6:	4b78      	ldr	r3, [pc, #480]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a5de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5e2:	d107      	bne.n	800a5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5e4:	f107 030c 	add.w	r3, r7, #12
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f000 fd37 	bl	800b05c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5f2:	e3c0      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5f8:	e3bd      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a5fa:	4b6f      	ldr	r3, [pc, #444]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a602:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a604:	4b6c      	ldr	r3, [pc, #432]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f003 0304 	and.w	r3, r3, #4
 800a60c:	2b04      	cmp	r3, #4
 800a60e:	d10c      	bne.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a612:	2b00      	cmp	r3, #0
 800a614:	d109      	bne.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a616:	4b68      	ldr	r3, [pc, #416]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	08db      	lsrs	r3, r3, #3
 800a61c:	f003 0303 	and.w	r3, r3, #3
 800a620:	4a66      	ldr	r2, [pc, #408]	@ (800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a622:	fa22 f303 	lsr.w	r3, r2, r3
 800a626:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a628:	e01e      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a62a:	4b63      	ldr	r3, [pc, #396]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a632:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a636:	d106      	bne.n	800a646 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a63a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a63e:	d102      	bne.n	800a646 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a640:	4b5f      	ldr	r3, [pc, #380]	@ (800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a642:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a644:	e010      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a646:	4b5c      	ldr	r3, [pc, #368]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a64e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a652:	d106      	bne.n	800a662 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a656:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a65a:	d102      	bne.n	800a662 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a65c:	4b59      	ldr	r3, [pc, #356]	@ (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a65e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a660:	e002      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a662:	2300      	movs	r3, #0
 800a664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a666:	e386      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a668:	e385      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a66a:	4b57      	ldr	r3, [pc, #348]	@ (800a7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a66c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a66e:	e382      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a670:	2300      	movs	r3, #0
 800a672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a674:	e37f      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a676:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a67a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a67e:	430b      	orrs	r3, r1
 800a680:	f040 80a7 	bne.w	800a7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a684:	4b4c      	ldr	r3, [pc, #304]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a688:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a68c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a690:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a694:	d055      	beq.n	800a742 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a698:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a69c:	f200 8096 	bhi.w	800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a6a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6a2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a6a6:	f000 8084 	beq.w	800a7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a6b0:	f200 808c 	bhi.w	800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a6b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a6ba:	d030      	beq.n	800a71e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a6bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a6c2:	f200 8083 	bhi.w	800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a6c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d004      	beq.n	800a6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a6cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a6d2:	d012      	beq.n	800a6fa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a6d4:	e07a      	b.n	800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a6d6:	4b38      	ldr	r3, [pc, #224]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a6de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a6e2:	d107      	bne.n	800a6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f000 fe0b 	bl	800b304 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6f2:	e340      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6f8:	e33d      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6fa:	4b2f      	ldr	r3, [pc, #188]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a702:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a706:	d107      	bne.n	800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a708:	f107 0318 	add.w	r3, r7, #24
 800a70c:	4618      	mov	r0, r3
 800a70e:	f000 fb51 	bl	800adb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a712:	69bb      	ldr	r3, [r7, #24]
 800a714:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a716:	e32e      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a718:	2300      	movs	r3, #0
 800a71a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a71c:	e32b      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a71e:	4b26      	ldr	r3, [pc, #152]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a726:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a72a:	d107      	bne.n	800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a72c:	f107 030c 	add.w	r3, r7, #12
 800a730:	4618      	mov	r0, r3
 800a732:	f000 fc93 	bl	800b05c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a73a:	e31c      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a73c:	2300      	movs	r3, #0
 800a73e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a740:	e319      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a742:	4b1d      	ldr	r3, [pc, #116]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a746:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a74a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a74c:	4b1a      	ldr	r3, [pc, #104]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f003 0304 	and.w	r3, r3, #4
 800a754:	2b04      	cmp	r3, #4
 800a756:	d10c      	bne.n	800a772 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d109      	bne.n	800a772 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a75e:	4b16      	ldr	r3, [pc, #88]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	08db      	lsrs	r3, r3, #3
 800a764:	f003 0303 	and.w	r3, r3, #3
 800a768:	4a14      	ldr	r2, [pc, #80]	@ (800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a76a:	fa22 f303 	lsr.w	r3, r2, r3
 800a76e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a770:	e01e      	b.n	800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a772:	4b11      	ldr	r3, [pc, #68]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a77a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a77e:	d106      	bne.n	800a78e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a782:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a786:	d102      	bne.n	800a78e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a788:	4b0d      	ldr	r3, [pc, #52]	@ (800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a78a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a78c:	e010      	b.n	800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a78e:	4b0a      	ldr	r3, [pc, #40]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a796:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a79a:	d106      	bne.n	800a7aa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a79c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a79e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7a2:	d102      	bne.n	800a7aa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a7a4:	4b07      	ldr	r3, [pc, #28]	@ (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a7a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7a8:	e002      	b.n	800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a7ae:	e2e2      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a7b0:	e2e1      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a7b2:	4b05      	ldr	r3, [pc, #20]	@ (800a7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a7b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7b6:	e2de      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a7b8:	58024400 	.word	0x58024400
 800a7bc:	03d09000 	.word	0x03d09000
 800a7c0:	003d0900 	.word	0x003d0900
 800a7c4:	017d7840 	.word	0x017d7840
 800a7c8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7d0:	e2d1      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a7d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7d6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a7da:	430b      	orrs	r3, r1
 800a7dc:	f040 809c 	bne.w	800a918 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a7e0:	4b93      	ldr	r3, [pc, #588]	@ (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a7e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7e4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a7e8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a7ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a7f0:	d054      	beq.n	800a89c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a7f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a7f8:	f200 808b 	bhi.w	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a7fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7fe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a802:	f000 8083 	beq.w	800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a808:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a80c:	f200 8081 	bhi.w	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a812:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a816:	d02f      	beq.n	800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a81a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a81e:	d878      	bhi.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a822:	2b00      	cmp	r3, #0
 800a824:	d004      	beq.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a828:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a82c:	d012      	beq.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a82e:	e070      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a830:	4b7f      	ldr	r3, [pc, #508]	@ (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a838:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a83c:	d107      	bne.n	800a84e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a83e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a842:	4618      	mov	r0, r3
 800a844:	f000 fd5e 	bl	800b304 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a84a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a84c:	e293      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a84e:	2300      	movs	r3, #0
 800a850:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a852:	e290      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a854:	4b76      	ldr	r3, [pc, #472]	@ (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a85c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a860:	d107      	bne.n	800a872 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a862:	f107 0318 	add.w	r3, r7, #24
 800a866:	4618      	mov	r0, r3
 800a868:	f000 faa4 	bl	800adb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a86c:	69bb      	ldr	r3, [r7, #24]
 800a86e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a870:	e281      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a872:	2300      	movs	r3, #0
 800a874:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a876:	e27e      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a878:	4b6d      	ldr	r3, [pc, #436]	@ (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a880:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a884:	d107      	bne.n	800a896 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a886:	f107 030c 	add.w	r3, r7, #12
 800a88a:	4618      	mov	r0, r3
 800a88c:	f000 fbe6 	bl	800b05c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a894:	e26f      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a896:	2300      	movs	r3, #0
 800a898:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a89a:	e26c      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a89c:	4b64      	ldr	r3, [pc, #400]	@ (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a89e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a8a4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a8a6:	4b62      	ldr	r3, [pc, #392]	@ (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f003 0304 	and.w	r3, r3, #4
 800a8ae:	2b04      	cmp	r3, #4
 800a8b0:	d10c      	bne.n	800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a8b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d109      	bne.n	800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a8b8:	4b5d      	ldr	r3, [pc, #372]	@ (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	08db      	lsrs	r3, r3, #3
 800a8be:	f003 0303 	and.w	r3, r3, #3
 800a8c2:	4a5c      	ldr	r2, [pc, #368]	@ (800aa34 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a8c4:	fa22 f303 	lsr.w	r3, r2, r3
 800a8c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a8ca:	e01e      	b.n	800a90a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a8cc:	4b58      	ldr	r3, [pc, #352]	@ (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8d8:	d106      	bne.n	800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a8da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a8e0:	d102      	bne.n	800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a8e2:	4b55      	ldr	r3, [pc, #340]	@ (800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a8e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a8e6:	e010      	b.n	800a90a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a8e8:	4b51      	ldr	r3, [pc, #324]	@ (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8f4:	d106      	bne.n	800a904 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a8f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8fc:	d102      	bne.n	800a904 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a8fe:	4b4f      	ldr	r3, [pc, #316]	@ (800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a900:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a902:	e002      	b.n	800a90a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a904:	2300      	movs	r3, #0
 800a906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a908:	e235      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a90a:	e234      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a90c:	4b4c      	ldr	r3, [pc, #304]	@ (800aa40 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a90e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a910:	e231      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a912:	2300      	movs	r3, #0
 800a914:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a916:	e22e      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a918:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a91c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a920:	430b      	orrs	r3, r1
 800a922:	f040 808f 	bne.w	800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a926:	4b42      	ldr	r3, [pc, #264]	@ (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a928:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a92a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a92e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a932:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a936:	d06b      	beq.n	800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a93a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a93e:	d874      	bhi.n	800aa2a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a942:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a946:	d056      	beq.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a94a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a94e:	d86c      	bhi.n	800aa2a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a952:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a956:	d03b      	beq.n	800a9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a95a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a95e:	d864      	bhi.n	800aa2a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a962:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a966:	d021      	beq.n	800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a96a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a96e:	d85c      	bhi.n	800aa2a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a972:	2b00      	cmp	r3, #0
 800a974:	d004      	beq.n	800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a978:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a97c:	d004      	beq.n	800a988 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a97e:	e054      	b.n	800aa2a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a980:	f7fe fa4c 	bl	8008e1c <HAL_RCC_GetPCLK1Freq>
 800a984:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a986:	e1f6      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a988:	4b29      	ldr	r3, [pc, #164]	@ (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a990:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a994:	d107      	bne.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a996:	f107 0318 	add.w	r3, r7, #24
 800a99a:	4618      	mov	r0, r3
 800a99c:	f000 fa0a 	bl	800adb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a9a0:	69fb      	ldr	r3, [r7, #28]
 800a9a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9a4:	e1e7      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9aa:	e1e4      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9ac:	4b20      	ldr	r3, [pc, #128]	@ (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a9b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9b8:	d107      	bne.n	800a9ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9ba:	f107 030c 	add.w	r3, r7, #12
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f000 fb4c 	bl	800b05c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9c8:	e1d5      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9ce:	e1d2      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a9d0:	4b17      	ldr	r3, [pc, #92]	@ (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f003 0304 	and.w	r3, r3, #4
 800a9d8:	2b04      	cmp	r3, #4
 800a9da:	d109      	bne.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9dc:	4b14      	ldr	r3, [pc, #80]	@ (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	08db      	lsrs	r3, r3, #3
 800a9e2:	f003 0303 	and.w	r3, r3, #3
 800a9e6:	4a13      	ldr	r2, [pc, #76]	@ (800aa34 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a9e8:	fa22 f303 	lsr.w	r3, r2, r3
 800a9ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9ee:	e1c2      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9f4:	e1bf      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a9f6:	4b0e      	ldr	r3, [pc, #56]	@ (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa02:	d102      	bne.n	800aa0a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800aa04:	4b0c      	ldr	r3, [pc, #48]	@ (800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800aa06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa08:	e1b5      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa0e:	e1b2      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aa10:	4b07      	ldr	r3, [pc, #28]	@ (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa1c:	d102      	bne.n	800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800aa1e:	4b07      	ldr	r3, [pc, #28]	@ (800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800aa20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa22:	e1a8      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa24:	2300      	movs	r3, #0
 800aa26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa28:	e1a5      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa2e:	e1a2      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aa30:	58024400 	.word	0x58024400
 800aa34:	03d09000 	.word	0x03d09000
 800aa38:	003d0900 	.word	0x003d0900
 800aa3c:	017d7840 	.word	0x017d7840
 800aa40:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800aa44:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa48:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800aa4c:	430b      	orrs	r3, r1
 800aa4e:	d173      	bne.n	800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800aa50:	4b9c      	ldr	r3, [pc, #624]	@ (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800aa58:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aa5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa60:	d02f      	beq.n	800aac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800aa62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa68:	d863      	bhi.n	800ab32 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800aa6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d004      	beq.n	800aa7a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800aa70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa76:	d012      	beq.n	800aa9e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800aa78:	e05b      	b.n	800ab32 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa7a:	4b92      	ldr	r3, [pc, #584]	@ (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa86:	d107      	bne.n	800aa98 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa88:	f107 0318 	add.w	r3, r7, #24
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f000 f991 	bl	800adb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa92:	69bb      	ldr	r3, [r7, #24]
 800aa94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa96:	e16e      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa9c:	e16b      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa9e:	4b89      	ldr	r3, [pc, #548]	@ (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aaa6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aaaa:	d107      	bne.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aaac:	f107 030c 	add.w	r3, r7, #12
 800aab0:	4618      	mov	r0, r3
 800aab2:	f000 fad3 	bl	800b05c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aaba:	e15c      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aabc:	2300      	movs	r3, #0
 800aabe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aac0:	e159      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aac2:	4b80      	ldr	r3, [pc, #512]	@ (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aac6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aaca:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aacc:	4b7d      	ldr	r3, [pc, #500]	@ (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f003 0304 	and.w	r3, r3, #4
 800aad4:	2b04      	cmp	r3, #4
 800aad6:	d10c      	bne.n	800aaf2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800aad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d109      	bne.n	800aaf2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aade:	4b79      	ldr	r3, [pc, #484]	@ (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	08db      	lsrs	r3, r3, #3
 800aae4:	f003 0303 	and.w	r3, r3, #3
 800aae8:	4a77      	ldr	r2, [pc, #476]	@ (800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800aaea:	fa22 f303 	lsr.w	r3, r2, r3
 800aaee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aaf0:	e01e      	b.n	800ab30 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aaf2:	4b74      	ldr	r3, [pc, #464]	@ (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aafa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aafe:	d106      	bne.n	800ab0e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800ab00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab06:	d102      	bne.n	800ab0e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ab08:	4b70      	ldr	r3, [pc, #448]	@ (800accc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ab0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab0c:	e010      	b.n	800ab30 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab0e:	4b6d      	ldr	r3, [pc, #436]	@ (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab1a:	d106      	bne.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800ab1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab22:	d102      	bne.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ab24:	4b6a      	ldr	r3, [pc, #424]	@ (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ab26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab28:	e002      	b.n	800ab30 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ab2e:	e122      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ab30:	e121      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ab32:	2300      	movs	r3, #0
 800ab34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab36:	e11e      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ab38:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab3c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800ab40:	430b      	orrs	r3, r1
 800ab42:	d133      	bne.n	800abac <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ab44:	4b5f      	ldr	r3, [pc, #380]	@ (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ab4c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ab4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d004      	beq.n	800ab5e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800ab54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab5a:	d012      	beq.n	800ab82 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800ab5c:	e023      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab5e:	4b59      	ldr	r3, [pc, #356]	@ (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab6a:	d107      	bne.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab70:	4618      	mov	r0, r3
 800ab72:	f000 fbc7 	bl	800b304 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab7a:	e0fc      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab80:	e0f9      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab82:	4b50      	ldr	r3, [pc, #320]	@ (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab8e:	d107      	bne.n	800aba0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab90:	f107 0318 	add.w	r3, r7, #24
 800ab94:	4618      	mov	r0, r3
 800ab96:	f000 f90d 	bl	800adb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ab9a:	6a3b      	ldr	r3, [r7, #32]
 800ab9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab9e:	e0ea      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aba0:	2300      	movs	r3, #0
 800aba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aba4:	e0e7      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800aba6:	2300      	movs	r3, #0
 800aba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abaa:	e0e4      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800abac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abb0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800abb4:	430b      	orrs	r3, r1
 800abb6:	f040 808d 	bne.w	800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800abba:	4b42      	ldr	r3, [pc, #264]	@ (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abbe:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800abc2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800abc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800abca:	d06b      	beq.n	800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800abcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800abd2:	d874      	bhi.n	800acbe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800abd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abda:	d056      	beq.n	800ac8a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800abdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abe2:	d86c      	bhi.n	800acbe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800abe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abe6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800abea:	d03b      	beq.n	800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800abec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800abf2:	d864      	bhi.n	800acbe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800abf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800abfa:	d021      	beq.n	800ac40 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800abfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac02:	d85c      	bhi.n	800acbe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ac04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d004      	beq.n	800ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800ac0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac10:	d004      	beq.n	800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800ac12:	e054      	b.n	800acbe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ac14:	f000 f8b8 	bl	800ad88 <HAL_RCCEx_GetD3PCLK1Freq>
 800ac18:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ac1a:	e0ac      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac1c:	4b29      	ldr	r3, [pc, #164]	@ (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac28:	d107      	bne.n	800ac3a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac2a:	f107 0318 	add.w	r3, r7, #24
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f000 f8c0 	bl	800adb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ac34:	69fb      	ldr	r3, [r7, #28]
 800ac36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac38:	e09d      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac3e:	e09a      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac40:	4b20      	ldr	r3, [pc, #128]	@ (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ac48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac4c:	d107      	bne.n	800ac5e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac4e:	f107 030c 	add.w	r3, r7, #12
 800ac52:	4618      	mov	r0, r3
 800ac54:	f000 fa02 	bl	800b05c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac5c:	e08b      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac62:	e088      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ac64:	4b17      	ldr	r3, [pc, #92]	@ (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f003 0304 	and.w	r3, r3, #4
 800ac6c:	2b04      	cmp	r3, #4
 800ac6e:	d109      	bne.n	800ac84 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac70:	4b14      	ldr	r3, [pc, #80]	@ (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	08db      	lsrs	r3, r3, #3
 800ac76:	f003 0303 	and.w	r3, r3, #3
 800ac7a:	4a13      	ldr	r2, [pc, #76]	@ (800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ac7c:	fa22 f303 	lsr.w	r3, r2, r3
 800ac80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac82:	e078      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac84:	2300      	movs	r3, #0
 800ac86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac88:	e075      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ac8a:	4b0e      	ldr	r3, [pc, #56]	@ (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac96:	d102      	bne.n	800ac9e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800ac98:	4b0c      	ldr	r3, [pc, #48]	@ (800accc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ac9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac9c:	e06b      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aca2:	e068      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aca4:	4b07      	ldr	r3, [pc, #28]	@ (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800acac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800acb0:	d102      	bne.n	800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800acb2:	4b07      	ldr	r3, [pc, #28]	@ (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800acb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acb6:	e05e      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acb8:	2300      	movs	r3, #0
 800acba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acbc:	e05b      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800acbe:	2300      	movs	r3, #0
 800acc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acc2:	e058      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800acc4:	58024400 	.word	0x58024400
 800acc8:	03d09000 	.word	0x03d09000
 800accc:	003d0900 	.word	0x003d0900
 800acd0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800acd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acd8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800acdc:	430b      	orrs	r3, r1
 800acde:	d148      	bne.n	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ace0:	4b27      	ldr	r3, [pc, #156]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ace2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ace4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ace8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800acea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800acf0:	d02a      	beq.n	800ad48 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800acf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800acf8:	d838      	bhi.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800acfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d004      	beq.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ad00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad06:	d00d      	beq.n	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800ad08:	e030      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ad0a:	4b1d      	ldr	r3, [pc, #116]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad16:	d102      	bne.n	800ad1e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800ad18:	4b1a      	ldr	r3, [pc, #104]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ad1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad1c:	e02b      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad22:	e028      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad24:	4b16      	ldr	r3, [pc, #88]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ad30:	d107      	bne.n	800ad42 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad36:	4618      	mov	r0, r3
 800ad38:	f000 fae4 	bl	800b304 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad40:	e019      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad42:	2300      	movs	r3, #0
 800ad44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad46:	e016      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad48:	4b0d      	ldr	r3, [pc, #52]	@ (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad54:	d107      	bne.n	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad56:	f107 0318 	add.w	r3, r7, #24
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f000 f82a 	bl	800adb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ad60:	69fb      	ldr	r3, [r7, #28]
 800ad62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad64:	e007      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad66:	2300      	movs	r3, #0
 800ad68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad6a:	e004      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad70:	e001      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800ad72:	2300      	movs	r3, #0
 800ad74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800ad76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3740      	adds	r7, #64	@ 0x40
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}
 800ad80:	58024400 	.word	0x58024400
 800ad84:	017d7840 	.word	0x017d7840

0800ad88 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ad8c:	f7fe f816 	bl	8008dbc <HAL_RCC_GetHCLKFreq>
 800ad90:	4602      	mov	r2, r0
 800ad92:	4b06      	ldr	r3, [pc, #24]	@ (800adac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ad94:	6a1b      	ldr	r3, [r3, #32]
 800ad96:	091b      	lsrs	r3, r3, #4
 800ad98:	f003 0307 	and.w	r3, r3, #7
 800ad9c:	4904      	ldr	r1, [pc, #16]	@ (800adb0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ad9e:	5ccb      	ldrb	r3, [r1, r3]
 800ada0:	f003 031f 	and.w	r3, r3, #31
 800ada4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	bd80      	pop	{r7, pc}
 800adac:	58024400 	.word	0x58024400
 800adb0:	08010224 	.word	0x08010224

0800adb4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b089      	sub	sp, #36	@ 0x24
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800adbc:	4ba1      	ldr	r3, [pc, #644]	@ (800b044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adc0:	f003 0303 	and.w	r3, r3, #3
 800adc4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800adc6:	4b9f      	ldr	r3, [pc, #636]	@ (800b044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adca:	0b1b      	lsrs	r3, r3, #12
 800adcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800add0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800add2:	4b9c      	ldr	r3, [pc, #624]	@ (800b044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800add4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800add6:	091b      	lsrs	r3, r3, #4
 800add8:	f003 0301 	and.w	r3, r3, #1
 800addc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800adde:	4b99      	ldr	r3, [pc, #612]	@ (800b044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ade0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ade2:	08db      	lsrs	r3, r3, #3
 800ade4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ade8:	693a      	ldr	r2, [r7, #16]
 800adea:	fb02 f303 	mul.w	r3, r2, r3
 800adee:	ee07 3a90 	vmov	s15, r3
 800adf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adf6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	f000 8111 	beq.w	800b024 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ae02:	69bb      	ldr	r3, [r7, #24]
 800ae04:	2b02      	cmp	r3, #2
 800ae06:	f000 8083 	beq.w	800af10 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ae0a:	69bb      	ldr	r3, [r7, #24]
 800ae0c:	2b02      	cmp	r3, #2
 800ae0e:	f200 80a1 	bhi.w	800af54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ae12:	69bb      	ldr	r3, [r7, #24]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d003      	beq.n	800ae20 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ae18:	69bb      	ldr	r3, [r7, #24]
 800ae1a:	2b01      	cmp	r3, #1
 800ae1c:	d056      	beq.n	800aecc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ae1e:	e099      	b.n	800af54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae20:	4b88      	ldr	r3, [pc, #544]	@ (800b044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f003 0320 	and.w	r3, r3, #32
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d02d      	beq.n	800ae88 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae2c:	4b85      	ldr	r3, [pc, #532]	@ (800b044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	08db      	lsrs	r3, r3, #3
 800ae32:	f003 0303 	and.w	r3, r3, #3
 800ae36:	4a84      	ldr	r2, [pc, #528]	@ (800b048 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ae38:	fa22 f303 	lsr.w	r3, r2, r3
 800ae3c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	ee07 3a90 	vmov	s15, r3
 800ae44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	ee07 3a90 	vmov	s15, r3
 800ae4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae56:	4b7b      	ldr	r3, [pc, #492]	@ (800b044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae5e:	ee07 3a90 	vmov	s15, r3
 800ae62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae66:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae6a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b04c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ae6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae82:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ae86:	e087      	b.n	800af98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	ee07 3a90 	vmov	s15, r3
 800ae8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae92:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b050 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ae96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae9a:	4b6a      	ldr	r3, [pc, #424]	@ (800b044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aea2:	ee07 3a90 	vmov	s15, r3
 800aea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800aeae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b04c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aeb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aeb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aec6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aeca:	e065      	b.n	800af98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	ee07 3a90 	vmov	s15, r3
 800aed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aed6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b054 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aeda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aede:	4b59      	ldr	r3, [pc, #356]	@ (800b044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aee6:	ee07 3a90 	vmov	s15, r3
 800aeea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeee:	ed97 6a03 	vldr	s12, [r7, #12]
 800aef2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b04c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aefa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aefe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af0e:	e043      	b.n	800af98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	ee07 3a90 	vmov	s15, r3
 800af16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af1a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b058 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800af1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af22:	4b48      	ldr	r3, [pc, #288]	@ (800b044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af2a:	ee07 3a90 	vmov	s15, r3
 800af2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af32:	ed97 6a03 	vldr	s12, [r7, #12]
 800af36:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b04c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af52:	e021      	b.n	800af98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	ee07 3a90 	vmov	s15, r3
 800af5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af5e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b054 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800af62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af66:	4b37      	ldr	r3, [pc, #220]	@ (800b044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af6e:	ee07 3a90 	vmov	s15, r3
 800af72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af76:	ed97 6a03 	vldr	s12, [r7, #12]
 800af7a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b04c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af96:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800af98:	4b2a      	ldr	r3, [pc, #168]	@ (800b044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af9c:	0a5b      	lsrs	r3, r3, #9
 800af9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800afa2:	ee07 3a90 	vmov	s15, r3
 800afa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800afae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afb2:	edd7 6a07 	vldr	s13, [r7, #28]
 800afb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afbe:	ee17 2a90 	vmov	r2, s15
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800afc6:	4b1f      	ldr	r3, [pc, #124]	@ (800b044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afca:	0c1b      	lsrs	r3, r3, #16
 800afcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800afd0:	ee07 3a90 	vmov	s15, r3
 800afd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afd8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800afdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afe0:	edd7 6a07 	vldr	s13, [r7, #28]
 800afe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afec:	ee17 2a90 	vmov	r2, s15
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800aff4:	4b13      	ldr	r3, [pc, #76]	@ (800b044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aff8:	0e1b      	lsrs	r3, r3, #24
 800affa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800affe:	ee07 3a90 	vmov	s15, r3
 800b002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b006:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b00a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b00e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b012:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b016:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b01a:	ee17 2a90 	vmov	r2, s15
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b022:	e008      	b.n	800b036 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2200      	movs	r2, #0
 800b028:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2200      	movs	r2, #0
 800b02e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2200      	movs	r2, #0
 800b034:	609a      	str	r2, [r3, #8]
}
 800b036:	bf00      	nop
 800b038:	3724      	adds	r7, #36	@ 0x24
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr
 800b042:	bf00      	nop
 800b044:	58024400 	.word	0x58024400
 800b048:	03d09000 	.word	0x03d09000
 800b04c:	46000000 	.word	0x46000000
 800b050:	4c742400 	.word	0x4c742400
 800b054:	4a742400 	.word	0x4a742400
 800b058:	4bbebc20 	.word	0x4bbebc20

0800b05c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b089      	sub	sp, #36	@ 0x24
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b064:	4ba1      	ldr	r3, [pc, #644]	@ (800b2ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b068:	f003 0303 	and.w	r3, r3, #3
 800b06c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b06e:	4b9f      	ldr	r3, [pc, #636]	@ (800b2ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b072:	0d1b      	lsrs	r3, r3, #20
 800b074:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b078:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b07a:	4b9c      	ldr	r3, [pc, #624]	@ (800b2ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b07c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b07e:	0a1b      	lsrs	r3, r3, #8
 800b080:	f003 0301 	and.w	r3, r3, #1
 800b084:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b086:	4b99      	ldr	r3, [pc, #612]	@ (800b2ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b08a:	08db      	lsrs	r3, r3, #3
 800b08c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b090:	693a      	ldr	r2, [r7, #16]
 800b092:	fb02 f303 	mul.w	r3, r2, r3
 800b096:	ee07 3a90 	vmov	s15, r3
 800b09a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b09e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	f000 8111 	beq.w	800b2cc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b0aa:	69bb      	ldr	r3, [r7, #24]
 800b0ac:	2b02      	cmp	r3, #2
 800b0ae:	f000 8083 	beq.w	800b1b8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b0b2:	69bb      	ldr	r3, [r7, #24]
 800b0b4:	2b02      	cmp	r3, #2
 800b0b6:	f200 80a1 	bhi.w	800b1fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b0ba:	69bb      	ldr	r3, [r7, #24]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d003      	beq.n	800b0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b0c0:	69bb      	ldr	r3, [r7, #24]
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d056      	beq.n	800b174 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b0c6:	e099      	b.n	800b1fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0c8:	4b88      	ldr	r3, [pc, #544]	@ (800b2ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f003 0320 	and.w	r3, r3, #32
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d02d      	beq.n	800b130 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b0d4:	4b85      	ldr	r3, [pc, #532]	@ (800b2ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	08db      	lsrs	r3, r3, #3
 800b0da:	f003 0303 	and.w	r3, r3, #3
 800b0de:	4a84      	ldr	r2, [pc, #528]	@ (800b2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b0e0:	fa22 f303 	lsr.w	r3, r2, r3
 800b0e4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	ee07 3a90 	vmov	s15, r3
 800b0ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	ee07 3a90 	vmov	s15, r3
 800b0f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0fe:	4b7b      	ldr	r3, [pc, #492]	@ (800b2ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b106:	ee07 3a90 	vmov	s15, r3
 800b10a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b10e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b112:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b11a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b11e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b12a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b12e:	e087      	b.n	800b240 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	ee07 3a90 	vmov	s15, r3
 800b136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b13a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b13e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b142:	4b6a      	ldr	r3, [pc, #424]	@ (800b2ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b14a:	ee07 3a90 	vmov	s15, r3
 800b14e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b152:	ed97 6a03 	vldr	s12, [r7, #12]
 800b156:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b15a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b15e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b162:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b16a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b16e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b172:	e065      	b.n	800b240 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	ee07 3a90 	vmov	s15, r3
 800b17a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b17e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b2fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b186:	4b59      	ldr	r3, [pc, #356]	@ (800b2ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b18a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b18e:	ee07 3a90 	vmov	s15, r3
 800b192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b196:	ed97 6a03 	vldr	s12, [r7, #12]
 800b19a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b19e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1b6:	e043      	b.n	800b240 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	ee07 3a90 	vmov	s15, r3
 800b1be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1c2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b300 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b1c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1ca:	4b48      	ldr	r3, [pc, #288]	@ (800b2ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1d2:	ee07 3a90 	vmov	s15, r3
 800b1d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1da:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1de:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b1e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1fa:	e021      	b.n	800b240 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	ee07 3a90 	vmov	s15, r3
 800b202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b206:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b2fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b20a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b20e:	4b37      	ldr	r3, [pc, #220]	@ (800b2ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b216:	ee07 3a90 	vmov	s15, r3
 800b21a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b21e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b222:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b22a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b22e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b23a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b23e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b240:	4b2a      	ldr	r3, [pc, #168]	@ (800b2ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b244:	0a5b      	lsrs	r3, r3, #9
 800b246:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b24a:	ee07 3a90 	vmov	s15, r3
 800b24e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b252:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b256:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b25a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b25e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b262:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b266:	ee17 2a90 	vmov	r2, s15
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b26e:	4b1f      	ldr	r3, [pc, #124]	@ (800b2ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b272:	0c1b      	lsrs	r3, r3, #16
 800b274:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b278:	ee07 3a90 	vmov	s15, r3
 800b27c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b280:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b284:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b288:	edd7 6a07 	vldr	s13, [r7, #28]
 800b28c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b290:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b294:	ee17 2a90 	vmov	r2, s15
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b29c:	4b13      	ldr	r3, [pc, #76]	@ (800b2ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b29e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2a0:	0e1b      	lsrs	r3, r3, #24
 800b2a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2a6:	ee07 3a90 	vmov	s15, r3
 800b2aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b2b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2b6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2c2:	ee17 2a90 	vmov	r2, s15
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b2ca:	e008      	b.n	800b2de <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	609a      	str	r2, [r3, #8]
}
 800b2de:	bf00      	nop
 800b2e0:	3724      	adds	r7, #36	@ 0x24
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e8:	4770      	bx	lr
 800b2ea:	bf00      	nop
 800b2ec:	58024400 	.word	0x58024400
 800b2f0:	03d09000 	.word	0x03d09000
 800b2f4:	46000000 	.word	0x46000000
 800b2f8:	4c742400 	.word	0x4c742400
 800b2fc:	4a742400 	.word	0x4a742400
 800b300:	4bbebc20 	.word	0x4bbebc20

0800b304 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b304:	b480      	push	{r7}
 800b306:	b089      	sub	sp, #36	@ 0x24
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b30c:	4ba0      	ldr	r3, [pc, #640]	@ (800b590 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b30e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b310:	f003 0303 	and.w	r3, r3, #3
 800b314:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b316:	4b9e      	ldr	r3, [pc, #632]	@ (800b590 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b31a:	091b      	lsrs	r3, r3, #4
 800b31c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b320:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b322:	4b9b      	ldr	r3, [pc, #620]	@ (800b590 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b326:	f003 0301 	and.w	r3, r3, #1
 800b32a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b32c:	4b98      	ldr	r3, [pc, #608]	@ (800b590 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b32e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b330:	08db      	lsrs	r3, r3, #3
 800b332:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b336:	693a      	ldr	r2, [r7, #16]
 800b338:	fb02 f303 	mul.w	r3, r2, r3
 800b33c:	ee07 3a90 	vmov	s15, r3
 800b340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b344:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	f000 8111 	beq.w	800b572 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b350:	69bb      	ldr	r3, [r7, #24]
 800b352:	2b02      	cmp	r3, #2
 800b354:	f000 8083 	beq.w	800b45e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b358:	69bb      	ldr	r3, [r7, #24]
 800b35a:	2b02      	cmp	r3, #2
 800b35c:	f200 80a1 	bhi.w	800b4a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b360:	69bb      	ldr	r3, [r7, #24]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d003      	beq.n	800b36e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b366:	69bb      	ldr	r3, [r7, #24]
 800b368:	2b01      	cmp	r3, #1
 800b36a:	d056      	beq.n	800b41a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b36c:	e099      	b.n	800b4a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b36e:	4b88      	ldr	r3, [pc, #544]	@ (800b590 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f003 0320 	and.w	r3, r3, #32
 800b376:	2b00      	cmp	r3, #0
 800b378:	d02d      	beq.n	800b3d6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b37a:	4b85      	ldr	r3, [pc, #532]	@ (800b590 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	08db      	lsrs	r3, r3, #3
 800b380:	f003 0303 	and.w	r3, r3, #3
 800b384:	4a83      	ldr	r2, [pc, #524]	@ (800b594 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b386:	fa22 f303 	lsr.w	r3, r2, r3
 800b38a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	ee07 3a90 	vmov	s15, r3
 800b392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	ee07 3a90 	vmov	s15, r3
 800b39c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3a4:	4b7a      	ldr	r3, [pc, #488]	@ (800b590 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3ac:	ee07 3a90 	vmov	s15, r3
 800b3b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3b4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3b8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b598 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b3bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3d0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b3d4:	e087      	b.n	800b4e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	ee07 3a90 	vmov	s15, r3
 800b3dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3e0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b59c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b3e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3e8:	4b69      	ldr	r3, [pc, #420]	@ (800b590 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3f0:	ee07 3a90 	vmov	s15, r3
 800b3f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3f8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3fc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b598 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b400:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b404:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b408:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b40c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b410:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b414:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b418:	e065      	b.n	800b4e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	ee07 3a90 	vmov	s15, r3
 800b420:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b424:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b5a0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b428:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b42c:	4b58      	ldr	r3, [pc, #352]	@ (800b590 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b42e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b434:	ee07 3a90 	vmov	s15, r3
 800b438:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b43c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b440:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b598 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b444:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b448:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b44c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b450:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b454:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b458:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b45c:	e043      	b.n	800b4e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	ee07 3a90 	vmov	s15, r3
 800b464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b468:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b5a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b46c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b470:	4b47      	ldr	r3, [pc, #284]	@ (800b590 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b478:	ee07 3a90 	vmov	s15, r3
 800b47c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b480:	ed97 6a03 	vldr	s12, [r7, #12]
 800b484:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b598 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b488:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b48c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b490:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b494:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b49c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b4a0:	e021      	b.n	800b4e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	ee07 3a90 	vmov	s15, r3
 800b4a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4ac:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b59c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b4b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4b4:	4b36      	ldr	r3, [pc, #216]	@ (800b590 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4bc:	ee07 3a90 	vmov	s15, r3
 800b4c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4c4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4c8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b598 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b4cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b4e4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b4e6:	4b2a      	ldr	r3, [pc, #168]	@ (800b590 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4ea:	0a5b      	lsrs	r3, r3, #9
 800b4ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4f0:	ee07 3a90 	vmov	s15, r3
 800b4f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b4fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b500:	edd7 6a07 	vldr	s13, [r7, #28]
 800b504:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b50c:	ee17 2a90 	vmov	r2, s15
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b514:	4b1e      	ldr	r3, [pc, #120]	@ (800b590 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b518:	0c1b      	lsrs	r3, r3, #16
 800b51a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b51e:	ee07 3a90 	vmov	s15, r3
 800b522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b526:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b52a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b52e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b532:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b53a:	ee17 2a90 	vmov	r2, s15
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b542:	4b13      	ldr	r3, [pc, #76]	@ (800b590 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b546:	0e1b      	lsrs	r3, r3, #24
 800b548:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b54c:	ee07 3a90 	vmov	s15, r3
 800b550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b554:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b558:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b55c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b560:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b564:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b568:	ee17 2a90 	vmov	r2, s15
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b570:	e008      	b.n	800b584 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2200      	movs	r2, #0
 800b576:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2200      	movs	r2, #0
 800b57c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2200      	movs	r2, #0
 800b582:	609a      	str	r2, [r3, #8]
}
 800b584:	bf00      	nop
 800b586:	3724      	adds	r7, #36	@ 0x24
 800b588:	46bd      	mov	sp, r7
 800b58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58e:	4770      	bx	lr
 800b590:	58024400 	.word	0x58024400
 800b594:	03d09000 	.word	0x03d09000
 800b598:	46000000 	.word	0x46000000
 800b59c:	4c742400 	.word	0x4c742400
 800b5a0:	4a742400 	.word	0x4a742400
 800b5a4:	4bbebc20 	.word	0x4bbebc20

0800b5a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b084      	sub	sp, #16
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
 800b5b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b5b6:	4b53      	ldr	r3, [pc, #332]	@ (800b704 <RCCEx_PLL2_Config+0x15c>)
 800b5b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5ba:	f003 0303 	and.w	r3, r3, #3
 800b5be:	2b03      	cmp	r3, #3
 800b5c0:	d101      	bne.n	800b5c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	e099      	b.n	800b6fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b5c6:	4b4f      	ldr	r3, [pc, #316]	@ (800b704 <RCCEx_PLL2_Config+0x15c>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	4a4e      	ldr	r2, [pc, #312]	@ (800b704 <RCCEx_PLL2_Config+0x15c>)
 800b5cc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b5d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b5d2:	f7f7 fcad 	bl	8002f30 <HAL_GetTick>
 800b5d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b5d8:	e008      	b.n	800b5ec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b5da:	f7f7 fca9 	bl	8002f30 <HAL_GetTick>
 800b5de:	4602      	mov	r2, r0
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	1ad3      	subs	r3, r2, r3
 800b5e4:	2b02      	cmp	r3, #2
 800b5e6:	d901      	bls.n	800b5ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b5e8:	2303      	movs	r3, #3
 800b5ea:	e086      	b.n	800b6fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b5ec:	4b45      	ldr	r3, [pc, #276]	@ (800b704 <RCCEx_PLL2_Config+0x15c>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d1f0      	bne.n	800b5da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b5f8:	4b42      	ldr	r3, [pc, #264]	@ (800b704 <RCCEx_PLL2_Config+0x15c>)
 800b5fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5fc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	031b      	lsls	r3, r3, #12
 800b606:	493f      	ldr	r1, [pc, #252]	@ (800b704 <RCCEx_PLL2_Config+0x15c>)
 800b608:	4313      	orrs	r3, r2
 800b60a:	628b      	str	r3, [r1, #40]	@ 0x28
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	685b      	ldr	r3, [r3, #4]
 800b610:	3b01      	subs	r3, #1
 800b612:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	689b      	ldr	r3, [r3, #8]
 800b61a:	3b01      	subs	r3, #1
 800b61c:	025b      	lsls	r3, r3, #9
 800b61e:	b29b      	uxth	r3, r3
 800b620:	431a      	orrs	r2, r3
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	68db      	ldr	r3, [r3, #12]
 800b626:	3b01      	subs	r3, #1
 800b628:	041b      	lsls	r3, r3, #16
 800b62a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b62e:	431a      	orrs	r2, r3
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	691b      	ldr	r3, [r3, #16]
 800b634:	3b01      	subs	r3, #1
 800b636:	061b      	lsls	r3, r3, #24
 800b638:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b63c:	4931      	ldr	r1, [pc, #196]	@ (800b704 <RCCEx_PLL2_Config+0x15c>)
 800b63e:	4313      	orrs	r3, r2
 800b640:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b642:	4b30      	ldr	r3, [pc, #192]	@ (800b704 <RCCEx_PLL2_Config+0x15c>)
 800b644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b646:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	695b      	ldr	r3, [r3, #20]
 800b64e:	492d      	ldr	r1, [pc, #180]	@ (800b704 <RCCEx_PLL2_Config+0x15c>)
 800b650:	4313      	orrs	r3, r2
 800b652:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b654:	4b2b      	ldr	r3, [pc, #172]	@ (800b704 <RCCEx_PLL2_Config+0x15c>)
 800b656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b658:	f023 0220 	bic.w	r2, r3, #32
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	699b      	ldr	r3, [r3, #24]
 800b660:	4928      	ldr	r1, [pc, #160]	@ (800b704 <RCCEx_PLL2_Config+0x15c>)
 800b662:	4313      	orrs	r3, r2
 800b664:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b666:	4b27      	ldr	r3, [pc, #156]	@ (800b704 <RCCEx_PLL2_Config+0x15c>)
 800b668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b66a:	4a26      	ldr	r2, [pc, #152]	@ (800b704 <RCCEx_PLL2_Config+0x15c>)
 800b66c:	f023 0310 	bic.w	r3, r3, #16
 800b670:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b672:	4b24      	ldr	r3, [pc, #144]	@ (800b704 <RCCEx_PLL2_Config+0x15c>)
 800b674:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b676:	4b24      	ldr	r3, [pc, #144]	@ (800b708 <RCCEx_PLL2_Config+0x160>)
 800b678:	4013      	ands	r3, r2
 800b67a:	687a      	ldr	r2, [r7, #4]
 800b67c:	69d2      	ldr	r2, [r2, #28]
 800b67e:	00d2      	lsls	r2, r2, #3
 800b680:	4920      	ldr	r1, [pc, #128]	@ (800b704 <RCCEx_PLL2_Config+0x15c>)
 800b682:	4313      	orrs	r3, r2
 800b684:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b686:	4b1f      	ldr	r3, [pc, #124]	@ (800b704 <RCCEx_PLL2_Config+0x15c>)
 800b688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b68a:	4a1e      	ldr	r2, [pc, #120]	@ (800b704 <RCCEx_PLL2_Config+0x15c>)
 800b68c:	f043 0310 	orr.w	r3, r3, #16
 800b690:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d106      	bne.n	800b6a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b698:	4b1a      	ldr	r3, [pc, #104]	@ (800b704 <RCCEx_PLL2_Config+0x15c>)
 800b69a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b69c:	4a19      	ldr	r2, [pc, #100]	@ (800b704 <RCCEx_PLL2_Config+0x15c>)
 800b69e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b6a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b6a4:	e00f      	b.n	800b6c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	2b01      	cmp	r3, #1
 800b6aa:	d106      	bne.n	800b6ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b6ac:	4b15      	ldr	r3, [pc, #84]	@ (800b704 <RCCEx_PLL2_Config+0x15c>)
 800b6ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6b0:	4a14      	ldr	r2, [pc, #80]	@ (800b704 <RCCEx_PLL2_Config+0x15c>)
 800b6b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b6b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b6b8:	e005      	b.n	800b6c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b6ba:	4b12      	ldr	r3, [pc, #72]	@ (800b704 <RCCEx_PLL2_Config+0x15c>)
 800b6bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6be:	4a11      	ldr	r2, [pc, #68]	@ (800b704 <RCCEx_PLL2_Config+0x15c>)
 800b6c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b6c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b6c6:	4b0f      	ldr	r3, [pc, #60]	@ (800b704 <RCCEx_PLL2_Config+0x15c>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	4a0e      	ldr	r2, [pc, #56]	@ (800b704 <RCCEx_PLL2_Config+0x15c>)
 800b6cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b6d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6d2:	f7f7 fc2d 	bl	8002f30 <HAL_GetTick>
 800b6d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b6d8:	e008      	b.n	800b6ec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b6da:	f7f7 fc29 	bl	8002f30 <HAL_GetTick>
 800b6de:	4602      	mov	r2, r0
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	1ad3      	subs	r3, r2, r3
 800b6e4:	2b02      	cmp	r3, #2
 800b6e6:	d901      	bls.n	800b6ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b6e8:	2303      	movs	r3, #3
 800b6ea:	e006      	b.n	800b6fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b6ec:	4b05      	ldr	r3, [pc, #20]	@ (800b704 <RCCEx_PLL2_Config+0x15c>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d0f0      	beq.n	800b6da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b6f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3710      	adds	r7, #16
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop
 800b704:	58024400 	.word	0x58024400
 800b708:	ffff0007 	.word	0xffff0007

0800b70c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b084      	sub	sp, #16
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b716:	2300      	movs	r3, #0
 800b718:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b71a:	4b53      	ldr	r3, [pc, #332]	@ (800b868 <RCCEx_PLL3_Config+0x15c>)
 800b71c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b71e:	f003 0303 	and.w	r3, r3, #3
 800b722:	2b03      	cmp	r3, #3
 800b724:	d101      	bne.n	800b72a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b726:	2301      	movs	r3, #1
 800b728:	e099      	b.n	800b85e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b72a:	4b4f      	ldr	r3, [pc, #316]	@ (800b868 <RCCEx_PLL3_Config+0x15c>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	4a4e      	ldr	r2, [pc, #312]	@ (800b868 <RCCEx_PLL3_Config+0x15c>)
 800b730:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b734:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b736:	f7f7 fbfb 	bl	8002f30 <HAL_GetTick>
 800b73a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b73c:	e008      	b.n	800b750 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b73e:	f7f7 fbf7 	bl	8002f30 <HAL_GetTick>
 800b742:	4602      	mov	r2, r0
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	1ad3      	subs	r3, r2, r3
 800b748:	2b02      	cmp	r3, #2
 800b74a:	d901      	bls.n	800b750 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b74c:	2303      	movs	r3, #3
 800b74e:	e086      	b.n	800b85e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b750:	4b45      	ldr	r3, [pc, #276]	@ (800b868 <RCCEx_PLL3_Config+0x15c>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d1f0      	bne.n	800b73e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b75c:	4b42      	ldr	r3, [pc, #264]	@ (800b868 <RCCEx_PLL3_Config+0x15c>)
 800b75e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b760:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	051b      	lsls	r3, r3, #20
 800b76a:	493f      	ldr	r1, [pc, #252]	@ (800b868 <RCCEx_PLL3_Config+0x15c>)
 800b76c:	4313      	orrs	r3, r2
 800b76e:	628b      	str	r3, [r1, #40]	@ 0x28
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	3b01      	subs	r3, #1
 800b776:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	689b      	ldr	r3, [r3, #8]
 800b77e:	3b01      	subs	r3, #1
 800b780:	025b      	lsls	r3, r3, #9
 800b782:	b29b      	uxth	r3, r3
 800b784:	431a      	orrs	r2, r3
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	68db      	ldr	r3, [r3, #12]
 800b78a:	3b01      	subs	r3, #1
 800b78c:	041b      	lsls	r3, r3, #16
 800b78e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b792:	431a      	orrs	r2, r3
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	691b      	ldr	r3, [r3, #16]
 800b798:	3b01      	subs	r3, #1
 800b79a:	061b      	lsls	r3, r3, #24
 800b79c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b7a0:	4931      	ldr	r1, [pc, #196]	@ (800b868 <RCCEx_PLL3_Config+0x15c>)
 800b7a2:	4313      	orrs	r3, r2
 800b7a4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b7a6:	4b30      	ldr	r3, [pc, #192]	@ (800b868 <RCCEx_PLL3_Config+0x15c>)
 800b7a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	695b      	ldr	r3, [r3, #20]
 800b7b2:	492d      	ldr	r1, [pc, #180]	@ (800b868 <RCCEx_PLL3_Config+0x15c>)
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b7b8:	4b2b      	ldr	r3, [pc, #172]	@ (800b868 <RCCEx_PLL3_Config+0x15c>)
 800b7ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7bc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	699b      	ldr	r3, [r3, #24]
 800b7c4:	4928      	ldr	r1, [pc, #160]	@ (800b868 <RCCEx_PLL3_Config+0x15c>)
 800b7c6:	4313      	orrs	r3, r2
 800b7c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b7ca:	4b27      	ldr	r3, [pc, #156]	@ (800b868 <RCCEx_PLL3_Config+0x15c>)
 800b7cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7ce:	4a26      	ldr	r2, [pc, #152]	@ (800b868 <RCCEx_PLL3_Config+0x15c>)
 800b7d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b7d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b7d6:	4b24      	ldr	r3, [pc, #144]	@ (800b868 <RCCEx_PLL3_Config+0x15c>)
 800b7d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b7da:	4b24      	ldr	r3, [pc, #144]	@ (800b86c <RCCEx_PLL3_Config+0x160>)
 800b7dc:	4013      	ands	r3, r2
 800b7de:	687a      	ldr	r2, [r7, #4]
 800b7e0:	69d2      	ldr	r2, [r2, #28]
 800b7e2:	00d2      	lsls	r2, r2, #3
 800b7e4:	4920      	ldr	r1, [pc, #128]	@ (800b868 <RCCEx_PLL3_Config+0x15c>)
 800b7e6:	4313      	orrs	r3, r2
 800b7e8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b7ea:	4b1f      	ldr	r3, [pc, #124]	@ (800b868 <RCCEx_PLL3_Config+0x15c>)
 800b7ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7ee:	4a1e      	ldr	r2, [pc, #120]	@ (800b868 <RCCEx_PLL3_Config+0x15c>)
 800b7f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b7f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d106      	bne.n	800b80a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b7fc:	4b1a      	ldr	r3, [pc, #104]	@ (800b868 <RCCEx_PLL3_Config+0x15c>)
 800b7fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b800:	4a19      	ldr	r2, [pc, #100]	@ (800b868 <RCCEx_PLL3_Config+0x15c>)
 800b802:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b806:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b808:	e00f      	b.n	800b82a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	2b01      	cmp	r3, #1
 800b80e:	d106      	bne.n	800b81e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b810:	4b15      	ldr	r3, [pc, #84]	@ (800b868 <RCCEx_PLL3_Config+0x15c>)
 800b812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b814:	4a14      	ldr	r2, [pc, #80]	@ (800b868 <RCCEx_PLL3_Config+0x15c>)
 800b816:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b81a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b81c:	e005      	b.n	800b82a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b81e:	4b12      	ldr	r3, [pc, #72]	@ (800b868 <RCCEx_PLL3_Config+0x15c>)
 800b820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b822:	4a11      	ldr	r2, [pc, #68]	@ (800b868 <RCCEx_PLL3_Config+0x15c>)
 800b824:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b828:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b82a:	4b0f      	ldr	r3, [pc, #60]	@ (800b868 <RCCEx_PLL3_Config+0x15c>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	4a0e      	ldr	r2, [pc, #56]	@ (800b868 <RCCEx_PLL3_Config+0x15c>)
 800b830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b834:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b836:	f7f7 fb7b 	bl	8002f30 <HAL_GetTick>
 800b83a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b83c:	e008      	b.n	800b850 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b83e:	f7f7 fb77 	bl	8002f30 <HAL_GetTick>
 800b842:	4602      	mov	r2, r0
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	1ad3      	subs	r3, r2, r3
 800b848:	2b02      	cmp	r3, #2
 800b84a:	d901      	bls.n	800b850 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b84c:	2303      	movs	r3, #3
 800b84e:	e006      	b.n	800b85e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b850:	4b05      	ldr	r3, [pc, #20]	@ (800b868 <RCCEx_PLL3_Config+0x15c>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d0f0      	beq.n	800b83e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b85c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3710      	adds	r7, #16
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}
 800b866:	bf00      	nop
 800b868:	58024400 	.word	0x58024400
 800b86c:	ffff0007 	.word	0xffff0007

0800b870 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b084      	sub	sp, #16
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d101      	bne.n	800b882 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b87e:	2301      	movs	r3, #1
 800b880:	e10f      	b.n	800baa2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2200      	movs	r2, #0
 800b886:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	4a87      	ldr	r2, [pc, #540]	@ (800baac <HAL_SPI_Init+0x23c>)
 800b88e:	4293      	cmp	r3, r2
 800b890:	d00f      	beq.n	800b8b2 <HAL_SPI_Init+0x42>
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	4a86      	ldr	r2, [pc, #536]	@ (800bab0 <HAL_SPI_Init+0x240>)
 800b898:	4293      	cmp	r3, r2
 800b89a:	d00a      	beq.n	800b8b2 <HAL_SPI_Init+0x42>
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	4a84      	ldr	r2, [pc, #528]	@ (800bab4 <HAL_SPI_Init+0x244>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d005      	beq.n	800b8b2 <HAL_SPI_Init+0x42>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	68db      	ldr	r3, [r3, #12]
 800b8aa:	2b0f      	cmp	r3, #15
 800b8ac:	d901      	bls.n	800b8b2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	e0f7      	b.n	800baa2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f000 fc12 	bl	800c0dc <SPI_GetPacketSize>
 800b8b8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	4a7b      	ldr	r2, [pc, #492]	@ (800baac <HAL_SPI_Init+0x23c>)
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	d00c      	beq.n	800b8de <HAL_SPI_Init+0x6e>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	4a79      	ldr	r2, [pc, #484]	@ (800bab0 <HAL_SPI_Init+0x240>)
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d007      	beq.n	800b8de <HAL_SPI_Init+0x6e>
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	4a78      	ldr	r2, [pc, #480]	@ (800bab4 <HAL_SPI_Init+0x244>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d002      	beq.n	800b8de <HAL_SPI_Init+0x6e>
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	2b08      	cmp	r3, #8
 800b8dc:	d811      	bhi.n	800b902 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b8e2:	4a72      	ldr	r2, [pc, #456]	@ (800baac <HAL_SPI_Init+0x23c>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d009      	beq.n	800b8fc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	4a70      	ldr	r2, [pc, #448]	@ (800bab0 <HAL_SPI_Init+0x240>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d004      	beq.n	800b8fc <HAL_SPI_Init+0x8c>
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	4a6f      	ldr	r2, [pc, #444]	@ (800bab4 <HAL_SPI_Init+0x244>)
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	d104      	bne.n	800b906 <HAL_SPI_Init+0x96>
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	2b10      	cmp	r3, #16
 800b900:	d901      	bls.n	800b906 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b902:	2301      	movs	r3, #1
 800b904:	e0cd      	b.n	800baa2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b90c:	b2db      	uxtb	r3, r3
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d106      	bne.n	800b920 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2200      	movs	r2, #0
 800b916:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f7f5 fea4 	bl	8001668 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2202      	movs	r2, #2
 800b924:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	681a      	ldr	r2, [r3, #0]
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f022 0201 	bic.w	r2, r2, #1
 800b936:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	689b      	ldr	r3, [r3, #8]
 800b93e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b942:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	699b      	ldr	r3, [r3, #24]
 800b948:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b94c:	d119      	bne.n	800b982 <HAL_SPI_Init+0x112>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	685b      	ldr	r3, [r3, #4]
 800b952:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b956:	d103      	bne.n	800b960 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d008      	beq.n	800b972 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b964:	2b00      	cmp	r3, #0
 800b966:	d10c      	bne.n	800b982 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b96c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b970:	d107      	bne.n	800b982 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	681a      	ldr	r2, [r3, #0]
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b980:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	685b      	ldr	r3, [r3, #4]
 800b986:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d00f      	beq.n	800b9ae <HAL_SPI_Init+0x13e>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	68db      	ldr	r3, [r3, #12]
 800b992:	2b06      	cmp	r3, #6
 800b994:	d90b      	bls.n	800b9ae <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	430a      	orrs	r2, r1
 800b9aa:	601a      	str	r2, [r3, #0]
 800b9ac:	e007      	b.n	800b9be <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	681a      	ldr	r2, [r3, #0]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b9bc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	69da      	ldr	r2, [r3, #28]
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9c6:	431a      	orrs	r2, r3
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	431a      	orrs	r2, r3
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9d0:	ea42 0103 	orr.w	r1, r2, r3
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	68da      	ldr	r2, [r3, #12]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	430a      	orrs	r2, r1
 800b9de:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9e8:	431a      	orrs	r2, r3
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9ee:	431a      	orrs	r2, r3
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	699b      	ldr	r3, [r3, #24]
 800b9f4:	431a      	orrs	r2, r3
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	691b      	ldr	r3, [r3, #16]
 800b9fa:	431a      	orrs	r2, r3
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	695b      	ldr	r3, [r3, #20]
 800ba00:	431a      	orrs	r2, r3
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6a1b      	ldr	r3, [r3, #32]
 800ba06:	431a      	orrs	r2, r3
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	685b      	ldr	r3, [r3, #4]
 800ba0c:	431a      	orrs	r2, r3
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba12:	431a      	orrs	r2, r3
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	689b      	ldr	r3, [r3, #8]
 800ba18:	431a      	orrs	r2, r3
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ba1e:	ea42 0103 	orr.w	r1, r2, r3
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	430a      	orrs	r2, r1
 800ba2c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	685b      	ldr	r3, [r3, #4]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d113      	bne.n	800ba5e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	689b      	ldr	r3, [r3, #8]
 800ba3c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ba48:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	689b      	ldr	r3, [r3, #8]
 800ba50:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ba5c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f022 0201 	bic.w	r2, r2, #1
 800ba6c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d00a      	beq.n	800ba90 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	68db      	ldr	r3, [r3, #12]
 800ba80:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	430a      	orrs	r2, r1
 800ba8e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2200      	movs	r2, #0
 800ba94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800baa0:	2300      	movs	r3, #0
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3710      	adds	r7, #16
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}
 800baaa:	bf00      	nop
 800baac:	40013000 	.word	0x40013000
 800bab0:	40003800 	.word	0x40003800
 800bab4:	40003c00 	.word	0x40003c00

0800bab8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b088      	sub	sp, #32
 800babc:	af00      	add	r7, sp, #0
 800babe:	60f8      	str	r0, [r7, #12]
 800bac0:	60b9      	str	r1, [r7, #8]
 800bac2:	603b      	str	r3, [r7, #0]
 800bac4:	4613      	mov	r3, r2
 800bac6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bacc:	095b      	lsrs	r3, r3, #5
 800bace:	b29b      	uxth	r3, r3
 800bad0:	3301      	adds	r3, #1
 800bad2:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	3330      	adds	r3, #48	@ 0x30
 800bada:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800badc:	f7f7 fa28 	bl	8002f30 <HAL_GetTick>
 800bae0:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bae8:	b2db      	uxtb	r3, r3
 800baea:	2b01      	cmp	r3, #1
 800baec:	d001      	beq.n	800baf2 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800baee:	2302      	movs	r3, #2
 800baf0:	e250      	b.n	800bf94 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d002      	beq.n	800bafe <HAL_SPI_Receive+0x46>
 800baf8:	88fb      	ldrh	r3, [r7, #6]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d101      	bne.n	800bb02 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800bafe:	2301      	movs	r3, #1
 800bb00:	e248      	b.n	800bf94 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800bb08:	2b01      	cmp	r3, #1
 800bb0a:	d101      	bne.n	800bb10 <HAL_SPI_Receive+0x58>
 800bb0c:	2302      	movs	r3, #2
 800bb0e:	e241      	b.n	800bf94 <HAL_SPI_Receive+0x4dc>
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	2201      	movs	r2, #1
 800bb14:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	2204      	movs	r2, #4
 800bb1c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	2200      	movs	r2, #0
 800bb24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	68ba      	ldr	r2, [r7, #8]
 800bb2c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	88fa      	ldrh	r2, [r7, #6]
 800bb32:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	88fa      	ldrh	r2, [r7, #6]
 800bb3a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2200      	movs	r2, #0
 800bb42:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2200      	movs	r2, #0
 800bb48:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2200      	movs	r2, #0
 800bb58:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	689b      	ldr	r3, [r3, #8]
 800bb64:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800bb68:	d108      	bne.n	800bb7c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	681a      	ldr	r2, [r3, #0]
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bb78:	601a      	str	r2, [r3, #0]
 800bb7a:	e009      	b.n	800bb90 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	68db      	ldr	r3, [r3, #12]
 800bb82:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800bb8e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	685a      	ldr	r2, [r3, #4]
 800bb96:	4b95      	ldr	r3, [pc, #596]	@ (800bdec <HAL_SPI_Receive+0x334>)
 800bb98:	4013      	ands	r3, r2
 800bb9a:	88f9      	ldrh	r1, [r7, #6]
 800bb9c:	68fa      	ldr	r2, [r7, #12]
 800bb9e:	6812      	ldr	r2, [r2, #0]
 800bba0:	430b      	orrs	r3, r1
 800bba2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	681a      	ldr	r2, [r3, #0]
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f042 0201 	orr.w	r2, r2, #1
 800bbb2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	685b      	ldr	r3, [r3, #4]
 800bbb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bbbc:	d107      	bne.n	800bbce <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	681a      	ldr	r2, [r3, #0]
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bbcc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	68db      	ldr	r3, [r3, #12]
 800bbd2:	2b0f      	cmp	r3, #15
 800bbd4:	d96c      	bls.n	800bcb0 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bbd6:	e064      	b.n	800bca2 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	695b      	ldr	r3, [r3, #20]
 800bbde:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	695b      	ldr	r3, [r3, #20]
 800bbe6:	f003 0301 	and.w	r3, r3, #1
 800bbea:	2b01      	cmp	r3, #1
 800bbec:	d114      	bne.n	800bc18 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681a      	ldr	r2, [r3, #0]
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bbf6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800bbf8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bbfe:	1d1a      	adds	r2, r3, #4
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bc0a:	b29b      	uxth	r3, r3
 800bc0c:	3b01      	subs	r3, #1
 800bc0e:	b29a      	uxth	r2, r3
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bc16:	e044      	b.n	800bca2 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bc1e:	b29b      	uxth	r3, r3
 800bc20:	8bfa      	ldrh	r2, [r7, #30]
 800bc22:	429a      	cmp	r2, r3
 800bc24:	d919      	bls.n	800bc5a <HAL_SPI_Receive+0x1a2>
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d014      	beq.n	800bc5a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681a      	ldr	r2, [r3, #0]
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc38:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800bc3a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc40:	1d1a      	adds	r2, r3, #4
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bc4c:	b29b      	uxth	r3, r3
 800bc4e:	3b01      	subs	r3, #1
 800bc50:	b29a      	uxth	r2, r3
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bc58:	e023      	b.n	800bca2 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bc5a:	f7f7 f969 	bl	8002f30 <HAL_GetTick>
 800bc5e:	4602      	mov	r2, r0
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	1ad3      	subs	r3, r2, r3
 800bc64:	683a      	ldr	r2, [r7, #0]
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d803      	bhi.n	800bc72 <HAL_SPI_Receive+0x1ba>
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc70:	d102      	bne.n	800bc78 <HAL_SPI_Receive+0x1c0>
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d114      	bne.n	800bca2 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bc78:	68f8      	ldr	r0, [r7, #12]
 800bc7a:	f000 f98f 	bl	800bf9c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc84:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	2201      	movs	r2, #1
 800bc92:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bc9e:	2303      	movs	r3, #3
 800bca0:	e178      	b.n	800bf94 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bca8:	b29b      	uxth	r3, r3
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d194      	bne.n	800bbd8 <HAL_SPI_Receive+0x120>
 800bcae:	e15e      	b.n	800bf6e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	68db      	ldr	r3, [r3, #12]
 800bcb4:	2b07      	cmp	r3, #7
 800bcb6:	f240 8153 	bls.w	800bf60 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bcba:	e08f      	b.n	800bddc <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	695b      	ldr	r3, [r3, #20]
 800bcc2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	695b      	ldr	r3, [r3, #20]
 800bcca:	f003 0301 	and.w	r3, r3, #1
 800bcce:	2b01      	cmp	r3, #1
 800bcd0:	d114      	bne.n	800bcfc <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bcd6:	69ba      	ldr	r2, [r7, #24]
 800bcd8:	8812      	ldrh	r2, [r2, #0]
 800bcda:	b292      	uxth	r2, r2
 800bcdc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bce2:	1c9a      	adds	r2, r3, #2
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bcee:	b29b      	uxth	r3, r3
 800bcf0:	3b01      	subs	r3, #1
 800bcf2:	b29a      	uxth	r2, r3
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bcfa:	e06f      	b.n	800bddc <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bd02:	b29b      	uxth	r3, r3
 800bd04:	8bfa      	ldrh	r2, [r7, #30]
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d924      	bls.n	800bd54 <HAL_SPI_Receive+0x29c>
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d01f      	beq.n	800bd54 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd18:	69ba      	ldr	r2, [r7, #24]
 800bd1a:	8812      	ldrh	r2, [r2, #0]
 800bd1c:	b292      	uxth	r2, r2
 800bd1e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd24:	1c9a      	adds	r2, r3, #2
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd2e:	69ba      	ldr	r2, [r7, #24]
 800bd30:	8812      	ldrh	r2, [r2, #0]
 800bd32:	b292      	uxth	r2, r2
 800bd34:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd3a:	1c9a      	adds	r2, r3, #2
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bd46:	b29b      	uxth	r3, r3
 800bd48:	3b02      	subs	r3, #2
 800bd4a:	b29a      	uxth	r2, r3
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bd52:	e043      	b.n	800bddc <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bd5a:	b29b      	uxth	r3, r3
 800bd5c:	2b01      	cmp	r3, #1
 800bd5e:	d119      	bne.n	800bd94 <HAL_SPI_Receive+0x2dc>
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d014      	beq.n	800bd94 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd6e:	69ba      	ldr	r2, [r7, #24]
 800bd70:	8812      	ldrh	r2, [r2, #0]
 800bd72:	b292      	uxth	r2, r2
 800bd74:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd7a:	1c9a      	adds	r2, r3, #2
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bd86:	b29b      	uxth	r3, r3
 800bd88:	3b01      	subs	r3, #1
 800bd8a:	b29a      	uxth	r2, r3
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bd92:	e023      	b.n	800bddc <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd94:	f7f7 f8cc 	bl	8002f30 <HAL_GetTick>
 800bd98:	4602      	mov	r2, r0
 800bd9a:	697b      	ldr	r3, [r7, #20]
 800bd9c:	1ad3      	subs	r3, r2, r3
 800bd9e:	683a      	ldr	r2, [r7, #0]
 800bda0:	429a      	cmp	r2, r3
 800bda2:	d803      	bhi.n	800bdac <HAL_SPI_Receive+0x2f4>
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdaa:	d102      	bne.n	800bdb2 <HAL_SPI_Receive+0x2fa>
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d114      	bne.n	800bddc <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bdb2:	68f8      	ldr	r0, [r7, #12]
 800bdb4:	f000 f8f2 	bl	800bf9c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bdbe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	2201      	movs	r2, #1
 800bdcc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bdd8:	2303      	movs	r3, #3
 800bdda:	e0db      	b.n	800bf94 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bde2:	b29b      	uxth	r3, r3
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	f47f af69 	bne.w	800bcbc <HAL_SPI_Receive+0x204>
 800bdea:	e0c0      	b.n	800bf6e <HAL_SPI_Receive+0x4b6>
 800bdec:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	695b      	ldr	r3, [r3, #20]
 800bdf6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	695b      	ldr	r3, [r3, #20]
 800bdfe:	f003 0301 	and.w	r3, r3, #1
 800be02:	2b01      	cmp	r3, #1
 800be04:	d117      	bne.n	800be36 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be12:	7812      	ldrb	r2, [r2, #0]
 800be14:	b2d2      	uxtb	r2, r2
 800be16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be1c:	1c5a      	adds	r2, r3, #1
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800be28:	b29b      	uxth	r3, r3
 800be2a:	3b01      	subs	r3, #1
 800be2c:	b29a      	uxth	r2, r3
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800be34:	e094      	b.n	800bf60 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800be3c:	b29b      	uxth	r3, r3
 800be3e:	8bfa      	ldrh	r2, [r7, #30]
 800be40:	429a      	cmp	r2, r3
 800be42:	d946      	bls.n	800bed2 <HAL_SPI_Receive+0x41a>
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d041      	beq.n	800bed2 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be5a:	7812      	ldrb	r2, [r2, #0]
 800be5c:	b2d2      	uxtb	r2, r2
 800be5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be64:	1c5a      	adds	r2, r3, #1
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be76:	7812      	ldrb	r2, [r2, #0]
 800be78:	b2d2      	uxtb	r2, r2
 800be7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be80:	1c5a      	adds	r2, r3, #1
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be92:	7812      	ldrb	r2, [r2, #0]
 800be94:	b2d2      	uxtb	r2, r2
 800be96:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be9c:	1c5a      	adds	r2, r3, #1
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800beae:	7812      	ldrb	r2, [r2, #0]
 800beb0:	b2d2      	uxtb	r2, r2
 800beb2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800beb8:	1c5a      	adds	r2, r3, #1
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bec4:	b29b      	uxth	r3, r3
 800bec6:	3b04      	subs	r3, #4
 800bec8:	b29a      	uxth	r2, r3
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bed0:	e046      	b.n	800bf60 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bed8:	b29b      	uxth	r3, r3
 800beda:	2b03      	cmp	r3, #3
 800bedc:	d81c      	bhi.n	800bf18 <HAL_SPI_Receive+0x460>
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d017      	beq.n	800bf18 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bef4:	7812      	ldrb	r2, [r2, #0]
 800bef6:	b2d2      	uxtb	r2, r2
 800bef8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800befe:	1c5a      	adds	r2, r3, #1
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bf0a:	b29b      	uxth	r3, r3
 800bf0c:	3b01      	subs	r3, #1
 800bf0e:	b29a      	uxth	r2, r3
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bf16:	e023      	b.n	800bf60 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf18:	f7f7 f80a 	bl	8002f30 <HAL_GetTick>
 800bf1c:	4602      	mov	r2, r0
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	1ad3      	subs	r3, r2, r3
 800bf22:	683a      	ldr	r2, [r7, #0]
 800bf24:	429a      	cmp	r2, r3
 800bf26:	d803      	bhi.n	800bf30 <HAL_SPI_Receive+0x478>
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf2e:	d102      	bne.n	800bf36 <HAL_SPI_Receive+0x47e>
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d114      	bne.n	800bf60 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bf36:	68f8      	ldr	r0, [r7, #12]
 800bf38:	f000 f830 	bl	800bf9c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf42:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	2201      	movs	r2, #1
 800bf50:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2200      	movs	r2, #0
 800bf58:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bf5c:	2303      	movs	r3, #3
 800bf5e:	e019      	b.n	800bf94 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bf66:	b29b      	uxth	r3, r3
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	f47f af41 	bne.w	800bdf0 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bf6e:	68f8      	ldr	r0, [r7, #12]
 800bf70:	f000 f814 	bl	800bf9c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	2201      	movs	r2, #1
 800bf78:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d001      	beq.n	800bf92 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800bf8e:	2301      	movs	r3, #1
 800bf90:	e000      	b.n	800bf94 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800bf92:	2300      	movs	r3, #0
  }
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	3720      	adds	r7, #32
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}

0800bf9c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b085      	sub	sp, #20
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	695b      	ldr	r3, [r3, #20]
 800bfaa:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	699a      	ldr	r2, [r3, #24]
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f042 0208 	orr.w	r2, r2, #8
 800bfba:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	699a      	ldr	r2, [r3, #24]
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f042 0210 	orr.w	r2, r2, #16
 800bfca:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f022 0201 	bic.w	r2, r2, #1
 800bfda:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	6919      	ldr	r1, [r3, #16]
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681a      	ldr	r2, [r3, #0]
 800bfe6:	4b3c      	ldr	r3, [pc, #240]	@ (800c0d8 <SPI_CloseTransfer+0x13c>)
 800bfe8:	400b      	ands	r3, r1
 800bfea:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	689a      	ldr	r2, [r3, #8]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800bffa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c002:	b2db      	uxtb	r3, r3
 800c004:	2b04      	cmp	r3, #4
 800c006:	d014      	beq.n	800c032 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	f003 0320 	and.w	r3, r3, #32
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d00f      	beq.n	800c032 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c018:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	699a      	ldr	r2, [r3, #24]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	f042 0220 	orr.w	r2, r2, #32
 800c030:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c038:	b2db      	uxtb	r3, r3
 800c03a:	2b03      	cmp	r3, #3
 800c03c:	d014      	beq.n	800c068 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c044:	2b00      	cmp	r3, #0
 800c046:	d00f      	beq.n	800c068 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c04e:	f043 0204 	orr.w	r2, r3, #4
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	699a      	ldr	r2, [r3, #24]
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c066:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d00f      	beq.n	800c092 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c078:	f043 0201 	orr.w	r2, r3, #1
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	699a      	ldr	r2, [r3, #24]
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c090:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d00f      	beq.n	800c0bc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c0a2:	f043 0208 	orr.w	r2, r3, #8
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	699a      	ldr	r2, [r3, #24]
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c0ba:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800c0cc:	bf00      	nop
 800c0ce:	3714      	adds	r7, #20
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d6:	4770      	bx	lr
 800c0d8:	fffffc90 	.word	0xfffffc90

0800c0dc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b085      	sub	sp, #20
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0e8:	095b      	lsrs	r3, r3, #5
 800c0ea:	3301      	adds	r3, #1
 800c0ec:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	68db      	ldr	r3, [r3, #12]
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	3307      	adds	r3, #7
 800c0fa:	08db      	lsrs	r3, r3, #3
 800c0fc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	68fa      	ldr	r2, [r7, #12]
 800c102:	fb02 f303 	mul.w	r3, r2, r3
}
 800c106:	4618      	mov	r0, r3
 800c108:	3714      	adds	r7, #20
 800c10a:	46bd      	mov	sp, r7
 800c10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c110:	4770      	bx	lr

0800c112 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c112:	b580      	push	{r7, lr}
 800c114:	b082      	sub	sp, #8
 800c116:	af00      	add	r7, sp, #0
 800c118:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d101      	bne.n	800c124 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c120:	2301      	movs	r3, #1
 800c122:	e049      	b.n	800c1b8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c12a:	b2db      	uxtb	r3, r3
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d106      	bne.n	800c13e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2200      	movs	r2, #0
 800c134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f7f5 fafd 	bl	8001738 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2202      	movs	r2, #2
 800c142:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681a      	ldr	r2, [r3, #0]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	3304      	adds	r3, #4
 800c14e:	4619      	mov	r1, r3
 800c150:	4610      	mov	r0, r2
 800c152:	f000 fad5 	bl	800c700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2201      	movs	r2, #1
 800c15a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2201      	movs	r2, #1
 800c162:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2201      	movs	r2, #1
 800c16a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2201      	movs	r2, #1
 800c172:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2201      	movs	r2, #1
 800c17a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2201      	movs	r2, #1
 800c182:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2201      	movs	r2, #1
 800c18a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2201      	movs	r2, #1
 800c192:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2201      	movs	r2, #1
 800c19a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2201      	movs	r2, #1
 800c1a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2201      	movs	r2, #1
 800c1aa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2201      	movs	r2, #1
 800c1b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c1b6:	2300      	movs	r3, #0
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3708      	adds	r7, #8
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}

0800c1c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c1c0:	b480      	push	{r7}
 800c1c2:	b085      	sub	sp, #20
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c1ce:	b2db      	uxtb	r3, r3
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	d001      	beq.n	800c1d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	e054      	b.n	800c282 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2202      	movs	r2, #2
 800c1dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	68da      	ldr	r2, [r3, #12]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f042 0201 	orr.w	r2, r2, #1
 800c1ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	4a26      	ldr	r2, [pc, #152]	@ (800c290 <HAL_TIM_Base_Start_IT+0xd0>)
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	d022      	beq.n	800c240 <HAL_TIM_Base_Start_IT+0x80>
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c202:	d01d      	beq.n	800c240 <HAL_TIM_Base_Start_IT+0x80>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	4a22      	ldr	r2, [pc, #136]	@ (800c294 <HAL_TIM_Base_Start_IT+0xd4>)
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d018      	beq.n	800c240 <HAL_TIM_Base_Start_IT+0x80>
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	4a21      	ldr	r2, [pc, #132]	@ (800c298 <HAL_TIM_Base_Start_IT+0xd8>)
 800c214:	4293      	cmp	r3, r2
 800c216:	d013      	beq.n	800c240 <HAL_TIM_Base_Start_IT+0x80>
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	4a1f      	ldr	r2, [pc, #124]	@ (800c29c <HAL_TIM_Base_Start_IT+0xdc>)
 800c21e:	4293      	cmp	r3, r2
 800c220:	d00e      	beq.n	800c240 <HAL_TIM_Base_Start_IT+0x80>
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	4a1e      	ldr	r2, [pc, #120]	@ (800c2a0 <HAL_TIM_Base_Start_IT+0xe0>)
 800c228:	4293      	cmp	r3, r2
 800c22a:	d009      	beq.n	800c240 <HAL_TIM_Base_Start_IT+0x80>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	4a1c      	ldr	r2, [pc, #112]	@ (800c2a4 <HAL_TIM_Base_Start_IT+0xe4>)
 800c232:	4293      	cmp	r3, r2
 800c234:	d004      	beq.n	800c240 <HAL_TIM_Base_Start_IT+0x80>
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	4a1b      	ldr	r2, [pc, #108]	@ (800c2a8 <HAL_TIM_Base_Start_IT+0xe8>)
 800c23c:	4293      	cmp	r3, r2
 800c23e:	d115      	bne.n	800c26c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	689a      	ldr	r2, [r3, #8]
 800c246:	4b19      	ldr	r3, [pc, #100]	@ (800c2ac <HAL_TIM_Base_Start_IT+0xec>)
 800c248:	4013      	ands	r3, r2
 800c24a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	2b06      	cmp	r3, #6
 800c250:	d015      	beq.n	800c27e <HAL_TIM_Base_Start_IT+0xbe>
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c258:	d011      	beq.n	800c27e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	681a      	ldr	r2, [r3, #0]
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	f042 0201 	orr.w	r2, r2, #1
 800c268:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c26a:	e008      	b.n	800c27e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	681a      	ldr	r2, [r3, #0]
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	f042 0201 	orr.w	r2, r2, #1
 800c27a:	601a      	str	r2, [r3, #0]
 800c27c:	e000      	b.n	800c280 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c27e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c280:	2300      	movs	r3, #0
}
 800c282:	4618      	mov	r0, r3
 800c284:	3714      	adds	r7, #20
 800c286:	46bd      	mov	sp, r7
 800c288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28c:	4770      	bx	lr
 800c28e:	bf00      	nop
 800c290:	40010000 	.word	0x40010000
 800c294:	40000400 	.word	0x40000400
 800c298:	40000800 	.word	0x40000800
 800c29c:	40000c00 	.word	0x40000c00
 800c2a0:	40010400 	.word	0x40010400
 800c2a4:	40001800 	.word	0x40001800
 800c2a8:	40014000 	.word	0x40014000
 800c2ac:	00010007 	.word	0x00010007

0800c2b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b084      	sub	sp, #16
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	68db      	ldr	r3, [r3, #12]
 800c2be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	691b      	ldr	r3, [r3, #16]
 800c2c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	f003 0302 	and.w	r3, r3, #2
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d020      	beq.n	800c314 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	f003 0302 	and.w	r3, r3, #2
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d01b      	beq.n	800c314 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	f06f 0202 	mvn.w	r2, #2
 800c2e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2201      	movs	r2, #1
 800c2ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	699b      	ldr	r3, [r3, #24]
 800c2f2:	f003 0303 	and.w	r3, r3, #3
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d003      	beq.n	800c302 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f000 f9e2 	bl	800c6c4 <HAL_TIM_IC_CaptureCallback>
 800c300:	e005      	b.n	800c30e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f000 f9d4 	bl	800c6b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f000 f9e5 	bl	800c6d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2200      	movs	r2, #0
 800c312:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	f003 0304 	and.w	r3, r3, #4
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d020      	beq.n	800c360 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	f003 0304 	and.w	r3, r3, #4
 800c324:	2b00      	cmp	r3, #0
 800c326:	d01b      	beq.n	800c360 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	f06f 0204 	mvn.w	r2, #4
 800c330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2202      	movs	r2, #2
 800c336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	699b      	ldr	r3, [r3, #24]
 800c33e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c342:	2b00      	cmp	r3, #0
 800c344:	d003      	beq.n	800c34e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f000 f9bc 	bl	800c6c4 <HAL_TIM_IC_CaptureCallback>
 800c34c:	e005      	b.n	800c35a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f000 f9ae 	bl	800c6b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f000 f9bf 	bl	800c6d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2200      	movs	r2, #0
 800c35e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	f003 0308 	and.w	r3, r3, #8
 800c366:	2b00      	cmp	r3, #0
 800c368:	d020      	beq.n	800c3ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	f003 0308 	and.w	r3, r3, #8
 800c370:	2b00      	cmp	r3, #0
 800c372:	d01b      	beq.n	800c3ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f06f 0208 	mvn.w	r2, #8
 800c37c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2204      	movs	r2, #4
 800c382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	69db      	ldr	r3, [r3, #28]
 800c38a:	f003 0303 	and.w	r3, r3, #3
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d003      	beq.n	800c39a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f000 f996 	bl	800c6c4 <HAL_TIM_IC_CaptureCallback>
 800c398:	e005      	b.n	800c3a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f000 f988 	bl	800c6b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f000 f999 	bl	800c6d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	f003 0310 	and.w	r3, r3, #16
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d020      	beq.n	800c3f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	f003 0310 	and.w	r3, r3, #16
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d01b      	beq.n	800c3f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f06f 0210 	mvn.w	r2, #16
 800c3c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2208      	movs	r2, #8
 800c3ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	69db      	ldr	r3, [r3, #28]
 800c3d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d003      	beq.n	800c3e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f000 f970 	bl	800c6c4 <HAL_TIM_IC_CaptureCallback>
 800c3e4:	e005      	b.n	800c3f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f000 f962 	bl	800c6b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f000 f973 	bl	800c6d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	f003 0301 	and.w	r3, r3, #1
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d00c      	beq.n	800c41c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	f003 0301 	and.w	r3, r3, #1
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d007      	beq.n	800c41c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	f06f 0201 	mvn.w	r2, #1
 800c414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f7f4 fa16 	bl	8000848 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c422:	2b00      	cmp	r3, #0
 800c424:	d104      	bne.n	800c430 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d00c      	beq.n	800c44a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c436:	2b00      	cmp	r3, #0
 800c438:	d007      	beq.n	800c44a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	f000 fb31 	bl	800caac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c450:	2b00      	cmp	r3, #0
 800c452:	d00c      	beq.n	800c46e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d007      	beq.n	800c46e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f000 fb29 	bl	800cac0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c474:	2b00      	cmp	r3, #0
 800c476:	d00c      	beq.n	800c492 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d007      	beq.n	800c492 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c48a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f000 f92d 	bl	800c6ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	f003 0320 	and.w	r3, r3, #32
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d00c      	beq.n	800c4b6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	f003 0320 	and.w	r3, r3, #32
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d007      	beq.n	800c4b6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f06f 0220 	mvn.w	r2, #32
 800c4ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f000 faf1 	bl	800ca98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c4b6:	bf00      	nop
 800c4b8:	3710      	adds	r7, #16
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}
	...

0800c4c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b084      	sub	sp, #16
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c4d4:	2b01      	cmp	r3, #1
 800c4d6:	d101      	bne.n	800c4dc <HAL_TIM_ConfigClockSource+0x1c>
 800c4d8:	2302      	movs	r3, #2
 800c4da:	e0dc      	b.n	800c696 <HAL_TIM_ConfigClockSource+0x1d6>
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2201      	movs	r2, #1
 800c4e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2202      	movs	r2, #2
 800c4e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	689b      	ldr	r3, [r3, #8]
 800c4f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c4f4:	68ba      	ldr	r2, [r7, #8]
 800c4f6:	4b6a      	ldr	r3, [pc, #424]	@ (800c6a0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c4f8:	4013      	ands	r3, r2
 800c4fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c502:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	68ba      	ldr	r2, [r7, #8]
 800c50a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	4a64      	ldr	r2, [pc, #400]	@ (800c6a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c512:	4293      	cmp	r3, r2
 800c514:	f000 80a9 	beq.w	800c66a <HAL_TIM_ConfigClockSource+0x1aa>
 800c518:	4a62      	ldr	r2, [pc, #392]	@ (800c6a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c51a:	4293      	cmp	r3, r2
 800c51c:	f200 80ae 	bhi.w	800c67c <HAL_TIM_ConfigClockSource+0x1bc>
 800c520:	4a61      	ldr	r2, [pc, #388]	@ (800c6a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c522:	4293      	cmp	r3, r2
 800c524:	f000 80a1 	beq.w	800c66a <HAL_TIM_ConfigClockSource+0x1aa>
 800c528:	4a5f      	ldr	r2, [pc, #380]	@ (800c6a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	f200 80a6 	bhi.w	800c67c <HAL_TIM_ConfigClockSource+0x1bc>
 800c530:	4a5e      	ldr	r2, [pc, #376]	@ (800c6ac <HAL_TIM_ConfigClockSource+0x1ec>)
 800c532:	4293      	cmp	r3, r2
 800c534:	f000 8099 	beq.w	800c66a <HAL_TIM_ConfigClockSource+0x1aa>
 800c538:	4a5c      	ldr	r2, [pc, #368]	@ (800c6ac <HAL_TIM_ConfigClockSource+0x1ec>)
 800c53a:	4293      	cmp	r3, r2
 800c53c:	f200 809e 	bhi.w	800c67c <HAL_TIM_ConfigClockSource+0x1bc>
 800c540:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c544:	f000 8091 	beq.w	800c66a <HAL_TIM_ConfigClockSource+0x1aa>
 800c548:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c54c:	f200 8096 	bhi.w	800c67c <HAL_TIM_ConfigClockSource+0x1bc>
 800c550:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c554:	f000 8089 	beq.w	800c66a <HAL_TIM_ConfigClockSource+0x1aa>
 800c558:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c55c:	f200 808e 	bhi.w	800c67c <HAL_TIM_ConfigClockSource+0x1bc>
 800c560:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c564:	d03e      	beq.n	800c5e4 <HAL_TIM_ConfigClockSource+0x124>
 800c566:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c56a:	f200 8087 	bhi.w	800c67c <HAL_TIM_ConfigClockSource+0x1bc>
 800c56e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c572:	f000 8086 	beq.w	800c682 <HAL_TIM_ConfigClockSource+0x1c2>
 800c576:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c57a:	d87f      	bhi.n	800c67c <HAL_TIM_ConfigClockSource+0x1bc>
 800c57c:	2b70      	cmp	r3, #112	@ 0x70
 800c57e:	d01a      	beq.n	800c5b6 <HAL_TIM_ConfigClockSource+0xf6>
 800c580:	2b70      	cmp	r3, #112	@ 0x70
 800c582:	d87b      	bhi.n	800c67c <HAL_TIM_ConfigClockSource+0x1bc>
 800c584:	2b60      	cmp	r3, #96	@ 0x60
 800c586:	d050      	beq.n	800c62a <HAL_TIM_ConfigClockSource+0x16a>
 800c588:	2b60      	cmp	r3, #96	@ 0x60
 800c58a:	d877      	bhi.n	800c67c <HAL_TIM_ConfigClockSource+0x1bc>
 800c58c:	2b50      	cmp	r3, #80	@ 0x50
 800c58e:	d03c      	beq.n	800c60a <HAL_TIM_ConfigClockSource+0x14a>
 800c590:	2b50      	cmp	r3, #80	@ 0x50
 800c592:	d873      	bhi.n	800c67c <HAL_TIM_ConfigClockSource+0x1bc>
 800c594:	2b40      	cmp	r3, #64	@ 0x40
 800c596:	d058      	beq.n	800c64a <HAL_TIM_ConfigClockSource+0x18a>
 800c598:	2b40      	cmp	r3, #64	@ 0x40
 800c59a:	d86f      	bhi.n	800c67c <HAL_TIM_ConfigClockSource+0x1bc>
 800c59c:	2b30      	cmp	r3, #48	@ 0x30
 800c59e:	d064      	beq.n	800c66a <HAL_TIM_ConfigClockSource+0x1aa>
 800c5a0:	2b30      	cmp	r3, #48	@ 0x30
 800c5a2:	d86b      	bhi.n	800c67c <HAL_TIM_ConfigClockSource+0x1bc>
 800c5a4:	2b20      	cmp	r3, #32
 800c5a6:	d060      	beq.n	800c66a <HAL_TIM_ConfigClockSource+0x1aa>
 800c5a8:	2b20      	cmp	r3, #32
 800c5aa:	d867      	bhi.n	800c67c <HAL_TIM_ConfigClockSource+0x1bc>
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d05c      	beq.n	800c66a <HAL_TIM_ConfigClockSource+0x1aa>
 800c5b0:	2b10      	cmp	r3, #16
 800c5b2:	d05a      	beq.n	800c66a <HAL_TIM_ConfigClockSource+0x1aa>
 800c5b4:	e062      	b.n	800c67c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c5c6:	f000 f9b9 	bl	800c93c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	689b      	ldr	r3, [r3, #8]
 800c5d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c5d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	68ba      	ldr	r2, [r7, #8]
 800c5e0:	609a      	str	r2, [r3, #8]
      break;
 800c5e2:	e04f      	b.n	800c684 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c5f4:	f000 f9a2 	bl	800c93c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	689a      	ldr	r2, [r3, #8]
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c606:	609a      	str	r2, [r3, #8]
      break;
 800c608:	e03c      	b.n	800c684 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c616:	461a      	mov	r2, r3
 800c618:	f000 f912 	bl	800c840 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	2150      	movs	r1, #80	@ 0x50
 800c622:	4618      	mov	r0, r3
 800c624:	f000 f96c 	bl	800c900 <TIM_ITRx_SetConfig>
      break;
 800c628:	e02c      	b.n	800c684 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c636:	461a      	mov	r2, r3
 800c638:	f000 f931 	bl	800c89e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	2160      	movs	r1, #96	@ 0x60
 800c642:	4618      	mov	r0, r3
 800c644:	f000 f95c 	bl	800c900 <TIM_ITRx_SetConfig>
      break;
 800c648:	e01c      	b.n	800c684 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c656:	461a      	mov	r2, r3
 800c658:	f000 f8f2 	bl	800c840 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	2140      	movs	r1, #64	@ 0x40
 800c662:	4618      	mov	r0, r3
 800c664:	f000 f94c 	bl	800c900 <TIM_ITRx_SetConfig>
      break;
 800c668:	e00c      	b.n	800c684 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681a      	ldr	r2, [r3, #0]
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	4619      	mov	r1, r3
 800c674:	4610      	mov	r0, r2
 800c676:	f000 f943 	bl	800c900 <TIM_ITRx_SetConfig>
      break;
 800c67a:	e003      	b.n	800c684 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c67c:	2301      	movs	r3, #1
 800c67e:	73fb      	strb	r3, [r7, #15]
      break;
 800c680:	e000      	b.n	800c684 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c682:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2201      	movs	r2, #1
 800c688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2200      	movs	r2, #0
 800c690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c694:	7bfb      	ldrb	r3, [r7, #15]
}
 800c696:	4618      	mov	r0, r3
 800c698:	3710      	adds	r7, #16
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}
 800c69e:	bf00      	nop
 800c6a0:	ffceff88 	.word	0xffceff88
 800c6a4:	00100040 	.word	0x00100040
 800c6a8:	00100030 	.word	0x00100030
 800c6ac:	00100020 	.word	0x00100020

0800c6b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b083      	sub	sp, #12
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c6b8:	bf00      	nop
 800c6ba:	370c      	adds	r7, #12
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr

0800c6c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b083      	sub	sp, #12
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c6cc:	bf00      	nop
 800c6ce:	370c      	adds	r7, #12
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d6:	4770      	bx	lr

0800c6d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c6d8:	b480      	push	{r7}
 800c6da:	b083      	sub	sp, #12
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c6e0:	bf00      	nop
 800c6e2:	370c      	adds	r7, #12
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ea:	4770      	bx	lr

0800c6ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b083      	sub	sp, #12
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c6f4:	bf00      	nop
 800c6f6:	370c      	adds	r7, #12
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fe:	4770      	bx	lr

0800c700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c700:	b480      	push	{r7}
 800c702:	b085      	sub	sp, #20
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
 800c708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	4a43      	ldr	r2, [pc, #268]	@ (800c820 <TIM_Base_SetConfig+0x120>)
 800c714:	4293      	cmp	r3, r2
 800c716:	d013      	beq.n	800c740 <TIM_Base_SetConfig+0x40>
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c71e:	d00f      	beq.n	800c740 <TIM_Base_SetConfig+0x40>
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	4a40      	ldr	r2, [pc, #256]	@ (800c824 <TIM_Base_SetConfig+0x124>)
 800c724:	4293      	cmp	r3, r2
 800c726:	d00b      	beq.n	800c740 <TIM_Base_SetConfig+0x40>
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	4a3f      	ldr	r2, [pc, #252]	@ (800c828 <TIM_Base_SetConfig+0x128>)
 800c72c:	4293      	cmp	r3, r2
 800c72e:	d007      	beq.n	800c740 <TIM_Base_SetConfig+0x40>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	4a3e      	ldr	r2, [pc, #248]	@ (800c82c <TIM_Base_SetConfig+0x12c>)
 800c734:	4293      	cmp	r3, r2
 800c736:	d003      	beq.n	800c740 <TIM_Base_SetConfig+0x40>
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	4a3d      	ldr	r2, [pc, #244]	@ (800c830 <TIM_Base_SetConfig+0x130>)
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d108      	bne.n	800c752 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	685b      	ldr	r3, [r3, #4]
 800c74c:	68fa      	ldr	r2, [r7, #12]
 800c74e:	4313      	orrs	r3, r2
 800c750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	4a32      	ldr	r2, [pc, #200]	@ (800c820 <TIM_Base_SetConfig+0x120>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d01f      	beq.n	800c79a <TIM_Base_SetConfig+0x9a>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c760:	d01b      	beq.n	800c79a <TIM_Base_SetConfig+0x9a>
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	4a2f      	ldr	r2, [pc, #188]	@ (800c824 <TIM_Base_SetConfig+0x124>)
 800c766:	4293      	cmp	r3, r2
 800c768:	d017      	beq.n	800c79a <TIM_Base_SetConfig+0x9a>
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	4a2e      	ldr	r2, [pc, #184]	@ (800c828 <TIM_Base_SetConfig+0x128>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	d013      	beq.n	800c79a <TIM_Base_SetConfig+0x9a>
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	4a2d      	ldr	r2, [pc, #180]	@ (800c82c <TIM_Base_SetConfig+0x12c>)
 800c776:	4293      	cmp	r3, r2
 800c778:	d00f      	beq.n	800c79a <TIM_Base_SetConfig+0x9a>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	4a2c      	ldr	r2, [pc, #176]	@ (800c830 <TIM_Base_SetConfig+0x130>)
 800c77e:	4293      	cmp	r3, r2
 800c780:	d00b      	beq.n	800c79a <TIM_Base_SetConfig+0x9a>
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	4a2b      	ldr	r2, [pc, #172]	@ (800c834 <TIM_Base_SetConfig+0x134>)
 800c786:	4293      	cmp	r3, r2
 800c788:	d007      	beq.n	800c79a <TIM_Base_SetConfig+0x9a>
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	4a2a      	ldr	r2, [pc, #168]	@ (800c838 <TIM_Base_SetConfig+0x138>)
 800c78e:	4293      	cmp	r3, r2
 800c790:	d003      	beq.n	800c79a <TIM_Base_SetConfig+0x9a>
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	4a29      	ldr	r2, [pc, #164]	@ (800c83c <TIM_Base_SetConfig+0x13c>)
 800c796:	4293      	cmp	r3, r2
 800c798:	d108      	bne.n	800c7ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c7a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	68db      	ldr	r3, [r3, #12]
 800c7a6:	68fa      	ldr	r2, [r7, #12]
 800c7a8:	4313      	orrs	r3, r2
 800c7aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	695b      	ldr	r3, [r3, #20]
 800c7b6:	4313      	orrs	r3, r2
 800c7b8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	689a      	ldr	r2, [r3, #8]
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	681a      	ldr	r2, [r3, #0]
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	4a14      	ldr	r2, [pc, #80]	@ (800c820 <TIM_Base_SetConfig+0x120>)
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	d00f      	beq.n	800c7f2 <TIM_Base_SetConfig+0xf2>
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	4a16      	ldr	r2, [pc, #88]	@ (800c830 <TIM_Base_SetConfig+0x130>)
 800c7d6:	4293      	cmp	r3, r2
 800c7d8:	d00b      	beq.n	800c7f2 <TIM_Base_SetConfig+0xf2>
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	4a15      	ldr	r2, [pc, #84]	@ (800c834 <TIM_Base_SetConfig+0x134>)
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	d007      	beq.n	800c7f2 <TIM_Base_SetConfig+0xf2>
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	4a14      	ldr	r2, [pc, #80]	@ (800c838 <TIM_Base_SetConfig+0x138>)
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	d003      	beq.n	800c7f2 <TIM_Base_SetConfig+0xf2>
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	4a13      	ldr	r2, [pc, #76]	@ (800c83c <TIM_Base_SetConfig+0x13c>)
 800c7ee:	4293      	cmp	r3, r2
 800c7f0:	d103      	bne.n	800c7fa <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	691a      	ldr	r2, [r3, #16]
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f043 0204 	orr.w	r2, r3, #4
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2201      	movs	r2, #1
 800c80a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	68fa      	ldr	r2, [r7, #12]
 800c810:	601a      	str	r2, [r3, #0]
}
 800c812:	bf00      	nop
 800c814:	3714      	adds	r7, #20
 800c816:	46bd      	mov	sp, r7
 800c818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81c:	4770      	bx	lr
 800c81e:	bf00      	nop
 800c820:	40010000 	.word	0x40010000
 800c824:	40000400 	.word	0x40000400
 800c828:	40000800 	.word	0x40000800
 800c82c:	40000c00 	.word	0x40000c00
 800c830:	40010400 	.word	0x40010400
 800c834:	40014000 	.word	0x40014000
 800c838:	40014400 	.word	0x40014400
 800c83c:	40014800 	.word	0x40014800

0800c840 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c840:	b480      	push	{r7}
 800c842:	b087      	sub	sp, #28
 800c844:	af00      	add	r7, sp, #0
 800c846:	60f8      	str	r0, [r7, #12]
 800c848:	60b9      	str	r1, [r7, #8]
 800c84a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	6a1b      	ldr	r3, [r3, #32]
 800c850:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	6a1b      	ldr	r3, [r3, #32]
 800c856:	f023 0201 	bic.w	r2, r3, #1
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	699b      	ldr	r3, [r3, #24]
 800c862:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c86a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	011b      	lsls	r3, r3, #4
 800c870:	693a      	ldr	r2, [r7, #16]
 800c872:	4313      	orrs	r3, r2
 800c874:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	f023 030a 	bic.w	r3, r3, #10
 800c87c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c87e:	697a      	ldr	r2, [r7, #20]
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	4313      	orrs	r3, r2
 800c884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	693a      	ldr	r2, [r7, #16]
 800c88a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	697a      	ldr	r2, [r7, #20]
 800c890:	621a      	str	r2, [r3, #32]
}
 800c892:	bf00      	nop
 800c894:	371c      	adds	r7, #28
 800c896:	46bd      	mov	sp, r7
 800c898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89c:	4770      	bx	lr

0800c89e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c89e:	b480      	push	{r7}
 800c8a0:	b087      	sub	sp, #28
 800c8a2:	af00      	add	r7, sp, #0
 800c8a4:	60f8      	str	r0, [r7, #12]
 800c8a6:	60b9      	str	r1, [r7, #8]
 800c8a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	6a1b      	ldr	r3, [r3, #32]
 800c8ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	6a1b      	ldr	r3, [r3, #32]
 800c8b4:	f023 0210 	bic.w	r2, r3, #16
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	699b      	ldr	r3, [r3, #24]
 800c8c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c8c2:	693b      	ldr	r3, [r7, #16]
 800c8c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c8c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	031b      	lsls	r3, r3, #12
 800c8ce:	693a      	ldr	r2, [r7, #16]
 800c8d0:	4313      	orrs	r3, r2
 800c8d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c8d4:	697b      	ldr	r3, [r7, #20]
 800c8d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c8da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	011b      	lsls	r3, r3, #4
 800c8e0:	697a      	ldr	r2, [r7, #20]
 800c8e2:	4313      	orrs	r3, r2
 800c8e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	693a      	ldr	r2, [r7, #16]
 800c8ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	697a      	ldr	r2, [r7, #20]
 800c8f0:	621a      	str	r2, [r3, #32]
}
 800c8f2:	bf00      	nop
 800c8f4:	371c      	adds	r7, #28
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fc:	4770      	bx	lr
	...

0800c900 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c900:	b480      	push	{r7}
 800c902:	b085      	sub	sp, #20
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	689b      	ldr	r3, [r3, #8]
 800c90e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c910:	68fa      	ldr	r2, [r7, #12]
 800c912:	4b09      	ldr	r3, [pc, #36]	@ (800c938 <TIM_ITRx_SetConfig+0x38>)
 800c914:	4013      	ands	r3, r2
 800c916:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c918:	683a      	ldr	r2, [r7, #0]
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	4313      	orrs	r3, r2
 800c91e:	f043 0307 	orr.w	r3, r3, #7
 800c922:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	68fa      	ldr	r2, [r7, #12]
 800c928:	609a      	str	r2, [r3, #8]
}
 800c92a:	bf00      	nop
 800c92c:	3714      	adds	r7, #20
 800c92e:	46bd      	mov	sp, r7
 800c930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c934:	4770      	bx	lr
 800c936:	bf00      	nop
 800c938:	ffcfff8f 	.word	0xffcfff8f

0800c93c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c93c:	b480      	push	{r7}
 800c93e:	b087      	sub	sp, #28
 800c940:	af00      	add	r7, sp, #0
 800c942:	60f8      	str	r0, [r7, #12]
 800c944:	60b9      	str	r1, [r7, #8]
 800c946:	607a      	str	r2, [r7, #4]
 800c948:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	689b      	ldr	r3, [r3, #8]
 800c94e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c956:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	021a      	lsls	r2, r3, #8
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	431a      	orrs	r2, r3
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	4313      	orrs	r3, r2
 800c964:	697a      	ldr	r2, [r7, #20]
 800c966:	4313      	orrs	r3, r2
 800c968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	697a      	ldr	r2, [r7, #20]
 800c96e:	609a      	str	r2, [r3, #8]
}
 800c970:	bf00      	nop
 800c972:	371c      	adds	r7, #28
 800c974:	46bd      	mov	sp, r7
 800c976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97a:	4770      	bx	lr

0800c97c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c97c:	b480      	push	{r7}
 800c97e:	b085      	sub	sp, #20
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c98c:	2b01      	cmp	r3, #1
 800c98e:	d101      	bne.n	800c994 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c990:	2302      	movs	r3, #2
 800c992:	e06d      	b.n	800ca70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2201      	movs	r2, #1
 800c998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2202      	movs	r2, #2
 800c9a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	685b      	ldr	r3, [r3, #4]
 800c9aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	689b      	ldr	r3, [r3, #8]
 800c9b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	4a30      	ldr	r2, [pc, #192]	@ (800ca7c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d004      	beq.n	800c9c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	4a2f      	ldr	r2, [pc, #188]	@ (800ca80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c9c4:	4293      	cmp	r3, r2
 800c9c6:	d108      	bne.n	800c9da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c9ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	685b      	ldr	r3, [r3, #4]
 800c9d4:	68fa      	ldr	r2, [r7, #12]
 800c9d6:	4313      	orrs	r3, r2
 800c9d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	68fa      	ldr	r2, [r7, #12]
 800c9e8:	4313      	orrs	r3, r2
 800c9ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	68fa      	ldr	r2, [r7, #12]
 800c9f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4a20      	ldr	r2, [pc, #128]	@ (800ca7c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d022      	beq.n	800ca44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ca06:	d01d      	beq.n	800ca44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	4a1d      	ldr	r2, [pc, #116]	@ (800ca84 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d018      	beq.n	800ca44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	4a1c      	ldr	r2, [pc, #112]	@ (800ca88 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ca18:	4293      	cmp	r3, r2
 800ca1a:	d013      	beq.n	800ca44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	4a1a      	ldr	r2, [pc, #104]	@ (800ca8c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ca22:	4293      	cmp	r3, r2
 800ca24:	d00e      	beq.n	800ca44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	4a15      	ldr	r2, [pc, #84]	@ (800ca80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	d009      	beq.n	800ca44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	4a16      	ldr	r2, [pc, #88]	@ (800ca90 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ca36:	4293      	cmp	r3, r2
 800ca38:	d004      	beq.n	800ca44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	4a15      	ldr	r2, [pc, #84]	@ (800ca94 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ca40:	4293      	cmp	r3, r2
 800ca42:	d10c      	bne.n	800ca5e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ca4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	689b      	ldr	r3, [r3, #8]
 800ca50:	68ba      	ldr	r2, [r7, #8]
 800ca52:	4313      	orrs	r3, r2
 800ca54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	68ba      	ldr	r2, [r7, #8]
 800ca5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2201      	movs	r2, #1
 800ca62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ca6e:	2300      	movs	r3, #0
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3714      	adds	r7, #20
 800ca74:	46bd      	mov	sp, r7
 800ca76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7a:	4770      	bx	lr
 800ca7c:	40010000 	.word	0x40010000
 800ca80:	40010400 	.word	0x40010400
 800ca84:	40000400 	.word	0x40000400
 800ca88:	40000800 	.word	0x40000800
 800ca8c:	40000c00 	.word	0x40000c00
 800ca90:	40001800 	.word	0x40001800
 800ca94:	40014000 	.word	0x40014000

0800ca98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ca98:	b480      	push	{r7}
 800ca9a:	b083      	sub	sp, #12
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800caa0:	bf00      	nop
 800caa2:	370c      	adds	r7, #12
 800caa4:	46bd      	mov	sp, r7
 800caa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caaa:	4770      	bx	lr

0800caac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800caac:	b480      	push	{r7}
 800caae:	b083      	sub	sp, #12
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cab4:	bf00      	nop
 800cab6:	370c      	adds	r7, #12
 800cab8:	46bd      	mov	sp, r7
 800caba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabe:	4770      	bx	lr

0800cac0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cac0:	b480      	push	{r7}
 800cac2:	b083      	sub	sp, #12
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cac8:	bf00      	nop
 800caca:	370c      	adds	r7, #12
 800cacc:	46bd      	mov	sp, r7
 800cace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad2:	4770      	bx	lr

0800cad4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b082      	sub	sp, #8
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d101      	bne.n	800cae6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cae2:	2301      	movs	r3, #1
 800cae4:	e042      	b.n	800cb6c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800caec:	2b00      	cmp	r3, #0
 800caee:	d106      	bne.n	800cafe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2200      	movs	r2, #0
 800caf4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f7f4 fe43 	bl	8001784 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2224      	movs	r2, #36	@ 0x24
 800cb02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	681a      	ldr	r2, [r3, #0]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	f022 0201 	bic.w	r2, r2, #1
 800cb14:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d002      	beq.n	800cb24 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f001 fa60 	bl	800dfe4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f000 fcf5 	bl	800d514 <UART_SetConfig>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	2b01      	cmp	r3, #1
 800cb2e:	d101      	bne.n	800cb34 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800cb30:	2301      	movs	r3, #1
 800cb32:	e01b      	b.n	800cb6c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	685a      	ldr	r2, [r3, #4]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cb42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	689a      	ldr	r2, [r3, #8]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cb52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	681a      	ldr	r2, [r3, #0]
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	f042 0201 	orr.w	r2, r2, #1
 800cb62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f001 fadf 	bl	800e128 <UART_CheckIdleState>
 800cb6a:	4603      	mov	r3, r0
}
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	3708      	adds	r7, #8
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bd80      	pop	{r7, pc}

0800cb74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b08a      	sub	sp, #40	@ 0x28
 800cb78:	af02      	add	r7, sp, #8
 800cb7a:	60f8      	str	r0, [r7, #12]
 800cb7c:	60b9      	str	r1, [r7, #8]
 800cb7e:	603b      	str	r3, [r7, #0]
 800cb80:	4613      	mov	r3, r2
 800cb82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb8a:	2b20      	cmp	r3, #32
 800cb8c:	d17b      	bne.n	800cc86 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800cb8e:	68bb      	ldr	r3, [r7, #8]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d002      	beq.n	800cb9a <HAL_UART_Transmit+0x26>
 800cb94:	88fb      	ldrh	r3, [r7, #6]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d101      	bne.n	800cb9e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	e074      	b.n	800cc88 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	2200      	movs	r2, #0
 800cba2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	2221      	movs	r2, #33	@ 0x21
 800cbaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cbae:	f7f6 f9bf 	bl	8002f30 <HAL_GetTick>
 800cbb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	88fa      	ldrh	r2, [r7, #6]
 800cbb8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	88fa      	ldrh	r2, [r7, #6]
 800cbc0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	689b      	ldr	r3, [r3, #8]
 800cbc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cbcc:	d108      	bne.n	800cbe0 <HAL_UART_Transmit+0x6c>
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	691b      	ldr	r3, [r3, #16]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d104      	bne.n	800cbe0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	61bb      	str	r3, [r7, #24]
 800cbde:	e003      	b.n	800cbe8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cbe8:	e030      	b.n	800cc4c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	9300      	str	r3, [sp, #0]
 800cbee:	697b      	ldr	r3, [r7, #20]
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	2180      	movs	r1, #128	@ 0x80
 800cbf4:	68f8      	ldr	r0, [r7, #12]
 800cbf6:	f001 fb41 	bl	800e27c <UART_WaitOnFlagUntilTimeout>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d005      	beq.n	800cc0c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	2220      	movs	r2, #32
 800cc04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800cc08:	2303      	movs	r3, #3
 800cc0a:	e03d      	b.n	800cc88 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800cc0c:	69fb      	ldr	r3, [r7, #28]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d10b      	bne.n	800cc2a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cc12:	69bb      	ldr	r3, [r7, #24]
 800cc14:	881b      	ldrh	r3, [r3, #0]
 800cc16:	461a      	mov	r2, r3
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cc20:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800cc22:	69bb      	ldr	r3, [r7, #24]
 800cc24:	3302      	adds	r3, #2
 800cc26:	61bb      	str	r3, [r7, #24]
 800cc28:	e007      	b.n	800cc3a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cc2a:	69fb      	ldr	r3, [r7, #28]
 800cc2c:	781a      	ldrb	r2, [r3, #0]
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800cc34:	69fb      	ldr	r3, [r7, #28]
 800cc36:	3301      	adds	r3, #1
 800cc38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cc40:	b29b      	uxth	r3, r3
 800cc42:	3b01      	subs	r3, #1
 800cc44:	b29a      	uxth	r2, r3
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cc52:	b29b      	uxth	r3, r3
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d1c8      	bne.n	800cbea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	9300      	str	r3, [sp, #0]
 800cc5c:	697b      	ldr	r3, [r7, #20]
 800cc5e:	2200      	movs	r2, #0
 800cc60:	2140      	movs	r1, #64	@ 0x40
 800cc62:	68f8      	ldr	r0, [r7, #12]
 800cc64:	f001 fb0a 	bl	800e27c <UART_WaitOnFlagUntilTimeout>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d005      	beq.n	800cc7a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	2220      	movs	r2, #32
 800cc72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800cc76:	2303      	movs	r3, #3
 800cc78:	e006      	b.n	800cc88 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	2220      	movs	r2, #32
 800cc7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800cc82:	2300      	movs	r3, #0
 800cc84:	e000      	b.n	800cc88 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800cc86:	2302      	movs	r3, #2
  }
}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	3720      	adds	r7, #32
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}

0800cc90 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b08a      	sub	sp, #40	@ 0x28
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	60f8      	str	r0, [r7, #12]
 800cc98:	60b9      	str	r1, [r7, #8]
 800cc9a:	4613      	mov	r3, r2
 800cc9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cca4:	2b20      	cmp	r3, #32
 800cca6:	d137      	bne.n	800cd18 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d002      	beq.n	800ccb4 <HAL_UART_Receive_IT+0x24>
 800ccae:	88fb      	ldrh	r3, [r7, #6]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d101      	bne.n	800ccb8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	e030      	b.n	800cd1a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	4a18      	ldr	r2, [pc, #96]	@ (800cd24 <HAL_UART_Receive_IT+0x94>)
 800ccc4:	4293      	cmp	r3, r2
 800ccc6:	d01f      	beq.n	800cd08 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	685b      	ldr	r3, [r3, #4]
 800ccce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d018      	beq.n	800cd08 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccdc:	697b      	ldr	r3, [r7, #20]
 800ccde:	e853 3f00 	ldrex	r3, [r3]
 800cce2:	613b      	str	r3, [r7, #16]
   return(result);
 800cce4:	693b      	ldr	r3, [r7, #16]
 800cce6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ccea:	627b      	str	r3, [r7, #36]	@ 0x24
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	461a      	mov	r2, r3
 800ccf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccf4:	623b      	str	r3, [r7, #32]
 800ccf6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccf8:	69f9      	ldr	r1, [r7, #28]
 800ccfa:	6a3a      	ldr	r2, [r7, #32]
 800ccfc:	e841 2300 	strex	r3, r2, [r1]
 800cd00:	61bb      	str	r3, [r7, #24]
   return(result);
 800cd02:	69bb      	ldr	r3, [r7, #24]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d1e6      	bne.n	800ccd6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800cd08:	88fb      	ldrh	r3, [r7, #6]
 800cd0a:	461a      	mov	r2, r3
 800cd0c:	68b9      	ldr	r1, [r7, #8]
 800cd0e:	68f8      	ldr	r0, [r7, #12]
 800cd10:	f001 fb22 	bl	800e358 <UART_Start_Receive_IT>
 800cd14:	4603      	mov	r3, r0
 800cd16:	e000      	b.n	800cd1a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800cd18:	2302      	movs	r3, #2
  }
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3728      	adds	r7, #40	@ 0x28
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}
 800cd22:	bf00      	nop
 800cd24:	58000c00 	.word	0x58000c00

0800cd28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b0ba      	sub	sp, #232	@ 0xe8
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	69db      	ldr	r3, [r3, #28]
 800cd36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	689b      	ldr	r3, [r3, #8]
 800cd4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cd4e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800cd52:	f640 030f 	movw	r3, #2063	@ 0x80f
 800cd56:	4013      	ands	r3, r2
 800cd58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800cd5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d11b      	bne.n	800cd9c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cd64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd68:	f003 0320 	and.w	r3, r3, #32
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d015      	beq.n	800cd9c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cd70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cd74:	f003 0320 	and.w	r3, r3, #32
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d105      	bne.n	800cd88 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cd7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cd80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d009      	beq.n	800cd9c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	f000 8393 	beq.w	800d4b8 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	4798      	blx	r3
      }
      return;
 800cd9a:	e38d      	b.n	800d4b8 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cd9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	f000 8123 	beq.w	800cfec <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cda6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cdaa:	4b8d      	ldr	r3, [pc, #564]	@ (800cfe0 <HAL_UART_IRQHandler+0x2b8>)
 800cdac:	4013      	ands	r3, r2
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d106      	bne.n	800cdc0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cdb2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800cdb6:	4b8b      	ldr	r3, [pc, #556]	@ (800cfe4 <HAL_UART_IRQHandler+0x2bc>)
 800cdb8:	4013      	ands	r3, r2
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	f000 8116 	beq.w	800cfec <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cdc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cdc4:	f003 0301 	and.w	r3, r3, #1
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d011      	beq.n	800cdf0 <HAL_UART_IRQHandler+0xc8>
 800cdcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cdd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d00b      	beq.n	800cdf0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	2201      	movs	r2, #1
 800cdde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cde6:	f043 0201 	orr.w	r2, r3, #1
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cdf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cdf4:	f003 0302 	and.w	r3, r3, #2
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d011      	beq.n	800ce20 <HAL_UART_IRQHandler+0xf8>
 800cdfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ce00:	f003 0301 	and.w	r3, r3, #1
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d00b      	beq.n	800ce20 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	2202      	movs	r2, #2
 800ce0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce16:	f043 0204 	orr.w	r2, r3, #4
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce24:	f003 0304 	and.w	r3, r3, #4
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d011      	beq.n	800ce50 <HAL_UART_IRQHandler+0x128>
 800ce2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ce30:	f003 0301 	and.w	r3, r3, #1
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d00b      	beq.n	800ce50 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	2204      	movs	r2, #4
 800ce3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce46:	f043 0202 	orr.w	r2, r3, #2
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ce50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce54:	f003 0308 	and.w	r3, r3, #8
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d017      	beq.n	800ce8c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ce5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce60:	f003 0320 	and.w	r3, r3, #32
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d105      	bne.n	800ce74 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ce68:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ce6c:	4b5c      	ldr	r3, [pc, #368]	@ (800cfe0 <HAL_UART_IRQHandler+0x2b8>)
 800ce6e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d00b      	beq.n	800ce8c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	2208      	movs	r2, #8
 800ce7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce82:	f043 0208 	orr.w	r2, r3, #8
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ce8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d012      	beq.n	800cebe <HAL_UART_IRQHandler+0x196>
 800ce98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce9c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d00c      	beq.n	800cebe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ceac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ceb4:	f043 0220 	orr.w	r2, r3, #32
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	f000 82f9 	beq.w	800d4bc <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ceca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cece:	f003 0320 	and.w	r3, r3, #32
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d013      	beq.n	800cefe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ced6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ceda:	f003 0320 	and.w	r3, r3, #32
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d105      	bne.n	800ceee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cee2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cee6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d007      	beq.n	800cefe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d003      	beq.n	800cefe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf04:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	689b      	ldr	r3, [r3, #8]
 800cf0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf12:	2b40      	cmp	r3, #64	@ 0x40
 800cf14:	d005      	beq.n	800cf22 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cf16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cf1a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d054      	beq.n	800cfcc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f001 fb3a 	bl	800e59c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	689b      	ldr	r3, [r3, #8]
 800cf2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf32:	2b40      	cmp	r3, #64	@ 0x40
 800cf34:	d146      	bne.n	800cfc4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	3308      	adds	r3, #8
 800cf3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf40:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cf44:	e853 3f00 	ldrex	r3, [r3]
 800cf48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800cf4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cf50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cf54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	3308      	adds	r3, #8
 800cf5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800cf62:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cf66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800cf6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cf72:	e841 2300 	strex	r3, r2, [r1]
 800cf76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800cf7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d1d9      	bne.n	800cf36 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d017      	beq.n	800cfbc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf92:	4a15      	ldr	r2, [pc, #84]	@ (800cfe8 <HAL_UART_IRQHandler+0x2c0>)
 800cf94:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f7f8 ff4f 	bl	8005e40 <HAL_DMA_Abort_IT>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d019      	beq.n	800cfdc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cfae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cfb0:	687a      	ldr	r2, [r7, #4]
 800cfb2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800cfb6:	4610      	mov	r0, r2
 800cfb8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cfba:	e00f      	b.n	800cfdc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f000 fa93 	bl	800d4e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cfc2:	e00b      	b.n	800cfdc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f000 fa8f 	bl	800d4e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cfca:	e007      	b.n	800cfdc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f000 fa8b 	bl	800d4e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800cfda:	e26f      	b.n	800d4bc <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cfdc:	bf00      	nop
    return;
 800cfde:	e26d      	b.n	800d4bc <HAL_UART_IRQHandler+0x794>
 800cfe0:	10000001 	.word	0x10000001
 800cfe4:	04000120 	.word	0x04000120
 800cfe8:	0800e669 	.word	0x0800e669

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cff0:	2b01      	cmp	r3, #1
 800cff2:	f040 8203 	bne.w	800d3fc <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cffa:	f003 0310 	and.w	r3, r3, #16
 800cffe:	2b00      	cmp	r3, #0
 800d000:	f000 81fc 	beq.w	800d3fc <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d008:	f003 0310 	and.w	r3, r3, #16
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	f000 81f5 	beq.w	800d3fc <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	2210      	movs	r2, #16
 800d018:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	689b      	ldr	r3, [r3, #8]
 800d020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d024:	2b40      	cmp	r3, #64	@ 0x40
 800d026:	f040 816d 	bne.w	800d304 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	4aa4      	ldr	r2, [pc, #656]	@ (800d2c4 <HAL_UART_IRQHandler+0x59c>)
 800d034:	4293      	cmp	r3, r2
 800d036:	d068      	beq.n	800d10a <HAL_UART_IRQHandler+0x3e2>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	4aa1      	ldr	r2, [pc, #644]	@ (800d2c8 <HAL_UART_IRQHandler+0x5a0>)
 800d042:	4293      	cmp	r3, r2
 800d044:	d061      	beq.n	800d10a <HAL_UART_IRQHandler+0x3e2>
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	4a9f      	ldr	r2, [pc, #636]	@ (800d2cc <HAL_UART_IRQHandler+0x5a4>)
 800d050:	4293      	cmp	r3, r2
 800d052:	d05a      	beq.n	800d10a <HAL_UART_IRQHandler+0x3e2>
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	4a9c      	ldr	r2, [pc, #624]	@ (800d2d0 <HAL_UART_IRQHandler+0x5a8>)
 800d05e:	4293      	cmp	r3, r2
 800d060:	d053      	beq.n	800d10a <HAL_UART_IRQHandler+0x3e2>
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	4a9a      	ldr	r2, [pc, #616]	@ (800d2d4 <HAL_UART_IRQHandler+0x5ac>)
 800d06c:	4293      	cmp	r3, r2
 800d06e:	d04c      	beq.n	800d10a <HAL_UART_IRQHandler+0x3e2>
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	4a97      	ldr	r2, [pc, #604]	@ (800d2d8 <HAL_UART_IRQHandler+0x5b0>)
 800d07a:	4293      	cmp	r3, r2
 800d07c:	d045      	beq.n	800d10a <HAL_UART_IRQHandler+0x3e2>
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	4a95      	ldr	r2, [pc, #596]	@ (800d2dc <HAL_UART_IRQHandler+0x5b4>)
 800d088:	4293      	cmp	r3, r2
 800d08a:	d03e      	beq.n	800d10a <HAL_UART_IRQHandler+0x3e2>
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	4a92      	ldr	r2, [pc, #584]	@ (800d2e0 <HAL_UART_IRQHandler+0x5b8>)
 800d096:	4293      	cmp	r3, r2
 800d098:	d037      	beq.n	800d10a <HAL_UART_IRQHandler+0x3e2>
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	4a90      	ldr	r2, [pc, #576]	@ (800d2e4 <HAL_UART_IRQHandler+0x5bc>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d030      	beq.n	800d10a <HAL_UART_IRQHandler+0x3e2>
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	4a8d      	ldr	r2, [pc, #564]	@ (800d2e8 <HAL_UART_IRQHandler+0x5c0>)
 800d0b2:	4293      	cmp	r3, r2
 800d0b4:	d029      	beq.n	800d10a <HAL_UART_IRQHandler+0x3e2>
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	4a8b      	ldr	r2, [pc, #556]	@ (800d2ec <HAL_UART_IRQHandler+0x5c4>)
 800d0c0:	4293      	cmp	r3, r2
 800d0c2:	d022      	beq.n	800d10a <HAL_UART_IRQHandler+0x3e2>
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	4a88      	ldr	r2, [pc, #544]	@ (800d2f0 <HAL_UART_IRQHandler+0x5c8>)
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	d01b      	beq.n	800d10a <HAL_UART_IRQHandler+0x3e2>
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	4a86      	ldr	r2, [pc, #536]	@ (800d2f4 <HAL_UART_IRQHandler+0x5cc>)
 800d0dc:	4293      	cmp	r3, r2
 800d0de:	d014      	beq.n	800d10a <HAL_UART_IRQHandler+0x3e2>
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	4a83      	ldr	r2, [pc, #524]	@ (800d2f8 <HAL_UART_IRQHandler+0x5d0>)
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d00d      	beq.n	800d10a <HAL_UART_IRQHandler+0x3e2>
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	4a81      	ldr	r2, [pc, #516]	@ (800d2fc <HAL_UART_IRQHandler+0x5d4>)
 800d0f8:	4293      	cmp	r3, r2
 800d0fa:	d006      	beq.n	800d10a <HAL_UART_IRQHandler+0x3e2>
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	4a7e      	ldr	r2, [pc, #504]	@ (800d300 <HAL_UART_IRQHandler+0x5d8>)
 800d106:	4293      	cmp	r3, r2
 800d108:	d106      	bne.n	800d118 <HAL_UART_IRQHandler+0x3f0>
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	685b      	ldr	r3, [r3, #4]
 800d114:	b29b      	uxth	r3, r3
 800d116:	e005      	b.n	800d124 <HAL_UART_IRQHandler+0x3fc>
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	685b      	ldr	r3, [r3, #4]
 800d122:	b29b      	uxth	r3, r3
 800d124:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d128:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	f000 80ad 	beq.w	800d28c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d138:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d13c:	429a      	cmp	r2, r3
 800d13e:	f080 80a5 	bcs.w	800d28c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d148:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d152:	69db      	ldr	r3, [r3, #28]
 800d154:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d158:	f000 8087 	beq.w	800d26a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d164:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d168:	e853 3f00 	ldrex	r3, [r3]
 800d16c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d170:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d174:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d178:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	461a      	mov	r2, r3
 800d182:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d186:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d18a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d18e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d192:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d196:	e841 2300 	strex	r3, r2, [r1]
 800d19a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d19e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d1da      	bne.n	800d15c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	3308      	adds	r3, #8
 800d1ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d1b0:	e853 3f00 	ldrex	r3, [r3]
 800d1b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d1b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d1b8:	f023 0301 	bic.w	r3, r3, #1
 800d1bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	3308      	adds	r3, #8
 800d1c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d1ca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d1ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d1d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d1d6:	e841 2300 	strex	r3, r2, [r1]
 800d1da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d1dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d1e1      	bne.n	800d1a6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	3308      	adds	r3, #8
 800d1e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d1ec:	e853 3f00 	ldrex	r3, [r3]
 800d1f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d1f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d1f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d1f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	3308      	adds	r3, #8
 800d202:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d206:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d208:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d20a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d20c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d20e:	e841 2300 	strex	r3, r2, [r1]
 800d212:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d214:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d216:	2b00      	cmp	r3, #0
 800d218:	d1e3      	bne.n	800d1e2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	2220      	movs	r2, #32
 800d21e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2200      	movs	r2, #0
 800d226:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d22e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d230:	e853 3f00 	ldrex	r3, [r3]
 800d234:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d236:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d238:	f023 0310 	bic.w	r3, r3, #16
 800d23c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	461a      	mov	r2, r3
 800d246:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d24a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d24c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d24e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d250:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d252:	e841 2300 	strex	r3, r2, [r1]
 800d256:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d258:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d1e4      	bne.n	800d228 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d264:	4618      	mov	r0, r3
 800d266:	f7f8 facd 	bl	8005804 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	2202      	movs	r2, #2
 800d26e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d27c:	b29b      	uxth	r3, r3
 800d27e:	1ad3      	subs	r3, r2, r3
 800d280:	b29b      	uxth	r3, r3
 800d282:	4619      	mov	r1, r3
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f000 f939 	bl	800d4fc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800d28a:	e119      	b.n	800d4c0 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d292:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d296:	429a      	cmp	r2, r3
 800d298:	f040 8112 	bne.w	800d4c0 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2a2:	69db      	ldr	r3, [r3, #28]
 800d2a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d2a8:	f040 810a 	bne.w	800d4c0 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2202      	movs	r2, #2
 800d2b0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d2b8:	4619      	mov	r1, r3
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f000 f91e 	bl	800d4fc <HAL_UARTEx_RxEventCallback>
      return;
 800d2c0:	e0fe      	b.n	800d4c0 <HAL_UART_IRQHandler+0x798>
 800d2c2:	bf00      	nop
 800d2c4:	40020010 	.word	0x40020010
 800d2c8:	40020028 	.word	0x40020028
 800d2cc:	40020040 	.word	0x40020040
 800d2d0:	40020058 	.word	0x40020058
 800d2d4:	40020070 	.word	0x40020070
 800d2d8:	40020088 	.word	0x40020088
 800d2dc:	400200a0 	.word	0x400200a0
 800d2e0:	400200b8 	.word	0x400200b8
 800d2e4:	40020410 	.word	0x40020410
 800d2e8:	40020428 	.word	0x40020428
 800d2ec:	40020440 	.word	0x40020440
 800d2f0:	40020458 	.word	0x40020458
 800d2f4:	40020470 	.word	0x40020470
 800d2f8:	40020488 	.word	0x40020488
 800d2fc:	400204a0 	.word	0x400204a0
 800d300:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d310:	b29b      	uxth	r3, r3
 800d312:	1ad3      	subs	r3, r2, r3
 800d314:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d31e:	b29b      	uxth	r3, r3
 800d320:	2b00      	cmp	r3, #0
 800d322:	f000 80cf 	beq.w	800d4c4 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800d326:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	f000 80ca 	beq.w	800d4c4 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d338:	e853 3f00 	ldrex	r3, [r3]
 800d33c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d33e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d340:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d344:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	461a      	mov	r2, r3
 800d34e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d352:	647b      	str	r3, [r7, #68]	@ 0x44
 800d354:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d356:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d358:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d35a:	e841 2300 	strex	r3, r2, [r1]
 800d35e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d360:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d362:	2b00      	cmp	r3, #0
 800d364:	d1e4      	bne.n	800d330 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	3308      	adds	r3, #8
 800d36c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d36e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d370:	e853 3f00 	ldrex	r3, [r3]
 800d374:	623b      	str	r3, [r7, #32]
   return(result);
 800d376:	6a3a      	ldr	r2, [r7, #32]
 800d378:	4b55      	ldr	r3, [pc, #340]	@ (800d4d0 <HAL_UART_IRQHandler+0x7a8>)
 800d37a:	4013      	ands	r3, r2
 800d37c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	3308      	adds	r3, #8
 800d386:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d38a:	633a      	str	r2, [r7, #48]	@ 0x30
 800d38c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d38e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d390:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d392:	e841 2300 	strex	r3, r2, [r1]
 800d396:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d1e3      	bne.n	800d366 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2220      	movs	r2, #32
 800d3a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	e853 3f00 	ldrex	r3, [r3]
 800d3be:	60fb      	str	r3, [r7, #12]
   return(result);
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	f023 0310 	bic.w	r3, r3, #16
 800d3c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	461a      	mov	r2, r3
 800d3d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d3d4:	61fb      	str	r3, [r7, #28]
 800d3d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3d8:	69b9      	ldr	r1, [r7, #24]
 800d3da:	69fa      	ldr	r2, [r7, #28]
 800d3dc:	e841 2300 	strex	r3, r2, [r1]
 800d3e0:	617b      	str	r3, [r7, #20]
   return(result);
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d1e4      	bne.n	800d3b2 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2202      	movs	r2, #2
 800d3ec:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d3ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d3f2:	4619      	mov	r1, r3
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f000 f881 	bl	800d4fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d3fa:	e063      	b.n	800d4c4 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d3fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d400:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d404:	2b00      	cmp	r3, #0
 800d406:	d00e      	beq.n	800d426 <HAL_UART_IRQHandler+0x6fe>
 800d408:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d40c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d410:	2b00      	cmp	r3, #0
 800d412:	d008      	beq.n	800d426 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d41c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	f001 fe80 	bl	800f124 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d424:	e051      	b.n	800d4ca <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d42a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d014      	beq.n	800d45c <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d105      	bne.n	800d44a <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d43e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d442:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d446:	2b00      	cmp	r3, #0
 800d448:	d008      	beq.n	800d45c <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d03a      	beq.n	800d4c8 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d456:	6878      	ldr	r0, [r7, #4]
 800d458:	4798      	blx	r3
    }
    return;
 800d45a:	e035      	b.n	800d4c8 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d45c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d464:	2b00      	cmp	r3, #0
 800d466:	d009      	beq.n	800d47c <HAL_UART_IRQHandler+0x754>
 800d468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d46c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d470:	2b00      	cmp	r3, #0
 800d472:	d003      	beq.n	800d47c <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f001 f909 	bl	800e68c <UART_EndTransmit_IT>
    return;
 800d47a:	e026      	b.n	800d4ca <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d47c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d480:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d484:	2b00      	cmp	r3, #0
 800d486:	d009      	beq.n	800d49c <HAL_UART_IRQHandler+0x774>
 800d488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d48c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d490:	2b00      	cmp	r3, #0
 800d492:	d003      	beq.n	800d49c <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f001 fe59 	bl	800f14c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d49a:	e016      	b.n	800d4ca <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d49c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d4a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d010      	beq.n	800d4ca <HAL_UART_IRQHandler+0x7a2>
 800d4a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	da0c      	bge.n	800d4ca <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f001 fe41 	bl	800f138 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d4b6:	e008      	b.n	800d4ca <HAL_UART_IRQHandler+0x7a2>
      return;
 800d4b8:	bf00      	nop
 800d4ba:	e006      	b.n	800d4ca <HAL_UART_IRQHandler+0x7a2>
    return;
 800d4bc:	bf00      	nop
 800d4be:	e004      	b.n	800d4ca <HAL_UART_IRQHandler+0x7a2>
      return;
 800d4c0:	bf00      	nop
 800d4c2:	e002      	b.n	800d4ca <HAL_UART_IRQHandler+0x7a2>
      return;
 800d4c4:	bf00      	nop
 800d4c6:	e000      	b.n	800d4ca <HAL_UART_IRQHandler+0x7a2>
    return;
 800d4c8:	bf00      	nop
  }
}
 800d4ca:	37e8      	adds	r7, #232	@ 0xe8
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}
 800d4d0:	effffffe 	.word	0xeffffffe

0800d4d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d4d4:	b480      	push	{r7}
 800d4d6:	b083      	sub	sp, #12
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d4dc:	bf00      	nop
 800d4de:	370c      	adds	r7, #12
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e6:	4770      	bx	lr

0800d4e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	b083      	sub	sp, #12
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d4f0:	bf00      	nop
 800d4f2:	370c      	adds	r7, #12
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fa:	4770      	bx	lr

0800d4fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d4fc:	b480      	push	{r7}
 800d4fe:	b083      	sub	sp, #12
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
 800d504:	460b      	mov	r3, r1
 800d506:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d508:	bf00      	nop
 800d50a:	370c      	adds	r7, #12
 800d50c:	46bd      	mov	sp, r7
 800d50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d512:	4770      	bx	lr

0800d514 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d518:	b092      	sub	sp, #72	@ 0x48
 800d51a:	af00      	add	r7, sp, #0
 800d51c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d51e:	2300      	movs	r3, #0
 800d520:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d524:	697b      	ldr	r3, [r7, #20]
 800d526:	689a      	ldr	r2, [r3, #8]
 800d528:	697b      	ldr	r3, [r7, #20]
 800d52a:	691b      	ldr	r3, [r3, #16]
 800d52c:	431a      	orrs	r2, r3
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	695b      	ldr	r3, [r3, #20]
 800d532:	431a      	orrs	r2, r3
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	69db      	ldr	r3, [r3, #28]
 800d538:	4313      	orrs	r3, r2
 800d53a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	681a      	ldr	r2, [r3, #0]
 800d542:	4bbe      	ldr	r3, [pc, #760]	@ (800d83c <UART_SetConfig+0x328>)
 800d544:	4013      	ands	r3, r2
 800d546:	697a      	ldr	r2, [r7, #20]
 800d548:	6812      	ldr	r2, [r2, #0]
 800d54a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d54c:	430b      	orrs	r3, r1
 800d54e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d550:	697b      	ldr	r3, [r7, #20]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	685b      	ldr	r3, [r3, #4]
 800d556:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d55a:	697b      	ldr	r3, [r7, #20]
 800d55c:	68da      	ldr	r2, [r3, #12]
 800d55e:	697b      	ldr	r3, [r7, #20]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	430a      	orrs	r2, r1
 800d564:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d566:	697b      	ldr	r3, [r7, #20]
 800d568:	699b      	ldr	r3, [r3, #24]
 800d56a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d56c:	697b      	ldr	r3, [r7, #20]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	4ab3      	ldr	r2, [pc, #716]	@ (800d840 <UART_SetConfig+0x32c>)
 800d572:	4293      	cmp	r3, r2
 800d574:	d004      	beq.n	800d580 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	6a1b      	ldr	r3, [r3, #32]
 800d57a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d57c:	4313      	orrs	r3, r2
 800d57e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d580:	697b      	ldr	r3, [r7, #20]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	689a      	ldr	r2, [r3, #8]
 800d586:	4baf      	ldr	r3, [pc, #700]	@ (800d844 <UART_SetConfig+0x330>)
 800d588:	4013      	ands	r3, r2
 800d58a:	697a      	ldr	r2, [r7, #20]
 800d58c:	6812      	ldr	r2, [r2, #0]
 800d58e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d590:	430b      	orrs	r3, r1
 800d592:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d59a:	f023 010f 	bic.w	r1, r3, #15
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	430a      	orrs	r2, r1
 800d5a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d5aa:	697b      	ldr	r3, [r7, #20]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	4aa6      	ldr	r2, [pc, #664]	@ (800d848 <UART_SetConfig+0x334>)
 800d5b0:	4293      	cmp	r3, r2
 800d5b2:	d177      	bne.n	800d6a4 <UART_SetConfig+0x190>
 800d5b4:	4ba5      	ldr	r3, [pc, #660]	@ (800d84c <UART_SetConfig+0x338>)
 800d5b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d5b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d5bc:	2b28      	cmp	r3, #40	@ 0x28
 800d5be:	d86d      	bhi.n	800d69c <UART_SetConfig+0x188>
 800d5c0:	a201      	add	r2, pc, #4	@ (adr r2, 800d5c8 <UART_SetConfig+0xb4>)
 800d5c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5c6:	bf00      	nop
 800d5c8:	0800d66d 	.word	0x0800d66d
 800d5cc:	0800d69d 	.word	0x0800d69d
 800d5d0:	0800d69d 	.word	0x0800d69d
 800d5d4:	0800d69d 	.word	0x0800d69d
 800d5d8:	0800d69d 	.word	0x0800d69d
 800d5dc:	0800d69d 	.word	0x0800d69d
 800d5e0:	0800d69d 	.word	0x0800d69d
 800d5e4:	0800d69d 	.word	0x0800d69d
 800d5e8:	0800d675 	.word	0x0800d675
 800d5ec:	0800d69d 	.word	0x0800d69d
 800d5f0:	0800d69d 	.word	0x0800d69d
 800d5f4:	0800d69d 	.word	0x0800d69d
 800d5f8:	0800d69d 	.word	0x0800d69d
 800d5fc:	0800d69d 	.word	0x0800d69d
 800d600:	0800d69d 	.word	0x0800d69d
 800d604:	0800d69d 	.word	0x0800d69d
 800d608:	0800d67d 	.word	0x0800d67d
 800d60c:	0800d69d 	.word	0x0800d69d
 800d610:	0800d69d 	.word	0x0800d69d
 800d614:	0800d69d 	.word	0x0800d69d
 800d618:	0800d69d 	.word	0x0800d69d
 800d61c:	0800d69d 	.word	0x0800d69d
 800d620:	0800d69d 	.word	0x0800d69d
 800d624:	0800d69d 	.word	0x0800d69d
 800d628:	0800d685 	.word	0x0800d685
 800d62c:	0800d69d 	.word	0x0800d69d
 800d630:	0800d69d 	.word	0x0800d69d
 800d634:	0800d69d 	.word	0x0800d69d
 800d638:	0800d69d 	.word	0x0800d69d
 800d63c:	0800d69d 	.word	0x0800d69d
 800d640:	0800d69d 	.word	0x0800d69d
 800d644:	0800d69d 	.word	0x0800d69d
 800d648:	0800d68d 	.word	0x0800d68d
 800d64c:	0800d69d 	.word	0x0800d69d
 800d650:	0800d69d 	.word	0x0800d69d
 800d654:	0800d69d 	.word	0x0800d69d
 800d658:	0800d69d 	.word	0x0800d69d
 800d65c:	0800d69d 	.word	0x0800d69d
 800d660:	0800d69d 	.word	0x0800d69d
 800d664:	0800d69d 	.word	0x0800d69d
 800d668:	0800d695 	.word	0x0800d695
 800d66c:	2301      	movs	r3, #1
 800d66e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d672:	e222      	b.n	800daba <UART_SetConfig+0x5a6>
 800d674:	2304      	movs	r3, #4
 800d676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d67a:	e21e      	b.n	800daba <UART_SetConfig+0x5a6>
 800d67c:	2308      	movs	r3, #8
 800d67e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d682:	e21a      	b.n	800daba <UART_SetConfig+0x5a6>
 800d684:	2310      	movs	r3, #16
 800d686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d68a:	e216      	b.n	800daba <UART_SetConfig+0x5a6>
 800d68c:	2320      	movs	r3, #32
 800d68e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d692:	e212      	b.n	800daba <UART_SetConfig+0x5a6>
 800d694:	2340      	movs	r3, #64	@ 0x40
 800d696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d69a:	e20e      	b.n	800daba <UART_SetConfig+0x5a6>
 800d69c:	2380      	movs	r3, #128	@ 0x80
 800d69e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6a2:	e20a      	b.n	800daba <UART_SetConfig+0x5a6>
 800d6a4:	697b      	ldr	r3, [r7, #20]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	4a69      	ldr	r2, [pc, #420]	@ (800d850 <UART_SetConfig+0x33c>)
 800d6aa:	4293      	cmp	r3, r2
 800d6ac:	d130      	bne.n	800d710 <UART_SetConfig+0x1fc>
 800d6ae:	4b67      	ldr	r3, [pc, #412]	@ (800d84c <UART_SetConfig+0x338>)
 800d6b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d6b2:	f003 0307 	and.w	r3, r3, #7
 800d6b6:	2b05      	cmp	r3, #5
 800d6b8:	d826      	bhi.n	800d708 <UART_SetConfig+0x1f4>
 800d6ba:	a201      	add	r2, pc, #4	@ (adr r2, 800d6c0 <UART_SetConfig+0x1ac>)
 800d6bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6c0:	0800d6d9 	.word	0x0800d6d9
 800d6c4:	0800d6e1 	.word	0x0800d6e1
 800d6c8:	0800d6e9 	.word	0x0800d6e9
 800d6cc:	0800d6f1 	.word	0x0800d6f1
 800d6d0:	0800d6f9 	.word	0x0800d6f9
 800d6d4:	0800d701 	.word	0x0800d701
 800d6d8:	2300      	movs	r3, #0
 800d6da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6de:	e1ec      	b.n	800daba <UART_SetConfig+0x5a6>
 800d6e0:	2304      	movs	r3, #4
 800d6e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6e6:	e1e8      	b.n	800daba <UART_SetConfig+0x5a6>
 800d6e8:	2308      	movs	r3, #8
 800d6ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6ee:	e1e4      	b.n	800daba <UART_SetConfig+0x5a6>
 800d6f0:	2310      	movs	r3, #16
 800d6f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6f6:	e1e0      	b.n	800daba <UART_SetConfig+0x5a6>
 800d6f8:	2320      	movs	r3, #32
 800d6fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6fe:	e1dc      	b.n	800daba <UART_SetConfig+0x5a6>
 800d700:	2340      	movs	r3, #64	@ 0x40
 800d702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d706:	e1d8      	b.n	800daba <UART_SetConfig+0x5a6>
 800d708:	2380      	movs	r3, #128	@ 0x80
 800d70a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d70e:	e1d4      	b.n	800daba <UART_SetConfig+0x5a6>
 800d710:	697b      	ldr	r3, [r7, #20]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	4a4f      	ldr	r2, [pc, #316]	@ (800d854 <UART_SetConfig+0x340>)
 800d716:	4293      	cmp	r3, r2
 800d718:	d130      	bne.n	800d77c <UART_SetConfig+0x268>
 800d71a:	4b4c      	ldr	r3, [pc, #304]	@ (800d84c <UART_SetConfig+0x338>)
 800d71c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d71e:	f003 0307 	and.w	r3, r3, #7
 800d722:	2b05      	cmp	r3, #5
 800d724:	d826      	bhi.n	800d774 <UART_SetConfig+0x260>
 800d726:	a201      	add	r2, pc, #4	@ (adr r2, 800d72c <UART_SetConfig+0x218>)
 800d728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d72c:	0800d745 	.word	0x0800d745
 800d730:	0800d74d 	.word	0x0800d74d
 800d734:	0800d755 	.word	0x0800d755
 800d738:	0800d75d 	.word	0x0800d75d
 800d73c:	0800d765 	.word	0x0800d765
 800d740:	0800d76d 	.word	0x0800d76d
 800d744:	2300      	movs	r3, #0
 800d746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d74a:	e1b6      	b.n	800daba <UART_SetConfig+0x5a6>
 800d74c:	2304      	movs	r3, #4
 800d74e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d752:	e1b2      	b.n	800daba <UART_SetConfig+0x5a6>
 800d754:	2308      	movs	r3, #8
 800d756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d75a:	e1ae      	b.n	800daba <UART_SetConfig+0x5a6>
 800d75c:	2310      	movs	r3, #16
 800d75e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d762:	e1aa      	b.n	800daba <UART_SetConfig+0x5a6>
 800d764:	2320      	movs	r3, #32
 800d766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d76a:	e1a6      	b.n	800daba <UART_SetConfig+0x5a6>
 800d76c:	2340      	movs	r3, #64	@ 0x40
 800d76e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d772:	e1a2      	b.n	800daba <UART_SetConfig+0x5a6>
 800d774:	2380      	movs	r3, #128	@ 0x80
 800d776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d77a:	e19e      	b.n	800daba <UART_SetConfig+0x5a6>
 800d77c:	697b      	ldr	r3, [r7, #20]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	4a35      	ldr	r2, [pc, #212]	@ (800d858 <UART_SetConfig+0x344>)
 800d782:	4293      	cmp	r3, r2
 800d784:	d130      	bne.n	800d7e8 <UART_SetConfig+0x2d4>
 800d786:	4b31      	ldr	r3, [pc, #196]	@ (800d84c <UART_SetConfig+0x338>)
 800d788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d78a:	f003 0307 	and.w	r3, r3, #7
 800d78e:	2b05      	cmp	r3, #5
 800d790:	d826      	bhi.n	800d7e0 <UART_SetConfig+0x2cc>
 800d792:	a201      	add	r2, pc, #4	@ (adr r2, 800d798 <UART_SetConfig+0x284>)
 800d794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d798:	0800d7b1 	.word	0x0800d7b1
 800d79c:	0800d7b9 	.word	0x0800d7b9
 800d7a0:	0800d7c1 	.word	0x0800d7c1
 800d7a4:	0800d7c9 	.word	0x0800d7c9
 800d7a8:	0800d7d1 	.word	0x0800d7d1
 800d7ac:	0800d7d9 	.word	0x0800d7d9
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7b6:	e180      	b.n	800daba <UART_SetConfig+0x5a6>
 800d7b8:	2304      	movs	r3, #4
 800d7ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7be:	e17c      	b.n	800daba <UART_SetConfig+0x5a6>
 800d7c0:	2308      	movs	r3, #8
 800d7c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7c6:	e178      	b.n	800daba <UART_SetConfig+0x5a6>
 800d7c8:	2310      	movs	r3, #16
 800d7ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7ce:	e174      	b.n	800daba <UART_SetConfig+0x5a6>
 800d7d0:	2320      	movs	r3, #32
 800d7d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7d6:	e170      	b.n	800daba <UART_SetConfig+0x5a6>
 800d7d8:	2340      	movs	r3, #64	@ 0x40
 800d7da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7de:	e16c      	b.n	800daba <UART_SetConfig+0x5a6>
 800d7e0:	2380      	movs	r3, #128	@ 0x80
 800d7e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7e6:	e168      	b.n	800daba <UART_SetConfig+0x5a6>
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	4a1b      	ldr	r2, [pc, #108]	@ (800d85c <UART_SetConfig+0x348>)
 800d7ee:	4293      	cmp	r3, r2
 800d7f0:	d142      	bne.n	800d878 <UART_SetConfig+0x364>
 800d7f2:	4b16      	ldr	r3, [pc, #88]	@ (800d84c <UART_SetConfig+0x338>)
 800d7f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d7f6:	f003 0307 	and.w	r3, r3, #7
 800d7fa:	2b05      	cmp	r3, #5
 800d7fc:	d838      	bhi.n	800d870 <UART_SetConfig+0x35c>
 800d7fe:	a201      	add	r2, pc, #4	@ (adr r2, 800d804 <UART_SetConfig+0x2f0>)
 800d800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d804:	0800d81d 	.word	0x0800d81d
 800d808:	0800d825 	.word	0x0800d825
 800d80c:	0800d82d 	.word	0x0800d82d
 800d810:	0800d835 	.word	0x0800d835
 800d814:	0800d861 	.word	0x0800d861
 800d818:	0800d869 	.word	0x0800d869
 800d81c:	2300      	movs	r3, #0
 800d81e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d822:	e14a      	b.n	800daba <UART_SetConfig+0x5a6>
 800d824:	2304      	movs	r3, #4
 800d826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d82a:	e146      	b.n	800daba <UART_SetConfig+0x5a6>
 800d82c:	2308      	movs	r3, #8
 800d82e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d832:	e142      	b.n	800daba <UART_SetConfig+0x5a6>
 800d834:	2310      	movs	r3, #16
 800d836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d83a:	e13e      	b.n	800daba <UART_SetConfig+0x5a6>
 800d83c:	cfff69f3 	.word	0xcfff69f3
 800d840:	58000c00 	.word	0x58000c00
 800d844:	11fff4ff 	.word	0x11fff4ff
 800d848:	40011000 	.word	0x40011000
 800d84c:	58024400 	.word	0x58024400
 800d850:	40004400 	.word	0x40004400
 800d854:	40004800 	.word	0x40004800
 800d858:	40004c00 	.word	0x40004c00
 800d85c:	40005000 	.word	0x40005000
 800d860:	2320      	movs	r3, #32
 800d862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d866:	e128      	b.n	800daba <UART_SetConfig+0x5a6>
 800d868:	2340      	movs	r3, #64	@ 0x40
 800d86a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d86e:	e124      	b.n	800daba <UART_SetConfig+0x5a6>
 800d870:	2380      	movs	r3, #128	@ 0x80
 800d872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d876:	e120      	b.n	800daba <UART_SetConfig+0x5a6>
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	4acb      	ldr	r2, [pc, #812]	@ (800dbac <UART_SetConfig+0x698>)
 800d87e:	4293      	cmp	r3, r2
 800d880:	d176      	bne.n	800d970 <UART_SetConfig+0x45c>
 800d882:	4bcb      	ldr	r3, [pc, #812]	@ (800dbb0 <UART_SetConfig+0x69c>)
 800d884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d886:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d88a:	2b28      	cmp	r3, #40	@ 0x28
 800d88c:	d86c      	bhi.n	800d968 <UART_SetConfig+0x454>
 800d88e:	a201      	add	r2, pc, #4	@ (adr r2, 800d894 <UART_SetConfig+0x380>)
 800d890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d894:	0800d939 	.word	0x0800d939
 800d898:	0800d969 	.word	0x0800d969
 800d89c:	0800d969 	.word	0x0800d969
 800d8a0:	0800d969 	.word	0x0800d969
 800d8a4:	0800d969 	.word	0x0800d969
 800d8a8:	0800d969 	.word	0x0800d969
 800d8ac:	0800d969 	.word	0x0800d969
 800d8b0:	0800d969 	.word	0x0800d969
 800d8b4:	0800d941 	.word	0x0800d941
 800d8b8:	0800d969 	.word	0x0800d969
 800d8bc:	0800d969 	.word	0x0800d969
 800d8c0:	0800d969 	.word	0x0800d969
 800d8c4:	0800d969 	.word	0x0800d969
 800d8c8:	0800d969 	.word	0x0800d969
 800d8cc:	0800d969 	.word	0x0800d969
 800d8d0:	0800d969 	.word	0x0800d969
 800d8d4:	0800d949 	.word	0x0800d949
 800d8d8:	0800d969 	.word	0x0800d969
 800d8dc:	0800d969 	.word	0x0800d969
 800d8e0:	0800d969 	.word	0x0800d969
 800d8e4:	0800d969 	.word	0x0800d969
 800d8e8:	0800d969 	.word	0x0800d969
 800d8ec:	0800d969 	.word	0x0800d969
 800d8f0:	0800d969 	.word	0x0800d969
 800d8f4:	0800d951 	.word	0x0800d951
 800d8f8:	0800d969 	.word	0x0800d969
 800d8fc:	0800d969 	.word	0x0800d969
 800d900:	0800d969 	.word	0x0800d969
 800d904:	0800d969 	.word	0x0800d969
 800d908:	0800d969 	.word	0x0800d969
 800d90c:	0800d969 	.word	0x0800d969
 800d910:	0800d969 	.word	0x0800d969
 800d914:	0800d959 	.word	0x0800d959
 800d918:	0800d969 	.word	0x0800d969
 800d91c:	0800d969 	.word	0x0800d969
 800d920:	0800d969 	.word	0x0800d969
 800d924:	0800d969 	.word	0x0800d969
 800d928:	0800d969 	.word	0x0800d969
 800d92c:	0800d969 	.word	0x0800d969
 800d930:	0800d969 	.word	0x0800d969
 800d934:	0800d961 	.word	0x0800d961
 800d938:	2301      	movs	r3, #1
 800d93a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d93e:	e0bc      	b.n	800daba <UART_SetConfig+0x5a6>
 800d940:	2304      	movs	r3, #4
 800d942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d946:	e0b8      	b.n	800daba <UART_SetConfig+0x5a6>
 800d948:	2308      	movs	r3, #8
 800d94a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d94e:	e0b4      	b.n	800daba <UART_SetConfig+0x5a6>
 800d950:	2310      	movs	r3, #16
 800d952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d956:	e0b0      	b.n	800daba <UART_SetConfig+0x5a6>
 800d958:	2320      	movs	r3, #32
 800d95a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d95e:	e0ac      	b.n	800daba <UART_SetConfig+0x5a6>
 800d960:	2340      	movs	r3, #64	@ 0x40
 800d962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d966:	e0a8      	b.n	800daba <UART_SetConfig+0x5a6>
 800d968:	2380      	movs	r3, #128	@ 0x80
 800d96a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d96e:	e0a4      	b.n	800daba <UART_SetConfig+0x5a6>
 800d970:	697b      	ldr	r3, [r7, #20]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	4a8f      	ldr	r2, [pc, #572]	@ (800dbb4 <UART_SetConfig+0x6a0>)
 800d976:	4293      	cmp	r3, r2
 800d978:	d130      	bne.n	800d9dc <UART_SetConfig+0x4c8>
 800d97a:	4b8d      	ldr	r3, [pc, #564]	@ (800dbb0 <UART_SetConfig+0x69c>)
 800d97c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d97e:	f003 0307 	and.w	r3, r3, #7
 800d982:	2b05      	cmp	r3, #5
 800d984:	d826      	bhi.n	800d9d4 <UART_SetConfig+0x4c0>
 800d986:	a201      	add	r2, pc, #4	@ (adr r2, 800d98c <UART_SetConfig+0x478>)
 800d988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d98c:	0800d9a5 	.word	0x0800d9a5
 800d990:	0800d9ad 	.word	0x0800d9ad
 800d994:	0800d9b5 	.word	0x0800d9b5
 800d998:	0800d9bd 	.word	0x0800d9bd
 800d99c:	0800d9c5 	.word	0x0800d9c5
 800d9a0:	0800d9cd 	.word	0x0800d9cd
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9aa:	e086      	b.n	800daba <UART_SetConfig+0x5a6>
 800d9ac:	2304      	movs	r3, #4
 800d9ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9b2:	e082      	b.n	800daba <UART_SetConfig+0x5a6>
 800d9b4:	2308      	movs	r3, #8
 800d9b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9ba:	e07e      	b.n	800daba <UART_SetConfig+0x5a6>
 800d9bc:	2310      	movs	r3, #16
 800d9be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9c2:	e07a      	b.n	800daba <UART_SetConfig+0x5a6>
 800d9c4:	2320      	movs	r3, #32
 800d9c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9ca:	e076      	b.n	800daba <UART_SetConfig+0x5a6>
 800d9cc:	2340      	movs	r3, #64	@ 0x40
 800d9ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9d2:	e072      	b.n	800daba <UART_SetConfig+0x5a6>
 800d9d4:	2380      	movs	r3, #128	@ 0x80
 800d9d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9da:	e06e      	b.n	800daba <UART_SetConfig+0x5a6>
 800d9dc:	697b      	ldr	r3, [r7, #20]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	4a75      	ldr	r2, [pc, #468]	@ (800dbb8 <UART_SetConfig+0x6a4>)
 800d9e2:	4293      	cmp	r3, r2
 800d9e4:	d130      	bne.n	800da48 <UART_SetConfig+0x534>
 800d9e6:	4b72      	ldr	r3, [pc, #456]	@ (800dbb0 <UART_SetConfig+0x69c>)
 800d9e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d9ea:	f003 0307 	and.w	r3, r3, #7
 800d9ee:	2b05      	cmp	r3, #5
 800d9f0:	d826      	bhi.n	800da40 <UART_SetConfig+0x52c>
 800d9f2:	a201      	add	r2, pc, #4	@ (adr r2, 800d9f8 <UART_SetConfig+0x4e4>)
 800d9f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9f8:	0800da11 	.word	0x0800da11
 800d9fc:	0800da19 	.word	0x0800da19
 800da00:	0800da21 	.word	0x0800da21
 800da04:	0800da29 	.word	0x0800da29
 800da08:	0800da31 	.word	0x0800da31
 800da0c:	0800da39 	.word	0x0800da39
 800da10:	2300      	movs	r3, #0
 800da12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da16:	e050      	b.n	800daba <UART_SetConfig+0x5a6>
 800da18:	2304      	movs	r3, #4
 800da1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da1e:	e04c      	b.n	800daba <UART_SetConfig+0x5a6>
 800da20:	2308      	movs	r3, #8
 800da22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da26:	e048      	b.n	800daba <UART_SetConfig+0x5a6>
 800da28:	2310      	movs	r3, #16
 800da2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da2e:	e044      	b.n	800daba <UART_SetConfig+0x5a6>
 800da30:	2320      	movs	r3, #32
 800da32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da36:	e040      	b.n	800daba <UART_SetConfig+0x5a6>
 800da38:	2340      	movs	r3, #64	@ 0x40
 800da3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da3e:	e03c      	b.n	800daba <UART_SetConfig+0x5a6>
 800da40:	2380      	movs	r3, #128	@ 0x80
 800da42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da46:	e038      	b.n	800daba <UART_SetConfig+0x5a6>
 800da48:	697b      	ldr	r3, [r7, #20]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	4a5b      	ldr	r2, [pc, #364]	@ (800dbbc <UART_SetConfig+0x6a8>)
 800da4e:	4293      	cmp	r3, r2
 800da50:	d130      	bne.n	800dab4 <UART_SetConfig+0x5a0>
 800da52:	4b57      	ldr	r3, [pc, #348]	@ (800dbb0 <UART_SetConfig+0x69c>)
 800da54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800da56:	f003 0307 	and.w	r3, r3, #7
 800da5a:	2b05      	cmp	r3, #5
 800da5c:	d826      	bhi.n	800daac <UART_SetConfig+0x598>
 800da5e:	a201      	add	r2, pc, #4	@ (adr r2, 800da64 <UART_SetConfig+0x550>)
 800da60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da64:	0800da7d 	.word	0x0800da7d
 800da68:	0800da85 	.word	0x0800da85
 800da6c:	0800da8d 	.word	0x0800da8d
 800da70:	0800da95 	.word	0x0800da95
 800da74:	0800da9d 	.word	0x0800da9d
 800da78:	0800daa5 	.word	0x0800daa5
 800da7c:	2302      	movs	r3, #2
 800da7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da82:	e01a      	b.n	800daba <UART_SetConfig+0x5a6>
 800da84:	2304      	movs	r3, #4
 800da86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da8a:	e016      	b.n	800daba <UART_SetConfig+0x5a6>
 800da8c:	2308      	movs	r3, #8
 800da8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da92:	e012      	b.n	800daba <UART_SetConfig+0x5a6>
 800da94:	2310      	movs	r3, #16
 800da96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da9a:	e00e      	b.n	800daba <UART_SetConfig+0x5a6>
 800da9c:	2320      	movs	r3, #32
 800da9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daa2:	e00a      	b.n	800daba <UART_SetConfig+0x5a6>
 800daa4:	2340      	movs	r3, #64	@ 0x40
 800daa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daaa:	e006      	b.n	800daba <UART_SetConfig+0x5a6>
 800daac:	2380      	movs	r3, #128	@ 0x80
 800daae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dab2:	e002      	b.n	800daba <UART_SetConfig+0x5a6>
 800dab4:	2380      	movs	r3, #128	@ 0x80
 800dab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	4a3f      	ldr	r2, [pc, #252]	@ (800dbbc <UART_SetConfig+0x6a8>)
 800dac0:	4293      	cmp	r3, r2
 800dac2:	f040 80f8 	bne.w	800dcb6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dac6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800daca:	2b20      	cmp	r3, #32
 800dacc:	dc46      	bgt.n	800db5c <UART_SetConfig+0x648>
 800dace:	2b02      	cmp	r3, #2
 800dad0:	f2c0 8082 	blt.w	800dbd8 <UART_SetConfig+0x6c4>
 800dad4:	3b02      	subs	r3, #2
 800dad6:	2b1e      	cmp	r3, #30
 800dad8:	d87e      	bhi.n	800dbd8 <UART_SetConfig+0x6c4>
 800dada:	a201      	add	r2, pc, #4	@ (adr r2, 800dae0 <UART_SetConfig+0x5cc>)
 800dadc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dae0:	0800db63 	.word	0x0800db63
 800dae4:	0800dbd9 	.word	0x0800dbd9
 800dae8:	0800db6b 	.word	0x0800db6b
 800daec:	0800dbd9 	.word	0x0800dbd9
 800daf0:	0800dbd9 	.word	0x0800dbd9
 800daf4:	0800dbd9 	.word	0x0800dbd9
 800daf8:	0800db7b 	.word	0x0800db7b
 800dafc:	0800dbd9 	.word	0x0800dbd9
 800db00:	0800dbd9 	.word	0x0800dbd9
 800db04:	0800dbd9 	.word	0x0800dbd9
 800db08:	0800dbd9 	.word	0x0800dbd9
 800db0c:	0800dbd9 	.word	0x0800dbd9
 800db10:	0800dbd9 	.word	0x0800dbd9
 800db14:	0800dbd9 	.word	0x0800dbd9
 800db18:	0800db8b 	.word	0x0800db8b
 800db1c:	0800dbd9 	.word	0x0800dbd9
 800db20:	0800dbd9 	.word	0x0800dbd9
 800db24:	0800dbd9 	.word	0x0800dbd9
 800db28:	0800dbd9 	.word	0x0800dbd9
 800db2c:	0800dbd9 	.word	0x0800dbd9
 800db30:	0800dbd9 	.word	0x0800dbd9
 800db34:	0800dbd9 	.word	0x0800dbd9
 800db38:	0800dbd9 	.word	0x0800dbd9
 800db3c:	0800dbd9 	.word	0x0800dbd9
 800db40:	0800dbd9 	.word	0x0800dbd9
 800db44:	0800dbd9 	.word	0x0800dbd9
 800db48:	0800dbd9 	.word	0x0800dbd9
 800db4c:	0800dbd9 	.word	0x0800dbd9
 800db50:	0800dbd9 	.word	0x0800dbd9
 800db54:	0800dbd9 	.word	0x0800dbd9
 800db58:	0800dbcb 	.word	0x0800dbcb
 800db5c:	2b40      	cmp	r3, #64	@ 0x40
 800db5e:	d037      	beq.n	800dbd0 <UART_SetConfig+0x6bc>
 800db60:	e03a      	b.n	800dbd8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800db62:	f7fd f911 	bl	800ad88 <HAL_RCCEx_GetD3PCLK1Freq>
 800db66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800db68:	e03c      	b.n	800dbe4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800db6e:	4618      	mov	r0, r3
 800db70:	f7fd f920 	bl	800adb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800db74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db78:	e034      	b.n	800dbe4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800db7a:	f107 0318 	add.w	r3, r7, #24
 800db7e:	4618      	mov	r0, r3
 800db80:	f7fd fa6c 	bl	800b05c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800db84:	69fb      	ldr	r3, [r7, #28]
 800db86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db88:	e02c      	b.n	800dbe4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800db8a:	4b09      	ldr	r3, [pc, #36]	@ (800dbb0 <UART_SetConfig+0x69c>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	f003 0320 	and.w	r3, r3, #32
 800db92:	2b00      	cmp	r3, #0
 800db94:	d016      	beq.n	800dbc4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800db96:	4b06      	ldr	r3, [pc, #24]	@ (800dbb0 <UART_SetConfig+0x69c>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	08db      	lsrs	r3, r3, #3
 800db9c:	f003 0303 	and.w	r3, r3, #3
 800dba0:	4a07      	ldr	r2, [pc, #28]	@ (800dbc0 <UART_SetConfig+0x6ac>)
 800dba2:	fa22 f303 	lsr.w	r3, r2, r3
 800dba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dba8:	e01c      	b.n	800dbe4 <UART_SetConfig+0x6d0>
 800dbaa:	bf00      	nop
 800dbac:	40011400 	.word	0x40011400
 800dbb0:	58024400 	.word	0x58024400
 800dbb4:	40007800 	.word	0x40007800
 800dbb8:	40007c00 	.word	0x40007c00
 800dbbc:	58000c00 	.word	0x58000c00
 800dbc0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800dbc4:	4b9d      	ldr	r3, [pc, #628]	@ (800de3c <UART_SetConfig+0x928>)
 800dbc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dbc8:	e00c      	b.n	800dbe4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dbca:	4b9d      	ldr	r3, [pc, #628]	@ (800de40 <UART_SetConfig+0x92c>)
 800dbcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dbce:	e009      	b.n	800dbe4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dbd0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dbd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dbd6:	e005      	b.n	800dbe4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800dbd8:	2300      	movs	r3, #0
 800dbda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800dbdc:	2301      	movs	r3, #1
 800dbde:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800dbe2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dbe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	f000 81de 	beq.w	800dfa8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800dbec:	697b      	ldr	r3, [r7, #20]
 800dbee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbf0:	4a94      	ldr	r2, [pc, #592]	@ (800de44 <UART_SetConfig+0x930>)
 800dbf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dbf6:	461a      	mov	r2, r3
 800dbf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbfa:	fbb3 f3f2 	udiv	r3, r3, r2
 800dbfe:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	685a      	ldr	r2, [r3, #4]
 800dc04:	4613      	mov	r3, r2
 800dc06:	005b      	lsls	r3, r3, #1
 800dc08:	4413      	add	r3, r2
 800dc0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc0c:	429a      	cmp	r2, r3
 800dc0e:	d305      	bcc.n	800dc1c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dc10:	697b      	ldr	r3, [r7, #20]
 800dc12:	685b      	ldr	r3, [r3, #4]
 800dc14:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dc16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d903      	bls.n	800dc24 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800dc22:	e1c1      	b.n	800dfa8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dc24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc26:	2200      	movs	r2, #0
 800dc28:	60bb      	str	r3, [r7, #8]
 800dc2a:	60fa      	str	r2, [r7, #12]
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc30:	4a84      	ldr	r2, [pc, #528]	@ (800de44 <UART_SetConfig+0x930>)
 800dc32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc36:	b29b      	uxth	r3, r3
 800dc38:	2200      	movs	r2, #0
 800dc3a:	603b      	str	r3, [r7, #0]
 800dc3c:	607a      	str	r2, [r7, #4]
 800dc3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dc46:	f7f2 fba3 	bl	8000390 <__aeabi_uldivmod>
 800dc4a:	4602      	mov	r2, r0
 800dc4c:	460b      	mov	r3, r1
 800dc4e:	4610      	mov	r0, r2
 800dc50:	4619      	mov	r1, r3
 800dc52:	f04f 0200 	mov.w	r2, #0
 800dc56:	f04f 0300 	mov.w	r3, #0
 800dc5a:	020b      	lsls	r3, r1, #8
 800dc5c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dc60:	0202      	lsls	r2, r0, #8
 800dc62:	6979      	ldr	r1, [r7, #20]
 800dc64:	6849      	ldr	r1, [r1, #4]
 800dc66:	0849      	lsrs	r1, r1, #1
 800dc68:	2000      	movs	r0, #0
 800dc6a:	460c      	mov	r4, r1
 800dc6c:	4605      	mov	r5, r0
 800dc6e:	eb12 0804 	adds.w	r8, r2, r4
 800dc72:	eb43 0905 	adc.w	r9, r3, r5
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	685b      	ldr	r3, [r3, #4]
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	469a      	mov	sl, r3
 800dc7e:	4693      	mov	fp, r2
 800dc80:	4652      	mov	r2, sl
 800dc82:	465b      	mov	r3, fp
 800dc84:	4640      	mov	r0, r8
 800dc86:	4649      	mov	r1, r9
 800dc88:	f7f2 fb82 	bl	8000390 <__aeabi_uldivmod>
 800dc8c:	4602      	mov	r2, r0
 800dc8e:	460b      	mov	r3, r1
 800dc90:	4613      	mov	r3, r2
 800dc92:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dc94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dc9a:	d308      	bcc.n	800dcae <UART_SetConfig+0x79a>
 800dc9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dca2:	d204      	bcs.n	800dcae <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800dca4:	697b      	ldr	r3, [r7, #20]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dcaa:	60da      	str	r2, [r3, #12]
 800dcac:	e17c      	b.n	800dfa8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800dcae:	2301      	movs	r3, #1
 800dcb0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800dcb4:	e178      	b.n	800dfa8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dcb6:	697b      	ldr	r3, [r7, #20]
 800dcb8:	69db      	ldr	r3, [r3, #28]
 800dcba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dcbe:	f040 80c5 	bne.w	800de4c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800dcc2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800dcc6:	2b20      	cmp	r3, #32
 800dcc8:	dc48      	bgt.n	800dd5c <UART_SetConfig+0x848>
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	db7b      	blt.n	800ddc6 <UART_SetConfig+0x8b2>
 800dcce:	2b20      	cmp	r3, #32
 800dcd0:	d879      	bhi.n	800ddc6 <UART_SetConfig+0x8b2>
 800dcd2:	a201      	add	r2, pc, #4	@ (adr r2, 800dcd8 <UART_SetConfig+0x7c4>)
 800dcd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcd8:	0800dd63 	.word	0x0800dd63
 800dcdc:	0800dd6b 	.word	0x0800dd6b
 800dce0:	0800ddc7 	.word	0x0800ddc7
 800dce4:	0800ddc7 	.word	0x0800ddc7
 800dce8:	0800dd73 	.word	0x0800dd73
 800dcec:	0800ddc7 	.word	0x0800ddc7
 800dcf0:	0800ddc7 	.word	0x0800ddc7
 800dcf4:	0800ddc7 	.word	0x0800ddc7
 800dcf8:	0800dd83 	.word	0x0800dd83
 800dcfc:	0800ddc7 	.word	0x0800ddc7
 800dd00:	0800ddc7 	.word	0x0800ddc7
 800dd04:	0800ddc7 	.word	0x0800ddc7
 800dd08:	0800ddc7 	.word	0x0800ddc7
 800dd0c:	0800ddc7 	.word	0x0800ddc7
 800dd10:	0800ddc7 	.word	0x0800ddc7
 800dd14:	0800ddc7 	.word	0x0800ddc7
 800dd18:	0800dd93 	.word	0x0800dd93
 800dd1c:	0800ddc7 	.word	0x0800ddc7
 800dd20:	0800ddc7 	.word	0x0800ddc7
 800dd24:	0800ddc7 	.word	0x0800ddc7
 800dd28:	0800ddc7 	.word	0x0800ddc7
 800dd2c:	0800ddc7 	.word	0x0800ddc7
 800dd30:	0800ddc7 	.word	0x0800ddc7
 800dd34:	0800ddc7 	.word	0x0800ddc7
 800dd38:	0800ddc7 	.word	0x0800ddc7
 800dd3c:	0800ddc7 	.word	0x0800ddc7
 800dd40:	0800ddc7 	.word	0x0800ddc7
 800dd44:	0800ddc7 	.word	0x0800ddc7
 800dd48:	0800ddc7 	.word	0x0800ddc7
 800dd4c:	0800ddc7 	.word	0x0800ddc7
 800dd50:	0800ddc7 	.word	0x0800ddc7
 800dd54:	0800ddc7 	.word	0x0800ddc7
 800dd58:	0800ddb9 	.word	0x0800ddb9
 800dd5c:	2b40      	cmp	r3, #64	@ 0x40
 800dd5e:	d02e      	beq.n	800ddbe <UART_SetConfig+0x8aa>
 800dd60:	e031      	b.n	800ddc6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dd62:	f7fb f85b 	bl	8008e1c <HAL_RCC_GetPCLK1Freq>
 800dd66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dd68:	e033      	b.n	800ddd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dd6a:	f7fb f86d 	bl	8008e48 <HAL_RCC_GetPCLK2Freq>
 800dd6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dd70:	e02f      	b.n	800ddd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dd72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dd76:	4618      	mov	r0, r3
 800dd78:	f7fd f81c 	bl	800adb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dd7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd80:	e027      	b.n	800ddd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dd82:	f107 0318 	add.w	r3, r7, #24
 800dd86:	4618      	mov	r0, r3
 800dd88:	f7fd f968 	bl	800b05c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dd8c:	69fb      	ldr	r3, [r7, #28]
 800dd8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd90:	e01f      	b.n	800ddd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dd92:	4b2d      	ldr	r3, [pc, #180]	@ (800de48 <UART_SetConfig+0x934>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	f003 0320 	and.w	r3, r3, #32
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d009      	beq.n	800ddb2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dd9e:	4b2a      	ldr	r3, [pc, #168]	@ (800de48 <UART_SetConfig+0x934>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	08db      	lsrs	r3, r3, #3
 800dda4:	f003 0303 	and.w	r3, r3, #3
 800dda8:	4a24      	ldr	r2, [pc, #144]	@ (800de3c <UART_SetConfig+0x928>)
 800ddaa:	fa22 f303 	lsr.w	r3, r2, r3
 800ddae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ddb0:	e00f      	b.n	800ddd2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ddb2:	4b22      	ldr	r3, [pc, #136]	@ (800de3c <UART_SetConfig+0x928>)
 800ddb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ddb6:	e00c      	b.n	800ddd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ddb8:	4b21      	ldr	r3, [pc, #132]	@ (800de40 <UART_SetConfig+0x92c>)
 800ddba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ddbc:	e009      	b.n	800ddd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ddbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ddc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ddc4:	e005      	b.n	800ddd2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ddca:	2301      	movs	r3, #1
 800ddcc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ddd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ddd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	f000 80e7 	beq.w	800dfa8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ddda:	697b      	ldr	r3, [r7, #20]
 800dddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddde:	4a19      	ldr	r2, [pc, #100]	@ (800de44 <UART_SetConfig+0x930>)
 800dde0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dde4:	461a      	mov	r2, r3
 800dde6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dde8:	fbb3 f3f2 	udiv	r3, r3, r2
 800ddec:	005a      	lsls	r2, r3, #1
 800ddee:	697b      	ldr	r3, [r7, #20]
 800ddf0:	685b      	ldr	r3, [r3, #4]
 800ddf2:	085b      	lsrs	r3, r3, #1
 800ddf4:	441a      	add	r2, r3
 800ddf6:	697b      	ldr	r3, [r7, #20]
 800ddf8:	685b      	ldr	r3, [r3, #4]
 800ddfa:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddfe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800de00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de02:	2b0f      	cmp	r3, #15
 800de04:	d916      	bls.n	800de34 <UART_SetConfig+0x920>
 800de06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800de0c:	d212      	bcs.n	800de34 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800de0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de10:	b29b      	uxth	r3, r3
 800de12:	f023 030f 	bic.w	r3, r3, #15
 800de16:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800de18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de1a:	085b      	lsrs	r3, r3, #1
 800de1c:	b29b      	uxth	r3, r3
 800de1e:	f003 0307 	and.w	r3, r3, #7
 800de22:	b29a      	uxth	r2, r3
 800de24:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800de26:	4313      	orrs	r3, r2
 800de28:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800de2a:	697b      	ldr	r3, [r7, #20]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800de30:	60da      	str	r2, [r3, #12]
 800de32:	e0b9      	b.n	800dfa8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800de34:	2301      	movs	r3, #1
 800de36:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800de3a:	e0b5      	b.n	800dfa8 <UART_SetConfig+0xa94>
 800de3c:	03d09000 	.word	0x03d09000
 800de40:	003d0900 	.word	0x003d0900
 800de44:	08010248 	.word	0x08010248
 800de48:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800de4c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800de50:	2b20      	cmp	r3, #32
 800de52:	dc49      	bgt.n	800dee8 <UART_SetConfig+0x9d4>
 800de54:	2b00      	cmp	r3, #0
 800de56:	db7c      	blt.n	800df52 <UART_SetConfig+0xa3e>
 800de58:	2b20      	cmp	r3, #32
 800de5a:	d87a      	bhi.n	800df52 <UART_SetConfig+0xa3e>
 800de5c:	a201      	add	r2, pc, #4	@ (adr r2, 800de64 <UART_SetConfig+0x950>)
 800de5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de62:	bf00      	nop
 800de64:	0800deef 	.word	0x0800deef
 800de68:	0800def7 	.word	0x0800def7
 800de6c:	0800df53 	.word	0x0800df53
 800de70:	0800df53 	.word	0x0800df53
 800de74:	0800deff 	.word	0x0800deff
 800de78:	0800df53 	.word	0x0800df53
 800de7c:	0800df53 	.word	0x0800df53
 800de80:	0800df53 	.word	0x0800df53
 800de84:	0800df0f 	.word	0x0800df0f
 800de88:	0800df53 	.word	0x0800df53
 800de8c:	0800df53 	.word	0x0800df53
 800de90:	0800df53 	.word	0x0800df53
 800de94:	0800df53 	.word	0x0800df53
 800de98:	0800df53 	.word	0x0800df53
 800de9c:	0800df53 	.word	0x0800df53
 800dea0:	0800df53 	.word	0x0800df53
 800dea4:	0800df1f 	.word	0x0800df1f
 800dea8:	0800df53 	.word	0x0800df53
 800deac:	0800df53 	.word	0x0800df53
 800deb0:	0800df53 	.word	0x0800df53
 800deb4:	0800df53 	.word	0x0800df53
 800deb8:	0800df53 	.word	0x0800df53
 800debc:	0800df53 	.word	0x0800df53
 800dec0:	0800df53 	.word	0x0800df53
 800dec4:	0800df53 	.word	0x0800df53
 800dec8:	0800df53 	.word	0x0800df53
 800decc:	0800df53 	.word	0x0800df53
 800ded0:	0800df53 	.word	0x0800df53
 800ded4:	0800df53 	.word	0x0800df53
 800ded8:	0800df53 	.word	0x0800df53
 800dedc:	0800df53 	.word	0x0800df53
 800dee0:	0800df53 	.word	0x0800df53
 800dee4:	0800df45 	.word	0x0800df45
 800dee8:	2b40      	cmp	r3, #64	@ 0x40
 800deea:	d02e      	beq.n	800df4a <UART_SetConfig+0xa36>
 800deec:	e031      	b.n	800df52 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800deee:	f7fa ff95 	bl	8008e1c <HAL_RCC_GetPCLK1Freq>
 800def2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800def4:	e033      	b.n	800df5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800def6:	f7fa ffa7 	bl	8008e48 <HAL_RCC_GetPCLK2Freq>
 800defa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800defc:	e02f      	b.n	800df5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800defe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800df02:	4618      	mov	r0, r3
 800df04:	f7fc ff56 	bl	800adb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800df08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df0c:	e027      	b.n	800df5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800df0e:	f107 0318 	add.w	r3, r7, #24
 800df12:	4618      	mov	r0, r3
 800df14:	f7fd f8a2 	bl	800b05c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800df18:	69fb      	ldr	r3, [r7, #28]
 800df1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df1c:	e01f      	b.n	800df5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800df1e:	4b2d      	ldr	r3, [pc, #180]	@ (800dfd4 <UART_SetConfig+0xac0>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	f003 0320 	and.w	r3, r3, #32
 800df26:	2b00      	cmp	r3, #0
 800df28:	d009      	beq.n	800df3e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800df2a:	4b2a      	ldr	r3, [pc, #168]	@ (800dfd4 <UART_SetConfig+0xac0>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	08db      	lsrs	r3, r3, #3
 800df30:	f003 0303 	and.w	r3, r3, #3
 800df34:	4a28      	ldr	r2, [pc, #160]	@ (800dfd8 <UART_SetConfig+0xac4>)
 800df36:	fa22 f303 	lsr.w	r3, r2, r3
 800df3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800df3c:	e00f      	b.n	800df5e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800df3e:	4b26      	ldr	r3, [pc, #152]	@ (800dfd8 <UART_SetConfig+0xac4>)
 800df40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df42:	e00c      	b.n	800df5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800df44:	4b25      	ldr	r3, [pc, #148]	@ (800dfdc <UART_SetConfig+0xac8>)
 800df46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df48:	e009      	b.n	800df5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800df4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800df4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df50:	e005      	b.n	800df5e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800df52:	2300      	movs	r3, #0
 800df54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800df56:	2301      	movs	r3, #1
 800df58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800df5c:	bf00      	nop
    }

    if (pclk != 0U)
 800df5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df60:	2b00      	cmp	r3, #0
 800df62:	d021      	beq.n	800dfa8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800df64:	697b      	ldr	r3, [r7, #20]
 800df66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df68:	4a1d      	ldr	r2, [pc, #116]	@ (800dfe0 <UART_SetConfig+0xacc>)
 800df6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df6e:	461a      	mov	r2, r3
 800df70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df72:	fbb3 f2f2 	udiv	r2, r3, r2
 800df76:	697b      	ldr	r3, [r7, #20]
 800df78:	685b      	ldr	r3, [r3, #4]
 800df7a:	085b      	lsrs	r3, r3, #1
 800df7c:	441a      	add	r2, r3
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	685b      	ldr	r3, [r3, #4]
 800df82:	fbb2 f3f3 	udiv	r3, r2, r3
 800df86:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800df88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df8a:	2b0f      	cmp	r3, #15
 800df8c:	d909      	bls.n	800dfa2 <UART_SetConfig+0xa8e>
 800df8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800df94:	d205      	bcs.n	800dfa2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800df96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df98:	b29a      	uxth	r2, r3
 800df9a:	697b      	ldr	r3, [r7, #20]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	60da      	str	r2, [r3, #12]
 800dfa0:	e002      	b.n	800dfa8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dfa8:	697b      	ldr	r3, [r7, #20]
 800dfaa:	2201      	movs	r2, #1
 800dfac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800dfb0:	697b      	ldr	r3, [r7, #20]
 800dfb2:	2201      	movs	r2, #1
 800dfb4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	2200      	movs	r2, #0
 800dfbc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800dfbe:	697b      	ldr	r3, [r7, #20]
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800dfc4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800dfc8:	4618      	mov	r0, r3
 800dfca:	3748      	adds	r7, #72	@ 0x48
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dfd2:	bf00      	nop
 800dfd4:	58024400 	.word	0x58024400
 800dfd8:	03d09000 	.word	0x03d09000
 800dfdc:	003d0900 	.word	0x003d0900
 800dfe0:	08010248 	.word	0x08010248

0800dfe4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	b083      	sub	sp, #12
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dff0:	f003 0308 	and.w	r3, r3, #8
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d00a      	beq.n	800e00e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	685b      	ldr	r3, [r3, #4]
 800dffe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	430a      	orrs	r2, r1
 800e00c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e012:	f003 0301 	and.w	r3, r3, #1
 800e016:	2b00      	cmp	r3, #0
 800e018:	d00a      	beq.n	800e030 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	685b      	ldr	r3, [r3, #4]
 800e020:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	430a      	orrs	r2, r1
 800e02e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e034:	f003 0302 	and.w	r3, r3, #2
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d00a      	beq.n	800e052 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	685b      	ldr	r3, [r3, #4]
 800e042:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	430a      	orrs	r2, r1
 800e050:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e056:	f003 0304 	and.w	r3, r3, #4
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d00a      	beq.n	800e074 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	685b      	ldr	r3, [r3, #4]
 800e064:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	430a      	orrs	r2, r1
 800e072:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e078:	f003 0310 	and.w	r3, r3, #16
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d00a      	beq.n	800e096 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	689b      	ldr	r3, [r3, #8]
 800e086:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	430a      	orrs	r2, r1
 800e094:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e09a:	f003 0320 	and.w	r3, r3, #32
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d00a      	beq.n	800e0b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	689b      	ldr	r3, [r3, #8]
 800e0a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	430a      	orrs	r2, r1
 800e0b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d01a      	beq.n	800e0fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	685b      	ldr	r3, [r3, #4]
 800e0ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	430a      	orrs	r2, r1
 800e0d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e0de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e0e2:	d10a      	bne.n	800e0fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	685b      	ldr	r3, [r3, #4]
 800e0ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	430a      	orrs	r2, r1
 800e0f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e102:	2b00      	cmp	r3, #0
 800e104:	d00a      	beq.n	800e11c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	685b      	ldr	r3, [r3, #4]
 800e10c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	430a      	orrs	r2, r1
 800e11a:	605a      	str	r2, [r3, #4]
  }
}
 800e11c:	bf00      	nop
 800e11e:	370c      	adds	r7, #12
 800e120:	46bd      	mov	sp, r7
 800e122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e126:	4770      	bx	lr

0800e128 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b098      	sub	sp, #96	@ 0x60
 800e12c:	af02      	add	r7, sp, #8
 800e12e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2200      	movs	r2, #0
 800e134:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e138:	f7f4 fefa 	bl	8002f30 <HAL_GetTick>
 800e13c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	f003 0308 	and.w	r3, r3, #8
 800e148:	2b08      	cmp	r3, #8
 800e14a:	d12f      	bne.n	800e1ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e14c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e150:	9300      	str	r3, [sp, #0]
 800e152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e154:	2200      	movs	r2, #0
 800e156:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	f000 f88e 	bl	800e27c <UART_WaitOnFlagUntilTimeout>
 800e160:	4603      	mov	r3, r0
 800e162:	2b00      	cmp	r3, #0
 800e164:	d022      	beq.n	800e1ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e16c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e16e:	e853 3f00 	ldrex	r3, [r3]
 800e172:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e176:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e17a:	653b      	str	r3, [r7, #80]	@ 0x50
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	461a      	mov	r2, r3
 800e182:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e184:	647b      	str	r3, [r7, #68]	@ 0x44
 800e186:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e188:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e18a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e18c:	e841 2300 	strex	r3, r2, [r1]
 800e190:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e194:	2b00      	cmp	r3, #0
 800e196:	d1e6      	bne.n	800e166 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2220      	movs	r2, #32
 800e19c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e1a8:	2303      	movs	r3, #3
 800e1aa:	e063      	b.n	800e274 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	f003 0304 	and.w	r3, r3, #4
 800e1b6:	2b04      	cmp	r3, #4
 800e1b8:	d149      	bne.n	800e24e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e1ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e1be:	9300      	str	r3, [sp, #0]
 800e1c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e1c8:	6878      	ldr	r0, [r7, #4]
 800e1ca:	f000 f857 	bl	800e27c <UART_WaitOnFlagUntilTimeout>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d03c      	beq.n	800e24e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1dc:	e853 3f00 	ldrex	r3, [r3]
 800e1e0:	623b      	str	r3, [r7, #32]
   return(result);
 800e1e2:	6a3b      	ldr	r3, [r7, #32]
 800e1e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e1e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	461a      	mov	r2, r3
 800e1f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e1f2:	633b      	str	r3, [r7, #48]	@ 0x30
 800e1f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e1f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e1fa:	e841 2300 	strex	r3, r2, [r1]
 800e1fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e202:	2b00      	cmp	r3, #0
 800e204:	d1e6      	bne.n	800e1d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	3308      	adds	r3, #8
 800e20c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e20e:	693b      	ldr	r3, [r7, #16]
 800e210:	e853 3f00 	ldrex	r3, [r3]
 800e214:	60fb      	str	r3, [r7, #12]
   return(result);
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	f023 0301 	bic.w	r3, r3, #1
 800e21c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	3308      	adds	r3, #8
 800e224:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e226:	61fa      	str	r2, [r7, #28]
 800e228:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e22a:	69b9      	ldr	r1, [r7, #24]
 800e22c:	69fa      	ldr	r2, [r7, #28]
 800e22e:	e841 2300 	strex	r3, r2, [r1]
 800e232:	617b      	str	r3, [r7, #20]
   return(result);
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d1e5      	bne.n	800e206 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2220      	movs	r2, #32
 800e23e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	2200      	movs	r2, #0
 800e246:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e24a:	2303      	movs	r3, #3
 800e24c:	e012      	b.n	800e274 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	2220      	movs	r2, #32
 800e252:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2220      	movs	r2, #32
 800e25a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2200      	movs	r2, #0
 800e262:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	2200      	movs	r2, #0
 800e268:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	2200      	movs	r2, #0
 800e26e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e272:	2300      	movs	r3, #0
}
 800e274:	4618      	mov	r0, r3
 800e276:	3758      	adds	r7, #88	@ 0x58
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}

0800e27c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b084      	sub	sp, #16
 800e280:	af00      	add	r7, sp, #0
 800e282:	60f8      	str	r0, [r7, #12]
 800e284:	60b9      	str	r1, [r7, #8]
 800e286:	603b      	str	r3, [r7, #0]
 800e288:	4613      	mov	r3, r2
 800e28a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e28c:	e04f      	b.n	800e32e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e28e:	69bb      	ldr	r3, [r7, #24]
 800e290:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e294:	d04b      	beq.n	800e32e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e296:	f7f4 fe4b 	bl	8002f30 <HAL_GetTick>
 800e29a:	4602      	mov	r2, r0
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	1ad3      	subs	r3, r2, r3
 800e2a0:	69ba      	ldr	r2, [r7, #24]
 800e2a2:	429a      	cmp	r2, r3
 800e2a4:	d302      	bcc.n	800e2ac <UART_WaitOnFlagUntilTimeout+0x30>
 800e2a6:	69bb      	ldr	r3, [r7, #24]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d101      	bne.n	800e2b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e2ac:	2303      	movs	r3, #3
 800e2ae:	e04e      	b.n	800e34e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	f003 0304 	and.w	r3, r3, #4
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d037      	beq.n	800e32e <UART_WaitOnFlagUntilTimeout+0xb2>
 800e2be:	68bb      	ldr	r3, [r7, #8]
 800e2c0:	2b80      	cmp	r3, #128	@ 0x80
 800e2c2:	d034      	beq.n	800e32e <UART_WaitOnFlagUntilTimeout+0xb2>
 800e2c4:	68bb      	ldr	r3, [r7, #8]
 800e2c6:	2b40      	cmp	r3, #64	@ 0x40
 800e2c8:	d031      	beq.n	800e32e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	69db      	ldr	r3, [r3, #28]
 800e2d0:	f003 0308 	and.w	r3, r3, #8
 800e2d4:	2b08      	cmp	r3, #8
 800e2d6:	d110      	bne.n	800e2fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	2208      	movs	r2, #8
 800e2de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e2e0:	68f8      	ldr	r0, [r7, #12]
 800e2e2:	f000 f95b 	bl	800e59c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	2208      	movs	r2, #8
 800e2ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e2f6:	2301      	movs	r3, #1
 800e2f8:	e029      	b.n	800e34e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	69db      	ldr	r3, [r3, #28]
 800e300:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e304:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e308:	d111      	bne.n	800e32e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e312:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e314:	68f8      	ldr	r0, [r7, #12]
 800e316:	f000 f941 	bl	800e59c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	2220      	movs	r2, #32
 800e31e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	2200      	movs	r2, #0
 800e326:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e32a:	2303      	movs	r3, #3
 800e32c:	e00f      	b.n	800e34e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	69da      	ldr	r2, [r3, #28]
 800e334:	68bb      	ldr	r3, [r7, #8]
 800e336:	4013      	ands	r3, r2
 800e338:	68ba      	ldr	r2, [r7, #8]
 800e33a:	429a      	cmp	r2, r3
 800e33c:	bf0c      	ite	eq
 800e33e:	2301      	moveq	r3, #1
 800e340:	2300      	movne	r3, #0
 800e342:	b2db      	uxtb	r3, r3
 800e344:	461a      	mov	r2, r3
 800e346:	79fb      	ldrb	r3, [r7, #7]
 800e348:	429a      	cmp	r2, r3
 800e34a:	d0a0      	beq.n	800e28e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e34c:	2300      	movs	r3, #0
}
 800e34e:	4618      	mov	r0, r3
 800e350:	3710      	adds	r7, #16
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}
	...

0800e358 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e358:	b480      	push	{r7}
 800e35a:	b0a3      	sub	sp, #140	@ 0x8c
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	60f8      	str	r0, [r7, #12]
 800e360:	60b9      	str	r1, [r7, #8]
 800e362:	4613      	mov	r3, r2
 800e364:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	68ba      	ldr	r2, [r7, #8]
 800e36a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	88fa      	ldrh	r2, [r7, #6]
 800e370:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	88fa      	ldrh	r2, [r7, #6]
 800e378:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	2200      	movs	r2, #0
 800e380:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	689b      	ldr	r3, [r3, #8]
 800e386:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e38a:	d10e      	bne.n	800e3aa <UART_Start_Receive_IT+0x52>
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	691b      	ldr	r3, [r3, #16]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d105      	bne.n	800e3a0 <UART_Start_Receive_IT+0x48>
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800e39a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e39e:	e02d      	b.n	800e3fc <UART_Start_Receive_IT+0xa4>
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	22ff      	movs	r2, #255	@ 0xff
 800e3a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e3a8:	e028      	b.n	800e3fc <UART_Start_Receive_IT+0xa4>
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	689b      	ldr	r3, [r3, #8]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d10d      	bne.n	800e3ce <UART_Start_Receive_IT+0x76>
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	691b      	ldr	r3, [r3, #16]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d104      	bne.n	800e3c4 <UART_Start_Receive_IT+0x6c>
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	22ff      	movs	r2, #255	@ 0xff
 800e3be:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e3c2:	e01b      	b.n	800e3fc <UART_Start_Receive_IT+0xa4>
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	227f      	movs	r2, #127	@ 0x7f
 800e3c8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e3cc:	e016      	b.n	800e3fc <UART_Start_Receive_IT+0xa4>
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	689b      	ldr	r3, [r3, #8]
 800e3d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e3d6:	d10d      	bne.n	800e3f4 <UART_Start_Receive_IT+0x9c>
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	691b      	ldr	r3, [r3, #16]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d104      	bne.n	800e3ea <UART_Start_Receive_IT+0x92>
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	227f      	movs	r2, #127	@ 0x7f
 800e3e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e3e8:	e008      	b.n	800e3fc <UART_Start_Receive_IT+0xa4>
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	223f      	movs	r2, #63	@ 0x3f
 800e3ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e3f2:	e003      	b.n	800e3fc <UART_Start_Receive_IT+0xa4>
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	2200      	movs	r2, #0
 800e400:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	2222      	movs	r2, #34	@ 0x22
 800e408:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	3308      	adds	r3, #8
 800e412:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e414:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e416:	e853 3f00 	ldrex	r3, [r3]
 800e41a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800e41c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e41e:	f043 0301 	orr.w	r3, r3, #1
 800e422:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	3308      	adds	r3, #8
 800e42c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e430:	673a      	str	r2, [r7, #112]	@ 0x70
 800e432:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e434:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800e436:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800e438:	e841 2300 	strex	r3, r2, [r1]
 800e43c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800e43e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e440:	2b00      	cmp	r3, #0
 800e442:	d1e3      	bne.n	800e40c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e448:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e44c:	d14f      	bne.n	800e4ee <UART_Start_Receive_IT+0x196>
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e454:	88fa      	ldrh	r2, [r7, #6]
 800e456:	429a      	cmp	r2, r3
 800e458:	d349      	bcc.n	800e4ee <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	689b      	ldr	r3, [r3, #8]
 800e45e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e462:	d107      	bne.n	800e474 <UART_Start_Receive_IT+0x11c>
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	691b      	ldr	r3, [r3, #16]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d103      	bne.n	800e474 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	4a47      	ldr	r2, [pc, #284]	@ (800e58c <UART_Start_Receive_IT+0x234>)
 800e470:	675a      	str	r2, [r3, #116]	@ 0x74
 800e472:	e002      	b.n	800e47a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	4a46      	ldr	r2, [pc, #280]	@ (800e590 <UART_Start_Receive_IT+0x238>)
 800e478:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	691b      	ldr	r3, [r3, #16]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d01a      	beq.n	800e4b8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e488:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e48a:	e853 3f00 	ldrex	r3, [r3]
 800e48e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e490:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e492:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e496:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	461a      	mov	r2, r3
 800e4a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e4a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e4a6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4a8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e4aa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e4ac:	e841 2300 	strex	r3, r2, [r1]
 800e4b0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800e4b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d1e4      	bne.n	800e482 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	3308      	adds	r3, #8
 800e4be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4c2:	e853 3f00 	ldrex	r3, [r3]
 800e4c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e4c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e4ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	3308      	adds	r3, #8
 800e4d6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e4d8:	64ba      	str	r2, [r7, #72]	@ 0x48
 800e4da:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4dc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e4de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e4e0:	e841 2300 	strex	r3, r2, [r1]
 800e4e4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800e4e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d1e5      	bne.n	800e4b8 <UART_Start_Receive_IT+0x160>
 800e4ec:	e046      	b.n	800e57c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	689b      	ldr	r3, [r3, #8]
 800e4f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e4f6:	d107      	bne.n	800e508 <UART_Start_Receive_IT+0x1b0>
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	691b      	ldr	r3, [r3, #16]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d103      	bne.n	800e508 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	4a24      	ldr	r2, [pc, #144]	@ (800e594 <UART_Start_Receive_IT+0x23c>)
 800e504:	675a      	str	r2, [r3, #116]	@ 0x74
 800e506:	e002      	b.n	800e50e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	4a23      	ldr	r2, [pc, #140]	@ (800e598 <UART_Start_Receive_IT+0x240>)
 800e50c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	691b      	ldr	r3, [r3, #16]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d019      	beq.n	800e54a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e51c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e51e:	e853 3f00 	ldrex	r3, [r3]
 800e522:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e526:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800e52a:	677b      	str	r3, [r7, #116]	@ 0x74
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	461a      	mov	r2, r3
 800e532:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e534:	637b      	str	r3, [r7, #52]	@ 0x34
 800e536:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e538:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e53a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e53c:	e841 2300 	strex	r3, r2, [r1]
 800e540:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e544:	2b00      	cmp	r3, #0
 800e546:	d1e6      	bne.n	800e516 <UART_Start_Receive_IT+0x1be>
 800e548:	e018      	b.n	800e57c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e550:	697b      	ldr	r3, [r7, #20]
 800e552:	e853 3f00 	ldrex	r3, [r3]
 800e556:	613b      	str	r3, [r7, #16]
   return(result);
 800e558:	693b      	ldr	r3, [r7, #16]
 800e55a:	f043 0320 	orr.w	r3, r3, #32
 800e55e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	461a      	mov	r2, r3
 800e566:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e568:	623b      	str	r3, [r7, #32]
 800e56a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e56c:	69f9      	ldr	r1, [r7, #28]
 800e56e:	6a3a      	ldr	r2, [r7, #32]
 800e570:	e841 2300 	strex	r3, r2, [r1]
 800e574:	61bb      	str	r3, [r7, #24]
   return(result);
 800e576:	69bb      	ldr	r3, [r7, #24]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d1e6      	bne.n	800e54a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800e57c:	2300      	movs	r3, #0
}
 800e57e:	4618      	mov	r0, r3
 800e580:	378c      	adds	r7, #140	@ 0x8c
 800e582:	46bd      	mov	sp, r7
 800e584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e588:	4770      	bx	lr
 800e58a:	bf00      	nop
 800e58c:	0800edb9 	.word	0x0800edb9
 800e590:	0800ea55 	.word	0x0800ea55
 800e594:	0800e89d 	.word	0x0800e89d
 800e598:	0800e6e5 	.word	0x0800e6e5

0800e59c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e59c:	b480      	push	{r7}
 800e59e:	b095      	sub	sp, #84	@ 0x54
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e5ac:	e853 3f00 	ldrex	r3, [r3]
 800e5b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e5b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	461a      	mov	r2, r3
 800e5c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e5c2:	643b      	str	r3, [r7, #64]	@ 0x40
 800e5c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e5c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e5ca:	e841 2300 	strex	r3, r2, [r1]
 800e5ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e5d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d1e6      	bne.n	800e5a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	3308      	adds	r3, #8
 800e5dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5de:	6a3b      	ldr	r3, [r7, #32]
 800e5e0:	e853 3f00 	ldrex	r3, [r3]
 800e5e4:	61fb      	str	r3, [r7, #28]
   return(result);
 800e5e6:	69fa      	ldr	r2, [r7, #28]
 800e5e8:	4b1e      	ldr	r3, [pc, #120]	@ (800e664 <UART_EndRxTransfer+0xc8>)
 800e5ea:	4013      	ands	r3, r2
 800e5ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	3308      	adds	r3, #8
 800e5f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e5f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e5f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e5fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e5fe:	e841 2300 	strex	r3, r2, [r1]
 800e602:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e606:	2b00      	cmp	r3, #0
 800e608:	d1e5      	bne.n	800e5d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e60e:	2b01      	cmp	r3, #1
 800e610:	d118      	bne.n	800e644 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	e853 3f00 	ldrex	r3, [r3]
 800e61e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	f023 0310 	bic.w	r3, r3, #16
 800e626:	647b      	str	r3, [r7, #68]	@ 0x44
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	461a      	mov	r2, r3
 800e62e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e630:	61bb      	str	r3, [r7, #24]
 800e632:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e634:	6979      	ldr	r1, [r7, #20]
 800e636:	69ba      	ldr	r2, [r7, #24]
 800e638:	e841 2300 	strex	r3, r2, [r1]
 800e63c:	613b      	str	r3, [r7, #16]
   return(result);
 800e63e:	693b      	ldr	r3, [r7, #16]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d1e6      	bne.n	800e612 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2220      	movs	r2, #32
 800e648:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2200      	movs	r2, #0
 800e650:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	2200      	movs	r2, #0
 800e656:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e658:	bf00      	nop
 800e65a:	3754      	adds	r7, #84	@ 0x54
 800e65c:	46bd      	mov	sp, r7
 800e65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e662:	4770      	bx	lr
 800e664:	effffffe 	.word	0xeffffffe

0800e668 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b084      	sub	sp, #16
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e674:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	2200      	movs	r2, #0
 800e67a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e67e:	68f8      	ldr	r0, [r7, #12]
 800e680:	f7fe ff32 	bl	800d4e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e684:	bf00      	nop
 800e686:	3710      	adds	r7, #16
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}

0800e68c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b088      	sub	sp, #32
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	e853 3f00 	ldrex	r3, [r3]
 800e6a0:	60bb      	str	r3, [r7, #8]
   return(result);
 800e6a2:	68bb      	ldr	r3, [r7, #8]
 800e6a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e6a8:	61fb      	str	r3, [r7, #28]
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	461a      	mov	r2, r3
 800e6b0:	69fb      	ldr	r3, [r7, #28]
 800e6b2:	61bb      	str	r3, [r7, #24]
 800e6b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6b6:	6979      	ldr	r1, [r7, #20]
 800e6b8:	69ba      	ldr	r2, [r7, #24]
 800e6ba:	e841 2300 	strex	r3, r2, [r1]
 800e6be:	613b      	str	r3, [r7, #16]
   return(result);
 800e6c0:	693b      	ldr	r3, [r7, #16]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d1e6      	bne.n	800e694 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	2220      	movs	r2, #32
 800e6ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	f7fe fefd 	bl	800d4d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e6da:	bf00      	nop
 800e6dc:	3720      	adds	r7, #32
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bd80      	pop	{r7, pc}
	...

0800e6e4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b09c      	sub	sp, #112	@ 0x70
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e6f2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e6fc:	2b22      	cmp	r3, #34	@ 0x22
 800e6fe:	f040 80be 	bne.w	800e87e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e708:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e70c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800e710:	b2d9      	uxtb	r1, r3
 800e712:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800e716:	b2da      	uxtb	r2, r3
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e71c:	400a      	ands	r2, r1
 800e71e:	b2d2      	uxtb	r2, r2
 800e720:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e726:	1c5a      	adds	r2, r3, #1
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e732:	b29b      	uxth	r3, r3
 800e734:	3b01      	subs	r3, #1
 800e736:	b29a      	uxth	r2, r3
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e744:	b29b      	uxth	r3, r3
 800e746:	2b00      	cmp	r3, #0
 800e748:	f040 80a1 	bne.w	800e88e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e752:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e754:	e853 3f00 	ldrex	r3, [r3]
 800e758:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e75a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e75c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e760:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	461a      	mov	r2, r3
 800e768:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e76a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e76c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e76e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e770:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e772:	e841 2300 	strex	r3, r2, [r1]
 800e776:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e778:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d1e6      	bne.n	800e74c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	3308      	adds	r3, #8
 800e784:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e788:	e853 3f00 	ldrex	r3, [r3]
 800e78c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e78e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e790:	f023 0301 	bic.w	r3, r3, #1
 800e794:	667b      	str	r3, [r7, #100]	@ 0x64
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	3308      	adds	r3, #8
 800e79c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e79e:	647a      	str	r2, [r7, #68]	@ 0x44
 800e7a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e7a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e7a6:	e841 2300 	strex	r3, r2, [r1]
 800e7aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e7ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d1e5      	bne.n	800e77e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	2220      	movs	r2, #32
 800e7b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	2200      	movs	r2, #0
 800e7be:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	4a33      	ldr	r2, [pc, #204]	@ (800e898 <UART_RxISR_8BIT+0x1b4>)
 800e7cc:	4293      	cmp	r3, r2
 800e7ce:	d01f      	beq.n	800e810 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	685b      	ldr	r3, [r3, #4]
 800e7d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d018      	beq.n	800e810 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7e6:	e853 3f00 	ldrex	r3, [r3]
 800e7ea:	623b      	str	r3, [r7, #32]
   return(result);
 800e7ec:	6a3b      	ldr	r3, [r7, #32]
 800e7ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e7f2:	663b      	str	r3, [r7, #96]	@ 0x60
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	461a      	mov	r2, r3
 800e7fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e7fc:	633b      	str	r3, [r7, #48]	@ 0x30
 800e7fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e800:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e802:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e804:	e841 2300 	strex	r3, r2, [r1]
 800e808:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e80a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d1e6      	bne.n	800e7de <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e814:	2b01      	cmp	r3, #1
 800e816:	d12e      	bne.n	800e876 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2200      	movs	r2, #0
 800e81c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e824:	693b      	ldr	r3, [r7, #16]
 800e826:	e853 3f00 	ldrex	r3, [r3]
 800e82a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	f023 0310 	bic.w	r3, r3, #16
 800e832:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	461a      	mov	r2, r3
 800e83a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e83c:	61fb      	str	r3, [r7, #28]
 800e83e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e840:	69b9      	ldr	r1, [r7, #24]
 800e842:	69fa      	ldr	r2, [r7, #28]
 800e844:	e841 2300 	strex	r3, r2, [r1]
 800e848:	617b      	str	r3, [r7, #20]
   return(result);
 800e84a:	697b      	ldr	r3, [r7, #20]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d1e6      	bne.n	800e81e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	69db      	ldr	r3, [r3, #28]
 800e856:	f003 0310 	and.w	r3, r3, #16
 800e85a:	2b10      	cmp	r3, #16
 800e85c:	d103      	bne.n	800e866 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	2210      	movs	r2, #16
 800e864:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e86c:	4619      	mov	r1, r3
 800e86e:	6878      	ldr	r0, [r7, #4]
 800e870:	f7fe fe44 	bl	800d4fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e874:	e00b      	b.n	800e88e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f7f3 ffde 	bl	8002838 <HAL_UART_RxCpltCallback>
}
 800e87c:	e007      	b.n	800e88e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	699a      	ldr	r2, [r3, #24]
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	f042 0208 	orr.w	r2, r2, #8
 800e88c:	619a      	str	r2, [r3, #24]
}
 800e88e:	bf00      	nop
 800e890:	3770      	adds	r7, #112	@ 0x70
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}
 800e896:	bf00      	nop
 800e898:	58000c00 	.word	0x58000c00

0800e89c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b09c      	sub	sp, #112	@ 0x70
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e8aa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e8b4:	2b22      	cmp	r3, #34	@ 0x22
 800e8b6:	f040 80be 	bne.w	800ea36 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8c0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e8c8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800e8ca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800e8ce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800e8d2:	4013      	ands	r3, r2
 800e8d4:	b29a      	uxth	r2, r3
 800e8d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e8d8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e8de:	1c9a      	adds	r2, r3, #2
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e8ea:	b29b      	uxth	r3, r3
 800e8ec:	3b01      	subs	r3, #1
 800e8ee:	b29a      	uxth	r2, r3
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e8fc:	b29b      	uxth	r3, r3
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	f040 80a1 	bne.w	800ea46 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e90a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e90c:	e853 3f00 	ldrex	r3, [r3]
 800e910:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800e912:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e914:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e918:	667b      	str	r3, [r7, #100]	@ 0x64
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	461a      	mov	r2, r3
 800e920:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e922:	657b      	str	r3, [r7, #84]	@ 0x54
 800e924:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e926:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e928:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e92a:	e841 2300 	strex	r3, r2, [r1]
 800e92e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e930:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e932:	2b00      	cmp	r3, #0
 800e934:	d1e6      	bne.n	800e904 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	3308      	adds	r3, #8
 800e93c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e93e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e940:	e853 3f00 	ldrex	r3, [r3]
 800e944:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e948:	f023 0301 	bic.w	r3, r3, #1
 800e94c:	663b      	str	r3, [r7, #96]	@ 0x60
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	3308      	adds	r3, #8
 800e954:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e956:	643a      	str	r2, [r7, #64]	@ 0x40
 800e958:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e95a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e95c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e95e:	e841 2300 	strex	r3, r2, [r1]
 800e962:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e966:	2b00      	cmp	r3, #0
 800e968:	d1e5      	bne.n	800e936 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	2220      	movs	r2, #32
 800e96e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	2200      	movs	r2, #0
 800e976:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2200      	movs	r2, #0
 800e97c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	4a33      	ldr	r2, [pc, #204]	@ (800ea50 <UART_RxISR_16BIT+0x1b4>)
 800e984:	4293      	cmp	r3, r2
 800e986:	d01f      	beq.n	800e9c8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	685b      	ldr	r3, [r3, #4]
 800e98e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e992:	2b00      	cmp	r3, #0
 800e994:	d018      	beq.n	800e9c8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e99c:	6a3b      	ldr	r3, [r7, #32]
 800e99e:	e853 3f00 	ldrex	r3, [r3]
 800e9a2:	61fb      	str	r3, [r7, #28]
   return(result);
 800e9a4:	69fb      	ldr	r3, [r7, #28]
 800e9a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e9aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	461a      	mov	r2, r3
 800e9b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e9b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e9b6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e9ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e9bc:	e841 2300 	strex	r3, r2, [r1]
 800e9c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e9c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d1e6      	bne.n	800e996 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e9cc:	2b01      	cmp	r3, #1
 800e9ce:	d12e      	bne.n	800ea2e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	e853 3f00 	ldrex	r3, [r3]
 800e9e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800e9e4:	68bb      	ldr	r3, [r7, #8]
 800e9e6:	f023 0310 	bic.w	r3, r3, #16
 800e9ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	461a      	mov	r2, r3
 800e9f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e9f4:	61bb      	str	r3, [r7, #24]
 800e9f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9f8:	6979      	ldr	r1, [r7, #20]
 800e9fa:	69ba      	ldr	r2, [r7, #24]
 800e9fc:	e841 2300 	strex	r3, r2, [r1]
 800ea00:	613b      	str	r3, [r7, #16]
   return(result);
 800ea02:	693b      	ldr	r3, [r7, #16]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d1e6      	bne.n	800e9d6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	69db      	ldr	r3, [r3, #28]
 800ea0e:	f003 0310 	and.w	r3, r3, #16
 800ea12:	2b10      	cmp	r3, #16
 800ea14:	d103      	bne.n	800ea1e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	2210      	movs	r2, #16
 800ea1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ea24:	4619      	mov	r1, r3
 800ea26:	6878      	ldr	r0, [r7, #4]
 800ea28:	f7fe fd68 	bl	800d4fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ea2c:	e00b      	b.n	800ea46 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f7f3 ff02 	bl	8002838 <HAL_UART_RxCpltCallback>
}
 800ea34:	e007      	b.n	800ea46 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	699a      	ldr	r2, [r3, #24]
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	f042 0208 	orr.w	r2, r2, #8
 800ea44:	619a      	str	r2, [r3, #24]
}
 800ea46:	bf00      	nop
 800ea48:	3770      	adds	r7, #112	@ 0x70
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}
 800ea4e:	bf00      	nop
 800ea50:	58000c00 	.word	0x58000c00

0800ea54 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b0ac      	sub	sp, #176	@ 0xb0
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ea62:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	69db      	ldr	r3, [r3, #28]
 800ea6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	689b      	ldr	r3, [r3, #8]
 800ea80:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ea8a:	2b22      	cmp	r3, #34	@ 0x22
 800ea8c:	f040 8181 	bne.w	800ed92 <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ea96:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ea9a:	e124      	b.n	800ece6 <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eaa2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800eaa6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800eaaa:	b2d9      	uxtb	r1, r3
 800eaac:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800eab0:	b2da      	uxtb	r2, r3
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eab6:	400a      	ands	r2, r1
 800eab8:	b2d2      	uxtb	r2, r2
 800eaba:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eac0:	1c5a      	adds	r2, r3, #1
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800eacc:	b29b      	uxth	r3, r3
 800eace:	3b01      	subs	r3, #1
 800ead0:	b29a      	uxth	r2, r3
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	69db      	ldr	r3, [r3, #28]
 800eade:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800eae2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eae6:	f003 0307 	and.w	r3, r3, #7
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d053      	beq.n	800eb96 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800eaee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eaf2:	f003 0301 	and.w	r3, r3, #1
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d011      	beq.n	800eb1e <UART_RxISR_8BIT_FIFOEN+0xca>
 800eafa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800eafe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d00b      	beq.n	800eb1e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	2201      	movs	r2, #1
 800eb0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eb14:	f043 0201 	orr.w	r2, r3, #1
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eb1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eb22:	f003 0302 	and.w	r3, r3, #2
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d011      	beq.n	800eb4e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800eb2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800eb2e:	f003 0301 	and.w	r3, r3, #1
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d00b      	beq.n	800eb4e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	2202      	movs	r2, #2
 800eb3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eb44:	f043 0204 	orr.w	r2, r3, #4
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eb4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eb52:	f003 0304 	and.w	r3, r3, #4
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d011      	beq.n	800eb7e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800eb5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800eb5e:	f003 0301 	and.w	r3, r3, #1
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d00b      	beq.n	800eb7e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	2204      	movs	r2, #4
 800eb6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eb74:	f043 0202 	orr.w	r2, r3, #2
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d006      	beq.n	800eb96 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800eb88:	6878      	ldr	r0, [r7, #4]
 800eb8a:	f7fe fcad 	bl	800d4e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	2200      	movs	r2, #0
 800eb92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800eb9c:	b29b      	uxth	r3, r3
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	f040 80a1 	bne.w	800ece6 <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebaa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ebac:	e853 3f00 	ldrex	r3, [r3]
 800ebb0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800ebb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ebb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ebb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	461a      	mov	r2, r3
 800ebc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ebc6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ebc8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebca:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800ebcc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ebce:	e841 2300 	strex	r3, r2, [r1]
 800ebd2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800ebd4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d1e4      	bne.n	800eba4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	3308      	adds	r3, #8
 800ebe0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebe2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ebe4:	e853 3f00 	ldrex	r3, [r3]
 800ebe8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800ebea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ebec:	4b6f      	ldr	r3, [pc, #444]	@ (800edac <UART_RxISR_8BIT_FIFOEN+0x358>)
 800ebee:	4013      	ands	r3, r2
 800ebf0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	3308      	adds	r3, #8
 800ebfa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ebfe:	66ba      	str	r2, [r7, #104]	@ 0x68
 800ec00:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec02:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ec04:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ec06:	e841 2300 	strex	r3, r2, [r1]
 800ec0a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ec0c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d1e3      	bne.n	800ebda <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	2220      	movs	r2, #32
 800ec16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2200      	movs	r2, #0
 800ec24:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	4a61      	ldr	r2, [pc, #388]	@ (800edb0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800ec2c:	4293      	cmp	r3, r2
 800ec2e:	d021      	beq.n	800ec74 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	685b      	ldr	r3, [r3, #4]
 800ec36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d01a      	beq.n	800ec74 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ec46:	e853 3f00 	ldrex	r3, [r3]
 800ec4a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ec4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec4e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ec52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	461a      	mov	r2, r3
 800ec5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ec60:	657b      	str	r3, [r7, #84]	@ 0x54
 800ec62:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec64:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ec66:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ec68:	e841 2300 	strex	r3, r2, [r1]
 800ec6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ec6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d1e4      	bne.n	800ec3e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ec78:	2b01      	cmp	r3, #1
 800ec7a:	d130      	bne.n	800ecde <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2200      	movs	r2, #0
 800ec80:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec8a:	e853 3f00 	ldrex	r3, [r3]
 800ec8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ec90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec92:	f023 0310 	bic.w	r3, r3, #16
 800ec96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	461a      	mov	r2, r3
 800eca0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800eca4:	643b      	str	r3, [r7, #64]	@ 0x40
 800eca6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eca8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ecaa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ecac:	e841 2300 	strex	r3, r2, [r1]
 800ecb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ecb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d1e4      	bne.n	800ec82 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	69db      	ldr	r3, [r3, #28]
 800ecbe:	f003 0310 	and.w	r3, r3, #16
 800ecc2:	2b10      	cmp	r3, #16
 800ecc4:	d103      	bne.n	800ecce <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	2210      	movs	r2, #16
 800eccc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ecd4:	4619      	mov	r1, r3
 800ecd6:	6878      	ldr	r0, [r7, #4]
 800ecd8:	f7fe fc10 	bl	800d4fc <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800ecdc:	e00e      	b.n	800ecfc <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 800ecde:	6878      	ldr	r0, [r7, #4]
 800ece0:	f7f3 fdaa 	bl	8002838 <HAL_UART_RxCpltCallback>
        break;
 800ece4:	e00a      	b.n	800ecfc <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ece6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d006      	beq.n	800ecfc <UART_RxISR_8BIT_FIFOEN+0x2a8>
 800ecee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ecf2:	f003 0320 	and.w	r3, r3, #32
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	f47f aed0 	bne.w	800ea9c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ed02:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ed06:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d049      	beq.n	800eda2 <UART_RxISR_8BIT_FIFOEN+0x34e>
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ed14:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800ed18:	429a      	cmp	r2, r3
 800ed1a:	d242      	bcs.n	800eda2 <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	3308      	adds	r3, #8
 800ed22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed24:	6a3b      	ldr	r3, [r7, #32]
 800ed26:	e853 3f00 	ldrex	r3, [r3]
 800ed2a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ed2c:	69fb      	ldr	r3, [r7, #28]
 800ed2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ed32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	3308      	adds	r3, #8
 800ed3c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ed40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ed42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ed46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed48:	e841 2300 	strex	r3, r2, [r1]
 800ed4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ed4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d1e3      	bne.n	800ed1c <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	4a17      	ldr	r2, [pc, #92]	@ (800edb4 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800ed58:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	e853 3f00 	ldrex	r3, [r3]
 800ed66:	60bb      	str	r3, [r7, #8]
   return(result);
 800ed68:	68bb      	ldr	r3, [r7, #8]
 800ed6a:	f043 0320 	orr.w	r3, r3, #32
 800ed6e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	461a      	mov	r2, r3
 800ed78:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ed7c:	61bb      	str	r3, [r7, #24]
 800ed7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed80:	6979      	ldr	r1, [r7, #20]
 800ed82:	69ba      	ldr	r2, [r7, #24]
 800ed84:	e841 2300 	strex	r3, r2, [r1]
 800ed88:	613b      	str	r3, [r7, #16]
   return(result);
 800ed8a:	693b      	ldr	r3, [r7, #16]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d1e4      	bne.n	800ed5a <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ed90:	e007      	b.n	800eda2 <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	699a      	ldr	r2, [r3, #24]
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	f042 0208 	orr.w	r2, r2, #8
 800eda0:	619a      	str	r2, [r3, #24]
}
 800eda2:	bf00      	nop
 800eda4:	37b0      	adds	r7, #176	@ 0xb0
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bd80      	pop	{r7, pc}
 800edaa:	bf00      	nop
 800edac:	effffffe 	.word	0xeffffffe
 800edb0:	58000c00 	.word	0x58000c00
 800edb4:	0800e6e5 	.word	0x0800e6e5

0800edb8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b0ae      	sub	sp, #184	@ 0xb8
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800edc6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	69db      	ldr	r3, [r3, #28]
 800edd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	689b      	ldr	r3, [r3, #8]
 800ede4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800edee:	2b22      	cmp	r3, #34	@ 0x22
 800edf0:	f040 8185 	bne.w	800f0fe <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800edfa:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800edfe:	e128      	b.n	800f052 <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee06:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ee0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800ee12:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800ee16:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800ee1a:	4013      	ands	r3, r2
 800ee1c:	b29a      	uxth	r2, r3
 800ee1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ee22:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ee28:	1c9a      	adds	r2, r3, #2
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ee34:	b29b      	uxth	r3, r3
 800ee36:	3b01      	subs	r3, #1
 800ee38:	b29a      	uxth	r2, r3
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	69db      	ldr	r3, [r3, #28]
 800ee46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ee4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ee4e:	f003 0307 	and.w	r3, r3, #7
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d053      	beq.n	800eefe <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ee56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ee5a:	f003 0301 	and.w	r3, r3, #1
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d011      	beq.n	800ee86 <UART_RxISR_16BIT_FIFOEN+0xce>
 800ee62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ee66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d00b      	beq.n	800ee86 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	2201      	movs	r2, #1
 800ee74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee7c:	f043 0201 	orr.w	r2, r3, #1
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ee86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ee8a:	f003 0302 	and.w	r3, r3, #2
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d011      	beq.n	800eeb6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800ee92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ee96:	f003 0301 	and.w	r3, r3, #1
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d00b      	beq.n	800eeb6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	2202      	movs	r2, #2
 800eea4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eeac:	f043 0204 	orr.w	r2, r3, #4
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eeb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800eeba:	f003 0304 	and.w	r3, r3, #4
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d011      	beq.n	800eee6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800eec2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800eec6:	f003 0301 	and.w	r3, r3, #1
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d00b      	beq.n	800eee6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	2204      	movs	r2, #4
 800eed4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eedc:	f043 0202 	orr.w	r2, r3, #2
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d006      	beq.n	800eefe <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800eef0:	6878      	ldr	r0, [r7, #4]
 800eef2:	f7fe faf9 	bl	800d4e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	2200      	movs	r2, #0
 800eefa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ef04:	b29b      	uxth	r3, r3
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	f040 80a3 	bne.w	800f052 <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ef14:	e853 3f00 	ldrex	r3, [r3]
 800ef18:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ef1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ef1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ef20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	461a      	mov	r2, r3
 800ef2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ef2e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ef32:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef34:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ef36:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ef3a:	e841 2300 	strex	r3, r2, [r1]
 800ef3e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ef40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d1e2      	bne.n	800ef0c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	3308      	adds	r3, #8
 800ef4c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ef50:	e853 3f00 	ldrex	r3, [r3]
 800ef54:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ef56:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ef58:	4b6f      	ldr	r3, [pc, #444]	@ (800f118 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800ef5a:	4013      	ands	r3, r2
 800ef5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	3308      	adds	r3, #8
 800ef66:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800ef6a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ef6c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef6e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ef70:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ef72:	e841 2300 	strex	r3, r2, [r1]
 800ef76:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ef78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d1e3      	bne.n	800ef46 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	2220      	movs	r2, #32
 800ef82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	2200      	movs	r2, #0
 800ef8a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2200      	movs	r2, #0
 800ef90:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	4a61      	ldr	r2, [pc, #388]	@ (800f11c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800ef98:	4293      	cmp	r3, r2
 800ef9a:	d021      	beq.n	800efe0 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	685b      	ldr	r3, [r3, #4]
 800efa2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d01a      	beq.n	800efe0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800efb2:	e853 3f00 	ldrex	r3, [r3]
 800efb6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800efb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800efba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800efbe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	461a      	mov	r2, r3
 800efc8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800efcc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800efce:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efd0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800efd2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800efd4:	e841 2300 	strex	r3, r2, [r1]
 800efd8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800efda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d1e4      	bne.n	800efaa <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800efe4:	2b01      	cmp	r3, #1
 800efe6:	d130      	bne.n	800f04a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	2200      	movs	r2, #0
 800efec:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eff6:	e853 3f00 	ldrex	r3, [r3]
 800effa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800effc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800effe:	f023 0310 	bic.w	r3, r3, #16
 800f002:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	461a      	mov	r2, r3
 800f00c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f010:	647b      	str	r3, [r7, #68]	@ 0x44
 800f012:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f014:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f016:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f018:	e841 2300 	strex	r3, r2, [r1]
 800f01c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f01e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f020:	2b00      	cmp	r3, #0
 800f022:	d1e4      	bne.n	800efee <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	69db      	ldr	r3, [r3, #28]
 800f02a:	f003 0310 	and.w	r3, r3, #16
 800f02e:	2b10      	cmp	r3, #16
 800f030:	d103      	bne.n	800f03a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	2210      	movs	r2, #16
 800f038:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f040:	4619      	mov	r1, r3
 800f042:	6878      	ldr	r0, [r7, #4]
 800f044:	f7fe fa5a 	bl	800d4fc <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800f048:	e00e      	b.n	800f068 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 800f04a:	6878      	ldr	r0, [r7, #4]
 800f04c:	f7f3 fbf4 	bl	8002838 <HAL_UART_RxCpltCallback>
        break;
 800f050:	e00a      	b.n	800f068 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f052:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800f056:	2b00      	cmp	r3, #0
 800f058:	d006      	beq.n	800f068 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 800f05a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f05e:	f003 0320 	and.w	r3, r3, #32
 800f062:	2b00      	cmp	r3, #0
 800f064:	f47f aecc 	bne.w	800ee00 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f06e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f072:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800f076:	2b00      	cmp	r3, #0
 800f078:	d049      	beq.n	800f10e <UART_RxISR_16BIT_FIFOEN+0x356>
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f080:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800f084:	429a      	cmp	r2, r3
 800f086:	d242      	bcs.n	800f10e <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	3308      	adds	r3, #8
 800f08e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f092:	e853 3f00 	ldrex	r3, [r3]
 800f096:	623b      	str	r3, [r7, #32]
   return(result);
 800f098:	6a3b      	ldr	r3, [r7, #32]
 800f09a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f09e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	3308      	adds	r3, #8
 800f0a8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800f0ac:	633a      	str	r2, [r7, #48]	@ 0x30
 800f0ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f0b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f0b4:	e841 2300 	strex	r3, r2, [r1]
 800f0b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f0ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d1e3      	bne.n	800f088 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	4a17      	ldr	r2, [pc, #92]	@ (800f120 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800f0c4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0cc:	693b      	ldr	r3, [r7, #16]
 800f0ce:	e853 3f00 	ldrex	r3, [r3]
 800f0d2:	60fb      	str	r3, [r7, #12]
   return(result);
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	f043 0320 	orr.w	r3, r3, #32
 800f0da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	461a      	mov	r2, r3
 800f0e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f0e8:	61fb      	str	r3, [r7, #28]
 800f0ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0ec:	69b9      	ldr	r1, [r7, #24]
 800f0ee:	69fa      	ldr	r2, [r7, #28]
 800f0f0:	e841 2300 	strex	r3, r2, [r1]
 800f0f4:	617b      	str	r3, [r7, #20]
   return(result);
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d1e4      	bne.n	800f0c6 <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f0fc:	e007      	b.n	800f10e <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	699a      	ldr	r2, [r3, #24]
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	f042 0208 	orr.w	r2, r2, #8
 800f10c:	619a      	str	r2, [r3, #24]
}
 800f10e:	bf00      	nop
 800f110:	37b8      	adds	r7, #184	@ 0xb8
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}
 800f116:	bf00      	nop
 800f118:	effffffe 	.word	0xeffffffe
 800f11c:	58000c00 	.word	0x58000c00
 800f120:	0800e89d 	.word	0x0800e89d

0800f124 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f124:	b480      	push	{r7}
 800f126:	b083      	sub	sp, #12
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f12c:	bf00      	nop
 800f12e:	370c      	adds	r7, #12
 800f130:	46bd      	mov	sp, r7
 800f132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f136:	4770      	bx	lr

0800f138 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f138:	b480      	push	{r7}
 800f13a:	b083      	sub	sp, #12
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f140:	bf00      	nop
 800f142:	370c      	adds	r7, #12
 800f144:	46bd      	mov	sp, r7
 800f146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14a:	4770      	bx	lr

0800f14c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f14c:	b480      	push	{r7}
 800f14e:	b083      	sub	sp, #12
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f154:	bf00      	nop
 800f156:	370c      	adds	r7, #12
 800f158:	46bd      	mov	sp, r7
 800f15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15e:	4770      	bx	lr

0800f160 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f160:	b480      	push	{r7}
 800f162:	b085      	sub	sp, #20
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f16e:	2b01      	cmp	r3, #1
 800f170:	d101      	bne.n	800f176 <HAL_UARTEx_DisableFifoMode+0x16>
 800f172:	2302      	movs	r3, #2
 800f174:	e027      	b.n	800f1c6 <HAL_UARTEx_DisableFifoMode+0x66>
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	2201      	movs	r2, #1
 800f17a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	2224      	movs	r2, #36	@ 0x24
 800f182:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	681a      	ldr	r2, [r3, #0]
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	f022 0201 	bic.w	r2, r2, #1
 800f19c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f1a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	68fa      	ldr	r2, [r7, #12]
 800f1b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2220      	movs	r2, #32
 800f1b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	2200      	movs	r2, #0
 800f1c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f1c4:	2300      	movs	r3, #0
}
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	3714      	adds	r7, #20
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d0:	4770      	bx	lr

0800f1d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f1d2:	b580      	push	{r7, lr}
 800f1d4:	b084      	sub	sp, #16
 800f1d6:	af00      	add	r7, sp, #0
 800f1d8:	6078      	str	r0, [r7, #4]
 800f1da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f1e2:	2b01      	cmp	r3, #1
 800f1e4:	d101      	bne.n	800f1ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f1e6:	2302      	movs	r3, #2
 800f1e8:	e02d      	b.n	800f246 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	2201      	movs	r2, #1
 800f1ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	2224      	movs	r2, #36	@ 0x24
 800f1f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	681a      	ldr	r2, [r3, #0]
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	f022 0201 	bic.w	r2, r2, #1
 800f210:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	689b      	ldr	r3, [r3, #8]
 800f218:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	683a      	ldr	r2, [r7, #0]
 800f222:	430a      	orrs	r2, r1
 800f224:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f226:	6878      	ldr	r0, [r7, #4]
 800f228:	f000 f850 	bl	800f2cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	68fa      	ldr	r2, [r7, #12]
 800f232:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2220      	movs	r2, #32
 800f238:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2200      	movs	r2, #0
 800f240:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f244:	2300      	movs	r3, #0
}
 800f246:	4618      	mov	r0, r3
 800f248:	3710      	adds	r7, #16
 800f24a:	46bd      	mov	sp, r7
 800f24c:	bd80      	pop	{r7, pc}

0800f24e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f24e:	b580      	push	{r7, lr}
 800f250:	b084      	sub	sp, #16
 800f252:	af00      	add	r7, sp, #0
 800f254:	6078      	str	r0, [r7, #4]
 800f256:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f25e:	2b01      	cmp	r3, #1
 800f260:	d101      	bne.n	800f266 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f262:	2302      	movs	r3, #2
 800f264:	e02d      	b.n	800f2c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	2201      	movs	r2, #1
 800f26a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	2224      	movs	r2, #36	@ 0x24
 800f272:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	681a      	ldr	r2, [r3, #0]
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	f022 0201 	bic.w	r2, r2, #1
 800f28c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	689b      	ldr	r3, [r3, #8]
 800f294:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	683a      	ldr	r2, [r7, #0]
 800f29e:	430a      	orrs	r2, r1
 800f2a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f2a2:	6878      	ldr	r0, [r7, #4]
 800f2a4:	f000 f812 	bl	800f2cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	68fa      	ldr	r2, [r7, #12]
 800f2ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	2220      	movs	r2, #32
 800f2b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f2c0:	2300      	movs	r3, #0
}
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	3710      	adds	r7, #16
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}
	...

0800f2cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f2cc:	b480      	push	{r7}
 800f2ce:	b085      	sub	sp, #20
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d108      	bne.n	800f2ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	2201      	movs	r2, #1
 800f2e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2201      	movs	r2, #1
 800f2e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f2ec:	e031      	b.n	800f352 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f2ee:	2310      	movs	r3, #16
 800f2f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f2f2:	2310      	movs	r3, #16
 800f2f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	689b      	ldr	r3, [r3, #8]
 800f2fc:	0e5b      	lsrs	r3, r3, #25
 800f2fe:	b2db      	uxtb	r3, r3
 800f300:	f003 0307 	and.w	r3, r3, #7
 800f304:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	689b      	ldr	r3, [r3, #8]
 800f30c:	0f5b      	lsrs	r3, r3, #29
 800f30e:	b2db      	uxtb	r3, r3
 800f310:	f003 0307 	and.w	r3, r3, #7
 800f314:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f316:	7bbb      	ldrb	r3, [r7, #14]
 800f318:	7b3a      	ldrb	r2, [r7, #12]
 800f31a:	4911      	ldr	r1, [pc, #68]	@ (800f360 <UARTEx_SetNbDataToProcess+0x94>)
 800f31c:	5c8a      	ldrb	r2, [r1, r2]
 800f31e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f322:	7b3a      	ldrb	r2, [r7, #12]
 800f324:	490f      	ldr	r1, [pc, #60]	@ (800f364 <UARTEx_SetNbDataToProcess+0x98>)
 800f326:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f328:	fb93 f3f2 	sdiv	r3, r3, r2
 800f32c:	b29a      	uxth	r2, r3
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f334:	7bfb      	ldrb	r3, [r7, #15]
 800f336:	7b7a      	ldrb	r2, [r7, #13]
 800f338:	4909      	ldr	r1, [pc, #36]	@ (800f360 <UARTEx_SetNbDataToProcess+0x94>)
 800f33a:	5c8a      	ldrb	r2, [r1, r2]
 800f33c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f340:	7b7a      	ldrb	r2, [r7, #13]
 800f342:	4908      	ldr	r1, [pc, #32]	@ (800f364 <UARTEx_SetNbDataToProcess+0x98>)
 800f344:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f346:	fb93 f3f2 	sdiv	r3, r3, r2
 800f34a:	b29a      	uxth	r2, r3
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f352:	bf00      	nop
 800f354:	3714      	adds	r7, #20
 800f356:	46bd      	mov	sp, r7
 800f358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35c:	4770      	bx	lr
 800f35e:	bf00      	nop
 800f360:	08010260 	.word	0x08010260
 800f364:	08010268 	.word	0x08010268

0800f368 <std>:
 800f368:	2300      	movs	r3, #0
 800f36a:	b510      	push	{r4, lr}
 800f36c:	4604      	mov	r4, r0
 800f36e:	e9c0 3300 	strd	r3, r3, [r0]
 800f372:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f376:	6083      	str	r3, [r0, #8]
 800f378:	8181      	strh	r1, [r0, #12]
 800f37a:	6643      	str	r3, [r0, #100]	@ 0x64
 800f37c:	81c2      	strh	r2, [r0, #14]
 800f37e:	6183      	str	r3, [r0, #24]
 800f380:	4619      	mov	r1, r3
 800f382:	2208      	movs	r2, #8
 800f384:	305c      	adds	r0, #92	@ 0x5c
 800f386:	f000 f99b 	bl	800f6c0 <memset>
 800f38a:	4b0d      	ldr	r3, [pc, #52]	@ (800f3c0 <std+0x58>)
 800f38c:	6263      	str	r3, [r4, #36]	@ 0x24
 800f38e:	4b0d      	ldr	r3, [pc, #52]	@ (800f3c4 <std+0x5c>)
 800f390:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f392:	4b0d      	ldr	r3, [pc, #52]	@ (800f3c8 <std+0x60>)
 800f394:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f396:	4b0d      	ldr	r3, [pc, #52]	@ (800f3cc <std+0x64>)
 800f398:	6323      	str	r3, [r4, #48]	@ 0x30
 800f39a:	4b0d      	ldr	r3, [pc, #52]	@ (800f3d0 <std+0x68>)
 800f39c:	6224      	str	r4, [r4, #32]
 800f39e:	429c      	cmp	r4, r3
 800f3a0:	d006      	beq.n	800f3b0 <std+0x48>
 800f3a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f3a6:	4294      	cmp	r4, r2
 800f3a8:	d002      	beq.n	800f3b0 <std+0x48>
 800f3aa:	33d0      	adds	r3, #208	@ 0xd0
 800f3ac:	429c      	cmp	r4, r3
 800f3ae:	d105      	bne.n	800f3bc <std+0x54>
 800f3b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f3b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3b8:	f000 b9fa 	b.w	800f7b0 <__retarget_lock_init_recursive>
 800f3bc:	bd10      	pop	{r4, pc}
 800f3be:	bf00      	nop
 800f3c0:	0800f511 	.word	0x0800f511
 800f3c4:	0800f533 	.word	0x0800f533
 800f3c8:	0800f56b 	.word	0x0800f56b
 800f3cc:	0800f58f 	.word	0x0800f58f
 800f3d0:	24000554 	.word	0x24000554

0800f3d4 <stdio_exit_handler>:
 800f3d4:	4a02      	ldr	r2, [pc, #8]	@ (800f3e0 <stdio_exit_handler+0xc>)
 800f3d6:	4903      	ldr	r1, [pc, #12]	@ (800f3e4 <stdio_exit_handler+0x10>)
 800f3d8:	4803      	ldr	r0, [pc, #12]	@ (800f3e8 <stdio_exit_handler+0x14>)
 800f3da:	f000 b869 	b.w	800f4b0 <_fwalk_sglue>
 800f3de:	bf00      	nop
 800f3e0:	2400002c 	.word	0x2400002c
 800f3e4:	08010069 	.word	0x08010069
 800f3e8:	2400003c 	.word	0x2400003c

0800f3ec <cleanup_stdio>:
 800f3ec:	6841      	ldr	r1, [r0, #4]
 800f3ee:	4b0c      	ldr	r3, [pc, #48]	@ (800f420 <cleanup_stdio+0x34>)
 800f3f0:	4299      	cmp	r1, r3
 800f3f2:	b510      	push	{r4, lr}
 800f3f4:	4604      	mov	r4, r0
 800f3f6:	d001      	beq.n	800f3fc <cleanup_stdio+0x10>
 800f3f8:	f000 fe36 	bl	8010068 <_fflush_r>
 800f3fc:	68a1      	ldr	r1, [r4, #8]
 800f3fe:	4b09      	ldr	r3, [pc, #36]	@ (800f424 <cleanup_stdio+0x38>)
 800f400:	4299      	cmp	r1, r3
 800f402:	d002      	beq.n	800f40a <cleanup_stdio+0x1e>
 800f404:	4620      	mov	r0, r4
 800f406:	f000 fe2f 	bl	8010068 <_fflush_r>
 800f40a:	68e1      	ldr	r1, [r4, #12]
 800f40c:	4b06      	ldr	r3, [pc, #24]	@ (800f428 <cleanup_stdio+0x3c>)
 800f40e:	4299      	cmp	r1, r3
 800f410:	d004      	beq.n	800f41c <cleanup_stdio+0x30>
 800f412:	4620      	mov	r0, r4
 800f414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f418:	f000 be26 	b.w	8010068 <_fflush_r>
 800f41c:	bd10      	pop	{r4, pc}
 800f41e:	bf00      	nop
 800f420:	24000554 	.word	0x24000554
 800f424:	240005bc 	.word	0x240005bc
 800f428:	24000624 	.word	0x24000624

0800f42c <global_stdio_init.part.0>:
 800f42c:	b510      	push	{r4, lr}
 800f42e:	4b0b      	ldr	r3, [pc, #44]	@ (800f45c <global_stdio_init.part.0+0x30>)
 800f430:	4c0b      	ldr	r4, [pc, #44]	@ (800f460 <global_stdio_init.part.0+0x34>)
 800f432:	4a0c      	ldr	r2, [pc, #48]	@ (800f464 <global_stdio_init.part.0+0x38>)
 800f434:	601a      	str	r2, [r3, #0]
 800f436:	4620      	mov	r0, r4
 800f438:	2200      	movs	r2, #0
 800f43a:	2104      	movs	r1, #4
 800f43c:	f7ff ff94 	bl	800f368 <std>
 800f440:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f444:	2201      	movs	r2, #1
 800f446:	2109      	movs	r1, #9
 800f448:	f7ff ff8e 	bl	800f368 <std>
 800f44c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f450:	2202      	movs	r2, #2
 800f452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f456:	2112      	movs	r1, #18
 800f458:	f7ff bf86 	b.w	800f368 <std>
 800f45c:	2400068c 	.word	0x2400068c
 800f460:	24000554 	.word	0x24000554
 800f464:	0800f3d5 	.word	0x0800f3d5

0800f468 <__sfp_lock_acquire>:
 800f468:	4801      	ldr	r0, [pc, #4]	@ (800f470 <__sfp_lock_acquire+0x8>)
 800f46a:	f000 b9a2 	b.w	800f7b2 <__retarget_lock_acquire_recursive>
 800f46e:	bf00      	nop
 800f470:	24000695 	.word	0x24000695

0800f474 <__sfp_lock_release>:
 800f474:	4801      	ldr	r0, [pc, #4]	@ (800f47c <__sfp_lock_release+0x8>)
 800f476:	f000 b99d 	b.w	800f7b4 <__retarget_lock_release_recursive>
 800f47a:	bf00      	nop
 800f47c:	24000695 	.word	0x24000695

0800f480 <__sinit>:
 800f480:	b510      	push	{r4, lr}
 800f482:	4604      	mov	r4, r0
 800f484:	f7ff fff0 	bl	800f468 <__sfp_lock_acquire>
 800f488:	6a23      	ldr	r3, [r4, #32]
 800f48a:	b11b      	cbz	r3, 800f494 <__sinit+0x14>
 800f48c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f490:	f7ff bff0 	b.w	800f474 <__sfp_lock_release>
 800f494:	4b04      	ldr	r3, [pc, #16]	@ (800f4a8 <__sinit+0x28>)
 800f496:	6223      	str	r3, [r4, #32]
 800f498:	4b04      	ldr	r3, [pc, #16]	@ (800f4ac <__sinit+0x2c>)
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d1f5      	bne.n	800f48c <__sinit+0xc>
 800f4a0:	f7ff ffc4 	bl	800f42c <global_stdio_init.part.0>
 800f4a4:	e7f2      	b.n	800f48c <__sinit+0xc>
 800f4a6:	bf00      	nop
 800f4a8:	0800f3ed 	.word	0x0800f3ed
 800f4ac:	2400068c 	.word	0x2400068c

0800f4b0 <_fwalk_sglue>:
 800f4b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4b4:	4607      	mov	r7, r0
 800f4b6:	4688      	mov	r8, r1
 800f4b8:	4614      	mov	r4, r2
 800f4ba:	2600      	movs	r6, #0
 800f4bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f4c0:	f1b9 0901 	subs.w	r9, r9, #1
 800f4c4:	d505      	bpl.n	800f4d2 <_fwalk_sglue+0x22>
 800f4c6:	6824      	ldr	r4, [r4, #0]
 800f4c8:	2c00      	cmp	r4, #0
 800f4ca:	d1f7      	bne.n	800f4bc <_fwalk_sglue+0xc>
 800f4cc:	4630      	mov	r0, r6
 800f4ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4d2:	89ab      	ldrh	r3, [r5, #12]
 800f4d4:	2b01      	cmp	r3, #1
 800f4d6:	d907      	bls.n	800f4e8 <_fwalk_sglue+0x38>
 800f4d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f4dc:	3301      	adds	r3, #1
 800f4de:	d003      	beq.n	800f4e8 <_fwalk_sglue+0x38>
 800f4e0:	4629      	mov	r1, r5
 800f4e2:	4638      	mov	r0, r7
 800f4e4:	47c0      	blx	r8
 800f4e6:	4306      	orrs	r6, r0
 800f4e8:	3568      	adds	r5, #104	@ 0x68
 800f4ea:	e7e9      	b.n	800f4c0 <_fwalk_sglue+0x10>

0800f4ec <iprintf>:
 800f4ec:	b40f      	push	{r0, r1, r2, r3}
 800f4ee:	b507      	push	{r0, r1, r2, lr}
 800f4f0:	4906      	ldr	r1, [pc, #24]	@ (800f50c <iprintf+0x20>)
 800f4f2:	ab04      	add	r3, sp, #16
 800f4f4:	6808      	ldr	r0, [r1, #0]
 800f4f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4fa:	6881      	ldr	r1, [r0, #8]
 800f4fc:	9301      	str	r3, [sp, #4]
 800f4fe:	f000 fa8b 	bl	800fa18 <_vfiprintf_r>
 800f502:	b003      	add	sp, #12
 800f504:	f85d eb04 	ldr.w	lr, [sp], #4
 800f508:	b004      	add	sp, #16
 800f50a:	4770      	bx	lr
 800f50c:	24000038 	.word	0x24000038

0800f510 <__sread>:
 800f510:	b510      	push	{r4, lr}
 800f512:	460c      	mov	r4, r1
 800f514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f518:	f000 f8fc 	bl	800f714 <_read_r>
 800f51c:	2800      	cmp	r0, #0
 800f51e:	bfab      	itete	ge
 800f520:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f522:	89a3      	ldrhlt	r3, [r4, #12]
 800f524:	181b      	addge	r3, r3, r0
 800f526:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f52a:	bfac      	ite	ge
 800f52c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f52e:	81a3      	strhlt	r3, [r4, #12]
 800f530:	bd10      	pop	{r4, pc}

0800f532 <__swrite>:
 800f532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f536:	461f      	mov	r7, r3
 800f538:	898b      	ldrh	r3, [r1, #12]
 800f53a:	05db      	lsls	r3, r3, #23
 800f53c:	4605      	mov	r5, r0
 800f53e:	460c      	mov	r4, r1
 800f540:	4616      	mov	r6, r2
 800f542:	d505      	bpl.n	800f550 <__swrite+0x1e>
 800f544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f548:	2302      	movs	r3, #2
 800f54a:	2200      	movs	r2, #0
 800f54c:	f000 f8d0 	bl	800f6f0 <_lseek_r>
 800f550:	89a3      	ldrh	r3, [r4, #12]
 800f552:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f556:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f55a:	81a3      	strh	r3, [r4, #12]
 800f55c:	4632      	mov	r2, r6
 800f55e:	463b      	mov	r3, r7
 800f560:	4628      	mov	r0, r5
 800f562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f566:	f000 b8e7 	b.w	800f738 <_write_r>

0800f56a <__sseek>:
 800f56a:	b510      	push	{r4, lr}
 800f56c:	460c      	mov	r4, r1
 800f56e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f572:	f000 f8bd 	bl	800f6f0 <_lseek_r>
 800f576:	1c43      	adds	r3, r0, #1
 800f578:	89a3      	ldrh	r3, [r4, #12]
 800f57a:	bf15      	itete	ne
 800f57c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f57e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f582:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f586:	81a3      	strheq	r3, [r4, #12]
 800f588:	bf18      	it	ne
 800f58a:	81a3      	strhne	r3, [r4, #12]
 800f58c:	bd10      	pop	{r4, pc}

0800f58e <__sclose>:
 800f58e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f592:	f000 b89d 	b.w	800f6d0 <_close_r>

0800f596 <__swbuf_r>:
 800f596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f598:	460e      	mov	r6, r1
 800f59a:	4614      	mov	r4, r2
 800f59c:	4605      	mov	r5, r0
 800f59e:	b118      	cbz	r0, 800f5a8 <__swbuf_r+0x12>
 800f5a0:	6a03      	ldr	r3, [r0, #32]
 800f5a2:	b90b      	cbnz	r3, 800f5a8 <__swbuf_r+0x12>
 800f5a4:	f7ff ff6c 	bl	800f480 <__sinit>
 800f5a8:	69a3      	ldr	r3, [r4, #24]
 800f5aa:	60a3      	str	r3, [r4, #8]
 800f5ac:	89a3      	ldrh	r3, [r4, #12]
 800f5ae:	071a      	lsls	r2, r3, #28
 800f5b0:	d501      	bpl.n	800f5b6 <__swbuf_r+0x20>
 800f5b2:	6923      	ldr	r3, [r4, #16]
 800f5b4:	b943      	cbnz	r3, 800f5c8 <__swbuf_r+0x32>
 800f5b6:	4621      	mov	r1, r4
 800f5b8:	4628      	mov	r0, r5
 800f5ba:	f000 f82b 	bl	800f614 <__swsetup_r>
 800f5be:	b118      	cbz	r0, 800f5c8 <__swbuf_r+0x32>
 800f5c0:	f04f 37ff 	mov.w	r7, #4294967295
 800f5c4:	4638      	mov	r0, r7
 800f5c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5c8:	6823      	ldr	r3, [r4, #0]
 800f5ca:	6922      	ldr	r2, [r4, #16]
 800f5cc:	1a98      	subs	r0, r3, r2
 800f5ce:	6963      	ldr	r3, [r4, #20]
 800f5d0:	b2f6      	uxtb	r6, r6
 800f5d2:	4283      	cmp	r3, r0
 800f5d4:	4637      	mov	r7, r6
 800f5d6:	dc05      	bgt.n	800f5e4 <__swbuf_r+0x4e>
 800f5d8:	4621      	mov	r1, r4
 800f5da:	4628      	mov	r0, r5
 800f5dc:	f000 fd44 	bl	8010068 <_fflush_r>
 800f5e0:	2800      	cmp	r0, #0
 800f5e2:	d1ed      	bne.n	800f5c0 <__swbuf_r+0x2a>
 800f5e4:	68a3      	ldr	r3, [r4, #8]
 800f5e6:	3b01      	subs	r3, #1
 800f5e8:	60a3      	str	r3, [r4, #8]
 800f5ea:	6823      	ldr	r3, [r4, #0]
 800f5ec:	1c5a      	adds	r2, r3, #1
 800f5ee:	6022      	str	r2, [r4, #0]
 800f5f0:	701e      	strb	r6, [r3, #0]
 800f5f2:	6962      	ldr	r2, [r4, #20]
 800f5f4:	1c43      	adds	r3, r0, #1
 800f5f6:	429a      	cmp	r2, r3
 800f5f8:	d004      	beq.n	800f604 <__swbuf_r+0x6e>
 800f5fa:	89a3      	ldrh	r3, [r4, #12]
 800f5fc:	07db      	lsls	r3, r3, #31
 800f5fe:	d5e1      	bpl.n	800f5c4 <__swbuf_r+0x2e>
 800f600:	2e0a      	cmp	r6, #10
 800f602:	d1df      	bne.n	800f5c4 <__swbuf_r+0x2e>
 800f604:	4621      	mov	r1, r4
 800f606:	4628      	mov	r0, r5
 800f608:	f000 fd2e 	bl	8010068 <_fflush_r>
 800f60c:	2800      	cmp	r0, #0
 800f60e:	d0d9      	beq.n	800f5c4 <__swbuf_r+0x2e>
 800f610:	e7d6      	b.n	800f5c0 <__swbuf_r+0x2a>
	...

0800f614 <__swsetup_r>:
 800f614:	b538      	push	{r3, r4, r5, lr}
 800f616:	4b29      	ldr	r3, [pc, #164]	@ (800f6bc <__swsetup_r+0xa8>)
 800f618:	4605      	mov	r5, r0
 800f61a:	6818      	ldr	r0, [r3, #0]
 800f61c:	460c      	mov	r4, r1
 800f61e:	b118      	cbz	r0, 800f628 <__swsetup_r+0x14>
 800f620:	6a03      	ldr	r3, [r0, #32]
 800f622:	b90b      	cbnz	r3, 800f628 <__swsetup_r+0x14>
 800f624:	f7ff ff2c 	bl	800f480 <__sinit>
 800f628:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f62c:	0719      	lsls	r1, r3, #28
 800f62e:	d422      	bmi.n	800f676 <__swsetup_r+0x62>
 800f630:	06da      	lsls	r2, r3, #27
 800f632:	d407      	bmi.n	800f644 <__swsetup_r+0x30>
 800f634:	2209      	movs	r2, #9
 800f636:	602a      	str	r2, [r5, #0]
 800f638:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f63c:	81a3      	strh	r3, [r4, #12]
 800f63e:	f04f 30ff 	mov.w	r0, #4294967295
 800f642:	e033      	b.n	800f6ac <__swsetup_r+0x98>
 800f644:	0758      	lsls	r0, r3, #29
 800f646:	d512      	bpl.n	800f66e <__swsetup_r+0x5a>
 800f648:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f64a:	b141      	cbz	r1, 800f65e <__swsetup_r+0x4a>
 800f64c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f650:	4299      	cmp	r1, r3
 800f652:	d002      	beq.n	800f65a <__swsetup_r+0x46>
 800f654:	4628      	mov	r0, r5
 800f656:	f000 f8bd 	bl	800f7d4 <_free_r>
 800f65a:	2300      	movs	r3, #0
 800f65c:	6363      	str	r3, [r4, #52]	@ 0x34
 800f65e:	89a3      	ldrh	r3, [r4, #12]
 800f660:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f664:	81a3      	strh	r3, [r4, #12]
 800f666:	2300      	movs	r3, #0
 800f668:	6063      	str	r3, [r4, #4]
 800f66a:	6923      	ldr	r3, [r4, #16]
 800f66c:	6023      	str	r3, [r4, #0]
 800f66e:	89a3      	ldrh	r3, [r4, #12]
 800f670:	f043 0308 	orr.w	r3, r3, #8
 800f674:	81a3      	strh	r3, [r4, #12]
 800f676:	6923      	ldr	r3, [r4, #16]
 800f678:	b94b      	cbnz	r3, 800f68e <__swsetup_r+0x7a>
 800f67a:	89a3      	ldrh	r3, [r4, #12]
 800f67c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f680:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f684:	d003      	beq.n	800f68e <__swsetup_r+0x7a>
 800f686:	4621      	mov	r1, r4
 800f688:	4628      	mov	r0, r5
 800f68a:	f000 fd3b 	bl	8010104 <__smakebuf_r>
 800f68e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f692:	f013 0201 	ands.w	r2, r3, #1
 800f696:	d00a      	beq.n	800f6ae <__swsetup_r+0x9a>
 800f698:	2200      	movs	r2, #0
 800f69a:	60a2      	str	r2, [r4, #8]
 800f69c:	6962      	ldr	r2, [r4, #20]
 800f69e:	4252      	negs	r2, r2
 800f6a0:	61a2      	str	r2, [r4, #24]
 800f6a2:	6922      	ldr	r2, [r4, #16]
 800f6a4:	b942      	cbnz	r2, 800f6b8 <__swsetup_r+0xa4>
 800f6a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f6aa:	d1c5      	bne.n	800f638 <__swsetup_r+0x24>
 800f6ac:	bd38      	pop	{r3, r4, r5, pc}
 800f6ae:	0799      	lsls	r1, r3, #30
 800f6b0:	bf58      	it	pl
 800f6b2:	6962      	ldrpl	r2, [r4, #20]
 800f6b4:	60a2      	str	r2, [r4, #8]
 800f6b6:	e7f4      	b.n	800f6a2 <__swsetup_r+0x8e>
 800f6b8:	2000      	movs	r0, #0
 800f6ba:	e7f7      	b.n	800f6ac <__swsetup_r+0x98>
 800f6bc:	24000038 	.word	0x24000038

0800f6c0 <memset>:
 800f6c0:	4402      	add	r2, r0
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	4293      	cmp	r3, r2
 800f6c6:	d100      	bne.n	800f6ca <memset+0xa>
 800f6c8:	4770      	bx	lr
 800f6ca:	f803 1b01 	strb.w	r1, [r3], #1
 800f6ce:	e7f9      	b.n	800f6c4 <memset+0x4>

0800f6d0 <_close_r>:
 800f6d0:	b538      	push	{r3, r4, r5, lr}
 800f6d2:	4d06      	ldr	r5, [pc, #24]	@ (800f6ec <_close_r+0x1c>)
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	4604      	mov	r4, r0
 800f6d8:	4608      	mov	r0, r1
 800f6da:	602b      	str	r3, [r5, #0]
 800f6dc:	f7f2 f95d 	bl	800199a <_close>
 800f6e0:	1c43      	adds	r3, r0, #1
 800f6e2:	d102      	bne.n	800f6ea <_close_r+0x1a>
 800f6e4:	682b      	ldr	r3, [r5, #0]
 800f6e6:	b103      	cbz	r3, 800f6ea <_close_r+0x1a>
 800f6e8:	6023      	str	r3, [r4, #0]
 800f6ea:	bd38      	pop	{r3, r4, r5, pc}
 800f6ec:	24000690 	.word	0x24000690

0800f6f0 <_lseek_r>:
 800f6f0:	b538      	push	{r3, r4, r5, lr}
 800f6f2:	4d07      	ldr	r5, [pc, #28]	@ (800f710 <_lseek_r+0x20>)
 800f6f4:	4604      	mov	r4, r0
 800f6f6:	4608      	mov	r0, r1
 800f6f8:	4611      	mov	r1, r2
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	602a      	str	r2, [r5, #0]
 800f6fe:	461a      	mov	r2, r3
 800f700:	f7f2 f972 	bl	80019e8 <_lseek>
 800f704:	1c43      	adds	r3, r0, #1
 800f706:	d102      	bne.n	800f70e <_lseek_r+0x1e>
 800f708:	682b      	ldr	r3, [r5, #0]
 800f70a:	b103      	cbz	r3, 800f70e <_lseek_r+0x1e>
 800f70c:	6023      	str	r3, [r4, #0]
 800f70e:	bd38      	pop	{r3, r4, r5, pc}
 800f710:	24000690 	.word	0x24000690

0800f714 <_read_r>:
 800f714:	b538      	push	{r3, r4, r5, lr}
 800f716:	4d07      	ldr	r5, [pc, #28]	@ (800f734 <_read_r+0x20>)
 800f718:	4604      	mov	r4, r0
 800f71a:	4608      	mov	r0, r1
 800f71c:	4611      	mov	r1, r2
 800f71e:	2200      	movs	r2, #0
 800f720:	602a      	str	r2, [r5, #0]
 800f722:	461a      	mov	r2, r3
 800f724:	f7f2 f900 	bl	8001928 <_read>
 800f728:	1c43      	adds	r3, r0, #1
 800f72a:	d102      	bne.n	800f732 <_read_r+0x1e>
 800f72c:	682b      	ldr	r3, [r5, #0]
 800f72e:	b103      	cbz	r3, 800f732 <_read_r+0x1e>
 800f730:	6023      	str	r3, [r4, #0]
 800f732:	bd38      	pop	{r3, r4, r5, pc}
 800f734:	24000690 	.word	0x24000690

0800f738 <_write_r>:
 800f738:	b538      	push	{r3, r4, r5, lr}
 800f73a:	4d07      	ldr	r5, [pc, #28]	@ (800f758 <_write_r+0x20>)
 800f73c:	4604      	mov	r4, r0
 800f73e:	4608      	mov	r0, r1
 800f740:	4611      	mov	r1, r2
 800f742:	2200      	movs	r2, #0
 800f744:	602a      	str	r2, [r5, #0]
 800f746:	461a      	mov	r2, r3
 800f748:	f7f2 f90b 	bl	8001962 <_write>
 800f74c:	1c43      	adds	r3, r0, #1
 800f74e:	d102      	bne.n	800f756 <_write_r+0x1e>
 800f750:	682b      	ldr	r3, [r5, #0]
 800f752:	b103      	cbz	r3, 800f756 <_write_r+0x1e>
 800f754:	6023      	str	r3, [r4, #0]
 800f756:	bd38      	pop	{r3, r4, r5, pc}
 800f758:	24000690 	.word	0x24000690

0800f75c <__errno>:
 800f75c:	4b01      	ldr	r3, [pc, #4]	@ (800f764 <__errno+0x8>)
 800f75e:	6818      	ldr	r0, [r3, #0]
 800f760:	4770      	bx	lr
 800f762:	bf00      	nop
 800f764:	24000038 	.word	0x24000038

0800f768 <__libc_init_array>:
 800f768:	b570      	push	{r4, r5, r6, lr}
 800f76a:	4d0d      	ldr	r5, [pc, #52]	@ (800f7a0 <__libc_init_array+0x38>)
 800f76c:	4c0d      	ldr	r4, [pc, #52]	@ (800f7a4 <__libc_init_array+0x3c>)
 800f76e:	1b64      	subs	r4, r4, r5
 800f770:	10a4      	asrs	r4, r4, #2
 800f772:	2600      	movs	r6, #0
 800f774:	42a6      	cmp	r6, r4
 800f776:	d109      	bne.n	800f78c <__libc_init_array+0x24>
 800f778:	4d0b      	ldr	r5, [pc, #44]	@ (800f7a8 <__libc_init_array+0x40>)
 800f77a:	4c0c      	ldr	r4, [pc, #48]	@ (800f7ac <__libc_init_array+0x44>)
 800f77c:	f000 fd30 	bl	80101e0 <_init>
 800f780:	1b64      	subs	r4, r4, r5
 800f782:	10a4      	asrs	r4, r4, #2
 800f784:	2600      	movs	r6, #0
 800f786:	42a6      	cmp	r6, r4
 800f788:	d105      	bne.n	800f796 <__libc_init_array+0x2e>
 800f78a:	bd70      	pop	{r4, r5, r6, pc}
 800f78c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f790:	4798      	blx	r3
 800f792:	3601      	adds	r6, #1
 800f794:	e7ee      	b.n	800f774 <__libc_init_array+0xc>
 800f796:	f855 3b04 	ldr.w	r3, [r5], #4
 800f79a:	4798      	blx	r3
 800f79c:	3601      	adds	r6, #1
 800f79e:	e7f2      	b.n	800f786 <__libc_init_array+0x1e>
 800f7a0:	080102ac 	.word	0x080102ac
 800f7a4:	080102ac 	.word	0x080102ac
 800f7a8:	080102ac 	.word	0x080102ac
 800f7ac:	080102b0 	.word	0x080102b0

0800f7b0 <__retarget_lock_init_recursive>:
 800f7b0:	4770      	bx	lr

0800f7b2 <__retarget_lock_acquire_recursive>:
 800f7b2:	4770      	bx	lr

0800f7b4 <__retarget_lock_release_recursive>:
 800f7b4:	4770      	bx	lr

0800f7b6 <memcpy>:
 800f7b6:	440a      	add	r2, r1
 800f7b8:	4291      	cmp	r1, r2
 800f7ba:	f100 33ff 	add.w	r3, r0, #4294967295
 800f7be:	d100      	bne.n	800f7c2 <memcpy+0xc>
 800f7c0:	4770      	bx	lr
 800f7c2:	b510      	push	{r4, lr}
 800f7c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f7c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f7cc:	4291      	cmp	r1, r2
 800f7ce:	d1f9      	bne.n	800f7c4 <memcpy+0xe>
 800f7d0:	bd10      	pop	{r4, pc}
	...

0800f7d4 <_free_r>:
 800f7d4:	b538      	push	{r3, r4, r5, lr}
 800f7d6:	4605      	mov	r5, r0
 800f7d8:	2900      	cmp	r1, #0
 800f7da:	d041      	beq.n	800f860 <_free_r+0x8c>
 800f7dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f7e0:	1f0c      	subs	r4, r1, #4
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	bfb8      	it	lt
 800f7e6:	18e4      	addlt	r4, r4, r3
 800f7e8:	f000 f8e0 	bl	800f9ac <__malloc_lock>
 800f7ec:	4a1d      	ldr	r2, [pc, #116]	@ (800f864 <_free_r+0x90>)
 800f7ee:	6813      	ldr	r3, [r2, #0]
 800f7f0:	b933      	cbnz	r3, 800f800 <_free_r+0x2c>
 800f7f2:	6063      	str	r3, [r4, #4]
 800f7f4:	6014      	str	r4, [r2, #0]
 800f7f6:	4628      	mov	r0, r5
 800f7f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f7fc:	f000 b8dc 	b.w	800f9b8 <__malloc_unlock>
 800f800:	42a3      	cmp	r3, r4
 800f802:	d908      	bls.n	800f816 <_free_r+0x42>
 800f804:	6820      	ldr	r0, [r4, #0]
 800f806:	1821      	adds	r1, r4, r0
 800f808:	428b      	cmp	r3, r1
 800f80a:	bf01      	itttt	eq
 800f80c:	6819      	ldreq	r1, [r3, #0]
 800f80e:	685b      	ldreq	r3, [r3, #4]
 800f810:	1809      	addeq	r1, r1, r0
 800f812:	6021      	streq	r1, [r4, #0]
 800f814:	e7ed      	b.n	800f7f2 <_free_r+0x1e>
 800f816:	461a      	mov	r2, r3
 800f818:	685b      	ldr	r3, [r3, #4]
 800f81a:	b10b      	cbz	r3, 800f820 <_free_r+0x4c>
 800f81c:	42a3      	cmp	r3, r4
 800f81e:	d9fa      	bls.n	800f816 <_free_r+0x42>
 800f820:	6811      	ldr	r1, [r2, #0]
 800f822:	1850      	adds	r0, r2, r1
 800f824:	42a0      	cmp	r0, r4
 800f826:	d10b      	bne.n	800f840 <_free_r+0x6c>
 800f828:	6820      	ldr	r0, [r4, #0]
 800f82a:	4401      	add	r1, r0
 800f82c:	1850      	adds	r0, r2, r1
 800f82e:	4283      	cmp	r3, r0
 800f830:	6011      	str	r1, [r2, #0]
 800f832:	d1e0      	bne.n	800f7f6 <_free_r+0x22>
 800f834:	6818      	ldr	r0, [r3, #0]
 800f836:	685b      	ldr	r3, [r3, #4]
 800f838:	6053      	str	r3, [r2, #4]
 800f83a:	4408      	add	r0, r1
 800f83c:	6010      	str	r0, [r2, #0]
 800f83e:	e7da      	b.n	800f7f6 <_free_r+0x22>
 800f840:	d902      	bls.n	800f848 <_free_r+0x74>
 800f842:	230c      	movs	r3, #12
 800f844:	602b      	str	r3, [r5, #0]
 800f846:	e7d6      	b.n	800f7f6 <_free_r+0x22>
 800f848:	6820      	ldr	r0, [r4, #0]
 800f84a:	1821      	adds	r1, r4, r0
 800f84c:	428b      	cmp	r3, r1
 800f84e:	bf04      	itt	eq
 800f850:	6819      	ldreq	r1, [r3, #0]
 800f852:	685b      	ldreq	r3, [r3, #4]
 800f854:	6063      	str	r3, [r4, #4]
 800f856:	bf04      	itt	eq
 800f858:	1809      	addeq	r1, r1, r0
 800f85a:	6021      	streq	r1, [r4, #0]
 800f85c:	6054      	str	r4, [r2, #4]
 800f85e:	e7ca      	b.n	800f7f6 <_free_r+0x22>
 800f860:	bd38      	pop	{r3, r4, r5, pc}
 800f862:	bf00      	nop
 800f864:	2400069c 	.word	0x2400069c

0800f868 <sbrk_aligned>:
 800f868:	b570      	push	{r4, r5, r6, lr}
 800f86a:	4e0f      	ldr	r6, [pc, #60]	@ (800f8a8 <sbrk_aligned+0x40>)
 800f86c:	460c      	mov	r4, r1
 800f86e:	6831      	ldr	r1, [r6, #0]
 800f870:	4605      	mov	r5, r0
 800f872:	b911      	cbnz	r1, 800f87a <sbrk_aligned+0x12>
 800f874:	f000 fca4 	bl	80101c0 <_sbrk_r>
 800f878:	6030      	str	r0, [r6, #0]
 800f87a:	4621      	mov	r1, r4
 800f87c:	4628      	mov	r0, r5
 800f87e:	f000 fc9f 	bl	80101c0 <_sbrk_r>
 800f882:	1c43      	adds	r3, r0, #1
 800f884:	d103      	bne.n	800f88e <sbrk_aligned+0x26>
 800f886:	f04f 34ff 	mov.w	r4, #4294967295
 800f88a:	4620      	mov	r0, r4
 800f88c:	bd70      	pop	{r4, r5, r6, pc}
 800f88e:	1cc4      	adds	r4, r0, #3
 800f890:	f024 0403 	bic.w	r4, r4, #3
 800f894:	42a0      	cmp	r0, r4
 800f896:	d0f8      	beq.n	800f88a <sbrk_aligned+0x22>
 800f898:	1a21      	subs	r1, r4, r0
 800f89a:	4628      	mov	r0, r5
 800f89c:	f000 fc90 	bl	80101c0 <_sbrk_r>
 800f8a0:	3001      	adds	r0, #1
 800f8a2:	d1f2      	bne.n	800f88a <sbrk_aligned+0x22>
 800f8a4:	e7ef      	b.n	800f886 <sbrk_aligned+0x1e>
 800f8a6:	bf00      	nop
 800f8a8:	24000698 	.word	0x24000698

0800f8ac <_malloc_r>:
 800f8ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8b0:	1ccd      	adds	r5, r1, #3
 800f8b2:	f025 0503 	bic.w	r5, r5, #3
 800f8b6:	3508      	adds	r5, #8
 800f8b8:	2d0c      	cmp	r5, #12
 800f8ba:	bf38      	it	cc
 800f8bc:	250c      	movcc	r5, #12
 800f8be:	2d00      	cmp	r5, #0
 800f8c0:	4606      	mov	r6, r0
 800f8c2:	db01      	blt.n	800f8c8 <_malloc_r+0x1c>
 800f8c4:	42a9      	cmp	r1, r5
 800f8c6:	d904      	bls.n	800f8d2 <_malloc_r+0x26>
 800f8c8:	230c      	movs	r3, #12
 800f8ca:	6033      	str	r3, [r6, #0]
 800f8cc:	2000      	movs	r0, #0
 800f8ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f9a8 <_malloc_r+0xfc>
 800f8d6:	f000 f869 	bl	800f9ac <__malloc_lock>
 800f8da:	f8d8 3000 	ldr.w	r3, [r8]
 800f8de:	461c      	mov	r4, r3
 800f8e0:	bb44      	cbnz	r4, 800f934 <_malloc_r+0x88>
 800f8e2:	4629      	mov	r1, r5
 800f8e4:	4630      	mov	r0, r6
 800f8e6:	f7ff ffbf 	bl	800f868 <sbrk_aligned>
 800f8ea:	1c43      	adds	r3, r0, #1
 800f8ec:	4604      	mov	r4, r0
 800f8ee:	d158      	bne.n	800f9a2 <_malloc_r+0xf6>
 800f8f0:	f8d8 4000 	ldr.w	r4, [r8]
 800f8f4:	4627      	mov	r7, r4
 800f8f6:	2f00      	cmp	r7, #0
 800f8f8:	d143      	bne.n	800f982 <_malloc_r+0xd6>
 800f8fa:	2c00      	cmp	r4, #0
 800f8fc:	d04b      	beq.n	800f996 <_malloc_r+0xea>
 800f8fe:	6823      	ldr	r3, [r4, #0]
 800f900:	4639      	mov	r1, r7
 800f902:	4630      	mov	r0, r6
 800f904:	eb04 0903 	add.w	r9, r4, r3
 800f908:	f000 fc5a 	bl	80101c0 <_sbrk_r>
 800f90c:	4581      	cmp	r9, r0
 800f90e:	d142      	bne.n	800f996 <_malloc_r+0xea>
 800f910:	6821      	ldr	r1, [r4, #0]
 800f912:	1a6d      	subs	r5, r5, r1
 800f914:	4629      	mov	r1, r5
 800f916:	4630      	mov	r0, r6
 800f918:	f7ff ffa6 	bl	800f868 <sbrk_aligned>
 800f91c:	3001      	adds	r0, #1
 800f91e:	d03a      	beq.n	800f996 <_malloc_r+0xea>
 800f920:	6823      	ldr	r3, [r4, #0]
 800f922:	442b      	add	r3, r5
 800f924:	6023      	str	r3, [r4, #0]
 800f926:	f8d8 3000 	ldr.w	r3, [r8]
 800f92a:	685a      	ldr	r2, [r3, #4]
 800f92c:	bb62      	cbnz	r2, 800f988 <_malloc_r+0xdc>
 800f92e:	f8c8 7000 	str.w	r7, [r8]
 800f932:	e00f      	b.n	800f954 <_malloc_r+0xa8>
 800f934:	6822      	ldr	r2, [r4, #0]
 800f936:	1b52      	subs	r2, r2, r5
 800f938:	d420      	bmi.n	800f97c <_malloc_r+0xd0>
 800f93a:	2a0b      	cmp	r2, #11
 800f93c:	d917      	bls.n	800f96e <_malloc_r+0xc2>
 800f93e:	1961      	adds	r1, r4, r5
 800f940:	42a3      	cmp	r3, r4
 800f942:	6025      	str	r5, [r4, #0]
 800f944:	bf18      	it	ne
 800f946:	6059      	strne	r1, [r3, #4]
 800f948:	6863      	ldr	r3, [r4, #4]
 800f94a:	bf08      	it	eq
 800f94c:	f8c8 1000 	streq.w	r1, [r8]
 800f950:	5162      	str	r2, [r4, r5]
 800f952:	604b      	str	r3, [r1, #4]
 800f954:	4630      	mov	r0, r6
 800f956:	f000 f82f 	bl	800f9b8 <__malloc_unlock>
 800f95a:	f104 000b 	add.w	r0, r4, #11
 800f95e:	1d23      	adds	r3, r4, #4
 800f960:	f020 0007 	bic.w	r0, r0, #7
 800f964:	1ac2      	subs	r2, r0, r3
 800f966:	bf1c      	itt	ne
 800f968:	1a1b      	subne	r3, r3, r0
 800f96a:	50a3      	strne	r3, [r4, r2]
 800f96c:	e7af      	b.n	800f8ce <_malloc_r+0x22>
 800f96e:	6862      	ldr	r2, [r4, #4]
 800f970:	42a3      	cmp	r3, r4
 800f972:	bf0c      	ite	eq
 800f974:	f8c8 2000 	streq.w	r2, [r8]
 800f978:	605a      	strne	r2, [r3, #4]
 800f97a:	e7eb      	b.n	800f954 <_malloc_r+0xa8>
 800f97c:	4623      	mov	r3, r4
 800f97e:	6864      	ldr	r4, [r4, #4]
 800f980:	e7ae      	b.n	800f8e0 <_malloc_r+0x34>
 800f982:	463c      	mov	r4, r7
 800f984:	687f      	ldr	r7, [r7, #4]
 800f986:	e7b6      	b.n	800f8f6 <_malloc_r+0x4a>
 800f988:	461a      	mov	r2, r3
 800f98a:	685b      	ldr	r3, [r3, #4]
 800f98c:	42a3      	cmp	r3, r4
 800f98e:	d1fb      	bne.n	800f988 <_malloc_r+0xdc>
 800f990:	2300      	movs	r3, #0
 800f992:	6053      	str	r3, [r2, #4]
 800f994:	e7de      	b.n	800f954 <_malloc_r+0xa8>
 800f996:	230c      	movs	r3, #12
 800f998:	6033      	str	r3, [r6, #0]
 800f99a:	4630      	mov	r0, r6
 800f99c:	f000 f80c 	bl	800f9b8 <__malloc_unlock>
 800f9a0:	e794      	b.n	800f8cc <_malloc_r+0x20>
 800f9a2:	6005      	str	r5, [r0, #0]
 800f9a4:	e7d6      	b.n	800f954 <_malloc_r+0xa8>
 800f9a6:	bf00      	nop
 800f9a8:	2400069c 	.word	0x2400069c

0800f9ac <__malloc_lock>:
 800f9ac:	4801      	ldr	r0, [pc, #4]	@ (800f9b4 <__malloc_lock+0x8>)
 800f9ae:	f7ff bf00 	b.w	800f7b2 <__retarget_lock_acquire_recursive>
 800f9b2:	bf00      	nop
 800f9b4:	24000694 	.word	0x24000694

0800f9b8 <__malloc_unlock>:
 800f9b8:	4801      	ldr	r0, [pc, #4]	@ (800f9c0 <__malloc_unlock+0x8>)
 800f9ba:	f7ff befb 	b.w	800f7b4 <__retarget_lock_release_recursive>
 800f9be:	bf00      	nop
 800f9c0:	24000694 	.word	0x24000694

0800f9c4 <__sfputc_r>:
 800f9c4:	6893      	ldr	r3, [r2, #8]
 800f9c6:	3b01      	subs	r3, #1
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	b410      	push	{r4}
 800f9cc:	6093      	str	r3, [r2, #8]
 800f9ce:	da08      	bge.n	800f9e2 <__sfputc_r+0x1e>
 800f9d0:	6994      	ldr	r4, [r2, #24]
 800f9d2:	42a3      	cmp	r3, r4
 800f9d4:	db01      	blt.n	800f9da <__sfputc_r+0x16>
 800f9d6:	290a      	cmp	r1, #10
 800f9d8:	d103      	bne.n	800f9e2 <__sfputc_r+0x1e>
 800f9da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f9de:	f7ff bdda 	b.w	800f596 <__swbuf_r>
 800f9e2:	6813      	ldr	r3, [r2, #0]
 800f9e4:	1c58      	adds	r0, r3, #1
 800f9e6:	6010      	str	r0, [r2, #0]
 800f9e8:	7019      	strb	r1, [r3, #0]
 800f9ea:	4608      	mov	r0, r1
 800f9ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f9f0:	4770      	bx	lr

0800f9f2 <__sfputs_r>:
 800f9f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9f4:	4606      	mov	r6, r0
 800f9f6:	460f      	mov	r7, r1
 800f9f8:	4614      	mov	r4, r2
 800f9fa:	18d5      	adds	r5, r2, r3
 800f9fc:	42ac      	cmp	r4, r5
 800f9fe:	d101      	bne.n	800fa04 <__sfputs_r+0x12>
 800fa00:	2000      	movs	r0, #0
 800fa02:	e007      	b.n	800fa14 <__sfputs_r+0x22>
 800fa04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa08:	463a      	mov	r2, r7
 800fa0a:	4630      	mov	r0, r6
 800fa0c:	f7ff ffda 	bl	800f9c4 <__sfputc_r>
 800fa10:	1c43      	adds	r3, r0, #1
 800fa12:	d1f3      	bne.n	800f9fc <__sfputs_r+0xa>
 800fa14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fa18 <_vfiprintf_r>:
 800fa18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa1c:	460d      	mov	r5, r1
 800fa1e:	b09d      	sub	sp, #116	@ 0x74
 800fa20:	4614      	mov	r4, r2
 800fa22:	4698      	mov	r8, r3
 800fa24:	4606      	mov	r6, r0
 800fa26:	b118      	cbz	r0, 800fa30 <_vfiprintf_r+0x18>
 800fa28:	6a03      	ldr	r3, [r0, #32]
 800fa2a:	b90b      	cbnz	r3, 800fa30 <_vfiprintf_r+0x18>
 800fa2c:	f7ff fd28 	bl	800f480 <__sinit>
 800fa30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fa32:	07d9      	lsls	r1, r3, #31
 800fa34:	d405      	bmi.n	800fa42 <_vfiprintf_r+0x2a>
 800fa36:	89ab      	ldrh	r3, [r5, #12]
 800fa38:	059a      	lsls	r2, r3, #22
 800fa3a:	d402      	bmi.n	800fa42 <_vfiprintf_r+0x2a>
 800fa3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fa3e:	f7ff feb8 	bl	800f7b2 <__retarget_lock_acquire_recursive>
 800fa42:	89ab      	ldrh	r3, [r5, #12]
 800fa44:	071b      	lsls	r3, r3, #28
 800fa46:	d501      	bpl.n	800fa4c <_vfiprintf_r+0x34>
 800fa48:	692b      	ldr	r3, [r5, #16]
 800fa4a:	b99b      	cbnz	r3, 800fa74 <_vfiprintf_r+0x5c>
 800fa4c:	4629      	mov	r1, r5
 800fa4e:	4630      	mov	r0, r6
 800fa50:	f7ff fde0 	bl	800f614 <__swsetup_r>
 800fa54:	b170      	cbz	r0, 800fa74 <_vfiprintf_r+0x5c>
 800fa56:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fa58:	07dc      	lsls	r4, r3, #31
 800fa5a:	d504      	bpl.n	800fa66 <_vfiprintf_r+0x4e>
 800fa5c:	f04f 30ff 	mov.w	r0, #4294967295
 800fa60:	b01d      	add	sp, #116	@ 0x74
 800fa62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa66:	89ab      	ldrh	r3, [r5, #12]
 800fa68:	0598      	lsls	r0, r3, #22
 800fa6a:	d4f7      	bmi.n	800fa5c <_vfiprintf_r+0x44>
 800fa6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fa6e:	f7ff fea1 	bl	800f7b4 <__retarget_lock_release_recursive>
 800fa72:	e7f3      	b.n	800fa5c <_vfiprintf_r+0x44>
 800fa74:	2300      	movs	r3, #0
 800fa76:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa78:	2320      	movs	r3, #32
 800fa7a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fa7e:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa82:	2330      	movs	r3, #48	@ 0x30
 800fa84:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fc34 <_vfiprintf_r+0x21c>
 800fa88:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fa8c:	f04f 0901 	mov.w	r9, #1
 800fa90:	4623      	mov	r3, r4
 800fa92:	469a      	mov	sl, r3
 800fa94:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa98:	b10a      	cbz	r2, 800fa9e <_vfiprintf_r+0x86>
 800fa9a:	2a25      	cmp	r2, #37	@ 0x25
 800fa9c:	d1f9      	bne.n	800fa92 <_vfiprintf_r+0x7a>
 800fa9e:	ebba 0b04 	subs.w	fp, sl, r4
 800faa2:	d00b      	beq.n	800fabc <_vfiprintf_r+0xa4>
 800faa4:	465b      	mov	r3, fp
 800faa6:	4622      	mov	r2, r4
 800faa8:	4629      	mov	r1, r5
 800faaa:	4630      	mov	r0, r6
 800faac:	f7ff ffa1 	bl	800f9f2 <__sfputs_r>
 800fab0:	3001      	adds	r0, #1
 800fab2:	f000 80a7 	beq.w	800fc04 <_vfiprintf_r+0x1ec>
 800fab6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fab8:	445a      	add	r2, fp
 800faba:	9209      	str	r2, [sp, #36]	@ 0x24
 800fabc:	f89a 3000 	ldrb.w	r3, [sl]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	f000 809f 	beq.w	800fc04 <_vfiprintf_r+0x1ec>
 800fac6:	2300      	movs	r3, #0
 800fac8:	f04f 32ff 	mov.w	r2, #4294967295
 800facc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fad0:	f10a 0a01 	add.w	sl, sl, #1
 800fad4:	9304      	str	r3, [sp, #16]
 800fad6:	9307      	str	r3, [sp, #28]
 800fad8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fadc:	931a      	str	r3, [sp, #104]	@ 0x68
 800fade:	4654      	mov	r4, sl
 800fae0:	2205      	movs	r2, #5
 800fae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fae6:	4853      	ldr	r0, [pc, #332]	@ (800fc34 <_vfiprintf_r+0x21c>)
 800fae8:	f7f0 fc02 	bl	80002f0 <memchr>
 800faec:	9a04      	ldr	r2, [sp, #16]
 800faee:	b9d8      	cbnz	r0, 800fb28 <_vfiprintf_r+0x110>
 800faf0:	06d1      	lsls	r1, r2, #27
 800faf2:	bf44      	itt	mi
 800faf4:	2320      	movmi	r3, #32
 800faf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fafa:	0713      	lsls	r3, r2, #28
 800fafc:	bf44      	itt	mi
 800fafe:	232b      	movmi	r3, #43	@ 0x2b
 800fb00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fb04:	f89a 3000 	ldrb.w	r3, [sl]
 800fb08:	2b2a      	cmp	r3, #42	@ 0x2a
 800fb0a:	d015      	beq.n	800fb38 <_vfiprintf_r+0x120>
 800fb0c:	9a07      	ldr	r2, [sp, #28]
 800fb0e:	4654      	mov	r4, sl
 800fb10:	2000      	movs	r0, #0
 800fb12:	f04f 0c0a 	mov.w	ip, #10
 800fb16:	4621      	mov	r1, r4
 800fb18:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb1c:	3b30      	subs	r3, #48	@ 0x30
 800fb1e:	2b09      	cmp	r3, #9
 800fb20:	d94b      	bls.n	800fbba <_vfiprintf_r+0x1a2>
 800fb22:	b1b0      	cbz	r0, 800fb52 <_vfiprintf_r+0x13a>
 800fb24:	9207      	str	r2, [sp, #28]
 800fb26:	e014      	b.n	800fb52 <_vfiprintf_r+0x13a>
 800fb28:	eba0 0308 	sub.w	r3, r0, r8
 800fb2c:	fa09 f303 	lsl.w	r3, r9, r3
 800fb30:	4313      	orrs	r3, r2
 800fb32:	9304      	str	r3, [sp, #16]
 800fb34:	46a2      	mov	sl, r4
 800fb36:	e7d2      	b.n	800fade <_vfiprintf_r+0xc6>
 800fb38:	9b03      	ldr	r3, [sp, #12]
 800fb3a:	1d19      	adds	r1, r3, #4
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	9103      	str	r1, [sp, #12]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	bfbb      	ittet	lt
 800fb44:	425b      	neglt	r3, r3
 800fb46:	f042 0202 	orrlt.w	r2, r2, #2
 800fb4a:	9307      	strge	r3, [sp, #28]
 800fb4c:	9307      	strlt	r3, [sp, #28]
 800fb4e:	bfb8      	it	lt
 800fb50:	9204      	strlt	r2, [sp, #16]
 800fb52:	7823      	ldrb	r3, [r4, #0]
 800fb54:	2b2e      	cmp	r3, #46	@ 0x2e
 800fb56:	d10a      	bne.n	800fb6e <_vfiprintf_r+0x156>
 800fb58:	7863      	ldrb	r3, [r4, #1]
 800fb5a:	2b2a      	cmp	r3, #42	@ 0x2a
 800fb5c:	d132      	bne.n	800fbc4 <_vfiprintf_r+0x1ac>
 800fb5e:	9b03      	ldr	r3, [sp, #12]
 800fb60:	1d1a      	adds	r2, r3, #4
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	9203      	str	r2, [sp, #12]
 800fb66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fb6a:	3402      	adds	r4, #2
 800fb6c:	9305      	str	r3, [sp, #20]
 800fb6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fc44 <_vfiprintf_r+0x22c>
 800fb72:	7821      	ldrb	r1, [r4, #0]
 800fb74:	2203      	movs	r2, #3
 800fb76:	4650      	mov	r0, sl
 800fb78:	f7f0 fbba 	bl	80002f0 <memchr>
 800fb7c:	b138      	cbz	r0, 800fb8e <_vfiprintf_r+0x176>
 800fb7e:	9b04      	ldr	r3, [sp, #16]
 800fb80:	eba0 000a 	sub.w	r0, r0, sl
 800fb84:	2240      	movs	r2, #64	@ 0x40
 800fb86:	4082      	lsls	r2, r0
 800fb88:	4313      	orrs	r3, r2
 800fb8a:	3401      	adds	r4, #1
 800fb8c:	9304      	str	r3, [sp, #16]
 800fb8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb92:	4829      	ldr	r0, [pc, #164]	@ (800fc38 <_vfiprintf_r+0x220>)
 800fb94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fb98:	2206      	movs	r2, #6
 800fb9a:	f7f0 fba9 	bl	80002f0 <memchr>
 800fb9e:	2800      	cmp	r0, #0
 800fba0:	d03f      	beq.n	800fc22 <_vfiprintf_r+0x20a>
 800fba2:	4b26      	ldr	r3, [pc, #152]	@ (800fc3c <_vfiprintf_r+0x224>)
 800fba4:	bb1b      	cbnz	r3, 800fbee <_vfiprintf_r+0x1d6>
 800fba6:	9b03      	ldr	r3, [sp, #12]
 800fba8:	3307      	adds	r3, #7
 800fbaa:	f023 0307 	bic.w	r3, r3, #7
 800fbae:	3308      	adds	r3, #8
 800fbb0:	9303      	str	r3, [sp, #12]
 800fbb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbb4:	443b      	add	r3, r7
 800fbb6:	9309      	str	r3, [sp, #36]	@ 0x24
 800fbb8:	e76a      	b.n	800fa90 <_vfiprintf_r+0x78>
 800fbba:	fb0c 3202 	mla	r2, ip, r2, r3
 800fbbe:	460c      	mov	r4, r1
 800fbc0:	2001      	movs	r0, #1
 800fbc2:	e7a8      	b.n	800fb16 <_vfiprintf_r+0xfe>
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	3401      	adds	r4, #1
 800fbc8:	9305      	str	r3, [sp, #20]
 800fbca:	4619      	mov	r1, r3
 800fbcc:	f04f 0c0a 	mov.w	ip, #10
 800fbd0:	4620      	mov	r0, r4
 800fbd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fbd6:	3a30      	subs	r2, #48	@ 0x30
 800fbd8:	2a09      	cmp	r2, #9
 800fbda:	d903      	bls.n	800fbe4 <_vfiprintf_r+0x1cc>
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d0c6      	beq.n	800fb6e <_vfiprintf_r+0x156>
 800fbe0:	9105      	str	r1, [sp, #20]
 800fbe2:	e7c4      	b.n	800fb6e <_vfiprintf_r+0x156>
 800fbe4:	fb0c 2101 	mla	r1, ip, r1, r2
 800fbe8:	4604      	mov	r4, r0
 800fbea:	2301      	movs	r3, #1
 800fbec:	e7f0      	b.n	800fbd0 <_vfiprintf_r+0x1b8>
 800fbee:	ab03      	add	r3, sp, #12
 800fbf0:	9300      	str	r3, [sp, #0]
 800fbf2:	462a      	mov	r2, r5
 800fbf4:	4b12      	ldr	r3, [pc, #72]	@ (800fc40 <_vfiprintf_r+0x228>)
 800fbf6:	a904      	add	r1, sp, #16
 800fbf8:	4630      	mov	r0, r6
 800fbfa:	f3af 8000 	nop.w
 800fbfe:	4607      	mov	r7, r0
 800fc00:	1c78      	adds	r0, r7, #1
 800fc02:	d1d6      	bne.n	800fbb2 <_vfiprintf_r+0x19a>
 800fc04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fc06:	07d9      	lsls	r1, r3, #31
 800fc08:	d405      	bmi.n	800fc16 <_vfiprintf_r+0x1fe>
 800fc0a:	89ab      	ldrh	r3, [r5, #12]
 800fc0c:	059a      	lsls	r2, r3, #22
 800fc0e:	d402      	bmi.n	800fc16 <_vfiprintf_r+0x1fe>
 800fc10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fc12:	f7ff fdcf 	bl	800f7b4 <__retarget_lock_release_recursive>
 800fc16:	89ab      	ldrh	r3, [r5, #12]
 800fc18:	065b      	lsls	r3, r3, #25
 800fc1a:	f53f af1f 	bmi.w	800fa5c <_vfiprintf_r+0x44>
 800fc1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fc20:	e71e      	b.n	800fa60 <_vfiprintf_r+0x48>
 800fc22:	ab03      	add	r3, sp, #12
 800fc24:	9300      	str	r3, [sp, #0]
 800fc26:	462a      	mov	r2, r5
 800fc28:	4b05      	ldr	r3, [pc, #20]	@ (800fc40 <_vfiprintf_r+0x228>)
 800fc2a:	a904      	add	r1, sp, #16
 800fc2c:	4630      	mov	r0, r6
 800fc2e:	f000 f879 	bl	800fd24 <_printf_i>
 800fc32:	e7e4      	b.n	800fbfe <_vfiprintf_r+0x1e6>
 800fc34:	08010270 	.word	0x08010270
 800fc38:	0801027a 	.word	0x0801027a
 800fc3c:	00000000 	.word	0x00000000
 800fc40:	0800f9f3 	.word	0x0800f9f3
 800fc44:	08010276 	.word	0x08010276

0800fc48 <_printf_common>:
 800fc48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc4c:	4616      	mov	r6, r2
 800fc4e:	4698      	mov	r8, r3
 800fc50:	688a      	ldr	r2, [r1, #8]
 800fc52:	690b      	ldr	r3, [r1, #16]
 800fc54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fc58:	4293      	cmp	r3, r2
 800fc5a:	bfb8      	it	lt
 800fc5c:	4613      	movlt	r3, r2
 800fc5e:	6033      	str	r3, [r6, #0]
 800fc60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fc64:	4607      	mov	r7, r0
 800fc66:	460c      	mov	r4, r1
 800fc68:	b10a      	cbz	r2, 800fc6e <_printf_common+0x26>
 800fc6a:	3301      	adds	r3, #1
 800fc6c:	6033      	str	r3, [r6, #0]
 800fc6e:	6823      	ldr	r3, [r4, #0]
 800fc70:	0699      	lsls	r1, r3, #26
 800fc72:	bf42      	ittt	mi
 800fc74:	6833      	ldrmi	r3, [r6, #0]
 800fc76:	3302      	addmi	r3, #2
 800fc78:	6033      	strmi	r3, [r6, #0]
 800fc7a:	6825      	ldr	r5, [r4, #0]
 800fc7c:	f015 0506 	ands.w	r5, r5, #6
 800fc80:	d106      	bne.n	800fc90 <_printf_common+0x48>
 800fc82:	f104 0a19 	add.w	sl, r4, #25
 800fc86:	68e3      	ldr	r3, [r4, #12]
 800fc88:	6832      	ldr	r2, [r6, #0]
 800fc8a:	1a9b      	subs	r3, r3, r2
 800fc8c:	42ab      	cmp	r3, r5
 800fc8e:	dc26      	bgt.n	800fcde <_printf_common+0x96>
 800fc90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fc94:	6822      	ldr	r2, [r4, #0]
 800fc96:	3b00      	subs	r3, #0
 800fc98:	bf18      	it	ne
 800fc9a:	2301      	movne	r3, #1
 800fc9c:	0692      	lsls	r2, r2, #26
 800fc9e:	d42b      	bmi.n	800fcf8 <_printf_common+0xb0>
 800fca0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fca4:	4641      	mov	r1, r8
 800fca6:	4638      	mov	r0, r7
 800fca8:	47c8      	blx	r9
 800fcaa:	3001      	adds	r0, #1
 800fcac:	d01e      	beq.n	800fcec <_printf_common+0xa4>
 800fcae:	6823      	ldr	r3, [r4, #0]
 800fcb0:	6922      	ldr	r2, [r4, #16]
 800fcb2:	f003 0306 	and.w	r3, r3, #6
 800fcb6:	2b04      	cmp	r3, #4
 800fcb8:	bf02      	ittt	eq
 800fcba:	68e5      	ldreq	r5, [r4, #12]
 800fcbc:	6833      	ldreq	r3, [r6, #0]
 800fcbe:	1aed      	subeq	r5, r5, r3
 800fcc0:	68a3      	ldr	r3, [r4, #8]
 800fcc2:	bf0c      	ite	eq
 800fcc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fcc8:	2500      	movne	r5, #0
 800fcca:	4293      	cmp	r3, r2
 800fccc:	bfc4      	itt	gt
 800fcce:	1a9b      	subgt	r3, r3, r2
 800fcd0:	18ed      	addgt	r5, r5, r3
 800fcd2:	2600      	movs	r6, #0
 800fcd4:	341a      	adds	r4, #26
 800fcd6:	42b5      	cmp	r5, r6
 800fcd8:	d11a      	bne.n	800fd10 <_printf_common+0xc8>
 800fcda:	2000      	movs	r0, #0
 800fcdc:	e008      	b.n	800fcf0 <_printf_common+0xa8>
 800fcde:	2301      	movs	r3, #1
 800fce0:	4652      	mov	r2, sl
 800fce2:	4641      	mov	r1, r8
 800fce4:	4638      	mov	r0, r7
 800fce6:	47c8      	blx	r9
 800fce8:	3001      	adds	r0, #1
 800fcea:	d103      	bne.n	800fcf4 <_printf_common+0xac>
 800fcec:	f04f 30ff 	mov.w	r0, #4294967295
 800fcf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcf4:	3501      	adds	r5, #1
 800fcf6:	e7c6      	b.n	800fc86 <_printf_common+0x3e>
 800fcf8:	18e1      	adds	r1, r4, r3
 800fcfa:	1c5a      	adds	r2, r3, #1
 800fcfc:	2030      	movs	r0, #48	@ 0x30
 800fcfe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fd02:	4422      	add	r2, r4
 800fd04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fd08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fd0c:	3302      	adds	r3, #2
 800fd0e:	e7c7      	b.n	800fca0 <_printf_common+0x58>
 800fd10:	2301      	movs	r3, #1
 800fd12:	4622      	mov	r2, r4
 800fd14:	4641      	mov	r1, r8
 800fd16:	4638      	mov	r0, r7
 800fd18:	47c8      	blx	r9
 800fd1a:	3001      	adds	r0, #1
 800fd1c:	d0e6      	beq.n	800fcec <_printf_common+0xa4>
 800fd1e:	3601      	adds	r6, #1
 800fd20:	e7d9      	b.n	800fcd6 <_printf_common+0x8e>
	...

0800fd24 <_printf_i>:
 800fd24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fd28:	7e0f      	ldrb	r7, [r1, #24]
 800fd2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fd2c:	2f78      	cmp	r7, #120	@ 0x78
 800fd2e:	4691      	mov	r9, r2
 800fd30:	4680      	mov	r8, r0
 800fd32:	460c      	mov	r4, r1
 800fd34:	469a      	mov	sl, r3
 800fd36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fd3a:	d807      	bhi.n	800fd4c <_printf_i+0x28>
 800fd3c:	2f62      	cmp	r7, #98	@ 0x62
 800fd3e:	d80a      	bhi.n	800fd56 <_printf_i+0x32>
 800fd40:	2f00      	cmp	r7, #0
 800fd42:	f000 80d1 	beq.w	800fee8 <_printf_i+0x1c4>
 800fd46:	2f58      	cmp	r7, #88	@ 0x58
 800fd48:	f000 80b8 	beq.w	800febc <_printf_i+0x198>
 800fd4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fd50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fd54:	e03a      	b.n	800fdcc <_printf_i+0xa8>
 800fd56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fd5a:	2b15      	cmp	r3, #21
 800fd5c:	d8f6      	bhi.n	800fd4c <_printf_i+0x28>
 800fd5e:	a101      	add	r1, pc, #4	@ (adr r1, 800fd64 <_printf_i+0x40>)
 800fd60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fd64:	0800fdbd 	.word	0x0800fdbd
 800fd68:	0800fdd1 	.word	0x0800fdd1
 800fd6c:	0800fd4d 	.word	0x0800fd4d
 800fd70:	0800fd4d 	.word	0x0800fd4d
 800fd74:	0800fd4d 	.word	0x0800fd4d
 800fd78:	0800fd4d 	.word	0x0800fd4d
 800fd7c:	0800fdd1 	.word	0x0800fdd1
 800fd80:	0800fd4d 	.word	0x0800fd4d
 800fd84:	0800fd4d 	.word	0x0800fd4d
 800fd88:	0800fd4d 	.word	0x0800fd4d
 800fd8c:	0800fd4d 	.word	0x0800fd4d
 800fd90:	0800fecf 	.word	0x0800fecf
 800fd94:	0800fdfb 	.word	0x0800fdfb
 800fd98:	0800fe89 	.word	0x0800fe89
 800fd9c:	0800fd4d 	.word	0x0800fd4d
 800fda0:	0800fd4d 	.word	0x0800fd4d
 800fda4:	0800fef1 	.word	0x0800fef1
 800fda8:	0800fd4d 	.word	0x0800fd4d
 800fdac:	0800fdfb 	.word	0x0800fdfb
 800fdb0:	0800fd4d 	.word	0x0800fd4d
 800fdb4:	0800fd4d 	.word	0x0800fd4d
 800fdb8:	0800fe91 	.word	0x0800fe91
 800fdbc:	6833      	ldr	r3, [r6, #0]
 800fdbe:	1d1a      	adds	r2, r3, #4
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	6032      	str	r2, [r6, #0]
 800fdc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fdc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fdcc:	2301      	movs	r3, #1
 800fdce:	e09c      	b.n	800ff0a <_printf_i+0x1e6>
 800fdd0:	6833      	ldr	r3, [r6, #0]
 800fdd2:	6820      	ldr	r0, [r4, #0]
 800fdd4:	1d19      	adds	r1, r3, #4
 800fdd6:	6031      	str	r1, [r6, #0]
 800fdd8:	0606      	lsls	r6, r0, #24
 800fdda:	d501      	bpl.n	800fde0 <_printf_i+0xbc>
 800fddc:	681d      	ldr	r5, [r3, #0]
 800fdde:	e003      	b.n	800fde8 <_printf_i+0xc4>
 800fde0:	0645      	lsls	r5, r0, #25
 800fde2:	d5fb      	bpl.n	800fddc <_printf_i+0xb8>
 800fde4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fde8:	2d00      	cmp	r5, #0
 800fdea:	da03      	bge.n	800fdf4 <_printf_i+0xd0>
 800fdec:	232d      	movs	r3, #45	@ 0x2d
 800fdee:	426d      	negs	r5, r5
 800fdf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fdf4:	4858      	ldr	r0, [pc, #352]	@ (800ff58 <_printf_i+0x234>)
 800fdf6:	230a      	movs	r3, #10
 800fdf8:	e011      	b.n	800fe1e <_printf_i+0xfa>
 800fdfa:	6821      	ldr	r1, [r4, #0]
 800fdfc:	6833      	ldr	r3, [r6, #0]
 800fdfe:	0608      	lsls	r0, r1, #24
 800fe00:	f853 5b04 	ldr.w	r5, [r3], #4
 800fe04:	d402      	bmi.n	800fe0c <_printf_i+0xe8>
 800fe06:	0649      	lsls	r1, r1, #25
 800fe08:	bf48      	it	mi
 800fe0a:	b2ad      	uxthmi	r5, r5
 800fe0c:	2f6f      	cmp	r7, #111	@ 0x6f
 800fe0e:	4852      	ldr	r0, [pc, #328]	@ (800ff58 <_printf_i+0x234>)
 800fe10:	6033      	str	r3, [r6, #0]
 800fe12:	bf14      	ite	ne
 800fe14:	230a      	movne	r3, #10
 800fe16:	2308      	moveq	r3, #8
 800fe18:	2100      	movs	r1, #0
 800fe1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fe1e:	6866      	ldr	r6, [r4, #4]
 800fe20:	60a6      	str	r6, [r4, #8]
 800fe22:	2e00      	cmp	r6, #0
 800fe24:	db05      	blt.n	800fe32 <_printf_i+0x10e>
 800fe26:	6821      	ldr	r1, [r4, #0]
 800fe28:	432e      	orrs	r6, r5
 800fe2a:	f021 0104 	bic.w	r1, r1, #4
 800fe2e:	6021      	str	r1, [r4, #0]
 800fe30:	d04b      	beq.n	800feca <_printf_i+0x1a6>
 800fe32:	4616      	mov	r6, r2
 800fe34:	fbb5 f1f3 	udiv	r1, r5, r3
 800fe38:	fb03 5711 	mls	r7, r3, r1, r5
 800fe3c:	5dc7      	ldrb	r7, [r0, r7]
 800fe3e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fe42:	462f      	mov	r7, r5
 800fe44:	42bb      	cmp	r3, r7
 800fe46:	460d      	mov	r5, r1
 800fe48:	d9f4      	bls.n	800fe34 <_printf_i+0x110>
 800fe4a:	2b08      	cmp	r3, #8
 800fe4c:	d10b      	bne.n	800fe66 <_printf_i+0x142>
 800fe4e:	6823      	ldr	r3, [r4, #0]
 800fe50:	07df      	lsls	r7, r3, #31
 800fe52:	d508      	bpl.n	800fe66 <_printf_i+0x142>
 800fe54:	6923      	ldr	r3, [r4, #16]
 800fe56:	6861      	ldr	r1, [r4, #4]
 800fe58:	4299      	cmp	r1, r3
 800fe5a:	bfde      	ittt	le
 800fe5c:	2330      	movle	r3, #48	@ 0x30
 800fe5e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fe62:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fe66:	1b92      	subs	r2, r2, r6
 800fe68:	6122      	str	r2, [r4, #16]
 800fe6a:	f8cd a000 	str.w	sl, [sp]
 800fe6e:	464b      	mov	r3, r9
 800fe70:	aa03      	add	r2, sp, #12
 800fe72:	4621      	mov	r1, r4
 800fe74:	4640      	mov	r0, r8
 800fe76:	f7ff fee7 	bl	800fc48 <_printf_common>
 800fe7a:	3001      	adds	r0, #1
 800fe7c:	d14a      	bne.n	800ff14 <_printf_i+0x1f0>
 800fe7e:	f04f 30ff 	mov.w	r0, #4294967295
 800fe82:	b004      	add	sp, #16
 800fe84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe88:	6823      	ldr	r3, [r4, #0]
 800fe8a:	f043 0320 	orr.w	r3, r3, #32
 800fe8e:	6023      	str	r3, [r4, #0]
 800fe90:	4832      	ldr	r0, [pc, #200]	@ (800ff5c <_printf_i+0x238>)
 800fe92:	2778      	movs	r7, #120	@ 0x78
 800fe94:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fe98:	6823      	ldr	r3, [r4, #0]
 800fe9a:	6831      	ldr	r1, [r6, #0]
 800fe9c:	061f      	lsls	r7, r3, #24
 800fe9e:	f851 5b04 	ldr.w	r5, [r1], #4
 800fea2:	d402      	bmi.n	800feaa <_printf_i+0x186>
 800fea4:	065f      	lsls	r7, r3, #25
 800fea6:	bf48      	it	mi
 800fea8:	b2ad      	uxthmi	r5, r5
 800feaa:	6031      	str	r1, [r6, #0]
 800feac:	07d9      	lsls	r1, r3, #31
 800feae:	bf44      	itt	mi
 800feb0:	f043 0320 	orrmi.w	r3, r3, #32
 800feb4:	6023      	strmi	r3, [r4, #0]
 800feb6:	b11d      	cbz	r5, 800fec0 <_printf_i+0x19c>
 800feb8:	2310      	movs	r3, #16
 800feba:	e7ad      	b.n	800fe18 <_printf_i+0xf4>
 800febc:	4826      	ldr	r0, [pc, #152]	@ (800ff58 <_printf_i+0x234>)
 800febe:	e7e9      	b.n	800fe94 <_printf_i+0x170>
 800fec0:	6823      	ldr	r3, [r4, #0]
 800fec2:	f023 0320 	bic.w	r3, r3, #32
 800fec6:	6023      	str	r3, [r4, #0]
 800fec8:	e7f6      	b.n	800feb8 <_printf_i+0x194>
 800feca:	4616      	mov	r6, r2
 800fecc:	e7bd      	b.n	800fe4a <_printf_i+0x126>
 800fece:	6833      	ldr	r3, [r6, #0]
 800fed0:	6825      	ldr	r5, [r4, #0]
 800fed2:	6961      	ldr	r1, [r4, #20]
 800fed4:	1d18      	adds	r0, r3, #4
 800fed6:	6030      	str	r0, [r6, #0]
 800fed8:	062e      	lsls	r6, r5, #24
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	d501      	bpl.n	800fee2 <_printf_i+0x1be>
 800fede:	6019      	str	r1, [r3, #0]
 800fee0:	e002      	b.n	800fee8 <_printf_i+0x1c4>
 800fee2:	0668      	lsls	r0, r5, #25
 800fee4:	d5fb      	bpl.n	800fede <_printf_i+0x1ba>
 800fee6:	8019      	strh	r1, [r3, #0]
 800fee8:	2300      	movs	r3, #0
 800feea:	6123      	str	r3, [r4, #16]
 800feec:	4616      	mov	r6, r2
 800feee:	e7bc      	b.n	800fe6a <_printf_i+0x146>
 800fef0:	6833      	ldr	r3, [r6, #0]
 800fef2:	1d1a      	adds	r2, r3, #4
 800fef4:	6032      	str	r2, [r6, #0]
 800fef6:	681e      	ldr	r6, [r3, #0]
 800fef8:	6862      	ldr	r2, [r4, #4]
 800fefa:	2100      	movs	r1, #0
 800fefc:	4630      	mov	r0, r6
 800fefe:	f7f0 f9f7 	bl	80002f0 <memchr>
 800ff02:	b108      	cbz	r0, 800ff08 <_printf_i+0x1e4>
 800ff04:	1b80      	subs	r0, r0, r6
 800ff06:	6060      	str	r0, [r4, #4]
 800ff08:	6863      	ldr	r3, [r4, #4]
 800ff0a:	6123      	str	r3, [r4, #16]
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ff12:	e7aa      	b.n	800fe6a <_printf_i+0x146>
 800ff14:	6923      	ldr	r3, [r4, #16]
 800ff16:	4632      	mov	r2, r6
 800ff18:	4649      	mov	r1, r9
 800ff1a:	4640      	mov	r0, r8
 800ff1c:	47d0      	blx	sl
 800ff1e:	3001      	adds	r0, #1
 800ff20:	d0ad      	beq.n	800fe7e <_printf_i+0x15a>
 800ff22:	6823      	ldr	r3, [r4, #0]
 800ff24:	079b      	lsls	r3, r3, #30
 800ff26:	d413      	bmi.n	800ff50 <_printf_i+0x22c>
 800ff28:	68e0      	ldr	r0, [r4, #12]
 800ff2a:	9b03      	ldr	r3, [sp, #12]
 800ff2c:	4298      	cmp	r0, r3
 800ff2e:	bfb8      	it	lt
 800ff30:	4618      	movlt	r0, r3
 800ff32:	e7a6      	b.n	800fe82 <_printf_i+0x15e>
 800ff34:	2301      	movs	r3, #1
 800ff36:	4632      	mov	r2, r6
 800ff38:	4649      	mov	r1, r9
 800ff3a:	4640      	mov	r0, r8
 800ff3c:	47d0      	blx	sl
 800ff3e:	3001      	adds	r0, #1
 800ff40:	d09d      	beq.n	800fe7e <_printf_i+0x15a>
 800ff42:	3501      	adds	r5, #1
 800ff44:	68e3      	ldr	r3, [r4, #12]
 800ff46:	9903      	ldr	r1, [sp, #12]
 800ff48:	1a5b      	subs	r3, r3, r1
 800ff4a:	42ab      	cmp	r3, r5
 800ff4c:	dcf2      	bgt.n	800ff34 <_printf_i+0x210>
 800ff4e:	e7eb      	b.n	800ff28 <_printf_i+0x204>
 800ff50:	2500      	movs	r5, #0
 800ff52:	f104 0619 	add.w	r6, r4, #25
 800ff56:	e7f5      	b.n	800ff44 <_printf_i+0x220>
 800ff58:	08010281 	.word	0x08010281
 800ff5c:	08010292 	.word	0x08010292

0800ff60 <__sflush_r>:
 800ff60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ff64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff68:	0716      	lsls	r6, r2, #28
 800ff6a:	4605      	mov	r5, r0
 800ff6c:	460c      	mov	r4, r1
 800ff6e:	d454      	bmi.n	801001a <__sflush_r+0xba>
 800ff70:	684b      	ldr	r3, [r1, #4]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	dc02      	bgt.n	800ff7c <__sflush_r+0x1c>
 800ff76:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	dd48      	ble.n	801000e <__sflush_r+0xae>
 800ff7c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ff7e:	2e00      	cmp	r6, #0
 800ff80:	d045      	beq.n	801000e <__sflush_r+0xae>
 800ff82:	2300      	movs	r3, #0
 800ff84:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ff88:	682f      	ldr	r7, [r5, #0]
 800ff8a:	6a21      	ldr	r1, [r4, #32]
 800ff8c:	602b      	str	r3, [r5, #0]
 800ff8e:	d030      	beq.n	800fff2 <__sflush_r+0x92>
 800ff90:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ff92:	89a3      	ldrh	r3, [r4, #12]
 800ff94:	0759      	lsls	r1, r3, #29
 800ff96:	d505      	bpl.n	800ffa4 <__sflush_r+0x44>
 800ff98:	6863      	ldr	r3, [r4, #4]
 800ff9a:	1ad2      	subs	r2, r2, r3
 800ff9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ff9e:	b10b      	cbz	r3, 800ffa4 <__sflush_r+0x44>
 800ffa0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ffa2:	1ad2      	subs	r2, r2, r3
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ffa8:	6a21      	ldr	r1, [r4, #32]
 800ffaa:	4628      	mov	r0, r5
 800ffac:	47b0      	blx	r6
 800ffae:	1c43      	adds	r3, r0, #1
 800ffb0:	89a3      	ldrh	r3, [r4, #12]
 800ffb2:	d106      	bne.n	800ffc2 <__sflush_r+0x62>
 800ffb4:	6829      	ldr	r1, [r5, #0]
 800ffb6:	291d      	cmp	r1, #29
 800ffb8:	d82b      	bhi.n	8010012 <__sflush_r+0xb2>
 800ffba:	4a2a      	ldr	r2, [pc, #168]	@ (8010064 <__sflush_r+0x104>)
 800ffbc:	40ca      	lsrs	r2, r1
 800ffbe:	07d6      	lsls	r6, r2, #31
 800ffc0:	d527      	bpl.n	8010012 <__sflush_r+0xb2>
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	6062      	str	r2, [r4, #4]
 800ffc6:	04d9      	lsls	r1, r3, #19
 800ffc8:	6922      	ldr	r2, [r4, #16]
 800ffca:	6022      	str	r2, [r4, #0]
 800ffcc:	d504      	bpl.n	800ffd8 <__sflush_r+0x78>
 800ffce:	1c42      	adds	r2, r0, #1
 800ffd0:	d101      	bne.n	800ffd6 <__sflush_r+0x76>
 800ffd2:	682b      	ldr	r3, [r5, #0]
 800ffd4:	b903      	cbnz	r3, 800ffd8 <__sflush_r+0x78>
 800ffd6:	6560      	str	r0, [r4, #84]	@ 0x54
 800ffd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ffda:	602f      	str	r7, [r5, #0]
 800ffdc:	b1b9      	cbz	r1, 801000e <__sflush_r+0xae>
 800ffde:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ffe2:	4299      	cmp	r1, r3
 800ffe4:	d002      	beq.n	800ffec <__sflush_r+0x8c>
 800ffe6:	4628      	mov	r0, r5
 800ffe8:	f7ff fbf4 	bl	800f7d4 <_free_r>
 800ffec:	2300      	movs	r3, #0
 800ffee:	6363      	str	r3, [r4, #52]	@ 0x34
 800fff0:	e00d      	b.n	801000e <__sflush_r+0xae>
 800fff2:	2301      	movs	r3, #1
 800fff4:	4628      	mov	r0, r5
 800fff6:	47b0      	blx	r6
 800fff8:	4602      	mov	r2, r0
 800fffa:	1c50      	adds	r0, r2, #1
 800fffc:	d1c9      	bne.n	800ff92 <__sflush_r+0x32>
 800fffe:	682b      	ldr	r3, [r5, #0]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d0c6      	beq.n	800ff92 <__sflush_r+0x32>
 8010004:	2b1d      	cmp	r3, #29
 8010006:	d001      	beq.n	801000c <__sflush_r+0xac>
 8010008:	2b16      	cmp	r3, #22
 801000a:	d11e      	bne.n	801004a <__sflush_r+0xea>
 801000c:	602f      	str	r7, [r5, #0]
 801000e:	2000      	movs	r0, #0
 8010010:	e022      	b.n	8010058 <__sflush_r+0xf8>
 8010012:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010016:	b21b      	sxth	r3, r3
 8010018:	e01b      	b.n	8010052 <__sflush_r+0xf2>
 801001a:	690f      	ldr	r7, [r1, #16]
 801001c:	2f00      	cmp	r7, #0
 801001e:	d0f6      	beq.n	801000e <__sflush_r+0xae>
 8010020:	0793      	lsls	r3, r2, #30
 8010022:	680e      	ldr	r6, [r1, #0]
 8010024:	bf08      	it	eq
 8010026:	694b      	ldreq	r3, [r1, #20]
 8010028:	600f      	str	r7, [r1, #0]
 801002a:	bf18      	it	ne
 801002c:	2300      	movne	r3, #0
 801002e:	eba6 0807 	sub.w	r8, r6, r7
 8010032:	608b      	str	r3, [r1, #8]
 8010034:	f1b8 0f00 	cmp.w	r8, #0
 8010038:	dde9      	ble.n	801000e <__sflush_r+0xae>
 801003a:	6a21      	ldr	r1, [r4, #32]
 801003c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801003e:	4643      	mov	r3, r8
 8010040:	463a      	mov	r2, r7
 8010042:	4628      	mov	r0, r5
 8010044:	47b0      	blx	r6
 8010046:	2800      	cmp	r0, #0
 8010048:	dc08      	bgt.n	801005c <__sflush_r+0xfc>
 801004a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801004e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010052:	81a3      	strh	r3, [r4, #12]
 8010054:	f04f 30ff 	mov.w	r0, #4294967295
 8010058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801005c:	4407      	add	r7, r0
 801005e:	eba8 0800 	sub.w	r8, r8, r0
 8010062:	e7e7      	b.n	8010034 <__sflush_r+0xd4>
 8010064:	20400001 	.word	0x20400001

08010068 <_fflush_r>:
 8010068:	b538      	push	{r3, r4, r5, lr}
 801006a:	690b      	ldr	r3, [r1, #16]
 801006c:	4605      	mov	r5, r0
 801006e:	460c      	mov	r4, r1
 8010070:	b913      	cbnz	r3, 8010078 <_fflush_r+0x10>
 8010072:	2500      	movs	r5, #0
 8010074:	4628      	mov	r0, r5
 8010076:	bd38      	pop	{r3, r4, r5, pc}
 8010078:	b118      	cbz	r0, 8010082 <_fflush_r+0x1a>
 801007a:	6a03      	ldr	r3, [r0, #32]
 801007c:	b90b      	cbnz	r3, 8010082 <_fflush_r+0x1a>
 801007e:	f7ff f9ff 	bl	800f480 <__sinit>
 8010082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d0f3      	beq.n	8010072 <_fflush_r+0xa>
 801008a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801008c:	07d0      	lsls	r0, r2, #31
 801008e:	d404      	bmi.n	801009a <_fflush_r+0x32>
 8010090:	0599      	lsls	r1, r3, #22
 8010092:	d402      	bmi.n	801009a <_fflush_r+0x32>
 8010094:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010096:	f7ff fb8c 	bl	800f7b2 <__retarget_lock_acquire_recursive>
 801009a:	4628      	mov	r0, r5
 801009c:	4621      	mov	r1, r4
 801009e:	f7ff ff5f 	bl	800ff60 <__sflush_r>
 80100a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80100a4:	07da      	lsls	r2, r3, #31
 80100a6:	4605      	mov	r5, r0
 80100a8:	d4e4      	bmi.n	8010074 <_fflush_r+0xc>
 80100aa:	89a3      	ldrh	r3, [r4, #12]
 80100ac:	059b      	lsls	r3, r3, #22
 80100ae:	d4e1      	bmi.n	8010074 <_fflush_r+0xc>
 80100b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80100b2:	f7ff fb7f 	bl	800f7b4 <__retarget_lock_release_recursive>
 80100b6:	e7dd      	b.n	8010074 <_fflush_r+0xc>

080100b8 <__swhatbuf_r>:
 80100b8:	b570      	push	{r4, r5, r6, lr}
 80100ba:	460c      	mov	r4, r1
 80100bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100c0:	2900      	cmp	r1, #0
 80100c2:	b096      	sub	sp, #88	@ 0x58
 80100c4:	4615      	mov	r5, r2
 80100c6:	461e      	mov	r6, r3
 80100c8:	da0d      	bge.n	80100e6 <__swhatbuf_r+0x2e>
 80100ca:	89a3      	ldrh	r3, [r4, #12]
 80100cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80100d0:	f04f 0100 	mov.w	r1, #0
 80100d4:	bf14      	ite	ne
 80100d6:	2340      	movne	r3, #64	@ 0x40
 80100d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80100dc:	2000      	movs	r0, #0
 80100de:	6031      	str	r1, [r6, #0]
 80100e0:	602b      	str	r3, [r5, #0]
 80100e2:	b016      	add	sp, #88	@ 0x58
 80100e4:	bd70      	pop	{r4, r5, r6, pc}
 80100e6:	466a      	mov	r2, sp
 80100e8:	f000 f848 	bl	801017c <_fstat_r>
 80100ec:	2800      	cmp	r0, #0
 80100ee:	dbec      	blt.n	80100ca <__swhatbuf_r+0x12>
 80100f0:	9901      	ldr	r1, [sp, #4]
 80100f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80100f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80100fa:	4259      	negs	r1, r3
 80100fc:	4159      	adcs	r1, r3
 80100fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010102:	e7eb      	b.n	80100dc <__swhatbuf_r+0x24>

08010104 <__smakebuf_r>:
 8010104:	898b      	ldrh	r3, [r1, #12]
 8010106:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010108:	079d      	lsls	r5, r3, #30
 801010a:	4606      	mov	r6, r0
 801010c:	460c      	mov	r4, r1
 801010e:	d507      	bpl.n	8010120 <__smakebuf_r+0x1c>
 8010110:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010114:	6023      	str	r3, [r4, #0]
 8010116:	6123      	str	r3, [r4, #16]
 8010118:	2301      	movs	r3, #1
 801011a:	6163      	str	r3, [r4, #20]
 801011c:	b003      	add	sp, #12
 801011e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010120:	ab01      	add	r3, sp, #4
 8010122:	466a      	mov	r2, sp
 8010124:	f7ff ffc8 	bl	80100b8 <__swhatbuf_r>
 8010128:	9f00      	ldr	r7, [sp, #0]
 801012a:	4605      	mov	r5, r0
 801012c:	4639      	mov	r1, r7
 801012e:	4630      	mov	r0, r6
 8010130:	f7ff fbbc 	bl	800f8ac <_malloc_r>
 8010134:	b948      	cbnz	r0, 801014a <__smakebuf_r+0x46>
 8010136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801013a:	059a      	lsls	r2, r3, #22
 801013c:	d4ee      	bmi.n	801011c <__smakebuf_r+0x18>
 801013e:	f023 0303 	bic.w	r3, r3, #3
 8010142:	f043 0302 	orr.w	r3, r3, #2
 8010146:	81a3      	strh	r3, [r4, #12]
 8010148:	e7e2      	b.n	8010110 <__smakebuf_r+0xc>
 801014a:	89a3      	ldrh	r3, [r4, #12]
 801014c:	6020      	str	r0, [r4, #0]
 801014e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010152:	81a3      	strh	r3, [r4, #12]
 8010154:	9b01      	ldr	r3, [sp, #4]
 8010156:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801015a:	b15b      	cbz	r3, 8010174 <__smakebuf_r+0x70>
 801015c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010160:	4630      	mov	r0, r6
 8010162:	f000 f81d 	bl	80101a0 <_isatty_r>
 8010166:	b128      	cbz	r0, 8010174 <__smakebuf_r+0x70>
 8010168:	89a3      	ldrh	r3, [r4, #12]
 801016a:	f023 0303 	bic.w	r3, r3, #3
 801016e:	f043 0301 	orr.w	r3, r3, #1
 8010172:	81a3      	strh	r3, [r4, #12]
 8010174:	89a3      	ldrh	r3, [r4, #12]
 8010176:	431d      	orrs	r5, r3
 8010178:	81a5      	strh	r5, [r4, #12]
 801017a:	e7cf      	b.n	801011c <__smakebuf_r+0x18>

0801017c <_fstat_r>:
 801017c:	b538      	push	{r3, r4, r5, lr}
 801017e:	4d07      	ldr	r5, [pc, #28]	@ (801019c <_fstat_r+0x20>)
 8010180:	2300      	movs	r3, #0
 8010182:	4604      	mov	r4, r0
 8010184:	4608      	mov	r0, r1
 8010186:	4611      	mov	r1, r2
 8010188:	602b      	str	r3, [r5, #0]
 801018a:	f7f1 fc12 	bl	80019b2 <_fstat>
 801018e:	1c43      	adds	r3, r0, #1
 8010190:	d102      	bne.n	8010198 <_fstat_r+0x1c>
 8010192:	682b      	ldr	r3, [r5, #0]
 8010194:	b103      	cbz	r3, 8010198 <_fstat_r+0x1c>
 8010196:	6023      	str	r3, [r4, #0]
 8010198:	bd38      	pop	{r3, r4, r5, pc}
 801019a:	bf00      	nop
 801019c:	24000690 	.word	0x24000690

080101a0 <_isatty_r>:
 80101a0:	b538      	push	{r3, r4, r5, lr}
 80101a2:	4d06      	ldr	r5, [pc, #24]	@ (80101bc <_isatty_r+0x1c>)
 80101a4:	2300      	movs	r3, #0
 80101a6:	4604      	mov	r4, r0
 80101a8:	4608      	mov	r0, r1
 80101aa:	602b      	str	r3, [r5, #0]
 80101ac:	f7f1 fc11 	bl	80019d2 <_isatty>
 80101b0:	1c43      	adds	r3, r0, #1
 80101b2:	d102      	bne.n	80101ba <_isatty_r+0x1a>
 80101b4:	682b      	ldr	r3, [r5, #0]
 80101b6:	b103      	cbz	r3, 80101ba <_isatty_r+0x1a>
 80101b8:	6023      	str	r3, [r4, #0]
 80101ba:	bd38      	pop	{r3, r4, r5, pc}
 80101bc:	24000690 	.word	0x24000690

080101c0 <_sbrk_r>:
 80101c0:	b538      	push	{r3, r4, r5, lr}
 80101c2:	4d06      	ldr	r5, [pc, #24]	@ (80101dc <_sbrk_r+0x1c>)
 80101c4:	2300      	movs	r3, #0
 80101c6:	4604      	mov	r4, r0
 80101c8:	4608      	mov	r0, r1
 80101ca:	602b      	str	r3, [r5, #0]
 80101cc:	f7f1 fc1a 	bl	8001a04 <_sbrk>
 80101d0:	1c43      	adds	r3, r0, #1
 80101d2:	d102      	bne.n	80101da <_sbrk_r+0x1a>
 80101d4:	682b      	ldr	r3, [r5, #0]
 80101d6:	b103      	cbz	r3, 80101da <_sbrk_r+0x1a>
 80101d8:	6023      	str	r3, [r4, #0]
 80101da:	bd38      	pop	{r3, r4, r5, pc}
 80101dc:	24000690 	.word	0x24000690

080101e0 <_init>:
 80101e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101e2:	bf00      	nop
 80101e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80101e6:	bc08      	pop	{r3}
 80101e8:	469e      	mov	lr, r3
 80101ea:	4770      	bx	lr

080101ec <_fini>:
 80101ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101ee:	bf00      	nop
 80101f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80101f2:	bc08      	pop	{r3}
 80101f4:	469e      	mov	lr, r3
 80101f6:	4770      	bx	lr


CART1_DM_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012494  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  08012738  08012738  00013738  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012b98  08012b98  000141f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012b98  08012b98  00013b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012ba0  08012ba0  000141f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012ba0  08012ba0  00013ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012ba4  08012ba4  00013ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  24000000  08012ba8  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000060c  240001f8  08012d9c  000141f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000804  08012d9c  00014804  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000141f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000227f8  00000000  00000000  00014222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004106  00000000  00000000  00036a1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a38  00000000  00000000  0003ab20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001467  00000000  00000000  0003c558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00040372  00000000  00000000  0003d9bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000240d4  00000000  00000000  0007dd31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a4490  00000000  00000000  000a1e05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00246295  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008130  00000000  00000000  002462d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0024e408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f8 	.word	0x240001f8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801271c 	.word	0x0801271c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001fc 	.word	0x240001fc
 80002dc:	0801271c 	.word	0x0801271c

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b988 	b.w	80006d8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	468e      	mov	lr, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	4688      	mov	r8, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d962      	bls.n	80004bc <__udivmoddi4+0xdc>
 80003f6:	fab2 f682 	clz	r6, r2
 80003fa:	b14e      	cbz	r6, 8000410 <__udivmoddi4+0x30>
 80003fc:	f1c6 0320 	rsb	r3, r6, #32
 8000400:	fa01 f806 	lsl.w	r8, r1, r6
 8000404:	fa20 f303 	lsr.w	r3, r0, r3
 8000408:	40b7      	lsls	r7, r6
 800040a:	ea43 0808 	orr.w	r8, r3, r8
 800040e:	40b4      	lsls	r4, r6
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	fa1f fc87 	uxth.w	ip, r7
 8000418:	fbb8 f1fe 	udiv	r1, r8, lr
 800041c:	0c23      	lsrs	r3, r4, #16
 800041e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fb01 f20c 	mul.w	r2, r1, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d909      	bls.n	8000442 <__udivmoddi4+0x62>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f101 30ff 	add.w	r0, r1, #4294967295
 8000434:	f080 80ea 	bcs.w	800060c <__udivmoddi4+0x22c>
 8000438:	429a      	cmp	r2, r3
 800043a:	f240 80e7 	bls.w	800060c <__udivmoddi4+0x22c>
 800043e:	3902      	subs	r1, #2
 8000440:	443b      	add	r3, r7
 8000442:	1a9a      	subs	r2, r3, r2
 8000444:	b2a3      	uxth	r3, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000452:	fb00 fc0c 	mul.w	ip, r0, ip
 8000456:	459c      	cmp	ip, r3
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x8e>
 800045a:	18fb      	adds	r3, r7, r3
 800045c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000460:	f080 80d6 	bcs.w	8000610 <__udivmoddi4+0x230>
 8000464:	459c      	cmp	ip, r3
 8000466:	f240 80d3 	bls.w	8000610 <__udivmoddi4+0x230>
 800046a:	443b      	add	r3, r7
 800046c:	3802      	subs	r0, #2
 800046e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000472:	eba3 030c 	sub.w	r3, r3, ip
 8000476:	2100      	movs	r1, #0
 8000478:	b11d      	cbz	r5, 8000482 <__udivmoddi4+0xa2>
 800047a:	40f3      	lsrs	r3, r6
 800047c:	2200      	movs	r2, #0
 800047e:	e9c5 3200 	strd	r3, r2, [r5]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d905      	bls.n	8000496 <__udivmoddi4+0xb6>
 800048a:	b10d      	cbz	r5, 8000490 <__udivmoddi4+0xb0>
 800048c:	e9c5 0100 	strd	r0, r1, [r5]
 8000490:	2100      	movs	r1, #0
 8000492:	4608      	mov	r0, r1
 8000494:	e7f5      	b.n	8000482 <__udivmoddi4+0xa2>
 8000496:	fab3 f183 	clz	r1, r3
 800049a:	2900      	cmp	r1, #0
 800049c:	d146      	bne.n	800052c <__udivmoddi4+0x14c>
 800049e:	4573      	cmp	r3, lr
 80004a0:	d302      	bcc.n	80004a8 <__udivmoddi4+0xc8>
 80004a2:	4282      	cmp	r2, r0
 80004a4:	f200 8105 	bhi.w	80006b2 <__udivmoddi4+0x2d2>
 80004a8:	1a84      	subs	r4, r0, r2
 80004aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80004ae:	2001      	movs	r0, #1
 80004b0:	4690      	mov	r8, r2
 80004b2:	2d00      	cmp	r5, #0
 80004b4:	d0e5      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004b6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ba:	e7e2      	b.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	2a00      	cmp	r2, #0
 80004be:	f000 8090 	beq.w	80005e2 <__udivmoddi4+0x202>
 80004c2:	fab2 f682 	clz	r6, r2
 80004c6:	2e00      	cmp	r6, #0
 80004c8:	f040 80a4 	bne.w	8000614 <__udivmoddi4+0x234>
 80004cc:	1a8a      	subs	r2, r1, r2
 80004ce:	0c03      	lsrs	r3, r0, #16
 80004d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004d4:	b280      	uxth	r0, r0
 80004d6:	b2bc      	uxth	r4, r7
 80004d8:	2101      	movs	r1, #1
 80004da:	fbb2 fcfe 	udiv	ip, r2, lr
 80004de:	fb0e 221c 	mls	r2, lr, ip, r2
 80004e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004e6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ea:	429a      	cmp	r2, r3
 80004ec:	d907      	bls.n	80004fe <__udivmoddi4+0x11e>
 80004ee:	18fb      	adds	r3, r7, r3
 80004f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x11c>
 80004f6:	429a      	cmp	r2, r3
 80004f8:	f200 80e0 	bhi.w	80006bc <__udivmoddi4+0x2dc>
 80004fc:	46c4      	mov	ip, r8
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	fbb3 f2fe 	udiv	r2, r3, lr
 8000504:	fb0e 3312 	mls	r3, lr, r2, r3
 8000508:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800050c:	fb02 f404 	mul.w	r4, r2, r4
 8000510:	429c      	cmp	r4, r3
 8000512:	d907      	bls.n	8000524 <__udivmoddi4+0x144>
 8000514:	18fb      	adds	r3, r7, r3
 8000516:	f102 30ff 	add.w	r0, r2, #4294967295
 800051a:	d202      	bcs.n	8000522 <__udivmoddi4+0x142>
 800051c:	429c      	cmp	r4, r3
 800051e:	f200 80ca 	bhi.w	80006b6 <__udivmoddi4+0x2d6>
 8000522:	4602      	mov	r2, r0
 8000524:	1b1b      	subs	r3, r3, r4
 8000526:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800052a:	e7a5      	b.n	8000478 <__udivmoddi4+0x98>
 800052c:	f1c1 0620 	rsb	r6, r1, #32
 8000530:	408b      	lsls	r3, r1
 8000532:	fa22 f706 	lsr.w	r7, r2, r6
 8000536:	431f      	orrs	r7, r3
 8000538:	fa0e f401 	lsl.w	r4, lr, r1
 800053c:	fa20 f306 	lsr.w	r3, r0, r6
 8000540:	fa2e fe06 	lsr.w	lr, lr, r6
 8000544:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000548:	4323      	orrs	r3, r4
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	fa1f fc87 	uxth.w	ip, r7
 8000552:	fbbe f0f9 	udiv	r0, lr, r9
 8000556:	0c1c      	lsrs	r4, r3, #16
 8000558:	fb09 ee10 	mls	lr, r9, r0, lr
 800055c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000560:	fb00 fe0c 	mul.w	lr, r0, ip
 8000564:	45a6      	cmp	lr, r4
 8000566:	fa02 f201 	lsl.w	r2, r2, r1
 800056a:	d909      	bls.n	8000580 <__udivmoddi4+0x1a0>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000572:	f080 809c 	bcs.w	80006ae <__udivmoddi4+0x2ce>
 8000576:	45a6      	cmp	lr, r4
 8000578:	f240 8099 	bls.w	80006ae <__udivmoddi4+0x2ce>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	eba4 040e 	sub.w	r4, r4, lr
 8000584:	fa1f fe83 	uxth.w	lr, r3
 8000588:	fbb4 f3f9 	udiv	r3, r4, r9
 800058c:	fb09 4413 	mls	r4, r9, r3, r4
 8000590:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000594:	fb03 fc0c 	mul.w	ip, r3, ip
 8000598:	45a4      	cmp	ip, r4
 800059a:	d908      	bls.n	80005ae <__udivmoddi4+0x1ce>
 800059c:	193c      	adds	r4, r7, r4
 800059e:	f103 3eff 	add.w	lr, r3, #4294967295
 80005a2:	f080 8082 	bcs.w	80006aa <__udivmoddi4+0x2ca>
 80005a6:	45a4      	cmp	ip, r4
 80005a8:	d97f      	bls.n	80006aa <__udivmoddi4+0x2ca>
 80005aa:	3b02      	subs	r3, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005b2:	eba4 040c 	sub.w	r4, r4, ip
 80005b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ba:	4564      	cmp	r4, ip
 80005bc:	4673      	mov	r3, lr
 80005be:	46e1      	mov	r9, ip
 80005c0:	d362      	bcc.n	8000688 <__udivmoddi4+0x2a8>
 80005c2:	d05f      	beq.n	8000684 <__udivmoddi4+0x2a4>
 80005c4:	b15d      	cbz	r5, 80005de <__udivmoddi4+0x1fe>
 80005c6:	ebb8 0203 	subs.w	r2, r8, r3
 80005ca:	eb64 0409 	sbc.w	r4, r4, r9
 80005ce:	fa04 f606 	lsl.w	r6, r4, r6
 80005d2:	fa22 f301 	lsr.w	r3, r2, r1
 80005d6:	431e      	orrs	r6, r3
 80005d8:	40cc      	lsrs	r4, r1
 80005da:	e9c5 6400 	strd	r6, r4, [r5]
 80005de:	2100      	movs	r1, #0
 80005e0:	e74f      	b.n	8000482 <__udivmoddi4+0xa2>
 80005e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005e6:	0c01      	lsrs	r1, r0, #16
 80005e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005ec:	b280      	uxth	r0, r0
 80005ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005f2:	463b      	mov	r3, r7
 80005f4:	4638      	mov	r0, r7
 80005f6:	463c      	mov	r4, r7
 80005f8:	46b8      	mov	r8, r7
 80005fa:	46be      	mov	lr, r7
 80005fc:	2620      	movs	r6, #32
 80005fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000602:	eba2 0208 	sub.w	r2, r2, r8
 8000606:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800060a:	e766      	b.n	80004da <__udivmoddi4+0xfa>
 800060c:	4601      	mov	r1, r0
 800060e:	e718      	b.n	8000442 <__udivmoddi4+0x62>
 8000610:	4610      	mov	r0, r2
 8000612:	e72c      	b.n	800046e <__udivmoddi4+0x8e>
 8000614:	f1c6 0220 	rsb	r2, r6, #32
 8000618:	fa2e f302 	lsr.w	r3, lr, r2
 800061c:	40b7      	lsls	r7, r6
 800061e:	40b1      	lsls	r1, r6
 8000620:	fa20 f202 	lsr.w	r2, r0, r2
 8000624:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000628:	430a      	orrs	r2, r1
 800062a:	fbb3 f8fe 	udiv	r8, r3, lr
 800062e:	b2bc      	uxth	r4, r7
 8000630:	fb0e 3318 	mls	r3, lr, r8, r3
 8000634:	0c11      	lsrs	r1, r2, #16
 8000636:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800063a:	fb08 f904 	mul.w	r9, r8, r4
 800063e:	40b0      	lsls	r0, r6
 8000640:	4589      	cmp	r9, r1
 8000642:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000646:	b280      	uxth	r0, r0
 8000648:	d93e      	bls.n	80006c8 <__udivmoddi4+0x2e8>
 800064a:	1879      	adds	r1, r7, r1
 800064c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000650:	d201      	bcs.n	8000656 <__udivmoddi4+0x276>
 8000652:	4589      	cmp	r9, r1
 8000654:	d81f      	bhi.n	8000696 <__udivmoddi4+0x2b6>
 8000656:	eba1 0109 	sub.w	r1, r1, r9
 800065a:	fbb1 f9fe 	udiv	r9, r1, lr
 800065e:	fb09 f804 	mul.w	r8, r9, r4
 8000662:	fb0e 1119 	mls	r1, lr, r9, r1
 8000666:	b292      	uxth	r2, r2
 8000668:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800066c:	4542      	cmp	r2, r8
 800066e:	d229      	bcs.n	80006c4 <__udivmoddi4+0x2e4>
 8000670:	18ba      	adds	r2, r7, r2
 8000672:	f109 31ff 	add.w	r1, r9, #4294967295
 8000676:	d2c4      	bcs.n	8000602 <__udivmoddi4+0x222>
 8000678:	4542      	cmp	r2, r8
 800067a:	d2c2      	bcs.n	8000602 <__udivmoddi4+0x222>
 800067c:	f1a9 0102 	sub.w	r1, r9, #2
 8000680:	443a      	add	r2, r7
 8000682:	e7be      	b.n	8000602 <__udivmoddi4+0x222>
 8000684:	45f0      	cmp	r8, lr
 8000686:	d29d      	bcs.n	80005c4 <__udivmoddi4+0x1e4>
 8000688:	ebbe 0302 	subs.w	r3, lr, r2
 800068c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000690:	3801      	subs	r0, #1
 8000692:	46e1      	mov	r9, ip
 8000694:	e796      	b.n	80005c4 <__udivmoddi4+0x1e4>
 8000696:	eba7 0909 	sub.w	r9, r7, r9
 800069a:	4449      	add	r1, r9
 800069c:	f1a8 0c02 	sub.w	ip, r8, #2
 80006a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a4:	fb09 f804 	mul.w	r8, r9, r4
 80006a8:	e7db      	b.n	8000662 <__udivmoddi4+0x282>
 80006aa:	4673      	mov	r3, lr
 80006ac:	e77f      	b.n	80005ae <__udivmoddi4+0x1ce>
 80006ae:	4650      	mov	r0, sl
 80006b0:	e766      	b.n	8000580 <__udivmoddi4+0x1a0>
 80006b2:	4608      	mov	r0, r1
 80006b4:	e6fd      	b.n	80004b2 <__udivmoddi4+0xd2>
 80006b6:	443b      	add	r3, r7
 80006b8:	3a02      	subs	r2, #2
 80006ba:	e733      	b.n	8000524 <__udivmoddi4+0x144>
 80006bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006c0:	443b      	add	r3, r7
 80006c2:	e71c      	b.n	80004fe <__udivmoddi4+0x11e>
 80006c4:	4649      	mov	r1, r9
 80006c6:	e79c      	b.n	8000602 <__udivmoddi4+0x222>
 80006c8:	eba1 0109 	sub.w	r1, r1, r9
 80006cc:	46c4      	mov	ip, r8
 80006ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80006d2:	fb09 f804 	mul.w	r8, r9, r4
 80006d6:	e7c4      	b.n	8000662 <__udivmoddi4+0x282>

080006d8 <__aeabi_idiv0>:
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop

080006dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006e0:	4b49      	ldr	r3, [pc, #292]	@ (8000808 <SystemInit+0x12c>)
 80006e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006e6:	4a48      	ldr	r2, [pc, #288]	@ (8000808 <SystemInit+0x12c>)
 80006e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006f0:	4b45      	ldr	r3, [pc, #276]	@ (8000808 <SystemInit+0x12c>)
 80006f2:	691b      	ldr	r3, [r3, #16]
 80006f4:	4a44      	ldr	r2, [pc, #272]	@ (8000808 <SystemInit+0x12c>)
 80006f6:	f043 0310 	orr.w	r3, r3, #16
 80006fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006fc:	4b43      	ldr	r3, [pc, #268]	@ (800080c <SystemInit+0x130>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f003 030f 	and.w	r3, r3, #15
 8000704:	2b06      	cmp	r3, #6
 8000706:	d807      	bhi.n	8000718 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000708:	4b40      	ldr	r3, [pc, #256]	@ (800080c <SystemInit+0x130>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f023 030f 	bic.w	r3, r3, #15
 8000710:	4a3e      	ldr	r2, [pc, #248]	@ (800080c <SystemInit+0x130>)
 8000712:	f043 0307 	orr.w	r3, r3, #7
 8000716:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000718:	4b3d      	ldr	r3, [pc, #244]	@ (8000810 <SystemInit+0x134>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a3c      	ldr	r2, [pc, #240]	@ (8000810 <SystemInit+0x134>)
 800071e:	f043 0301 	orr.w	r3, r3, #1
 8000722:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000724:	4b3a      	ldr	r3, [pc, #232]	@ (8000810 <SystemInit+0x134>)
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800072a:	4b39      	ldr	r3, [pc, #228]	@ (8000810 <SystemInit+0x134>)
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	4938      	ldr	r1, [pc, #224]	@ (8000810 <SystemInit+0x134>)
 8000730:	4b38      	ldr	r3, [pc, #224]	@ (8000814 <SystemInit+0x138>)
 8000732:	4013      	ands	r3, r2
 8000734:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000736:	4b35      	ldr	r3, [pc, #212]	@ (800080c <SystemInit+0x130>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f003 0308 	and.w	r3, r3, #8
 800073e:	2b00      	cmp	r3, #0
 8000740:	d007      	beq.n	8000752 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000742:	4b32      	ldr	r3, [pc, #200]	@ (800080c <SystemInit+0x130>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f023 030f 	bic.w	r3, r3, #15
 800074a:	4a30      	ldr	r2, [pc, #192]	@ (800080c <SystemInit+0x130>)
 800074c:	f043 0307 	orr.w	r3, r3, #7
 8000750:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000752:	4b2f      	ldr	r3, [pc, #188]	@ (8000810 <SystemInit+0x134>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000758:	4b2d      	ldr	r3, [pc, #180]	@ (8000810 <SystemInit+0x134>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800075e:	4b2c      	ldr	r3, [pc, #176]	@ (8000810 <SystemInit+0x134>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000764:	4b2a      	ldr	r3, [pc, #168]	@ (8000810 <SystemInit+0x134>)
 8000766:	4a2c      	ldr	r2, [pc, #176]	@ (8000818 <SystemInit+0x13c>)
 8000768:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800076a:	4b29      	ldr	r3, [pc, #164]	@ (8000810 <SystemInit+0x134>)
 800076c:	4a2b      	ldr	r2, [pc, #172]	@ (800081c <SystemInit+0x140>)
 800076e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000770:	4b27      	ldr	r3, [pc, #156]	@ (8000810 <SystemInit+0x134>)
 8000772:	4a2b      	ldr	r2, [pc, #172]	@ (8000820 <SystemInit+0x144>)
 8000774:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000776:	4b26      	ldr	r3, [pc, #152]	@ (8000810 <SystemInit+0x134>)
 8000778:	2200      	movs	r2, #0
 800077a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800077c:	4b24      	ldr	r3, [pc, #144]	@ (8000810 <SystemInit+0x134>)
 800077e:	4a28      	ldr	r2, [pc, #160]	@ (8000820 <SystemInit+0x144>)
 8000780:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000782:	4b23      	ldr	r3, [pc, #140]	@ (8000810 <SystemInit+0x134>)
 8000784:	2200      	movs	r2, #0
 8000786:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000788:	4b21      	ldr	r3, [pc, #132]	@ (8000810 <SystemInit+0x134>)
 800078a:	4a25      	ldr	r2, [pc, #148]	@ (8000820 <SystemInit+0x144>)
 800078c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800078e:	4b20      	ldr	r3, [pc, #128]	@ (8000810 <SystemInit+0x134>)
 8000790:	2200      	movs	r2, #0
 8000792:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000794:	4b1e      	ldr	r3, [pc, #120]	@ (8000810 <SystemInit+0x134>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a1d      	ldr	r2, [pc, #116]	@ (8000810 <SystemInit+0x134>)
 800079a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800079e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000810 <SystemInit+0x134>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80007a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000824 <SystemInit+0x148>)
 80007a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007aa:	4a1e      	ldr	r2, [pc, #120]	@ (8000824 <SystemInit+0x148>)
 80007ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007b0:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80007b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000828 <SystemInit+0x14c>)
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	4b1d      	ldr	r3, [pc, #116]	@ (800082c <SystemInit+0x150>)
 80007b8:	4013      	ands	r3, r2
 80007ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80007be:	d202      	bcs.n	80007c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80007c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000830 <SystemInit+0x154>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80007c6:	4b12      	ldr	r3, [pc, #72]	@ (8000810 <SystemInit+0x134>)
 80007c8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d113      	bne.n	80007fc <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <SystemInit+0x134>)
 80007d6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007da:	4a0d      	ldr	r2, [pc, #52]	@ (8000810 <SystemInit+0x134>)
 80007dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007e0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007e4:	4b13      	ldr	r3, [pc, #76]	@ (8000834 <SystemInit+0x158>)
 80007e6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007ea:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007ec:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <SystemInit+0x134>)
 80007ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007f2:	4a07      	ldr	r2, [pc, #28]	@ (8000810 <SystemInit+0x134>)
 80007f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007f8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	e000ed00 	.word	0xe000ed00
 800080c:	52002000 	.word	0x52002000
 8000810:	58024400 	.word	0x58024400
 8000814:	eaf6ed7f 	.word	0xeaf6ed7f
 8000818:	02020200 	.word	0x02020200
 800081c:	01ff0000 	.word	0x01ff0000
 8000820:	01010280 	.word	0x01010280
 8000824:	580000c0 	.word	0x580000c0
 8000828:	5c001000 	.word	0x5c001000
 800082c:	ffff0000 	.word	0xffff0000
 8000830:	51008108 	.word	0x51008108
 8000834:	52004000 	.word	0x52004000

08000838 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 800083c:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <ExitRun0Mode+0x2c>)
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	4a08      	ldr	r2, [pc, #32]	@ (8000864 <ExitRun0Mode+0x2c>)
 8000842:	f023 0302 	bic.w	r3, r3, #2
 8000846:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000848:	bf00      	nop
 800084a:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <ExitRun0Mode+0x2c>)
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000852:	2b00      	cmp	r3, #0
 8000854:	d0f9      	beq.n	800084a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000856:	bf00      	nop
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	58024800 	.word	0x58024800

08000868 <HAL_TIM_PeriodElapsedCallback>:

double TC[MAX_TC_CH] = {0};
uint8_t sv[MAX_SV_NUM] = {0};

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000878:	d13d      	bne.n	80008f6 <HAL_TIM_PeriodElapsedCallback+0x8e>
	{
		// 1ms마다 실행되는 코드
		f1ms = true;
 800087a:	4b21      	ldr	r3, [pc, #132]	@ (8000900 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800087c:	2201      	movs	r2, #1
 800087e:	701a      	strb	r2, [r3, #0]
		cnt1ms++;
 8000880:	4b20      	ldr	r3, [pc, #128]	@ (8000904 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	3301      	adds	r3, #1
 8000886:	4a1f      	ldr	r2, [pc, #124]	@ (8000904 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000888:	6013      	str	r3, [r2, #0]
		systemtick++;
 800088a:	4b1f      	ldr	r3, [pc, #124]	@ (8000908 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	3301      	adds	r3, #1
 8000890:	4a1d      	ldr	r2, [pc, #116]	@ (8000908 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000892:	6013      	str	r3, [r2, #0]

		if (cnt1ms%10 == 0)
 8000894:	4b1b      	ldr	r3, [pc, #108]	@ (8000904 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000896:	6819      	ldr	r1, [r3, #0]
 8000898:	4b1c      	ldr	r3, [pc, #112]	@ (800090c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800089a:	fba3 2301 	umull	r2, r3, r3, r1
 800089e:	08da      	lsrs	r2, r3, #3
 80008a0:	4613      	mov	r3, r2
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	4413      	add	r3, r2
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	1aca      	subs	r2, r1, r3
 80008aa:	2a00      	cmp	r2, #0
 80008ac:	d102      	bne.n	80008b4 <HAL_TIM_PeriodElapsedCallback+0x4c>
		{
			f10ms = true;
 80008ae:	4b18      	ldr	r3, [pc, #96]	@ (8000910 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	701a      	strb	r2, [r3, #0]
		}

		if (cnt1ms%100 == 0)
 80008b4:	4b13      	ldr	r3, [pc, #76]	@ (8000904 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	4b16      	ldr	r3, [pc, #88]	@ (8000914 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80008ba:	fba3 1302 	umull	r1, r3, r3, r2
 80008be:	095b      	lsrs	r3, r3, #5
 80008c0:	2164      	movs	r1, #100	@ 0x64
 80008c2:	fb01 f303 	mul.w	r3, r1, r3
 80008c6:	1ad3      	subs	r3, r2, r3
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d102      	bne.n	80008d2 <HAL_TIM_PeriodElapsedCallback+0x6a>
		{
			f100ms = true;
 80008cc:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	701a      	strb	r2, [r3, #0]
		}

		if (cnt1ms%1000 == 0)
 80008d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000904 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	4b11      	ldr	r3, [pc, #68]	@ (800091c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80008d8:	fba3 1302 	umull	r1, r3, r3, r2
 80008dc:	099b      	lsrs	r3, r3, #6
 80008de:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80008e2:	fb01 f303 	mul.w	r3, r1, r3
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d102      	bne.n	80008f2 <HAL_TIM_PeriodElapsedCallback+0x8a>
		{
			f1000ms = true;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	701a      	strb	r2, [r3, #0]
		}

		IgnitorSwitching();
 80008f2:	f000 fdb3 	bl	800145c <IgnitorSwitching>
	}
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	24000470 	.word	0x24000470
 8000904:	24000474 	.word	0x24000474
 8000908:	2400046c 	.word	0x2400046c
 800090c:	cccccccd 	.word	0xcccccccd
 8000910:	24000471 	.word	0x24000471
 8000914:	51eb851f 	.word	0x51eb851f
 8000918:	24000472 	.word	0x24000472
 800091c:	10624dd3 	.word	0x10624dd3
 8000920:	24000473 	.word	0x24000473

08000924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 800092a:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800092c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000930:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000934:	bf00      	nop
 8000936:	4bac      	ldr	r3, [pc, #688]	@ (8000be8 <main+0x2c4>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800093e:	2b00      	cmp	r3, #0
 8000940:	d006      	beq.n	8000950 <main+0x2c>
 8000942:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8000946:	1e5a      	subs	r2, r3, #1
 8000948:	f8c7 222c 	str.w	r2, [r7, #556]	@ 0x22c
 800094c:	2b00      	cmp	r3, #0
 800094e:	dcf2      	bgt.n	8000936 <main+0x12>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000950:	f002 fc8c 	bl	800326c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000954:	f000 f96a 	bl	8000c2c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000958:	4ba3      	ldr	r3, [pc, #652]	@ (8000be8 <main+0x2c4>)
 800095a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800095e:	4aa2      	ldr	r2, [pc, #648]	@ (8000be8 <main+0x2c4>)
 8000960:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000964:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000968:	4b9f      	ldr	r3, [pc, #636]	@ (8000be8 <main+0x2c4>)
 800096a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800096e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000972:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8000976:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800097a:	2000      	movs	r0, #0
 800097c:	f007 fc54 	bl	8008228 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000980:	2100      	movs	r1, #0
 8000982:	2000      	movs	r0, #0
 8000984:	f007 fc6a 	bl	800825c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000988:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800098c:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000990:	bf00      	nop
 8000992:	4b95      	ldr	r3, [pc, #596]	@ (8000be8 <main+0x2c4>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800099a:	2b00      	cmp	r3, #0
 800099c:	d106      	bne.n	80009ac <main+0x88>
 800099e:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 80009a2:	1e5a      	subs	r2, r3, #1
 80009a4:	f8c7 222c 	str.w	r2, [r7, #556]	@ 0x22c
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	dcf2      	bgt.n	8000992 <main+0x6e>
if ( timeout < 0 )
 80009ac:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	da01      	bge.n	80009b8 <main+0x94>
{
Error_Handler();
 80009b4:	f000 fd0e 	bl	80013d4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b8:	f000 fc0a 	bl	80011d0 <MX_GPIO_Init>
  MX_DMA_Init();
 80009bc:	f000 fbe8 	bl	8001190 <MX_DMA_Init>
  MX_SPI1_Init();
 80009c0:	f000 faf6 	bl	8000fb0 <MX_SPI1_Init>
  MX_TIM2_Init();
 80009c4:	f000 fb4a 	bl	800105c <MX_TIM2_Init>
  MX_ADC1_Init();
 80009c8:	f000 f9ac 	bl	8000d24 <MX_ADC1_Init>
  MX_UART4_Init();
 80009cc:	f000 fb94 	bl	80010f8 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_Base_Start_IT(&htim2);
 80009d0:	4886      	ldr	r0, [pc, #536]	@ (8000bec <main+0x2c8>)
 80009d2:	f00b ff11 	bl	800c7f8 <HAL_TIM_Base_Start_IT>

  InitPT();
 80009d6:	f000 fd03 	bl	80013e0 <InitPT>
  InitTMTC();
 80009da:	f002 f931 	bl	8002c40 <InitTMTC>


  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80009de:	2000      	movs	r0, #0
 80009e0:	f002 f9ee 	bl	8002dc0 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80009e4:	2001      	movs	r0, #1
 80009e6:	f002 f9eb 	bl	8002dc0 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80009ea:	2002      	movs	r0, #2
 80009ec:	f002 f9e8 	bl	8002dc0 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80009f0:	2101      	movs	r1, #1
 80009f2:	2000      	movs	r0, #0
 80009f4:	f002 fad8 	bl	8002fa8 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80009f8:	4b7d      	ldr	r3, [pc, #500]	@ (8000bf0 <main+0x2cc>)
 80009fa:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009fe:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000a00:	4b7b      	ldr	r3, [pc, #492]	@ (8000bf0 <main+0x2cc>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000a06:	4b7a      	ldr	r3, [pc, #488]	@ (8000bf0 <main+0x2cc>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000a0c:	4b78      	ldr	r3, [pc, #480]	@ (8000bf0 <main+0x2cc>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000a12:	4b77      	ldr	r3, [pc, #476]	@ (8000bf0 <main+0x2cc>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000a18:	4975      	ldr	r1, [pc, #468]	@ (8000bf0 <main+0x2cc>)
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f002 fb48 	bl	80030b0 <BSP_COM_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <main+0x106>
  {
    Error_Handler();
 8000a26:	f000 fcd5 	bl	80013d4 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */
  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8000a2a:	4872      	ldr	r0, [pc, #456]	@ (8000bf4 <main+0x2d0>)
 8000a2c:	f00f fd38 	bl	80104a0 <iprintf>
  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8000a30:	2000      	movs	r0, #0
 8000a32:	f002 fa3b 	bl	8002eac <BSP_LED_On>
  BSP_LED_On(LED_YELLOW);
 8000a36:	2001      	movs	r0, #1
 8000a38:	f002 fa38 	bl	8002eac <BSP_LED_On>
  BSP_LED_Off(LED_RED);
 8000a3c:	2002      	movs	r0, #2
 8000a3e:	f002 fa5f 	bl	8002f00 <BSP_LED_Off>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (fTC == true)
 8000a42:	4b6d      	ldr	r3, [pc, #436]	@ (8000bf8 <main+0x2d4>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d105      	bne.n	8000a56 <main+0x132>
	  {
		  fTC = false;
 8000a4a:	4b6b      	ldr	r3, [pc, #428]	@ (8000bf8 <main+0x2d4>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	701a      	strb	r2, [r3, #0]

		  SVCmdDecoding(sv);
 8000a50:	486a      	ldr	r0, [pc, #424]	@ (8000bfc <main+0x2d8>)
 8000a52:	f002 f933 	bl	8002cbc <SVCmdDecoding>

	  } // if (fTC == true)

	  if (fTemp == true)
 8000a56:	4b6a      	ldr	r3, [pc, #424]	@ (8000c00 <main+0x2dc>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d105      	bne.n	8000a6a <main+0x146>
	  {
		  fTemp = false;
 8000a5e:	4b68      	ldr	r3, [pc, #416]	@ (8000c00 <main+0x2dc>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
		  GetTemp(TC);
 8000a64:	4867      	ldr	r0, [pc, #412]	@ (8000c04 <main+0x2e0>)
 8000a66:	f002 f87f 	bl	8002b68 <GetTemp>
	  }

	  if (f10ms == true)
 8000a6a:	4b67      	ldr	r3, [pc, #412]	@ (8000c08 <main+0x2e4>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	f040 80ad 	bne.w	8000bce <main+0x2aa>
	  {
		  f10ms = false;
 8000a74:	4b64      	ldr	r3, [pc, #400]	@ (8000c08 <main+0x2e4>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	701a      	strb	r2, [r3, #0]

		  uint8_t tx_buf[512]={0};
 8000a7a:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000a7e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000a82:	4618      	mov	r0, r3
 8000a84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a88:	461a      	mov	r2, r3
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	f00f fe14 	bl	80106b8 <memset>
		  uint8_t temp_buf[32]={0};
 8000a90:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000a94:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8000a98:	4618      	mov	r0, r3
 8000a9a:	2320      	movs	r3, #32
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	f00f fe0a 	bl	80106b8 <memset>

		  SVUpdate(sv);
 8000aa4:	4855      	ldr	r0, [pc, #340]	@ (8000bfc <main+0x2d8>)
 8000aa6:	f000 fcff 	bl	80014a8 <SVUpdate>
		  MAX3188_StartRead();
 8000aaa:	f001 ffe9 	bl	8002a80 <MAX3188_StartRead>
		  GetADCRaw(ADC_results);
 8000aae:	4857      	ldr	r0, [pc, #348]	@ (8000c0c <main+0x2e8>)
 8000ab0:	f000 fca8 	bl	8001404 <GetADCRaw>

		  sprintf((char*)tx_buf,"IGRVT,%lu",systemtick);
 8000ab4:	4b56      	ldr	r3, [pc, #344]	@ (8000c10 <main+0x2ec>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000abc:	4955      	ldr	r1, [pc, #340]	@ (8000c14 <main+0x2f0>)
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f00f fd00 	bl	80104c4 <siprintf>
		  for (uint8_t i = 0; i < MAX_SV_NUM; i++)
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
 8000aca:	e015      	b.n	8000af8 <main+0x1d4>
		  {
			  sprintf((char*)temp_buf,",%u",sv[i]);
 8000acc:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
 8000ad0:	4a4a      	ldr	r2, [pc, #296]	@ (8000bfc <main+0x2d8>)
 8000ad2:	5cd3      	ldrb	r3, [r2, r3]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	494f      	ldr	r1, [pc, #316]	@ (8000c18 <main+0x2f4>)
 8000ada:	4618      	mov	r0, r3
 8000adc:	f00f fcf2 	bl	80104c4 <siprintf>
			  strcat((char*)tx_buf,(char*)temp_buf);
 8000ae0:	1d3a      	adds	r2, r7, #4
 8000ae2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f00f fded 	bl	80106c8 <strcat>
		  for (uint8_t i = 0; i < MAX_SV_NUM; i++)
 8000aee:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
 8000af2:	3301      	adds	r3, #1
 8000af4:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
 8000af8:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
 8000afc:	2b05      	cmp	r3, #5
 8000afe:	d9e5      	bls.n	8000acc <main+0x1a8>

		  //sprintf((char*)temp_buf,";");
		  //strcat((char*)tx_buf,(char*)temp_buf);
		  //sprintf((char*)temp_buf,"%d",(int)(TC[0]*10.0));
		  //strcat((char*)tx_buf,(char*)temp_buf);
		  for (uint8_t i = 0; i < MAX_TC_CH; i++)
 8000b00:	2300      	movs	r3, #0
 8000b02:	f887 322a 	strb.w	r3, [r7, #554]	@ 0x22a
 8000b06:	e01f      	b.n	8000b48 <main+0x224>
		  {
			  sprintf((char*)temp_buf,",%d",(int)(TC[i]*10.0));
 8000b08:	f897 322a 	ldrb.w	r3, [r7, #554]	@ 0x22a
 8000b0c:	4a3d      	ldr	r2, [pc, #244]	@ (8000c04 <main+0x2e0>)
 8000b0e:	00db      	lsls	r3, r3, #3
 8000b10:	4413      	add	r3, r2
 8000b12:	ed93 7b00 	vldr	d7, [r3]
 8000b16:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8000b1a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b1e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	ee17 2a90 	vmov	r2, s15
 8000b28:	493c      	ldr	r1, [pc, #240]	@ (8000c1c <main+0x2f8>)
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f00f fcca 	bl	80104c4 <siprintf>
			  strcat((char*)tx_buf,(char*)temp_buf);
 8000b30:	1d3a      	adds	r2, r7, #4
 8000b32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b36:	4611      	mov	r1, r2
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f00f fdc5 	bl	80106c8 <strcat>
		  for (uint8_t i = 0; i < MAX_TC_CH; i++)
 8000b3e:	f897 322a 	ldrb.w	r3, [r7, #554]	@ 0x22a
 8000b42:	3301      	adds	r3, #1
 8000b44:	f887 322a 	strb.w	r3, [r7, #554]	@ 0x22a
 8000b48:	f897 322a 	ldrb.w	r3, [r7, #554]	@ 0x22a
 8000b4c:	2b03      	cmp	r3, #3
 8000b4e:	d9db      	bls.n	8000b08 <main+0x1e4>
//
//		  sprintf((char*)temp_buf,";");
//		  strcat((char*)tx_buf,(char*)temp_buf);
//		  sprintf((char*)temp_buf,"%u",ADC_results[0]);
//		  strcat((char*)tx_buf,(char*)temp_buf);
		  for (uint8_t i = 0; i < N_ADC_CH; i++)
 8000b50:	2300      	movs	r3, #0
 8000b52:	f887 3229 	strb.w	r3, [r7, #553]	@ 0x229
 8000b56:	e016      	b.n	8000b86 <main+0x262>
		  {
			  sprintf((char*)temp_buf,",%u",ADC_results[i]);
 8000b58:	f897 3229 	ldrb.w	r3, [r7, #553]	@ 0x229
 8000b5c:	4a2b      	ldr	r2, [pc, #172]	@ (8000c0c <main+0x2e8>)
 8000b5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b62:	461a      	mov	r2, r3
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	492c      	ldr	r1, [pc, #176]	@ (8000c18 <main+0x2f4>)
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f00f fcab 	bl	80104c4 <siprintf>
			  strcat((char*)tx_buf,(char*)temp_buf);
 8000b6e:	1d3a      	adds	r2, r7, #4
 8000b70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b74:	4611      	mov	r1, r2
 8000b76:	4618      	mov	r0, r3
 8000b78:	f00f fda6 	bl	80106c8 <strcat>
		  for (uint8_t i = 0; i < N_ADC_CH; i++)
 8000b7c:	f897 3229 	ldrb.w	r3, [r7, #553]	@ 0x229
 8000b80:	3301      	adds	r3, #1
 8000b82:	f887 3229 	strb.w	r3, [r7, #553]	@ 0x229
 8000b86:	f897 3229 	ldrb.w	r3, [r7, #553]	@ 0x229
 8000b8a:	2b0c      	cmp	r3, #12
 8000b8c:	d9e4      	bls.n	8000b58 <main+0x234>
		  }
		  sprintf((char*)temp_buf,",EOD");
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	4923      	ldr	r1, [pc, #140]	@ (8000c20 <main+0x2fc>)
 8000b92:	4618      	mov	r0, r3
 8000b94:	f00f fc96 	bl	80104c4 <siprintf>
		  strcat((char*)tx_buf,(char*)temp_buf);
 8000b98:	1d3a      	adds	r2, r7, #4
 8000b9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f00f fd91 	bl	80106c8 <strcat>
		  sprintf((char*)temp_buf,"\r\n");
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	491e      	ldr	r1, [pc, #120]	@ (8000c24 <main+0x300>)
 8000baa:	4618      	mov	r0, r3
 8000bac:	f00f fc8a 	bl	80104c4 <siprintf>
		  strcat((char*)tx_buf,(char*)temp_buf);
 8000bb0:	1d3a      	adds	r2, r7, #4
 8000bb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f00f fd85 	bl	80106c8 <strcat>

		  SendTM(tx_buf);
 8000bbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f002 f862 	bl	8002c8c <SendTM>

		  BSP_LED_Toggle(LED_YELLOW);
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f002 f9c3 	bl	8002f54 <BSP_LED_Toggle>
	  } //if (f10ms == true)

	  if (f1000ms == true)
 8000bce:	4b16      	ldr	r3, [pc, #88]	@ (8000c28 <main+0x304>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	f47f af35 	bne.w	8000a42 <main+0x11e>
	  {
		  f1000ms = false;//
 8000bd8:	4b13      	ldr	r3, [pc, #76]	@ (8000c28 <main+0x304>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]
		  BSP_LED_Toggle(LED_RED);
 8000bde:	2002      	movs	r0, #2
 8000be0:	f002 f9b8 	bl	8002f54 <BSP_LED_Toggle>
	  if (fTC == true)
 8000be4:	e72d      	b.n	8000a42 <main+0x11e>
 8000be6:	bf00      	nop
 8000be8:	58024400 	.word	0x58024400
 8000bec:	2400038c 	.word	0x2400038c
 8000bf0:	24000214 	.word	0x24000214
 8000bf4:	08012738 	.word	0x08012738
 8000bf8:	24000508 	.word	0x24000508
 8000bfc:	24000498 	.word	0x24000498
 8000c00:	240004dc 	.word	0x240004dc
 8000c04:	24000478 	.word	0x24000478
 8000c08:	24000471 	.word	0x24000471
 8000c0c:	240004a0 	.word	0x240004a0
 8000c10:	2400046c 	.word	0x2400046c
 8000c14:	08012754 	.word	0x08012754
 8000c18:	08012760 	.word	0x08012760
 8000c1c:	08012764 	.word	0x08012764
 8000c20:	08012768 	.word	0x08012768
 8000c24:	08012770 	.word	0x08012770
 8000c28:	24000473 	.word	0x24000473

08000c2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b09c      	sub	sp, #112	@ 0x70
 8000c30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c36:	224c      	movs	r2, #76	@ 0x4c
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f00f fd3c 	bl	80106b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	2220      	movs	r2, #32
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f00f fd36 	bl	80106b8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000c4c:	2004      	movs	r0, #4
 8000c4e:	f007 fb19 	bl	8008284 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c52:	2300      	movs	r3, #0
 8000c54:	603b      	str	r3, [r7, #0]
 8000c56:	4b31      	ldr	r3, [pc, #196]	@ (8000d1c <SystemClock_Config+0xf0>)
 8000c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c5a:	4a30      	ldr	r2, [pc, #192]	@ (8000d1c <SystemClock_Config+0xf0>)
 8000c5c:	f023 0301 	bic.w	r3, r3, #1
 8000c60:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000c62:	4b2e      	ldr	r3, [pc, #184]	@ (8000d1c <SystemClock_Config+0xf0>)
 8000c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	4b2c      	ldr	r3, [pc, #176]	@ (8000d20 <SystemClock_Config+0xf4>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c74:	4a2a      	ldr	r2, [pc, #168]	@ (8000d20 <SystemClock_Config+0xf4>)
 8000c76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b28      	ldr	r3, [pc, #160]	@ (8000d20 <SystemClock_Config+0xf4>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c84:	603b      	str	r3, [r7, #0]
 8000c86:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c88:	bf00      	nop
 8000c8a:	4b25      	ldr	r3, [pc, #148]	@ (8000d20 <SystemClock_Config+0xf4>)
 8000c8c:	699b      	ldr	r3, [r3, #24]
 8000c8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c96:	d1f8      	bne.n	8000c8a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca0:	2340      	movs	r3, #64	@ 0x40
 8000ca2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cac:	2304      	movs	r3, #4
 8000cae:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000cb0:	230a      	movs	r3, #10
 8000cb2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000cc0:	230c      	movs	r3, #12
 8000cc2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ccc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f007 fb31 	bl	8008338 <HAL_RCC_OscConfig>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000cdc:	f000 fb7a 	bl	80013d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce0:	233f      	movs	r3, #63	@ 0x3f
 8000ce2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000cec:	2300      	movs	r3, #0
 8000cee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000cf4:	2340      	movs	r3, #64	@ 0x40
 8000cf6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	2101      	movs	r1, #1
 8000d04:	4618      	mov	r0, r3
 8000d06:	f007 ff71 	bl	8008bec <HAL_RCC_ClockConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000d10:	f000 fb60 	bl	80013d4 <Error_Handler>
  }
}
 8000d14:	bf00      	nop
 8000d16:	3770      	adds	r7, #112	@ 0x70
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	58000400 	.word	0x58000400
 8000d20:	58024800 	.word	0x58024800

08000d24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	@ 0x28
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d2a:	f107 031c 	add.w	r3, r7, #28
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d36:	463b      	mov	r3, r7
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
 8000d44:	615a      	str	r2, [r3, #20]
 8000d46:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d48:	4b8a      	ldr	r3, [pc, #552]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000d4a:	4a8b      	ldr	r2, [pc, #556]	@ (8000f78 <MX_ADC1_Init+0x254>)
 8000d4c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 8000d4e:	4b89      	ldr	r3, [pc, #548]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000d50:	f44f 1210 	mov.w	r2, #2359296	@ 0x240000
 8000d54:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d56:	4b87      	ldr	r3, [pc, #540]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000d58:	2208      	movs	r2, #8
 8000d5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d5c:	4b85      	ldr	r3, [pc, #532]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000d62:	4b84      	ldr	r3, [pc, #528]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000d64:	2208      	movs	r2, #8
 8000d66:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d68:	4b82      	ldr	r3, [pc, #520]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d6e:	4b81      	ldr	r3, [pc, #516]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 13;
 8000d74:	4b7f      	ldr	r3, [pc, #508]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000d76:	220d      	movs	r2, #13
 8000d78:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d7a:	4b7e      	ldr	r3, [pc, #504]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d80:	4b7c      	ldr	r3, [pc, #496]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d86:	4b7b      	ldr	r3, [pc, #492]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000d8c:	4b79      	ldr	r3, [pc, #484]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000d8e:	2203      	movs	r2, #3
 8000d90:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d92:	4b78      	ldr	r3, [pc, #480]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d98:	4b76      	ldr	r3, [pc, #472]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000d9e:	4b75      	ldr	r3, [pc, #468]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000da6:	4b73      	ldr	r3, [pc, #460]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dac:	4871      	ldr	r0, [pc, #452]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000dae:	f002 fd71 	bl	8003894 <HAL_ADC_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000db8:	f000 fb0c 	bl	80013d4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000dc0:	f107 031c 	add.w	r3, r7, #28
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	486b      	ldr	r0, [pc, #428]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000dc8:	f003 ff9e 	bl	8004d08 <HAL_ADCEx_MultiModeConfigChannel>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000dd2:	f000 faff 	bl	80013d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000dd6:	4b69      	ldr	r3, [pc, #420]	@ (8000f7c <MX_ADC1_Init+0x258>)
 8000dd8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dda:	2306      	movs	r3, #6
 8000ddc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8000dde:	2303      	movs	r3, #3
 8000de0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000de2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000de6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000de8:	2304      	movs	r3, #4
 8000dea:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df4:	463b      	mov	r3, r7
 8000df6:	4619      	mov	r1, r3
 8000df8:	485e      	ldr	r0, [pc, #376]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000dfa:	f003 fa13 	bl	8004224 <HAL_ADC_ConfigChannel>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000e04:	f000 fae6 	bl	80013d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e08:	4b5d      	ldr	r3, [pc, #372]	@ (8000f80 <MX_ADC1_Init+0x25c>)
 8000e0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e0c:	230c      	movs	r3, #12
 8000e0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e10:	463b      	mov	r3, r7
 8000e12:	4619      	mov	r1, r3
 8000e14:	4857      	ldr	r0, [pc, #348]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000e16:	f003 fa05 	bl	8004224 <HAL_ADC_ConfigChannel>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000e20:	f000 fad8 	bl	80013d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000e24:	4b57      	ldr	r3, [pc, #348]	@ (8000f84 <MX_ADC1_Init+0x260>)
 8000e26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000e28:	2312      	movs	r3, #18
 8000e2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e2c:	463b      	mov	r3, r7
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4850      	ldr	r0, [pc, #320]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000e32:	f003 f9f7 	bl	8004224 <HAL_ADC_ConfigChannel>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000e3c:	f000 faca 	bl	80013d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000e40:	4b51      	ldr	r3, [pc, #324]	@ (8000f88 <MX_ADC1_Init+0x264>)
 8000e42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000e44:	2318      	movs	r3, #24
 8000e46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e48:	463b      	mov	r3, r7
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4849      	ldr	r0, [pc, #292]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000e4e:	f003 f9e9 	bl	8004224 <HAL_ADC_ConfigChannel>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000e58:	f000 fabc 	bl	80013d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e5c:	4b4b      	ldr	r3, [pc, #300]	@ (8000f8c <MX_ADC1_Init+0x268>)
 8000e5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000e60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e64:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e66:	463b      	mov	r3, r7
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4842      	ldr	r0, [pc, #264]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000e6c:	f003 f9da 	bl	8004224 <HAL_ADC_ConfigChannel>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 8000e76:	f000 faad 	bl	80013d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e7a:	4b45      	ldr	r3, [pc, #276]	@ (8000f90 <MX_ADC1_Init+0x26c>)
 8000e7c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000e7e:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000e82:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e84:	463b      	mov	r3, r7
 8000e86:	4619      	mov	r1, r3
 8000e88:	483a      	ldr	r0, [pc, #232]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000e8a:	f003 f9cb 	bl	8004224 <HAL_ADC_ConfigChannel>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_ADC1_Init+0x174>
  {
    Error_Handler();
 8000e94:	f000 fa9e 	bl	80013d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e98:	4b3e      	ldr	r3, [pc, #248]	@ (8000f94 <MX_ADC1_Init+0x270>)
 8000e9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000e9c:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8000ea0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ea2:	463b      	mov	r3, r7
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4833      	ldr	r0, [pc, #204]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000ea8:	f003 f9bc 	bl	8004224 <HAL_ADC_ConfigChannel>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_ADC1_Init+0x192>
  {
    Error_Handler();
 8000eb2:	f000 fa8f 	bl	80013d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000eb6:	4b38      	ldr	r3, [pc, #224]	@ (8000f98 <MX_ADC1_Init+0x274>)
 8000eb8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000eba:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8000ebe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec0:	463b      	mov	r3, r7
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	482b      	ldr	r0, [pc, #172]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000ec6:	f003 f9ad 	bl	8004224 <HAL_ADC_ConfigChannel>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_ADC1_Init+0x1b0>
  {
    Error_Handler();
 8000ed0:	f000 fa80 	bl	80013d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000ed4:	4b31      	ldr	r3, [pc, #196]	@ (8000f9c <MX_ADC1_Init+0x278>)
 8000ed6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000ed8:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8000edc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ede:	463b      	mov	r3, r7
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4824      	ldr	r0, [pc, #144]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000ee4:	f003 f99e 	bl	8004224 <HAL_ADC_ConfigChannel>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_ADC1_Init+0x1ce>
  {
    Error_Handler();
 8000eee:	f000 fa71 	bl	80013d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000ef2:	4b2b      	ldr	r3, [pc, #172]	@ (8000fa0 <MX_ADC1_Init+0x27c>)
 8000ef4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000ef6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000efa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000efc:	463b      	mov	r3, r7
 8000efe:	4619      	mov	r1, r3
 8000f00:	481c      	ldr	r0, [pc, #112]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000f02:	f003 f98f 	bl	8004224 <HAL_ADC_ConfigChannel>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_ADC1_Init+0x1ec>
  {
    Error_Handler();
 8000f0c:	f000 fa62 	bl	80013d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000f10:	4b24      	ldr	r3, [pc, #144]	@ (8000fa4 <MX_ADC1_Init+0x280>)
 8000f12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000f14:	f240 2306 	movw	r3, #518	@ 0x206
 8000f18:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4815      	ldr	r0, [pc, #84]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000f20:	f003 f980 	bl	8004224 <HAL_ADC_ConfigChannel>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_ADC1_Init+0x20a>
  {
    Error_Handler();
 8000f2a:	f000 fa53 	bl	80013d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8000f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa8 <MX_ADC1_Init+0x284>)
 8000f30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000f32:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8000f36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f38:	463b      	mov	r3, r7
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	480d      	ldr	r0, [pc, #52]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000f3e:	f003 f971 	bl	8004224 <HAL_ADC_ConfigChannel>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_ADC1_Init+0x228>
  {
    Error_Handler();
 8000f48:	f000 fa44 	bl	80013d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8000f4c:	4b17      	ldr	r3, [pc, #92]	@ (8000fac <MX_ADC1_Init+0x288>)
 8000f4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000f50:	f240 2312 	movw	r3, #530	@ 0x212
 8000f54:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f56:	463b      	mov	r3, r7
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4806      	ldr	r0, [pc, #24]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000f5c:	f003 f962 	bl	8004224 <HAL_ADC_ConfigChannel>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_ADC1_Init+0x246>
  {
    Error_Handler();
 8000f66:	f000 fa35 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	3728      	adds	r7, #40	@ 0x28
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	24000228 	.word	0x24000228
 8000f78:	40022000 	.word	0x40022000
 8000f7c:	08600004 	.word	0x08600004
 8000f80:	0c900008 	.word	0x0c900008
 8000f84:	10c00010 	.word	0x10c00010
 8000f88:	1d500080 	.word	0x1d500080
 8000f8c:	21800100 	.word	0x21800100
 8000f90:	2a000400 	.word	0x2a000400
 8000f94:	2e300800 	.word	0x2e300800
 8000f98:	3ac04000 	.word	0x3ac04000
 8000f9c:	3ef08000 	.word	0x3ef08000
 8000fa0:	43210000 	.word	0x43210000
 8000fa4:	47520000 	.word	0x47520000
 8000fa8:	4b840000 	.word	0x4b840000
 8000fac:	4fb80000 	.word	0x4fb80000

08000fb0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fb4:	4b27      	ldr	r3, [pc, #156]	@ (8001054 <MX_SPI1_Init+0xa4>)
 8000fb6:	4a28      	ldr	r2, [pc, #160]	@ (8001058 <MX_SPI1_Init+0xa8>)
 8000fb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fba:	4b26      	ldr	r3, [pc, #152]	@ (8001054 <MX_SPI1_Init+0xa4>)
 8000fbc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000fc0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fc2:	4b24      	ldr	r3, [pc, #144]	@ (8001054 <MX_SPI1_Init+0xa4>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fc8:	4b22      	ldr	r3, [pc, #136]	@ (8001054 <MX_SPI1_Init+0xa4>)
 8000fca:	2207      	movs	r2, #7
 8000fcc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fce:	4b21      	ldr	r3, [pc, #132]	@ (8001054 <MX_SPI1_Init+0xa4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8001054 <MX_SPI1_Init+0xa4>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fda:	4b1e      	ldr	r3, [pc, #120]	@ (8001054 <MX_SPI1_Init+0xa4>)
 8000fdc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000fe0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8001054 <MX_SPI1_Init+0xa4>)
 8000fe4:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8000fe8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fea:	4b1a      	ldr	r3, [pc, #104]	@ (8001054 <MX_SPI1_Init+0xa4>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ff0:	4b18      	ldr	r3, [pc, #96]	@ (8001054 <MX_SPI1_Init+0xa4>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ff6:	4b17      	ldr	r3, [pc, #92]	@ (8001054 <MX_SPI1_Init+0xa4>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000ffc:	4b15      	ldr	r3, [pc, #84]	@ (8001054 <MX_SPI1_Init+0xa4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001002:	4b14      	ldr	r3, [pc, #80]	@ (8001054 <MX_SPI1_Init+0xa4>)
 8001004:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001008:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800100a:	4b12      	ldr	r3, [pc, #72]	@ (8001054 <MX_SPI1_Init+0xa4>)
 800100c:	2200      	movs	r2, #0
 800100e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001010:	4b10      	ldr	r3, [pc, #64]	@ (8001054 <MX_SPI1_Init+0xa4>)
 8001012:	2200      	movs	r2, #0
 8001014:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001016:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <MX_SPI1_Init+0xa4>)
 8001018:	2200      	movs	r2, #0
 800101a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800101c:	4b0d      	ldr	r3, [pc, #52]	@ (8001054 <MX_SPI1_Init+0xa4>)
 800101e:	2200      	movs	r2, #0
 8001020:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001022:	4b0c      	ldr	r3, [pc, #48]	@ (8001054 <MX_SPI1_Init+0xa4>)
 8001024:	2200      	movs	r2, #0
 8001026:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001028:	4b0a      	ldr	r3, [pc, #40]	@ (8001054 <MX_SPI1_Init+0xa4>)
 800102a:	2200      	movs	r2, #0
 800102c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800102e:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <MX_SPI1_Init+0xa4>)
 8001030:	2200      	movs	r2, #0
 8001032:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001034:	4b07      	ldr	r3, [pc, #28]	@ (8001054 <MX_SPI1_Init+0xa4>)
 8001036:	2200      	movs	r2, #0
 8001038:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800103a:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <MX_SPI1_Init+0xa4>)
 800103c:	2200      	movs	r2, #0
 800103e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001040:	4804      	ldr	r0, [pc, #16]	@ (8001054 <MX_SPI1_Init+0xa4>)
 8001042:	f00a fe5d 	bl	800bd00 <HAL_SPI_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800104c:	f000 f9c2 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	24000304 	.word	0x24000304
 8001058:	40013000 	.word	0x40013000

0800105c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001062:	f107 0310 	add.w	r3, r7, #16
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800107a:	4b1e      	ldr	r3, [pc, #120]	@ (80010f4 <MX_TIM2_Init+0x98>)
 800107c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001080:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8001082:	4b1c      	ldr	r3, [pc, #112]	@ (80010f4 <MX_TIM2_Init+0x98>)
 8001084:	223f      	movs	r2, #63	@ 0x3f
 8001086:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001088:	4b1a      	ldr	r3, [pc, #104]	@ (80010f4 <MX_TIM2_Init+0x98>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800108e:	4b19      	ldr	r3, [pc, #100]	@ (80010f4 <MX_TIM2_Init+0x98>)
 8001090:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001094:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001096:	4b17      	ldr	r3, [pc, #92]	@ (80010f4 <MX_TIM2_Init+0x98>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800109c:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <MX_TIM2_Init+0x98>)
 800109e:	2200      	movs	r2, #0
 80010a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010a2:	4814      	ldr	r0, [pc, #80]	@ (80010f4 <MX_TIM2_Init+0x98>)
 80010a4:	f00b fb51 	bl	800c74a <HAL_TIM_Base_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80010ae:	f000 f991 	bl	80013d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	4619      	mov	r1, r3
 80010be:	480d      	ldr	r0, [pc, #52]	@ (80010f4 <MX_TIM2_Init+0x98>)
 80010c0:	f00b fd1a 	bl	800caf8 <HAL_TIM_ConfigClockSource>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80010ca:	f000 f983 	bl	80013d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ce:	2300      	movs	r3, #0
 80010d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	4619      	mov	r1, r3
 80010da:	4806      	ldr	r0, [pc, #24]	@ (80010f4 <MX_TIM2_Init+0x98>)
 80010dc:	f00b ff6a 	bl	800cfb4 <HAL_TIMEx_MasterConfigSynchronization>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80010e6:	f000 f975 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	3720      	adds	r7, #32
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	2400038c 	.word	0x2400038c

080010f8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80010fc:	4b22      	ldr	r3, [pc, #136]	@ (8001188 <MX_UART4_Init+0x90>)
 80010fe:	4a23      	ldr	r2, [pc, #140]	@ (800118c <MX_UART4_Init+0x94>)
 8001100:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 921600;
 8001102:	4b21      	ldr	r3, [pc, #132]	@ (8001188 <MX_UART4_Init+0x90>)
 8001104:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001108:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800110a:	4b1f      	ldr	r3, [pc, #124]	@ (8001188 <MX_UART4_Init+0x90>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001110:	4b1d      	ldr	r3, [pc, #116]	@ (8001188 <MX_UART4_Init+0x90>)
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001116:	4b1c      	ldr	r3, [pc, #112]	@ (8001188 <MX_UART4_Init+0x90>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800111c:	4b1a      	ldr	r3, [pc, #104]	@ (8001188 <MX_UART4_Init+0x90>)
 800111e:	220c      	movs	r2, #12
 8001120:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001122:	4b19      	ldr	r3, [pc, #100]	@ (8001188 <MX_UART4_Init+0x90>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001128:	4b17      	ldr	r3, [pc, #92]	@ (8001188 <MX_UART4_Init+0x90>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800112e:	4b16      	ldr	r3, [pc, #88]	@ (8001188 <MX_UART4_Init+0x90>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001134:	4b14      	ldr	r3, [pc, #80]	@ (8001188 <MX_UART4_Init+0x90>)
 8001136:	2200      	movs	r2, #0
 8001138:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800113a:	4b13      	ldr	r3, [pc, #76]	@ (8001188 <MX_UART4_Init+0x90>)
 800113c:	2200      	movs	r2, #0
 800113e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001140:	4811      	ldr	r0, [pc, #68]	@ (8001188 <MX_UART4_Init+0x90>)
 8001142:	f00b ffe3 	bl	800d10c <HAL_UART_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800114c:	f000 f942 	bl	80013d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001150:	2100      	movs	r1, #0
 8001152:	480d      	ldr	r0, [pc, #52]	@ (8001188 <MX_UART4_Init+0x90>)
 8001154:	f00e fb5b 	bl	800f80e <HAL_UARTEx_SetTxFifoThreshold>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800115e:	f000 f939 	bl	80013d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001162:	2100      	movs	r1, #0
 8001164:	4808      	ldr	r0, [pc, #32]	@ (8001188 <MX_UART4_Init+0x90>)
 8001166:	f00e fb90 	bl	800f88a <HAL_UARTEx_SetRxFifoThreshold>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001170:	f000 f930 	bl	80013d4 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 8001174:	4804      	ldr	r0, [pc, #16]	@ (8001188 <MX_UART4_Init+0x90>)
 8001176:	f00e fb0f 	bl	800f798 <HAL_UARTEx_EnableFifoMode>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001180:	f000 f928 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	240003d8 	.word	0x240003d8
 800118c:	40004c00 	.word	0x40004c00

08001190 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001196:	4b0d      	ldr	r3, [pc, #52]	@ (80011cc <MX_DMA_Init+0x3c>)
 8001198:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800119c:	4a0b      	ldr	r2, [pc, #44]	@ (80011cc <MX_DMA_Init+0x3c>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80011a6:	4b09      	ldr	r3, [pc, #36]	@ (80011cc <MX_DMA_Init+0x3c>)
 80011a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2100      	movs	r1, #0
 80011b8:	200b      	movs	r0, #11
 80011ba:	f003 ff5e 	bl	800507a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80011be:	200b      	movs	r0, #11
 80011c0:	f003 ff75 	bl	80050ae <HAL_NVIC_EnableIRQ>

}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	58024400 	.word	0x58024400

080011d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08c      	sub	sp, #48	@ 0x30
 80011d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d6:	f107 031c 	add.w	r3, r7, #28
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
 80011e4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011e6:	4b6b      	ldr	r3, [pc, #428]	@ (8001394 <MX_GPIO_Init+0x1c4>)
 80011e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ec:	4a69      	ldr	r2, [pc, #420]	@ (8001394 <MX_GPIO_Init+0x1c4>)
 80011ee:	f043 0310 	orr.w	r3, r3, #16
 80011f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011f6:	4b67      	ldr	r3, [pc, #412]	@ (8001394 <MX_GPIO_Init+0x1c4>)
 80011f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011fc:	f003 0310 	and.w	r3, r3, #16
 8001200:	61bb      	str	r3, [r7, #24]
 8001202:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001204:	4b63      	ldr	r3, [pc, #396]	@ (8001394 <MX_GPIO_Init+0x1c4>)
 8001206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800120a:	4a62      	ldr	r2, [pc, #392]	@ (8001394 <MX_GPIO_Init+0x1c4>)
 800120c:	f043 0320 	orr.w	r3, r3, #32
 8001210:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001214:	4b5f      	ldr	r3, [pc, #380]	@ (8001394 <MX_GPIO_Init+0x1c4>)
 8001216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800121a:	f003 0320 	and.w	r3, r3, #32
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001222:	4b5c      	ldr	r3, [pc, #368]	@ (8001394 <MX_GPIO_Init+0x1c4>)
 8001224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001228:	4a5a      	ldr	r2, [pc, #360]	@ (8001394 <MX_GPIO_Init+0x1c4>)
 800122a:	f043 0304 	orr.w	r3, r3, #4
 800122e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001232:	4b58      	ldr	r3, [pc, #352]	@ (8001394 <MX_GPIO_Init+0x1c4>)
 8001234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001238:	f003 0304 	and.w	r3, r3, #4
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001240:	4b54      	ldr	r3, [pc, #336]	@ (8001394 <MX_GPIO_Init+0x1c4>)
 8001242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001246:	4a53      	ldr	r2, [pc, #332]	@ (8001394 <MX_GPIO_Init+0x1c4>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001250:	4b50      	ldr	r3, [pc, #320]	@ (8001394 <MX_GPIO_Init+0x1c4>)
 8001252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800125e:	4b4d      	ldr	r3, [pc, #308]	@ (8001394 <MX_GPIO_Init+0x1c4>)
 8001260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001264:	4a4b      	ldr	r2, [pc, #300]	@ (8001394 <MX_GPIO_Init+0x1c4>)
 8001266:	f043 0308 	orr.w	r3, r3, #8
 800126a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800126e:	4b49      	ldr	r3, [pc, #292]	@ (8001394 <MX_GPIO_Init+0x1c4>)
 8001270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001274:	f003 0308 	and.w	r3, r3, #8
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800127c:	4b45      	ldr	r3, [pc, #276]	@ (8001394 <MX_GPIO_Init+0x1c4>)
 800127e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001282:	4a44      	ldr	r2, [pc, #272]	@ (8001394 <MX_GPIO_Init+0x1c4>)
 8001284:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001288:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800128c:	4b41      	ldr	r3, [pc, #260]	@ (8001394 <MX_GPIO_Init+0x1c4>)
 800128e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800129a:	4b3e      	ldr	r3, [pc, #248]	@ (8001394 <MX_GPIO_Init+0x1c4>)
 800129c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a0:	4a3c      	ldr	r2, [pc, #240]	@ (8001394 <MX_GPIO_Init+0x1c4>)
 80012a2:	f043 0302 	orr.w	r3, r3, #2
 80012a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012aa:	4b3a      	ldr	r3, [pc, #232]	@ (8001394 <MX_GPIO_Init+0x1c4>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80012b8:	2200      	movs	r2, #0
 80012ba:	f64f 71fd 	movw	r1, #65533	@ 0xfffd
 80012be:	4836      	ldr	r0, [pc, #216]	@ (8001398 <MX_GPIO_Init+0x1c8>)
 80012c0:	f006 ff7e 	bl	80081c0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80012c4:	2200      	movs	r2, #0
 80012c6:	f647 41ff 	movw	r1, #31999	@ 0x7cff
 80012ca:	4834      	ldr	r0, [pc, #208]	@ (800139c <MX_GPIO_Init+0x1cc>)
 80012cc:	f006 ff78 	bl	80081c0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80012d0:	2200      	movs	r2, #0
 80012d2:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 80012d6:	4832      	ldr	r0, [pc, #200]	@ (80013a0 <MX_GPIO_Init+0x1d0>)
 80012d8:	f006 ff72 	bl	80081c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80012dc:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 80012e0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e2:	2301      	movs	r3, #1
 80012e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012ee:	f107 031c 	add.w	r3, r7, #28
 80012f2:	4619      	mov	r1, r3
 80012f4:	4828      	ldr	r0, [pc, #160]	@ (8001398 <MX_GPIO_Init+0x1c8>)
 80012f6:	f006 fdb3 	bl	8007e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80012fa:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80012fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001300:	2303      	movs	r3, #3
 8001302:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001308:	f107 031c 	add.w	r3, r7, #28
 800130c:	4619      	mov	r1, r3
 800130e:	4825      	ldr	r0, [pc, #148]	@ (80013a4 <MX_GPIO_Init+0x1d4>)
 8001310:	f006 fda6 	bl	8007e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin PD11 PD12 PD13
                           PD14 PD0 PD1 PD2
                           PD3 PD4 PD5 PD6
                           PD7 */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001314:	f647 43ff 	movw	r3, #31999	@ 0x7cff
 8001318:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131a:	2301      	movs	r3, #1
 800131c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001326:	f107 031c 	add.w	r3, r7, #28
 800132a:	4619      	mov	r1, r3
 800132c:	481b      	ldr	r0, [pc, #108]	@ (800139c <MX_GPIO_Init+0x1cc>)
 800132e:	f006 fd97 	bl	8007e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001332:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001336:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001338:	2301      	movs	r3, #1
 800133a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	2300      	movs	r3, #0
 8001342:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001344:	f107 031c 	add.w	r3, r7, #28
 8001348:	4619      	mov	r1, r3
 800134a:	4815      	ldr	r0, [pc, #84]	@ (80013a0 <MX_GPIO_Init+0x1d0>)
 800134c:	f006 fd88 	bl	8007e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001350:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001354:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001356:	2302      	movs	r3, #2
 8001358:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2300      	movs	r3, #0
 8001360:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001362:	230a      	movs	r3, #10
 8001364:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	f107 031c 	add.w	r3, r7, #28
 800136a:	4619      	mov	r1, r3
 800136c:	480e      	ldr	r0, [pc, #56]	@ (80013a8 <MX_GPIO_Init+0x1d8>)
 800136e:	f006 fd77 	bl	8007e60 <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001372:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8001376:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800137a:	f002 f839 	bl	80033f0 <HAL_SYSCFG_AnalogSwitchConfig>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800137e:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8001382:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8001386:	f002 f833 	bl	80033f0 <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800138a:	bf00      	nop
 800138c:	3730      	adds	r7, #48	@ 0x30
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	58024400 	.word	0x58024400
 8001398:	58021000 	.word	0x58021000
 800139c:	58020c00 	.word	0x58020c00
 80013a0:	58020800 	.word	0x58020800
 80013a4:	58021400 	.word	0x58021400
 80013a8:	58020000 	.word	0x58020000

080013ac <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d102      	bne.n	80013c2 <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 80013bc:	4b04      	ldr	r3, [pc, #16]	@ (80013d0 <BSP_PB_Callback+0x24>)
 80013be:	2201      	movs	r2, #1
 80013c0:	601a      	str	r2, [r3, #0]
  }
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	24000224 	.word	0x24000224

080013d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d8:	b672      	cpsid	i
}
 80013da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013dc:	bf00      	nop
 80013de:	e7fd      	b.n	80013dc <Error_Handler+0x8>

080013e0 <InitPT>:

extern void Error_Handler(void);


void InitPT(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
    if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, N_ADC_CH) != HAL_OK)
 80013e4:	220d      	movs	r2, #13
 80013e6:	4905      	ldr	r1, [pc, #20]	@ (80013fc <InitPT+0x1c>)
 80013e8:	4805      	ldr	r0, [pc, #20]	@ (8001400 <InitPT+0x20>)
 80013ea:	f002 fbf5 	bl	8003bd8 <HAL_ADC_Start_DMA>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <InitPT+0x18>
    {
        Error_Handler();
 80013f4:	f7ff ffee 	bl	80013d4 <Error_Handler>
    }
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	240004bc 	.word	0x240004bc
 8001400:	24000228 	.word	0x24000228

08001404 <GetADCRaw>:

void GetADCRaw(uint16_t* buf)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	memcpy((void*)buf, (void*)adc_buffer, sizeof(uint16_t)*N_ADC_CH);
 800140c:	221a      	movs	r2, #26
 800140e:	4904      	ldr	r1, [pc, #16]	@ (8001420 <GetADCRaw+0x1c>)
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f00f fa3c 	bl	801088e <memcpy>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	240004bc 	.word	0x240004bc

08001424 <IgnitorOn>:

uint8_t fIgnitor = false;
uint8_t fIgnitorON = false;

void IgnitorOn(bool flag)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
	if (flag == true)
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d006      	beq.n	8001442 <IgnitorOn+0x1e>
	{
		HAL_GPIO_WritePin(SV_CH6_PORT, SV_CH6_GPIO, GPIO_PIN_SET);
 8001434:	2201      	movs	r2, #1
 8001436:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800143a:	4807      	ldr	r0, [pc, #28]	@ (8001458 <IgnitorOn+0x34>)
 800143c:	f006 fec0 	bl	80081c0 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(SV_CH6_PORT, SV_CH6_GPIO, GPIO_PIN_RESET);
	}
}
 8001440:	e005      	b.n	800144e <IgnitorOn+0x2a>
		HAL_GPIO_WritePin(SV_CH6_PORT, SV_CH6_GPIO, GPIO_PIN_RESET);
 8001442:	2200      	movs	r2, #0
 8001444:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001448:	4803      	ldr	r0, [pc, #12]	@ (8001458 <IgnitorOn+0x34>)
 800144a:	f006 feb9 	bl	80081c0 <HAL_GPIO_WritePin>
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	58021000 	.word	0x58021000

0800145c <IgnitorSwitching>:

void IgnitorSwitching()
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
	if (fIgnitor == true)
 8001460:	4b0f      	ldr	r3, [pc, #60]	@ (80014a0 <IgnitorSwitching+0x44>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d115      	bne.n	8001494 <IgnitorSwitching+0x38>
	{
		if (fIgnitorON == true)
 8001468:	4b0e      	ldr	r3, [pc, #56]	@ (80014a4 <IgnitorSwitching+0x48>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d103      	bne.n	8001478 <IgnitorSwitching+0x1c>
		{
			fIgnitorON = false;
 8001470:	4b0c      	ldr	r3, [pc, #48]	@ (80014a4 <IgnitorSwitching+0x48>)
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]
 8001476:	e002      	b.n	800147e <IgnitorSwitching+0x22>
		}
		else
		{
			fIgnitorON = true;
 8001478:	4b0a      	ldr	r3, [pc, #40]	@ (80014a4 <IgnitorSwitching+0x48>)
 800147a:	2201      	movs	r2, #1
 800147c:	701a      	strb	r2, [r3, #0]
		}
		IgnitorOn(fIgnitorON);
 800147e:	4b09      	ldr	r3, [pc, #36]	@ (80014a4 <IgnitorSwitching+0x48>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	bf14      	ite	ne
 8001486:	2301      	movne	r3, #1
 8001488:	2300      	moveq	r3, #0
 800148a:	b2db      	uxtb	r3, r3
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ffc9 	bl	8001424 <IgnitorOn>
	}
	else
	{
		IgnitorOn(false);
	}
}
 8001492:	e002      	b.n	800149a <IgnitorSwitching+0x3e>
		IgnitorOn(false);
 8001494:	2000      	movs	r0, #0
 8001496:	f7ff ffc5 	bl	8001424 <IgnitorOn>
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	240004d6 	.word	0x240004d6
 80014a4:	240004d7 	.word	0x240004d7

080014a8 <SVUpdate>:


void SVUpdate(uint8_t* ch)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i<MAX_SV_NUM; i++) {
 80014b0:	2300      	movs	r3, #0
 80014b2:	73fb      	strb	r3, [r7, #15]
 80014b4:	e0cb      	b.n	800164e <SVUpdate+0x1a6>
		switch(i) {
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
 80014b8:	2b09      	cmp	r3, #9
 80014ba:	f200 80c4 	bhi.w	8001646 <SVUpdate+0x19e>
 80014be:	a201      	add	r2, pc, #4	@ (adr r2, 80014c4 <SVUpdate+0x1c>)
 80014c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c4:	080014ed 	.word	0x080014ed
 80014c8:	0800150d 	.word	0x0800150d
 80014cc:	0800152f 	.word	0x0800152f
 80014d0:	08001551 	.word	0x08001551
 80014d4:	08001573 	.word	0x08001573
 80014d8:	08001599 	.word	0x08001599
 80014dc:	080015b3 	.word	0x080015b3
 80014e0:	080015d9 	.word	0x080015d9
 80014e4:	080015ff 	.word	0x080015ff
 80014e8:	08001621 	.word	0x08001621
		case 0: // SV CH1
			if (ch[0] == 0) {
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d105      	bne.n	8001500 <SVUpdate+0x58>
				HAL_GPIO_WritePin(SV_CH1_PORT, SV_CH1_GPIO, GPIO_PIN_RESET);
 80014f4:	2200      	movs	r2, #0
 80014f6:	2101      	movs	r1, #1
 80014f8:	4859      	ldr	r0, [pc, #356]	@ (8001660 <SVUpdate+0x1b8>)
 80014fa:	f006 fe61 	bl	80081c0 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH1_PORT, SV_CH1_GPIO, GPIO_PIN_SET);
			}
			break;
 80014fe:	e0a3      	b.n	8001648 <SVUpdate+0x1a0>
				HAL_GPIO_WritePin(SV_CH1_PORT, SV_CH1_GPIO, GPIO_PIN_SET);
 8001500:	2201      	movs	r2, #1
 8001502:	2101      	movs	r1, #1
 8001504:	4856      	ldr	r0, [pc, #344]	@ (8001660 <SVUpdate+0x1b8>)
 8001506:	f006 fe5b 	bl	80081c0 <HAL_GPIO_WritePin>
			break;
 800150a:	e09d      	b.n	8001648 <SVUpdate+0x1a0>
		case 1:
			if (ch[1] == 0) {
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3301      	adds	r3, #1
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d105      	bne.n	8001522 <SVUpdate+0x7a>
				HAL_GPIO_WritePin(SV_CH2_PORT, SV_CH2_GPIO, GPIO_PIN_RESET);
 8001516:	2200      	movs	r2, #0
 8001518:	2108      	movs	r1, #8
 800151a:	4851      	ldr	r0, [pc, #324]	@ (8001660 <SVUpdate+0x1b8>)
 800151c:	f006 fe50 	bl	80081c0 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH2_PORT, SV_CH2_GPIO, GPIO_PIN_SET);
			}
			break;
 8001520:	e092      	b.n	8001648 <SVUpdate+0x1a0>
				HAL_GPIO_WritePin(SV_CH2_PORT, SV_CH2_GPIO, GPIO_PIN_SET);
 8001522:	2201      	movs	r2, #1
 8001524:	2108      	movs	r1, #8
 8001526:	484e      	ldr	r0, [pc, #312]	@ (8001660 <SVUpdate+0x1b8>)
 8001528:	f006 fe4a 	bl	80081c0 <HAL_GPIO_WritePin>
			break;
 800152c:	e08c      	b.n	8001648 <SVUpdate+0x1a0>
		case 2:
			if (ch[2] == 0) {
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3302      	adds	r3, #2
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d105      	bne.n	8001544 <SVUpdate+0x9c>
				HAL_GPIO_WritePin(SV_CH3_PORT, SV_CH3_GPIO, GPIO_PIN_RESET);
 8001538:	2200      	movs	r2, #0
 800153a:	2110      	movs	r1, #16
 800153c:	4848      	ldr	r0, [pc, #288]	@ (8001660 <SVUpdate+0x1b8>)
 800153e:	f006 fe3f 	bl	80081c0 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH3_PORT, SV_CH3_GPIO, GPIO_PIN_SET);
			}
			break;
 8001542:	e081      	b.n	8001648 <SVUpdate+0x1a0>
				HAL_GPIO_WritePin(SV_CH3_PORT, SV_CH3_GPIO, GPIO_PIN_SET);
 8001544:	2201      	movs	r2, #1
 8001546:	2110      	movs	r1, #16
 8001548:	4845      	ldr	r0, [pc, #276]	@ (8001660 <SVUpdate+0x1b8>)
 800154a:	f006 fe39 	bl	80081c0 <HAL_GPIO_WritePin>
			break;
 800154e:	e07b      	b.n	8001648 <SVUpdate+0x1a0>
		case 3:
			if (ch[3] == 0) {
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3303      	adds	r3, #3
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d105      	bne.n	8001566 <SVUpdate+0xbe>
				HAL_GPIO_WritePin(SV_CH4_PORT, SV_CH4_GPIO, GPIO_PIN_RESET);
 800155a:	2200      	movs	r2, #0
 800155c:	2180      	movs	r1, #128	@ 0x80
 800155e:	4840      	ldr	r0, [pc, #256]	@ (8001660 <SVUpdate+0x1b8>)
 8001560:	f006 fe2e 	bl	80081c0 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH4_PORT, SV_CH4_GPIO, GPIO_PIN_SET);
			}
			break;
 8001564:	e070      	b.n	8001648 <SVUpdate+0x1a0>
				HAL_GPIO_WritePin(SV_CH4_PORT, SV_CH4_GPIO, GPIO_PIN_SET);
 8001566:	2201      	movs	r2, #1
 8001568:	2180      	movs	r1, #128	@ 0x80
 800156a:	483d      	ldr	r0, [pc, #244]	@ (8001660 <SVUpdate+0x1b8>)
 800156c:	f006 fe28 	bl	80081c0 <HAL_GPIO_WritePin>
			break;
 8001570:	e06a      	b.n	8001648 <SVUpdate+0x1a0>
		case 4:
			if (ch[4] == 0) { // ignitor Power
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	3304      	adds	r3, #4
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d106      	bne.n	800158a <SVUpdate+0xe2>
				HAL_GPIO_WritePin(SV_CH5_PORT, SV_CH5_GPIO, GPIO_PIN_RESET);
 800157c:	2200      	movs	r2, #0
 800157e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001582:	4837      	ldr	r0, [pc, #220]	@ (8001660 <SVUpdate+0x1b8>)
 8001584:	f006 fe1c 	bl	80081c0 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH5_PORT, SV_CH5_GPIO, GPIO_PIN_SET);
			}
			break;
 8001588:	e05e      	b.n	8001648 <SVUpdate+0x1a0>
				HAL_GPIO_WritePin(SV_CH5_PORT, SV_CH5_GPIO, GPIO_PIN_SET);
 800158a:	2201      	movs	r2, #1
 800158c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001590:	4833      	ldr	r0, [pc, #204]	@ (8001660 <SVUpdate+0x1b8>)
 8001592:	f006 fe15 	bl	80081c0 <HAL_GPIO_WritePin>
			break;
 8001596:	e057      	b.n	8001648 <SVUpdate+0x1a0>
		case 5:
			if (ch[5] == 0) { // Ignitor signal
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3305      	adds	r3, #5
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d103      	bne.n	80015aa <SVUpdate+0x102>
				//HAL_GPIO_WritePin(SV_CH6_PORT, SV_CH6_GPIO, GPIO_PIN_RESET);
				fIgnitor = false;
 80015a2:	4b30      	ldr	r3, [pc, #192]	@ (8001664 <SVUpdate+0x1bc>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	701a      	strb	r2, [r3, #0]
			}
			else {
				//HAL_GPIO_WritePin(SV_CH6_PORT, SV_CH6_GPIO, GPIO_PIN_SET);
				fIgnitor = true;
			}
			break;
 80015a8:	e04e      	b.n	8001648 <SVUpdate+0x1a0>
				fIgnitor = true;
 80015aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001664 <SVUpdate+0x1bc>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	701a      	strb	r2, [r3, #0]
			break;
 80015b0:	e04a      	b.n	8001648 <SVUpdate+0x1a0>
		case 6:
			if (ch[6] == 0) {
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	3306      	adds	r3, #6
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d106      	bne.n	80015ca <SVUpdate+0x122>
				HAL_GPIO_WritePin(SV_CH7_PORT, SV_CH7_GPIO, GPIO_PIN_RESET);
 80015bc:	2200      	movs	r2, #0
 80015be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015c2:	4827      	ldr	r0, [pc, #156]	@ (8001660 <SVUpdate+0x1b8>)
 80015c4:	f006 fdfc 	bl	80081c0 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH7_PORT, SV_CH7_GPIO, GPIO_PIN_SET);
			}
			break;
 80015c8:	e03e      	b.n	8001648 <SVUpdate+0x1a0>
				HAL_GPIO_WritePin(SV_CH7_PORT, SV_CH7_GPIO, GPIO_PIN_SET);
 80015ca:	2201      	movs	r2, #1
 80015cc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015d0:	4823      	ldr	r0, [pc, #140]	@ (8001660 <SVUpdate+0x1b8>)
 80015d2:	f006 fdf5 	bl	80081c0 <HAL_GPIO_WritePin>
			break;
 80015d6:	e037      	b.n	8001648 <SVUpdate+0x1a0>
		case 7:
			if (ch[7] == 0) {
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3307      	adds	r3, #7
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d106      	bne.n	80015f0 <SVUpdate+0x148>
				HAL_GPIO_WritePin(SV_CH8_PORT, SV_CH8_GPIO, GPIO_PIN_RESET);
 80015e2:	2200      	movs	r2, #0
 80015e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015e8:	481d      	ldr	r0, [pc, #116]	@ (8001660 <SVUpdate+0x1b8>)
 80015ea:	f006 fde9 	bl	80081c0 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH8_PORT, SV_CH8_GPIO, GPIO_PIN_SET);
			}
			break;
 80015ee:	e02b      	b.n	8001648 <SVUpdate+0x1a0>
				HAL_GPIO_WritePin(SV_CH8_PORT, SV_CH8_GPIO, GPIO_PIN_SET);
 80015f0:	2201      	movs	r2, #1
 80015f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015f6:	481a      	ldr	r0, [pc, #104]	@ (8001660 <SVUpdate+0x1b8>)
 80015f8:	f006 fde2 	bl	80081c0 <HAL_GPIO_WritePin>
			break;
 80015fc:	e024      	b.n	8001648 <SVUpdate+0x1a0>
		case 8:
			if (ch[8] == 0) {
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3308      	adds	r3, #8
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d105      	bne.n	8001614 <SVUpdate+0x16c>
				HAL_GPIO_WritePin(SV_CH9_PORT, SV_CH9_GPIO, GPIO_PIN_RESET);
 8001608:	2200      	movs	r2, #0
 800160a:	2140      	movs	r1, #64	@ 0x40
 800160c:	4816      	ldr	r0, [pc, #88]	@ (8001668 <SVUpdate+0x1c0>)
 800160e:	f006 fdd7 	bl	80081c0 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH9_PORT, SV_CH9_GPIO, GPIO_PIN_SET);
			}
			break;
 8001612:	e019      	b.n	8001648 <SVUpdate+0x1a0>
				HAL_GPIO_WritePin(SV_CH9_PORT, SV_CH9_GPIO, GPIO_PIN_SET);
 8001614:	2201      	movs	r2, #1
 8001616:	2140      	movs	r1, #64	@ 0x40
 8001618:	4813      	ldr	r0, [pc, #76]	@ (8001668 <SVUpdate+0x1c0>)
 800161a:	f006 fdd1 	bl	80081c0 <HAL_GPIO_WritePin>
			break;
 800161e:	e013      	b.n	8001648 <SVUpdate+0x1a0>
		case 9:
			if (ch[9] == 0) {
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3309      	adds	r3, #9
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d106      	bne.n	8001638 <SVUpdate+0x190>
				HAL_GPIO_WritePin(SV_CH10_PORT, SV_CH10_GPIO, GPIO_PIN_RESET);
 800162a:	2200      	movs	r2, #0
 800162c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001630:	480d      	ldr	r0, [pc, #52]	@ (8001668 <SVUpdate+0x1c0>)
 8001632:	f006 fdc5 	bl	80081c0 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH10_PORT, SV_CH10_GPIO, GPIO_PIN_SET);
			}
			break;
 8001636:	e007      	b.n	8001648 <SVUpdate+0x1a0>
				HAL_GPIO_WritePin(SV_CH10_PORT, SV_CH10_GPIO, GPIO_PIN_SET);
 8001638:	2201      	movs	r2, #1
 800163a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800163e:	480a      	ldr	r0, [pc, #40]	@ (8001668 <SVUpdate+0x1c0>)
 8001640:	f006 fdbe 	bl	80081c0 <HAL_GPIO_WritePin>
			break;
 8001644:	e000      	b.n	8001648 <SVUpdate+0x1a0>
		default:
			break;
 8001646:	bf00      	nop
	for (uint8_t i = 0; i<MAX_SV_NUM; i++) {
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	3301      	adds	r3, #1
 800164c:	73fb      	strb	r3, [r7, #15]
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	2b05      	cmp	r3, #5
 8001652:	f67f af30 	bls.w	80014b6 <SVUpdate+0xe>
		}
	}

}
 8001656:	bf00      	nop
 8001658:	bf00      	nop
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	58021000 	.word	0x58021000
 8001664:	240004d6 	.word	0x240004d6
 8001668:	58020800 	.word	0x58020800

0800166c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001672:	4b13      	ldr	r3, [pc, #76]	@ (80016c0 <HAL_MspInit+0x54>)
 8001674:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001678:	4a11      	ldr	r2, [pc, #68]	@ (80016c0 <HAL_MspInit+0x54>)
 800167a:	f043 0302 	orr.w	r3, r3, #2
 800167e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001682:	4b0f      	ldr	r3, [pc, #60]	@ (80016c0 <HAL_MspInit+0x54>)
 8001684:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8001690:	4b0b      	ldr	r3, [pc, #44]	@ (80016c0 <HAL_MspInit+0x54>)
 8001692:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001696:	4a0a      	ldr	r2, [pc, #40]	@ (80016c0 <HAL_MspInit+0x54>)
 8001698:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800169c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80016a0:	4b07      	ldr	r3, [pc, #28]	@ (80016c0 <HAL_MspInit+0x54>)
 80016a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	683b      	ldr	r3, [r7, #0]

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 80016ae:	f001 fe8f 	bl	80033d0 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 80016b2:	2002      	movs	r0, #2
 80016b4:	f001 fe78 	bl	80033a8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	58024400 	.word	0x58024400

080016c4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b0bc      	sub	sp, #240	@ 0xf0
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016cc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016dc:	f107 0318 	add.w	r3, r7, #24
 80016e0:	22c0      	movs	r2, #192	@ 0xc0
 80016e2:	2100      	movs	r1, #0
 80016e4:	4618      	mov	r0, r3
 80016e6:	f00e ffe7 	bl	80106b8 <memset>
  if(hadc->Instance==ADC1)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a67      	ldr	r2, [pc, #412]	@ (800188c <HAL_ADC_MspInit+0x1c8>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	f040 80c6 	bne.w	8001882 <HAL_ADC_MspInit+0x1be>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80016f6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80016fa:	f04f 0300 	mov.w	r3, #0
 80016fe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001702:	2304      	movs	r3, #4
 8001704:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8001706:	230a      	movs	r3, #10
 8001708:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800170a:	2302      	movs	r3, #2
 800170c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800170e:	2302      	movs	r3, #2
 8001710:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001712:	2302      	movs	r3, #2
 8001714:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001716:	23c0      	movs	r3, #192	@ 0xc0
 8001718:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800171a:	2320      	movs	r3, #32
 800171c:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001722:	2300      	movs	r3, #0
 8001724:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001728:	f107 0318 	add.w	r3, r7, #24
 800172c:	4618      	mov	r0, r3
 800172e:	f007 fde9 	bl	8009304 <HAL_RCCEx_PeriphCLKConfig>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8001738:	f7ff fe4c 	bl	80013d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800173c:	4b54      	ldr	r3, [pc, #336]	@ (8001890 <HAL_ADC_MspInit+0x1cc>)
 800173e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001742:	4a53      	ldr	r2, [pc, #332]	@ (8001890 <HAL_ADC_MspInit+0x1cc>)
 8001744:	f043 0320 	orr.w	r3, r3, #32
 8001748:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800174c:	4b50      	ldr	r3, [pc, #320]	@ (8001890 <HAL_ADC_MspInit+0x1cc>)
 800174e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001752:	f003 0320 	and.w	r3, r3, #32
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800175a:	4b4d      	ldr	r3, [pc, #308]	@ (8001890 <HAL_ADC_MspInit+0x1cc>)
 800175c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001760:	4a4b      	ldr	r2, [pc, #300]	@ (8001890 <HAL_ADC_MspInit+0x1cc>)
 8001762:	f043 0304 	orr.w	r3, r3, #4
 8001766:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800176a:	4b49      	ldr	r3, [pc, #292]	@ (8001890 <HAL_ADC_MspInit+0x1cc>)
 800176c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001778:	4b45      	ldr	r3, [pc, #276]	@ (8001890 <HAL_ADC_MspInit+0x1cc>)
 800177a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800177e:	4a44      	ldr	r2, [pc, #272]	@ (8001890 <HAL_ADC_MspInit+0x1cc>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001788:	4b41      	ldr	r3, [pc, #260]	@ (8001890 <HAL_ADC_MspInit+0x1cc>)
 800178a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001796:	4b3e      	ldr	r3, [pc, #248]	@ (8001890 <HAL_ADC_MspInit+0x1cc>)
 8001798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800179c:	4a3c      	ldr	r2, [pc, #240]	@ (8001890 <HAL_ADC_MspInit+0x1cc>)
 800179e:	f043 0320 	orr.w	r3, r3, #32
 80017a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017a6:	4b3a      	ldr	r3, [pc, #232]	@ (8001890 <HAL_ADC_MspInit+0x1cc>)
 80017a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ac:	f003 0320 	and.w	r3, r3, #32
 80017b0:	60bb      	str	r3, [r7, #8]
 80017b2:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> ADC1_INP7
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80017b4:	2333      	movs	r3, #51	@ 0x33
 80017b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ba:	2303      	movs	r3, #3
 80017bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80017ca:	4619      	mov	r1, r3
 80017cc:	4831      	ldr	r0, [pc, #196]	@ (8001894 <HAL_ADC_MspInit+0x1d0>)
 80017ce:	f006 fb47 	bl	8007e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80017d2:	23ff      	movs	r3, #255	@ 0xff
 80017d4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017d8:	2303      	movs	r3, #3
 80017da:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80017e8:	4619      	mov	r1, r3
 80017ea:	482b      	ldr	r0, [pc, #172]	@ (8001898 <HAL_ADC_MspInit+0x1d4>)
 80017ec:	f006 fb38 	bl	8007e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80017f0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80017f4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017f8:	2303      	movs	r3, #3
 80017fa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001804:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001808:	4619      	mov	r1, r3
 800180a:	4824      	ldr	r0, [pc, #144]	@ (800189c <HAL_ADC_MspInit+0x1d8>)
 800180c:	f006 fb28 	bl	8007e60 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001810:	4b23      	ldr	r3, [pc, #140]	@ (80018a0 <HAL_ADC_MspInit+0x1dc>)
 8001812:	4a24      	ldr	r2, [pc, #144]	@ (80018a4 <HAL_ADC_MspInit+0x1e0>)
 8001814:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001816:	4b22      	ldr	r3, [pc, #136]	@ (80018a0 <HAL_ADC_MspInit+0x1dc>)
 8001818:	2209      	movs	r2, #9
 800181a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800181c:	4b20      	ldr	r3, [pc, #128]	@ (80018a0 <HAL_ADC_MspInit+0x1dc>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001822:	4b1f      	ldr	r3, [pc, #124]	@ (80018a0 <HAL_ADC_MspInit+0x1dc>)
 8001824:	2200      	movs	r2, #0
 8001826:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001828:	4b1d      	ldr	r3, [pc, #116]	@ (80018a0 <HAL_ADC_MspInit+0x1dc>)
 800182a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800182e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001830:	4b1b      	ldr	r3, [pc, #108]	@ (80018a0 <HAL_ADC_MspInit+0x1dc>)
 8001832:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001836:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001838:	4b19      	ldr	r3, [pc, #100]	@ (80018a0 <HAL_ADC_MspInit+0x1dc>)
 800183a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800183e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001840:	4b17      	ldr	r3, [pc, #92]	@ (80018a0 <HAL_ADC_MspInit+0x1dc>)
 8001842:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001846:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001848:	4b15      	ldr	r3, [pc, #84]	@ (80018a0 <HAL_ADC_MspInit+0x1dc>)
 800184a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800184e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001850:	4b13      	ldr	r3, [pc, #76]	@ (80018a0 <HAL_ADC_MspInit+0x1dc>)
 8001852:	2200      	movs	r2, #0
 8001854:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001856:	4812      	ldr	r0, [pc, #72]	@ (80018a0 <HAL_ADC_MspInit+0x1dc>)
 8001858:	f003 fc56 	bl	8005108 <HAL_DMA_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <HAL_ADC_MspInit+0x1a2>
    {
      Error_Handler();
 8001862:	f7ff fdb7 	bl	80013d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a0d      	ldr	r2, [pc, #52]	@ (80018a0 <HAL_ADC_MspInit+0x1dc>)
 800186a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800186c:	4a0c      	ldr	r2, [pc, #48]	@ (80018a0 <HAL_ADC_MspInit+0x1dc>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	2100      	movs	r1, #0
 8001876:	2012      	movs	r0, #18
 8001878:	f003 fbff 	bl	800507a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800187c:	2012      	movs	r0, #18
 800187e:	f003 fc16 	bl	80050ae <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001882:	bf00      	nop
 8001884:	37f0      	adds	r7, #240	@ 0xf0
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40022000 	.word	0x40022000
 8001890:	58024400 	.word	0x58024400
 8001894:	58020800 	.word	0x58020800
 8001898:	58020000 	.word	0x58020000
 800189c:	58021400 	.word	0x58021400
 80018a0:	2400028c 	.word	0x2400028c
 80018a4:	40020010 	.word	0x40020010

080018a8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b0bc      	sub	sp, #240	@ 0xf0
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018c0:	f107 0318 	add.w	r3, r7, #24
 80018c4:	22c0      	movs	r2, #192	@ 0xc0
 80018c6:	2100      	movs	r1, #0
 80018c8:	4618      	mov	r0, r3
 80018ca:	f00e fef5 	bl	80106b8 <memset>
  if(hspi->Instance==SPI1)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a3c      	ldr	r2, [pc, #240]	@ (80019c4 <HAL_SPI_MspInit+0x11c>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d171      	bne.n	80019bc <HAL_SPI_MspInit+0x114>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80018d8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018dc:	f04f 0300 	mov.w	r3, #0
 80018e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018e8:	f107 0318 	add.w	r3, r7, #24
 80018ec:	4618      	mov	r0, r3
 80018ee:	f007 fd09 	bl	8009304 <HAL_RCCEx_PeriphCLKConfig>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80018f8:	f7ff fd6c 	bl	80013d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018fc:	4b32      	ldr	r3, [pc, #200]	@ (80019c8 <HAL_SPI_MspInit+0x120>)
 80018fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001902:	4a31      	ldr	r2, [pc, #196]	@ (80019c8 <HAL_SPI_MspInit+0x120>)
 8001904:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001908:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800190c:	4b2e      	ldr	r3, [pc, #184]	@ (80019c8 <HAL_SPI_MspInit+0x120>)
 800190e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001912:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800191a:	4b2b      	ldr	r3, [pc, #172]	@ (80019c8 <HAL_SPI_MspInit+0x120>)
 800191c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001920:	4a29      	ldr	r2, [pc, #164]	@ (80019c8 <HAL_SPI_MspInit+0x120>)
 8001922:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001926:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800192a:	4b27      	ldr	r3, [pc, #156]	@ (80019c8 <HAL_SPI_MspInit+0x120>)
 800192c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001938:	4b23      	ldr	r3, [pc, #140]	@ (80019c8 <HAL_SPI_MspInit+0x120>)
 800193a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800193e:	4a22      	ldr	r2, [pc, #136]	@ (80019c8 <HAL_SPI_MspInit+0x120>)
 8001940:	f043 0302 	orr.w	r3, r3, #2
 8001944:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001948:	4b1f      	ldr	r3, [pc, #124]	@ (80019c8 <HAL_SPI_MspInit+0x120>)
 800194a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001956:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800195a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195e:	2302      	movs	r3, #2
 8001960:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196a:	2300      	movs	r3, #0
 800196c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001970:	2305      	movs	r3, #5
 8001972:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001976:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800197a:	4619      	mov	r1, r3
 800197c:	4813      	ldr	r0, [pc, #76]	@ (80019cc <HAL_SPI_MspInit+0x124>)
 800197e:	f006 fa6f 	bl	8007e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001982:	2320      	movs	r3, #32
 8001984:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	2302      	movs	r3, #2
 800198a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001994:	2300      	movs	r3, #0
 8001996:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800199a:	2305      	movs	r3, #5
 800199c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80019a4:	4619      	mov	r1, r3
 80019a6:	480a      	ldr	r0, [pc, #40]	@ (80019d0 <HAL_SPI_MspInit+0x128>)
 80019a8:	f006 fa5a 	bl	8007e60 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80019ac:	2200      	movs	r2, #0
 80019ae:	2100      	movs	r1, #0
 80019b0:	2023      	movs	r0, #35	@ 0x23
 80019b2:	f003 fb62 	bl	800507a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80019b6:	2023      	movs	r0, #35	@ 0x23
 80019b8:	f003 fb79 	bl	80050ae <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80019bc:	bf00      	nop
 80019be:	37f0      	adds	r7, #240	@ 0xf0
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40013000 	.word	0x40013000
 80019c8:	58024400 	.word	0x58024400
 80019cc:	58021800 	.word	0x58021800
 80019d0:	58020400 	.word	0x58020400

080019d4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019e4:	d116      	bne.n	8001a14 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019e6:	4b0d      	ldr	r3, [pc, #52]	@ (8001a1c <HAL_TIM_Base_MspInit+0x48>)
 80019e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019ec:	4a0b      	ldr	r2, [pc, #44]	@ (8001a1c <HAL_TIM_Base_MspInit+0x48>)
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80019f6:	4b09      	ldr	r3, [pc, #36]	@ (8001a1c <HAL_TIM_Base_MspInit+0x48>)
 80019f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a04:	2200      	movs	r2, #0
 8001a06:	2100      	movs	r1, #0
 8001a08:	201c      	movs	r0, #28
 8001a0a:	f003 fb36 	bl	800507a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a0e:	201c      	movs	r0, #28
 8001a10:	f003 fb4d 	bl	80050ae <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001a14:	bf00      	nop
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	58024400 	.word	0x58024400

08001a20 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b0ba      	sub	sp, #232	@ 0xe8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a38:	f107 0310 	add.w	r3, r7, #16
 8001a3c:	22c0      	movs	r2, #192	@ 0xc0
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f00e fe39 	bl	80106b8 <memset>
  if(huart->Instance==UART4)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a2b      	ldr	r2, [pc, #172]	@ (8001af8 <HAL_UART_MspInit+0xd8>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d14e      	bne.n	8001aee <HAL_UART_MspInit+0xce>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001a50:	f04f 0202 	mov.w	r2, #2
 8001a54:	f04f 0300 	mov.w	r3, #0
 8001a58:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a62:	f107 0310 	add.w	r3, r7, #16
 8001a66:	4618      	mov	r0, r3
 8001a68:	f007 fc4c 	bl	8009304 <HAL_RCCEx_PeriphCLKConfig>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001a72:	f7ff fcaf 	bl	80013d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001a76:	4b21      	ldr	r3, [pc, #132]	@ (8001afc <HAL_UART_MspInit+0xdc>)
 8001a78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a7c:	4a1f      	ldr	r2, [pc, #124]	@ (8001afc <HAL_UART_MspInit+0xdc>)
 8001a7e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001a82:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a86:	4b1d      	ldr	r3, [pc, #116]	@ (8001afc <HAL_UART_MspInit+0xdc>)
 8001a88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a8c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a94:	4b19      	ldr	r3, [pc, #100]	@ (8001afc <HAL_UART_MspInit+0xdc>)
 8001a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a9a:	4a18      	ldr	r2, [pc, #96]	@ (8001afc <HAL_UART_MspInit+0xdc>)
 8001a9c:	f043 0304 	orr.w	r3, r3, #4
 8001aa0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001aa4:	4b15      	ldr	r3, [pc, #84]	@ (8001afc <HAL_UART_MspInit+0xdc>)
 8001aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ab2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001ab6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aba:	2302      	movs	r3, #2
 8001abc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001acc:	2308      	movs	r3, #8
 8001ace:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4809      	ldr	r0, [pc, #36]	@ (8001b00 <HAL_UART_MspInit+0xe0>)
 8001ada:	f006 f9c1 	bl	8007e60 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	2034      	movs	r0, #52	@ 0x34
 8001ae4:	f003 fac9 	bl	800507a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001ae8:	2034      	movs	r0, #52	@ 0x34
 8001aea:	f003 fae0 	bl	80050ae <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 8001aee:	bf00      	nop
 8001af0:	37e8      	adds	r7, #232	@ 0xe8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40004c00 	.word	0x40004c00
 8001afc:	58024400 	.word	0x58024400
 8001b00:	58020800 	.word	0x58020800

08001b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b08:	bf00      	nop
 8001b0a:	e7fd      	b.n	8001b08 <NMI_Handler+0x4>

08001b0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b10:	bf00      	nop
 8001b12:	e7fd      	b.n	8001b10 <HardFault_Handler+0x4>

08001b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b18:	bf00      	nop
 8001b1a:	e7fd      	b.n	8001b18 <MemManage_Handler+0x4>

08001b1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b20:	bf00      	nop
 8001b22:	e7fd      	b.n	8001b20 <BusFault_Handler+0x4>

08001b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b28:	bf00      	nop
 8001b2a:	e7fd      	b.n	8001b28 <UsageFault_Handler+0x4>

08001b2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b5a:	f001 fbf9 	bl	8003350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b68:	4802      	ldr	r0, [pc, #8]	@ (8001b74 <DMA1_Stream0_IRQHandler+0x10>)
 8001b6a:	f004 fdf7 	bl	800675c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	2400028c 	.word	0x2400028c

08001b78 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001b7c:	4802      	ldr	r0, [pc, #8]	@ (8001b88 <ADC_IRQHandler+0x10>)
 8001b7e:	f002 f8ef 	bl	8003d60 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	24000228 	.word	0x24000228

08001b8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b90:	4802      	ldr	r0, [pc, #8]	@ (8001b9c <TIM2_IRQHandler+0x10>)
 8001b92:	f00a fea9 	bl	800c8e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	2400038c 	.word	0x2400038c

08001ba0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001ba4:	4802      	ldr	r0, [pc, #8]	@ (8001bb0 <SPI1_IRQHandler+0x10>)
 8001ba6:	f00a fa79 	bl	800c09c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	24000304 	.word	0x24000304

08001bb4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001bb8:	2000      	movs	r0, #0
 8001bba:	f001 fa67 	bl	800308c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001bc8:	4802      	ldr	r0, [pc, #8]	@ (8001bd4 <UART4_IRQHandler+0x10>)
 8001bca:	f00b fbc9 	bl	800d360 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	240003d8 	.word	0x240003d8

08001bd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return 1;
 8001bdc:	2301      	movs	r3, #1
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <_kill>:

int _kill(int pid, int sig)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bf2:	f00e fe1f 	bl	8010834 <__errno>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2216      	movs	r2, #22
 8001bfa:	601a      	str	r2, [r3, #0]
  return -1;
 8001bfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <_exit>:

void _exit (int status)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c10:	f04f 31ff 	mov.w	r1, #4294967295
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f7ff ffe7 	bl	8001be8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c1a:	bf00      	nop
 8001c1c:	e7fd      	b.n	8001c1a <_exit+0x12>

08001c1e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b086      	sub	sp, #24
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	60f8      	str	r0, [r7, #12]
 8001c26:	60b9      	str	r1, [r7, #8]
 8001c28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	e00a      	b.n	8001c46 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c30:	f3af 8000 	nop.w
 8001c34:	4601      	mov	r1, r0
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	1c5a      	adds	r2, r3, #1
 8001c3a:	60ba      	str	r2, [r7, #8]
 8001c3c:	b2ca      	uxtb	r2, r1
 8001c3e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	3301      	adds	r3, #1
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	dbf0      	blt.n	8001c30 <_read+0x12>
  }

  return len;
 8001c4e:	687b      	ldr	r3, [r7, #4]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	e009      	b.n	8001c7e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	1c5a      	adds	r2, r3, #1
 8001c6e:	60ba      	str	r2, [r7, #8]
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f001 fa7e 	bl	8003174 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	dbf1      	blt.n	8001c6a <_write+0x12>
  }
  return len;
 8001c86:	687b      	ldr	r3, [r7, #4]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <_close>:

int _close(int file)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cb8:	605a      	str	r2, [r3, #4]
  return 0;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <_isatty>:

int _isatty(int file)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cd0:	2301      	movs	r3, #1
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b085      	sub	sp, #20
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	60f8      	str	r0, [r7, #12]
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d00:	4a14      	ldr	r2, [pc, #80]	@ (8001d54 <_sbrk+0x5c>)
 8001d02:	4b15      	ldr	r3, [pc, #84]	@ (8001d58 <_sbrk+0x60>)
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d0c:	4b13      	ldr	r3, [pc, #76]	@ (8001d5c <_sbrk+0x64>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d102      	bne.n	8001d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d14:	4b11      	ldr	r3, [pc, #68]	@ (8001d5c <_sbrk+0x64>)
 8001d16:	4a12      	ldr	r2, [pc, #72]	@ (8001d60 <_sbrk+0x68>)
 8001d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d1a:	4b10      	ldr	r3, [pc, #64]	@ (8001d5c <_sbrk+0x64>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d207      	bcs.n	8001d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d28:	f00e fd84 	bl	8010834 <__errno>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	220c      	movs	r2, #12
 8001d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d32:	f04f 33ff 	mov.w	r3, #4294967295
 8001d36:	e009      	b.n	8001d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d38:	4b08      	ldr	r3, [pc, #32]	@ (8001d5c <_sbrk+0x64>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d3e:	4b07      	ldr	r3, [pc, #28]	@ (8001d5c <_sbrk+0x64>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	4a05      	ldr	r2, [pc, #20]	@ (8001d5c <_sbrk+0x64>)
 8001d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	24080000 	.word	0x24080000
 8001d58:	00000400 	.word	0x00000400
 8001d5c:	240004d8 	.word	0x240004d8
 8001d60:	24000808 	.word	0x24000808

08001d64 <MAX31855_CS_Enable>:

extern SPI_HandleTypeDef hspi1; // SPI1 핸들러 외부 선언

// CS 핀을 Low로 설정 (SPI 통신 시작)
void MAX31855_CS_Enable(uint8_t ch)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
	switch(ch) {
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	2b0b      	cmp	r3, #11
 8001d72:	f200 8329 	bhi.w	80023c8 <MAX31855_CS_Enable+0x664>
 8001d76:	a201      	add	r2, pc, #4	@ (adr r2, 8001d7c <MAX31855_CS_Enable+0x18>)
 8001d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d7c:	08001dad 	.word	0x08001dad
 8001d80:	08001e2f 	.word	0x08001e2f
 8001d84:	08001eb1 	.word	0x08001eb1
 8001d88:	08001f33 	.word	0x08001f33
 8001d8c:	08001fb5 	.word	0x08001fb5
 8001d90:	08002037 	.word	0x08002037
 8001d94:	080020bd 	.word	0x080020bd
 8001d98:	0800213f 	.word	0x0800213f
 8001d9c:	080021c1 	.word	0x080021c1
 8001da0:	08002243 	.word	0x08002243
 8001da4:	080022c5 	.word	0x080022c5
 8001da8:	08002347 	.word	0x08002347
	case TC_CH1:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_RESET);
 8001dac:	2200      	movs	r2, #0
 8001dae:	2101      	movs	r1, #1
 8001db0:	48c1      	ldr	r0, [pc, #772]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001db2:	f006 fa05 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001db6:	2201      	movs	r2, #1
 8001db8:	2102      	movs	r1, #2
 8001dba:	48bf      	ldr	r0, [pc, #764]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001dbc:	f006 fa00 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	2104      	movs	r1, #4
 8001dc4:	48bc      	ldr	r0, [pc, #752]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001dc6:	f006 f9fb 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001dca:	2201      	movs	r2, #1
 8001dcc:	2108      	movs	r1, #8
 8001dce:	48ba      	ldr	r0, [pc, #744]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001dd0:	f006 f9f6 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	2110      	movs	r1, #16
 8001dd8:	48b7      	ldr	r0, [pc, #732]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001dda:	f006 f9f1 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001dde:	2201      	movs	r2, #1
 8001de0:	2120      	movs	r1, #32
 8001de2:	48b5      	ldr	r0, [pc, #724]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001de4:	f006 f9ec 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001de8:	2201      	movs	r2, #1
 8001dea:	2140      	movs	r1, #64	@ 0x40
 8001dec:	48b2      	ldr	r0, [pc, #712]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001dee:	f006 f9e7 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001df2:	2201      	movs	r2, #1
 8001df4:	2180      	movs	r1, #128	@ 0x80
 8001df6:	48b0      	ldr	r0, [pc, #704]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001df8:	f006 f9e2 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e02:	48ad      	ldr	r0, [pc, #692]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001e04:	f006 f9dc 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e0e:	48aa      	ldr	r0, [pc, #680]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001e10:	f006 f9d6 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001e14:	2201      	movs	r2, #1
 8001e16:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e1a:	48a7      	ldr	r0, [pc, #668]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001e1c:	f006 f9d0 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001e20:	2201      	movs	r2, #1
 8001e22:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001e26:	48a4      	ldr	r0, [pc, #656]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001e28:	f006 f9ca 	bl	80081c0 <HAL_GPIO_WritePin>
		break;
 8001e2c:	e2cd      	b.n	80023ca <MAX31855_CS_Enable+0x666>
	case TC_CH2:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001e2e:	2201      	movs	r2, #1
 8001e30:	2101      	movs	r1, #1
 8001e32:	48a1      	ldr	r0, [pc, #644]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001e34:	f006 f9c4 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_RESET);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2102      	movs	r1, #2
 8001e3c:	489e      	ldr	r0, [pc, #632]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001e3e:	f006 f9bf 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001e42:	2201      	movs	r2, #1
 8001e44:	2104      	movs	r1, #4
 8001e46:	489c      	ldr	r0, [pc, #624]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001e48:	f006 f9ba 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	2108      	movs	r1, #8
 8001e50:	4899      	ldr	r0, [pc, #612]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001e52:	f006 f9b5 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001e56:	2201      	movs	r2, #1
 8001e58:	2110      	movs	r1, #16
 8001e5a:	4897      	ldr	r0, [pc, #604]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001e5c:	f006 f9b0 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001e60:	2201      	movs	r2, #1
 8001e62:	2120      	movs	r1, #32
 8001e64:	4894      	ldr	r0, [pc, #592]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001e66:	f006 f9ab 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	2140      	movs	r1, #64	@ 0x40
 8001e6e:	4892      	ldr	r0, [pc, #584]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001e70:	f006 f9a6 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001e74:	2201      	movs	r2, #1
 8001e76:	2180      	movs	r1, #128	@ 0x80
 8001e78:	488f      	ldr	r0, [pc, #572]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001e7a:	f006 f9a1 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e84:	488c      	ldr	r0, [pc, #560]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001e86:	f006 f99b 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e90:	4889      	ldr	r0, [pc, #548]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001e92:	f006 f995 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001e96:	2201      	movs	r2, #1
 8001e98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e9c:	4886      	ldr	r0, [pc, #536]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001e9e:	f006 f98f 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001ea8:	4883      	ldr	r0, [pc, #524]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001eaa:	f006 f989 	bl	80081c0 <HAL_GPIO_WritePin>
		break;
 8001eae:	e28c      	b.n	80023ca <MAX31855_CS_Enable+0x666>
	case TC_CH3:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	4880      	ldr	r0, [pc, #512]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001eb6:	f006 f983 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001eba:	2201      	movs	r2, #1
 8001ebc:	2102      	movs	r1, #2
 8001ebe:	487e      	ldr	r0, [pc, #504]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001ec0:	f006 f97e 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_RESET);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	2104      	movs	r1, #4
 8001ec8:	487b      	ldr	r0, [pc, #492]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001eca:	f006 f979 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001ece:	2201      	movs	r2, #1
 8001ed0:	2108      	movs	r1, #8
 8001ed2:	4879      	ldr	r0, [pc, #484]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001ed4:	f006 f974 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001ed8:	2201      	movs	r2, #1
 8001eda:	2110      	movs	r1, #16
 8001edc:	4876      	ldr	r0, [pc, #472]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001ede:	f006 f96f 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	2120      	movs	r1, #32
 8001ee6:	4874      	ldr	r0, [pc, #464]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001ee8:	f006 f96a 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001eec:	2201      	movs	r2, #1
 8001eee:	2140      	movs	r1, #64	@ 0x40
 8001ef0:	4871      	ldr	r0, [pc, #452]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001ef2:	f006 f965 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	2180      	movs	r1, #128	@ 0x80
 8001efa:	486f      	ldr	r0, [pc, #444]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001efc:	f006 f960 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001f00:	2201      	movs	r2, #1
 8001f02:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f06:	486c      	ldr	r0, [pc, #432]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001f08:	f006 f95a 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f12:	4869      	ldr	r0, [pc, #420]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001f14:	f006 f954 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f1e:	4866      	ldr	r0, [pc, #408]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001f20:	f006 f94e 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001f24:	2201      	movs	r2, #1
 8001f26:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f2a:	4863      	ldr	r0, [pc, #396]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001f2c:	f006 f948 	bl	80081c0 <HAL_GPIO_WritePin>
		break;
 8001f30:	e24b      	b.n	80023ca <MAX31855_CS_Enable+0x666>
	case TC_CH4:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001f32:	2201      	movs	r2, #1
 8001f34:	2101      	movs	r1, #1
 8001f36:	4860      	ldr	r0, [pc, #384]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001f38:	f006 f942 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	2102      	movs	r1, #2
 8001f40:	485d      	ldr	r0, [pc, #372]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001f42:	f006 f93d 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001f46:	2201      	movs	r2, #1
 8001f48:	2104      	movs	r1, #4
 8001f4a:	485b      	ldr	r0, [pc, #364]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001f4c:	f006 f938 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_RESET);
 8001f50:	2200      	movs	r2, #0
 8001f52:	2108      	movs	r1, #8
 8001f54:	4858      	ldr	r0, [pc, #352]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001f56:	f006 f933 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	2110      	movs	r1, #16
 8001f5e:	4856      	ldr	r0, [pc, #344]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001f60:	f006 f92e 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001f64:	2201      	movs	r2, #1
 8001f66:	2120      	movs	r1, #32
 8001f68:	4853      	ldr	r0, [pc, #332]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001f6a:	f006 f929 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001f6e:	2201      	movs	r2, #1
 8001f70:	2140      	movs	r1, #64	@ 0x40
 8001f72:	4851      	ldr	r0, [pc, #324]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001f74:	f006 f924 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001f78:	2201      	movs	r2, #1
 8001f7a:	2180      	movs	r1, #128	@ 0x80
 8001f7c:	484e      	ldr	r0, [pc, #312]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001f7e:	f006 f91f 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001f82:	2201      	movs	r2, #1
 8001f84:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f88:	484b      	ldr	r0, [pc, #300]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001f8a:	f006 f919 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f94:	4848      	ldr	r0, [pc, #288]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001f96:	f006 f913 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fa0:	4845      	ldr	r0, [pc, #276]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001fa2:	f006 f90d 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001fac:	4842      	ldr	r0, [pc, #264]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001fae:	f006 f907 	bl	80081c0 <HAL_GPIO_WritePin>
		break;
 8001fb2:	e20a      	b.n	80023ca <MAX31855_CS_Enable+0x666>
	case TC_CH5:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	483f      	ldr	r0, [pc, #252]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001fba:	f006 f901 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	2102      	movs	r1, #2
 8001fc2:	483d      	ldr	r0, [pc, #244]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001fc4:	f006 f8fc 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001fc8:	2201      	movs	r2, #1
 8001fca:	2104      	movs	r1, #4
 8001fcc:	483a      	ldr	r0, [pc, #232]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001fce:	f006 f8f7 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	2108      	movs	r1, #8
 8001fd6:	4838      	ldr	r0, [pc, #224]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001fd8:	f006 f8f2 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_RESET);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2110      	movs	r1, #16
 8001fe0:	4835      	ldr	r0, [pc, #212]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001fe2:	f006 f8ed 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	2120      	movs	r1, #32
 8001fea:	4833      	ldr	r0, [pc, #204]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001fec:	f006 f8e8 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	2140      	movs	r1, #64	@ 0x40
 8001ff4:	4830      	ldr	r0, [pc, #192]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8001ff6:	f006 f8e3 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	2180      	movs	r1, #128	@ 0x80
 8001ffe:	482e      	ldr	r0, [pc, #184]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8002000:	f006 f8de 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002004:	2201      	movs	r2, #1
 8002006:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800200a:	482b      	ldr	r0, [pc, #172]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 800200c:	f006 f8d8 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002010:	2201      	movs	r2, #1
 8002012:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002016:	4828      	ldr	r0, [pc, #160]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8002018:	f006 f8d2 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 800201c:	2201      	movs	r2, #1
 800201e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002022:	4825      	ldr	r0, [pc, #148]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8002024:	f006 f8cc 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002028:	2201      	movs	r2, #1
 800202a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800202e:	4822      	ldr	r0, [pc, #136]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8002030:	f006 f8c6 	bl	80081c0 <HAL_GPIO_WritePin>
		break;
 8002034:	e1c9      	b.n	80023ca <MAX31855_CS_Enable+0x666>
	case TC_CH6:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8002036:	2201      	movs	r2, #1
 8002038:	2101      	movs	r1, #1
 800203a:	481f      	ldr	r0, [pc, #124]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 800203c:	f006 f8c0 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8002040:	2201      	movs	r2, #1
 8002042:	2102      	movs	r1, #2
 8002044:	481c      	ldr	r0, [pc, #112]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8002046:	f006 f8bb 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 800204a:	2201      	movs	r2, #1
 800204c:	2104      	movs	r1, #4
 800204e:	481a      	ldr	r0, [pc, #104]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8002050:	f006 f8b6 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8002054:	2201      	movs	r2, #1
 8002056:	2108      	movs	r1, #8
 8002058:	4817      	ldr	r0, [pc, #92]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 800205a:	f006 f8b1 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 800205e:	2201      	movs	r2, #1
 8002060:	2110      	movs	r1, #16
 8002062:	4815      	ldr	r0, [pc, #84]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8002064:	f006 f8ac 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_RESET);
 8002068:	2200      	movs	r2, #0
 800206a:	2120      	movs	r1, #32
 800206c:	4812      	ldr	r0, [pc, #72]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 800206e:	f006 f8a7 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002072:	2201      	movs	r2, #1
 8002074:	2140      	movs	r1, #64	@ 0x40
 8002076:	4810      	ldr	r0, [pc, #64]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8002078:	f006 f8a2 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 800207c:	2201      	movs	r2, #1
 800207e:	2180      	movs	r1, #128	@ 0x80
 8002080:	480d      	ldr	r0, [pc, #52]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 8002082:	f006 f89d 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002086:	2201      	movs	r2, #1
 8002088:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800208c:	480a      	ldr	r0, [pc, #40]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 800208e:	f006 f897 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002092:	2201      	movs	r2, #1
 8002094:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002098:	4807      	ldr	r0, [pc, #28]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 800209a:	f006 f891 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 800209e:	2201      	movs	r2, #1
 80020a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020a4:	4804      	ldr	r0, [pc, #16]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 80020a6:	f006 f88b 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80020aa:	2201      	movs	r2, #1
 80020ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80020b0:	4801      	ldr	r0, [pc, #4]	@ (80020b8 <MAX31855_CS_Enable+0x354>)
 80020b2:	f006 f885 	bl	80081c0 <HAL_GPIO_WritePin>
		break;
 80020b6:	e188      	b.n	80023ca <MAX31855_CS_Enable+0x666>
 80020b8:	58020c00 	.word	0x58020c00
	case TC_CH7:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80020bc:	2201      	movs	r2, #1
 80020be:	2101      	movs	r1, #1
 80020c0:	48c4      	ldr	r0, [pc, #784]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 80020c2:	f006 f87d 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80020c6:	2201      	movs	r2, #1
 80020c8:	2102      	movs	r1, #2
 80020ca:	48c2      	ldr	r0, [pc, #776]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 80020cc:	f006 f878 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80020d0:	2201      	movs	r2, #1
 80020d2:	2104      	movs	r1, #4
 80020d4:	48bf      	ldr	r0, [pc, #764]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 80020d6:	f006 f873 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80020da:	2201      	movs	r2, #1
 80020dc:	2108      	movs	r1, #8
 80020de:	48bd      	ldr	r0, [pc, #756]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 80020e0:	f006 f86e 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80020e4:	2201      	movs	r2, #1
 80020e6:	2110      	movs	r1, #16
 80020e8:	48ba      	ldr	r0, [pc, #744]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 80020ea:	f006 f869 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80020ee:	2201      	movs	r2, #1
 80020f0:	2120      	movs	r1, #32
 80020f2:	48b8      	ldr	r0, [pc, #736]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 80020f4:	f006 f864 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_RESET);
 80020f8:	2200      	movs	r2, #0
 80020fa:	2140      	movs	r1, #64	@ 0x40
 80020fc:	48b5      	ldr	r0, [pc, #724]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 80020fe:	f006 f85f 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8002102:	2201      	movs	r2, #1
 8002104:	2180      	movs	r1, #128	@ 0x80
 8002106:	48b3      	ldr	r0, [pc, #716]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 8002108:	f006 f85a 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 800210c:	2201      	movs	r2, #1
 800210e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002112:	48b0      	ldr	r0, [pc, #704]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 8002114:	f006 f854 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002118:	2201      	movs	r2, #1
 800211a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800211e:	48ad      	ldr	r0, [pc, #692]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 8002120:	f006 f84e 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8002124:	2201      	movs	r2, #1
 8002126:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800212a:	48aa      	ldr	r0, [pc, #680]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 800212c:	f006 f848 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002130:	2201      	movs	r2, #1
 8002132:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002136:	48a7      	ldr	r0, [pc, #668]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 8002138:	f006 f842 	bl	80081c0 <HAL_GPIO_WritePin>
		break;
 800213c:	e145      	b.n	80023ca <MAX31855_CS_Enable+0x666>
	case TC_CH8:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 800213e:	2201      	movs	r2, #1
 8002140:	2101      	movs	r1, #1
 8002142:	48a4      	ldr	r0, [pc, #656]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 8002144:	f006 f83c 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8002148:	2201      	movs	r2, #1
 800214a:	2102      	movs	r1, #2
 800214c:	48a1      	ldr	r0, [pc, #644]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 800214e:	f006 f837 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8002152:	2201      	movs	r2, #1
 8002154:	2104      	movs	r1, #4
 8002156:	489f      	ldr	r0, [pc, #636]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 8002158:	f006 f832 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 800215c:	2201      	movs	r2, #1
 800215e:	2108      	movs	r1, #8
 8002160:	489c      	ldr	r0, [pc, #624]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 8002162:	f006 f82d 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8002166:	2201      	movs	r2, #1
 8002168:	2110      	movs	r1, #16
 800216a:	489a      	ldr	r0, [pc, #616]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 800216c:	f006 f828 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8002170:	2201      	movs	r2, #1
 8002172:	2120      	movs	r1, #32
 8002174:	4897      	ldr	r0, [pc, #604]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 8002176:	f006 f823 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 800217a:	2201      	movs	r2, #1
 800217c:	2140      	movs	r1, #64	@ 0x40
 800217e:	4895      	ldr	r0, [pc, #596]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 8002180:	f006 f81e 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_RESET);
 8002184:	2200      	movs	r2, #0
 8002186:	2180      	movs	r1, #128	@ 0x80
 8002188:	4892      	ldr	r0, [pc, #584]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 800218a:	f006 f819 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 800218e:	2201      	movs	r2, #1
 8002190:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002194:	488f      	ldr	r0, [pc, #572]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 8002196:	f006 f813 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 800219a:	2201      	movs	r2, #1
 800219c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80021a0:	488c      	ldr	r0, [pc, #560]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 80021a2:	f006 f80d 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 80021a6:	2201      	movs	r2, #1
 80021a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021ac:	4889      	ldr	r0, [pc, #548]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 80021ae:	f006 f807 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80021b2:	2201      	movs	r2, #1
 80021b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80021b8:	4886      	ldr	r0, [pc, #536]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 80021ba:	f006 f801 	bl	80081c0 <HAL_GPIO_WritePin>
		break;
 80021be:	e104      	b.n	80023ca <MAX31855_CS_Enable+0x666>
	case TC_CH9:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80021c0:	2201      	movs	r2, #1
 80021c2:	2101      	movs	r1, #1
 80021c4:	4883      	ldr	r0, [pc, #524]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 80021c6:	f005 fffb 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80021ca:	2201      	movs	r2, #1
 80021cc:	2102      	movs	r1, #2
 80021ce:	4881      	ldr	r0, [pc, #516]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 80021d0:	f005 fff6 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80021d4:	2201      	movs	r2, #1
 80021d6:	2104      	movs	r1, #4
 80021d8:	487e      	ldr	r0, [pc, #504]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 80021da:	f005 fff1 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80021de:	2201      	movs	r2, #1
 80021e0:	2108      	movs	r1, #8
 80021e2:	487c      	ldr	r0, [pc, #496]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 80021e4:	f005 ffec 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80021e8:	2201      	movs	r2, #1
 80021ea:	2110      	movs	r1, #16
 80021ec:	4879      	ldr	r0, [pc, #484]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 80021ee:	f005 ffe7 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80021f2:	2201      	movs	r2, #1
 80021f4:	2120      	movs	r1, #32
 80021f6:	4877      	ldr	r0, [pc, #476]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 80021f8:	f005 ffe2 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 80021fc:	2201      	movs	r2, #1
 80021fe:	2140      	movs	r1, #64	@ 0x40
 8002200:	4874      	ldr	r0, [pc, #464]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 8002202:	f005 ffdd 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8002206:	2201      	movs	r2, #1
 8002208:	2180      	movs	r1, #128	@ 0x80
 800220a:	4872      	ldr	r0, [pc, #456]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 800220c:	f005 ffd8 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_RESET);
 8002210:	2200      	movs	r2, #0
 8002212:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002216:	486f      	ldr	r0, [pc, #444]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 8002218:	f005 ffd2 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 800221c:	2201      	movs	r2, #1
 800221e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002222:	486c      	ldr	r0, [pc, #432]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 8002224:	f005 ffcc 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8002228:	2201      	movs	r2, #1
 800222a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800222e:	4869      	ldr	r0, [pc, #420]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 8002230:	f005 ffc6 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002234:	2201      	movs	r2, #1
 8002236:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800223a:	4866      	ldr	r0, [pc, #408]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 800223c:	f005 ffc0 	bl	80081c0 <HAL_GPIO_WritePin>
		break;
 8002240:	e0c3      	b.n	80023ca <MAX31855_CS_Enable+0x666>
	case TC_CH10:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8002242:	2201      	movs	r2, #1
 8002244:	2101      	movs	r1, #1
 8002246:	4863      	ldr	r0, [pc, #396]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 8002248:	f005 ffba 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 800224c:	2201      	movs	r2, #1
 800224e:	2102      	movs	r1, #2
 8002250:	4860      	ldr	r0, [pc, #384]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 8002252:	f005 ffb5 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8002256:	2201      	movs	r2, #1
 8002258:	2104      	movs	r1, #4
 800225a:	485e      	ldr	r0, [pc, #376]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 800225c:	f005 ffb0 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8002260:	2201      	movs	r2, #1
 8002262:	2108      	movs	r1, #8
 8002264:	485b      	ldr	r0, [pc, #364]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 8002266:	f005 ffab 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 800226a:	2201      	movs	r2, #1
 800226c:	2110      	movs	r1, #16
 800226e:	4859      	ldr	r0, [pc, #356]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 8002270:	f005 ffa6 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8002274:	2201      	movs	r2, #1
 8002276:	2120      	movs	r1, #32
 8002278:	4856      	ldr	r0, [pc, #344]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 800227a:	f005 ffa1 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 800227e:	2201      	movs	r2, #1
 8002280:	2140      	movs	r1, #64	@ 0x40
 8002282:	4854      	ldr	r0, [pc, #336]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 8002284:	f005 ff9c 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8002288:	2201      	movs	r2, #1
 800228a:	2180      	movs	r1, #128	@ 0x80
 800228c:	4851      	ldr	r0, [pc, #324]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 800228e:	f005 ff97 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002292:	2201      	movs	r2, #1
 8002294:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002298:	484e      	ldr	r0, [pc, #312]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 800229a:	f005 ff91 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_RESET);
 800229e:	2200      	movs	r2, #0
 80022a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80022a4:	484b      	ldr	r0, [pc, #300]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 80022a6:	f005 ff8b 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 80022aa:	2201      	movs	r2, #1
 80022ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022b0:	4848      	ldr	r0, [pc, #288]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 80022b2:	f005 ff85 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80022b6:	2201      	movs	r2, #1
 80022b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80022bc:	4845      	ldr	r0, [pc, #276]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 80022be:	f005 ff7f 	bl	80081c0 <HAL_GPIO_WritePin>
		break;
 80022c2:	e082      	b.n	80023ca <MAX31855_CS_Enable+0x666>
	case TC_CH11:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80022c4:	2201      	movs	r2, #1
 80022c6:	2101      	movs	r1, #1
 80022c8:	4842      	ldr	r0, [pc, #264]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 80022ca:	f005 ff79 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80022ce:	2201      	movs	r2, #1
 80022d0:	2102      	movs	r1, #2
 80022d2:	4840      	ldr	r0, [pc, #256]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 80022d4:	f005 ff74 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80022d8:	2201      	movs	r2, #1
 80022da:	2104      	movs	r1, #4
 80022dc:	483d      	ldr	r0, [pc, #244]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 80022de:	f005 ff6f 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80022e2:	2201      	movs	r2, #1
 80022e4:	2108      	movs	r1, #8
 80022e6:	483b      	ldr	r0, [pc, #236]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 80022e8:	f005 ff6a 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80022ec:	2201      	movs	r2, #1
 80022ee:	2110      	movs	r1, #16
 80022f0:	4838      	ldr	r0, [pc, #224]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 80022f2:	f005 ff65 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80022f6:	2201      	movs	r2, #1
 80022f8:	2120      	movs	r1, #32
 80022fa:	4836      	ldr	r0, [pc, #216]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 80022fc:	f005 ff60 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002300:	2201      	movs	r2, #1
 8002302:	2140      	movs	r1, #64	@ 0x40
 8002304:	4833      	ldr	r0, [pc, #204]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 8002306:	f005 ff5b 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 800230a:	2201      	movs	r2, #1
 800230c:	2180      	movs	r1, #128	@ 0x80
 800230e:	4831      	ldr	r0, [pc, #196]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 8002310:	f005 ff56 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002314:	2201      	movs	r2, #1
 8002316:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800231a:	482e      	ldr	r0, [pc, #184]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 800231c:	f005 ff50 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002320:	2201      	movs	r2, #1
 8002322:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002326:	482b      	ldr	r0, [pc, #172]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 8002328:	f005 ff4a 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_RESET);
 800232c:	2200      	movs	r2, #0
 800232e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002332:	4828      	ldr	r0, [pc, #160]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 8002334:	f005 ff44 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002338:	2201      	movs	r2, #1
 800233a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800233e:	4825      	ldr	r0, [pc, #148]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 8002340:	f005 ff3e 	bl	80081c0 <HAL_GPIO_WritePin>
		break;
 8002344:	e041      	b.n	80023ca <MAX31855_CS_Enable+0x666>
	case TC_CH12:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8002346:	2201      	movs	r2, #1
 8002348:	2101      	movs	r1, #1
 800234a:	4822      	ldr	r0, [pc, #136]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 800234c:	f005 ff38 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8002350:	2201      	movs	r2, #1
 8002352:	2102      	movs	r1, #2
 8002354:	481f      	ldr	r0, [pc, #124]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 8002356:	f005 ff33 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 800235a:	2201      	movs	r2, #1
 800235c:	2104      	movs	r1, #4
 800235e:	481d      	ldr	r0, [pc, #116]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 8002360:	f005 ff2e 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8002364:	2201      	movs	r2, #1
 8002366:	2108      	movs	r1, #8
 8002368:	481a      	ldr	r0, [pc, #104]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 800236a:	f005 ff29 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 800236e:	2201      	movs	r2, #1
 8002370:	2110      	movs	r1, #16
 8002372:	4818      	ldr	r0, [pc, #96]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 8002374:	f005 ff24 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8002378:	2201      	movs	r2, #1
 800237a:	2120      	movs	r1, #32
 800237c:	4815      	ldr	r0, [pc, #84]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 800237e:	f005 ff1f 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002382:	2201      	movs	r2, #1
 8002384:	2140      	movs	r1, #64	@ 0x40
 8002386:	4813      	ldr	r0, [pc, #76]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 8002388:	f005 ff1a 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 800238c:	2201      	movs	r2, #1
 800238e:	2180      	movs	r1, #128	@ 0x80
 8002390:	4810      	ldr	r0, [pc, #64]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 8002392:	f005 ff15 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002396:	2201      	movs	r2, #1
 8002398:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800239c:	480d      	ldr	r0, [pc, #52]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 800239e:	f005 ff0f 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 80023a2:	2201      	movs	r2, #1
 80023a4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80023a8:	480a      	ldr	r0, [pc, #40]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 80023aa:	f005 ff09 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 80023ae:	2201      	movs	r2, #1
 80023b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80023b4:	4807      	ldr	r0, [pc, #28]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 80023b6:	f005 ff03 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_RESET);
 80023ba:	2200      	movs	r2, #0
 80023bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80023c0:	4804      	ldr	r0, [pc, #16]	@ (80023d4 <MAX31855_CS_Enable+0x670>)
 80023c2:	f005 fefd 	bl	80081c0 <HAL_GPIO_WritePin>
		break;
 80023c6:	e000      	b.n	80023ca <MAX31855_CS_Enable+0x666>
	default:
		break;
 80023c8:	bf00      	nop
	}
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	58020c00 	.word	0x58020c00

080023d8 <MAX31855_CS_Disable>:

// CS 핀을 High로 설정 (SPI 통신 종료)
void MAX31855_CS_Disable(uint8_t ch)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	71fb      	strb	r3, [r7, #7]
	switch(ch) {
 80023e2:	79fb      	ldrb	r3, [r7, #7]
 80023e4:	2b0b      	cmp	r3, #11
 80023e6:	f200 8329 	bhi.w	8002a3c <MAX31855_CS_Disable+0x664>
 80023ea:	a201      	add	r2, pc, #4	@ (adr r2, 80023f0 <MAX31855_CS_Disable+0x18>)
 80023ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f0:	08002421 	.word	0x08002421
 80023f4:	080024a3 	.word	0x080024a3
 80023f8:	08002525 	.word	0x08002525
 80023fc:	080025a7 	.word	0x080025a7
 8002400:	08002629 	.word	0x08002629
 8002404:	080026ab 	.word	0x080026ab
 8002408:	08002731 	.word	0x08002731
 800240c:	080027b3 	.word	0x080027b3
 8002410:	08002835 	.word	0x08002835
 8002414:	080028b7 	.word	0x080028b7
 8002418:	08002939 	.word	0x08002939
 800241c:	080029bb 	.word	0x080029bb
	case TC_CH1:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8002420:	2201      	movs	r2, #1
 8002422:	2101      	movs	r1, #1
 8002424:	48c1      	ldr	r0, [pc, #772]	@ (800272c <MAX31855_CS_Disable+0x354>)
 8002426:	f005 fecb 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 800242a:	2201      	movs	r2, #1
 800242c:	2102      	movs	r1, #2
 800242e:	48bf      	ldr	r0, [pc, #764]	@ (800272c <MAX31855_CS_Disable+0x354>)
 8002430:	f005 fec6 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8002434:	2201      	movs	r2, #1
 8002436:	2104      	movs	r1, #4
 8002438:	48bc      	ldr	r0, [pc, #752]	@ (800272c <MAX31855_CS_Disable+0x354>)
 800243a:	f005 fec1 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 800243e:	2201      	movs	r2, #1
 8002440:	2108      	movs	r1, #8
 8002442:	48ba      	ldr	r0, [pc, #744]	@ (800272c <MAX31855_CS_Disable+0x354>)
 8002444:	f005 febc 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8002448:	2201      	movs	r2, #1
 800244a:	2110      	movs	r1, #16
 800244c:	48b7      	ldr	r0, [pc, #732]	@ (800272c <MAX31855_CS_Disable+0x354>)
 800244e:	f005 feb7 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8002452:	2201      	movs	r2, #1
 8002454:	2120      	movs	r1, #32
 8002456:	48b5      	ldr	r0, [pc, #724]	@ (800272c <MAX31855_CS_Disable+0x354>)
 8002458:	f005 feb2 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 800245c:	2201      	movs	r2, #1
 800245e:	2140      	movs	r1, #64	@ 0x40
 8002460:	48b2      	ldr	r0, [pc, #712]	@ (800272c <MAX31855_CS_Disable+0x354>)
 8002462:	f005 fead 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8002466:	2201      	movs	r2, #1
 8002468:	2180      	movs	r1, #128	@ 0x80
 800246a:	48b0      	ldr	r0, [pc, #704]	@ (800272c <MAX31855_CS_Disable+0x354>)
 800246c:	f005 fea8 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002470:	2201      	movs	r2, #1
 8002472:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002476:	48ad      	ldr	r0, [pc, #692]	@ (800272c <MAX31855_CS_Disable+0x354>)
 8002478:	f005 fea2 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 800247c:	2201      	movs	r2, #1
 800247e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002482:	48aa      	ldr	r0, [pc, #680]	@ (800272c <MAX31855_CS_Disable+0x354>)
 8002484:	f005 fe9c 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8002488:	2201      	movs	r2, #1
 800248a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800248e:	48a7      	ldr	r0, [pc, #668]	@ (800272c <MAX31855_CS_Disable+0x354>)
 8002490:	f005 fe96 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002494:	2201      	movs	r2, #1
 8002496:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800249a:	48a4      	ldr	r0, [pc, #656]	@ (800272c <MAX31855_CS_Disable+0x354>)
 800249c:	f005 fe90 	bl	80081c0 <HAL_GPIO_WritePin>
		break;
 80024a0:	e2cd      	b.n	8002a3e <MAX31855_CS_Disable+0x666>
	case TC_CH2:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80024a2:	2201      	movs	r2, #1
 80024a4:	2101      	movs	r1, #1
 80024a6:	48a1      	ldr	r0, [pc, #644]	@ (800272c <MAX31855_CS_Disable+0x354>)
 80024a8:	f005 fe8a 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80024ac:	2201      	movs	r2, #1
 80024ae:	2102      	movs	r1, #2
 80024b0:	489e      	ldr	r0, [pc, #632]	@ (800272c <MAX31855_CS_Disable+0x354>)
 80024b2:	f005 fe85 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80024b6:	2201      	movs	r2, #1
 80024b8:	2104      	movs	r1, #4
 80024ba:	489c      	ldr	r0, [pc, #624]	@ (800272c <MAX31855_CS_Disable+0x354>)
 80024bc:	f005 fe80 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80024c0:	2201      	movs	r2, #1
 80024c2:	2108      	movs	r1, #8
 80024c4:	4899      	ldr	r0, [pc, #612]	@ (800272c <MAX31855_CS_Disable+0x354>)
 80024c6:	f005 fe7b 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80024ca:	2201      	movs	r2, #1
 80024cc:	2110      	movs	r1, #16
 80024ce:	4897      	ldr	r0, [pc, #604]	@ (800272c <MAX31855_CS_Disable+0x354>)
 80024d0:	f005 fe76 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80024d4:	2201      	movs	r2, #1
 80024d6:	2120      	movs	r1, #32
 80024d8:	4894      	ldr	r0, [pc, #592]	@ (800272c <MAX31855_CS_Disable+0x354>)
 80024da:	f005 fe71 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 80024de:	2201      	movs	r2, #1
 80024e0:	2140      	movs	r1, #64	@ 0x40
 80024e2:	4892      	ldr	r0, [pc, #584]	@ (800272c <MAX31855_CS_Disable+0x354>)
 80024e4:	f005 fe6c 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 80024e8:	2201      	movs	r2, #1
 80024ea:	2180      	movs	r1, #128	@ 0x80
 80024ec:	488f      	ldr	r0, [pc, #572]	@ (800272c <MAX31855_CS_Disable+0x354>)
 80024ee:	f005 fe67 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 80024f2:	2201      	movs	r2, #1
 80024f4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80024f8:	488c      	ldr	r0, [pc, #560]	@ (800272c <MAX31855_CS_Disable+0x354>)
 80024fa:	f005 fe61 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 80024fe:	2201      	movs	r2, #1
 8002500:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002504:	4889      	ldr	r0, [pc, #548]	@ (800272c <MAX31855_CS_Disable+0x354>)
 8002506:	f005 fe5b 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 800250a:	2201      	movs	r2, #1
 800250c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002510:	4886      	ldr	r0, [pc, #536]	@ (800272c <MAX31855_CS_Disable+0x354>)
 8002512:	f005 fe55 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002516:	2201      	movs	r2, #1
 8002518:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800251c:	4883      	ldr	r0, [pc, #524]	@ (800272c <MAX31855_CS_Disable+0x354>)
 800251e:	f005 fe4f 	bl	80081c0 <HAL_GPIO_WritePin>
		break;
 8002522:	e28c      	b.n	8002a3e <MAX31855_CS_Disable+0x666>
	case TC_CH3:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8002524:	2201      	movs	r2, #1
 8002526:	2101      	movs	r1, #1
 8002528:	4880      	ldr	r0, [pc, #512]	@ (800272c <MAX31855_CS_Disable+0x354>)
 800252a:	f005 fe49 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 800252e:	2201      	movs	r2, #1
 8002530:	2102      	movs	r1, #2
 8002532:	487e      	ldr	r0, [pc, #504]	@ (800272c <MAX31855_CS_Disable+0x354>)
 8002534:	f005 fe44 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8002538:	2201      	movs	r2, #1
 800253a:	2104      	movs	r1, #4
 800253c:	487b      	ldr	r0, [pc, #492]	@ (800272c <MAX31855_CS_Disable+0x354>)
 800253e:	f005 fe3f 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8002542:	2201      	movs	r2, #1
 8002544:	2108      	movs	r1, #8
 8002546:	4879      	ldr	r0, [pc, #484]	@ (800272c <MAX31855_CS_Disable+0x354>)
 8002548:	f005 fe3a 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 800254c:	2201      	movs	r2, #1
 800254e:	2110      	movs	r1, #16
 8002550:	4876      	ldr	r0, [pc, #472]	@ (800272c <MAX31855_CS_Disable+0x354>)
 8002552:	f005 fe35 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8002556:	2201      	movs	r2, #1
 8002558:	2120      	movs	r1, #32
 800255a:	4874      	ldr	r0, [pc, #464]	@ (800272c <MAX31855_CS_Disable+0x354>)
 800255c:	f005 fe30 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002560:	2201      	movs	r2, #1
 8002562:	2140      	movs	r1, #64	@ 0x40
 8002564:	4871      	ldr	r0, [pc, #452]	@ (800272c <MAX31855_CS_Disable+0x354>)
 8002566:	f005 fe2b 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 800256a:	2201      	movs	r2, #1
 800256c:	2180      	movs	r1, #128	@ 0x80
 800256e:	486f      	ldr	r0, [pc, #444]	@ (800272c <MAX31855_CS_Disable+0x354>)
 8002570:	f005 fe26 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002574:	2201      	movs	r2, #1
 8002576:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800257a:	486c      	ldr	r0, [pc, #432]	@ (800272c <MAX31855_CS_Disable+0x354>)
 800257c:	f005 fe20 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002580:	2201      	movs	r2, #1
 8002582:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002586:	4869      	ldr	r0, [pc, #420]	@ (800272c <MAX31855_CS_Disable+0x354>)
 8002588:	f005 fe1a 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 800258c:	2201      	movs	r2, #1
 800258e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002592:	4866      	ldr	r0, [pc, #408]	@ (800272c <MAX31855_CS_Disable+0x354>)
 8002594:	f005 fe14 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002598:	2201      	movs	r2, #1
 800259a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800259e:	4863      	ldr	r0, [pc, #396]	@ (800272c <MAX31855_CS_Disable+0x354>)
 80025a0:	f005 fe0e 	bl	80081c0 <HAL_GPIO_WritePin>
		break;
 80025a4:	e24b      	b.n	8002a3e <MAX31855_CS_Disable+0x666>
	case TC_CH4:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80025a6:	2201      	movs	r2, #1
 80025a8:	2101      	movs	r1, #1
 80025aa:	4860      	ldr	r0, [pc, #384]	@ (800272c <MAX31855_CS_Disable+0x354>)
 80025ac:	f005 fe08 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80025b0:	2201      	movs	r2, #1
 80025b2:	2102      	movs	r1, #2
 80025b4:	485d      	ldr	r0, [pc, #372]	@ (800272c <MAX31855_CS_Disable+0x354>)
 80025b6:	f005 fe03 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80025ba:	2201      	movs	r2, #1
 80025bc:	2104      	movs	r1, #4
 80025be:	485b      	ldr	r0, [pc, #364]	@ (800272c <MAX31855_CS_Disable+0x354>)
 80025c0:	f005 fdfe 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80025c4:	2201      	movs	r2, #1
 80025c6:	2108      	movs	r1, #8
 80025c8:	4858      	ldr	r0, [pc, #352]	@ (800272c <MAX31855_CS_Disable+0x354>)
 80025ca:	f005 fdf9 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80025ce:	2201      	movs	r2, #1
 80025d0:	2110      	movs	r1, #16
 80025d2:	4856      	ldr	r0, [pc, #344]	@ (800272c <MAX31855_CS_Disable+0x354>)
 80025d4:	f005 fdf4 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80025d8:	2201      	movs	r2, #1
 80025da:	2120      	movs	r1, #32
 80025dc:	4853      	ldr	r0, [pc, #332]	@ (800272c <MAX31855_CS_Disable+0x354>)
 80025de:	f005 fdef 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 80025e2:	2201      	movs	r2, #1
 80025e4:	2140      	movs	r1, #64	@ 0x40
 80025e6:	4851      	ldr	r0, [pc, #324]	@ (800272c <MAX31855_CS_Disable+0x354>)
 80025e8:	f005 fdea 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 80025ec:	2201      	movs	r2, #1
 80025ee:	2180      	movs	r1, #128	@ 0x80
 80025f0:	484e      	ldr	r0, [pc, #312]	@ (800272c <MAX31855_CS_Disable+0x354>)
 80025f2:	f005 fde5 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 80025f6:	2201      	movs	r2, #1
 80025f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80025fc:	484b      	ldr	r0, [pc, #300]	@ (800272c <MAX31855_CS_Disable+0x354>)
 80025fe:	f005 fddf 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002602:	2201      	movs	r2, #1
 8002604:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002608:	4848      	ldr	r0, [pc, #288]	@ (800272c <MAX31855_CS_Disable+0x354>)
 800260a:	f005 fdd9 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 800260e:	2201      	movs	r2, #1
 8002610:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002614:	4845      	ldr	r0, [pc, #276]	@ (800272c <MAX31855_CS_Disable+0x354>)
 8002616:	f005 fdd3 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 800261a:	2201      	movs	r2, #1
 800261c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002620:	4842      	ldr	r0, [pc, #264]	@ (800272c <MAX31855_CS_Disable+0x354>)
 8002622:	f005 fdcd 	bl	80081c0 <HAL_GPIO_WritePin>
		break;
 8002626:	e20a      	b.n	8002a3e <MAX31855_CS_Disable+0x666>
	case TC_CH5:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8002628:	2201      	movs	r2, #1
 800262a:	2101      	movs	r1, #1
 800262c:	483f      	ldr	r0, [pc, #252]	@ (800272c <MAX31855_CS_Disable+0x354>)
 800262e:	f005 fdc7 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8002632:	2201      	movs	r2, #1
 8002634:	2102      	movs	r1, #2
 8002636:	483d      	ldr	r0, [pc, #244]	@ (800272c <MAX31855_CS_Disable+0x354>)
 8002638:	f005 fdc2 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 800263c:	2201      	movs	r2, #1
 800263e:	2104      	movs	r1, #4
 8002640:	483a      	ldr	r0, [pc, #232]	@ (800272c <MAX31855_CS_Disable+0x354>)
 8002642:	f005 fdbd 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8002646:	2201      	movs	r2, #1
 8002648:	2108      	movs	r1, #8
 800264a:	4838      	ldr	r0, [pc, #224]	@ (800272c <MAX31855_CS_Disable+0x354>)
 800264c:	f005 fdb8 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8002650:	2201      	movs	r2, #1
 8002652:	2110      	movs	r1, #16
 8002654:	4835      	ldr	r0, [pc, #212]	@ (800272c <MAX31855_CS_Disable+0x354>)
 8002656:	f005 fdb3 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 800265a:	2201      	movs	r2, #1
 800265c:	2120      	movs	r1, #32
 800265e:	4833      	ldr	r0, [pc, #204]	@ (800272c <MAX31855_CS_Disable+0x354>)
 8002660:	f005 fdae 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002664:	2201      	movs	r2, #1
 8002666:	2140      	movs	r1, #64	@ 0x40
 8002668:	4830      	ldr	r0, [pc, #192]	@ (800272c <MAX31855_CS_Disable+0x354>)
 800266a:	f005 fda9 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 800266e:	2201      	movs	r2, #1
 8002670:	2180      	movs	r1, #128	@ 0x80
 8002672:	482e      	ldr	r0, [pc, #184]	@ (800272c <MAX31855_CS_Disable+0x354>)
 8002674:	f005 fda4 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002678:	2201      	movs	r2, #1
 800267a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800267e:	482b      	ldr	r0, [pc, #172]	@ (800272c <MAX31855_CS_Disable+0x354>)
 8002680:	f005 fd9e 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002684:	2201      	movs	r2, #1
 8002686:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800268a:	4828      	ldr	r0, [pc, #160]	@ (800272c <MAX31855_CS_Disable+0x354>)
 800268c:	f005 fd98 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8002690:	2201      	movs	r2, #1
 8002692:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002696:	4825      	ldr	r0, [pc, #148]	@ (800272c <MAX31855_CS_Disable+0x354>)
 8002698:	f005 fd92 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 800269c:	2201      	movs	r2, #1
 800269e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80026a2:	4822      	ldr	r0, [pc, #136]	@ (800272c <MAX31855_CS_Disable+0x354>)
 80026a4:	f005 fd8c 	bl	80081c0 <HAL_GPIO_WritePin>
		break;
 80026a8:	e1c9      	b.n	8002a3e <MAX31855_CS_Disable+0x666>
	case TC_CH6:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80026aa:	2201      	movs	r2, #1
 80026ac:	2101      	movs	r1, #1
 80026ae:	481f      	ldr	r0, [pc, #124]	@ (800272c <MAX31855_CS_Disable+0x354>)
 80026b0:	f005 fd86 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80026b4:	2201      	movs	r2, #1
 80026b6:	2102      	movs	r1, #2
 80026b8:	481c      	ldr	r0, [pc, #112]	@ (800272c <MAX31855_CS_Disable+0x354>)
 80026ba:	f005 fd81 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80026be:	2201      	movs	r2, #1
 80026c0:	2104      	movs	r1, #4
 80026c2:	481a      	ldr	r0, [pc, #104]	@ (800272c <MAX31855_CS_Disable+0x354>)
 80026c4:	f005 fd7c 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80026c8:	2201      	movs	r2, #1
 80026ca:	2108      	movs	r1, #8
 80026cc:	4817      	ldr	r0, [pc, #92]	@ (800272c <MAX31855_CS_Disable+0x354>)
 80026ce:	f005 fd77 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80026d2:	2201      	movs	r2, #1
 80026d4:	2110      	movs	r1, #16
 80026d6:	4815      	ldr	r0, [pc, #84]	@ (800272c <MAX31855_CS_Disable+0x354>)
 80026d8:	f005 fd72 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80026dc:	2201      	movs	r2, #1
 80026de:	2120      	movs	r1, #32
 80026e0:	4812      	ldr	r0, [pc, #72]	@ (800272c <MAX31855_CS_Disable+0x354>)
 80026e2:	f005 fd6d 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 80026e6:	2201      	movs	r2, #1
 80026e8:	2140      	movs	r1, #64	@ 0x40
 80026ea:	4810      	ldr	r0, [pc, #64]	@ (800272c <MAX31855_CS_Disable+0x354>)
 80026ec:	f005 fd68 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 80026f0:	2201      	movs	r2, #1
 80026f2:	2180      	movs	r1, #128	@ 0x80
 80026f4:	480d      	ldr	r0, [pc, #52]	@ (800272c <MAX31855_CS_Disable+0x354>)
 80026f6:	f005 fd63 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 80026fa:	2201      	movs	r2, #1
 80026fc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002700:	480a      	ldr	r0, [pc, #40]	@ (800272c <MAX31855_CS_Disable+0x354>)
 8002702:	f005 fd5d 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002706:	2201      	movs	r2, #1
 8002708:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800270c:	4807      	ldr	r0, [pc, #28]	@ (800272c <MAX31855_CS_Disable+0x354>)
 800270e:	f005 fd57 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8002712:	2201      	movs	r2, #1
 8002714:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002718:	4804      	ldr	r0, [pc, #16]	@ (800272c <MAX31855_CS_Disable+0x354>)
 800271a:	f005 fd51 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 800271e:	2201      	movs	r2, #1
 8002720:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002724:	4801      	ldr	r0, [pc, #4]	@ (800272c <MAX31855_CS_Disable+0x354>)
 8002726:	f005 fd4b 	bl	80081c0 <HAL_GPIO_WritePin>
		break;
 800272a:	e188      	b.n	8002a3e <MAX31855_CS_Disable+0x666>
 800272c:	58020c00 	.word	0x58020c00
	case TC_CH7:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8002730:	2201      	movs	r2, #1
 8002732:	2101      	movs	r1, #1
 8002734:	48c4      	ldr	r0, [pc, #784]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 8002736:	f005 fd43 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 800273a:	2201      	movs	r2, #1
 800273c:	2102      	movs	r1, #2
 800273e:	48c2      	ldr	r0, [pc, #776]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 8002740:	f005 fd3e 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8002744:	2201      	movs	r2, #1
 8002746:	2104      	movs	r1, #4
 8002748:	48bf      	ldr	r0, [pc, #764]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 800274a:	f005 fd39 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 800274e:	2201      	movs	r2, #1
 8002750:	2108      	movs	r1, #8
 8002752:	48bd      	ldr	r0, [pc, #756]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 8002754:	f005 fd34 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8002758:	2201      	movs	r2, #1
 800275a:	2110      	movs	r1, #16
 800275c:	48ba      	ldr	r0, [pc, #744]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 800275e:	f005 fd2f 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8002762:	2201      	movs	r2, #1
 8002764:	2120      	movs	r1, #32
 8002766:	48b8      	ldr	r0, [pc, #736]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 8002768:	f005 fd2a 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 800276c:	2201      	movs	r2, #1
 800276e:	2140      	movs	r1, #64	@ 0x40
 8002770:	48b5      	ldr	r0, [pc, #724]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 8002772:	f005 fd25 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8002776:	2201      	movs	r2, #1
 8002778:	2180      	movs	r1, #128	@ 0x80
 800277a:	48b3      	ldr	r0, [pc, #716]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 800277c:	f005 fd20 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002780:	2201      	movs	r2, #1
 8002782:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002786:	48b0      	ldr	r0, [pc, #704]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 8002788:	f005 fd1a 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 800278c:	2201      	movs	r2, #1
 800278e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002792:	48ad      	ldr	r0, [pc, #692]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 8002794:	f005 fd14 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8002798:	2201      	movs	r2, #1
 800279a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800279e:	48aa      	ldr	r0, [pc, #680]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 80027a0:	f005 fd0e 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80027a4:	2201      	movs	r2, #1
 80027a6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80027aa:	48a7      	ldr	r0, [pc, #668]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 80027ac:	f005 fd08 	bl	80081c0 <HAL_GPIO_WritePin>
		break;
 80027b0:	e145      	b.n	8002a3e <MAX31855_CS_Disable+0x666>
	case TC_CH8:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80027b2:	2201      	movs	r2, #1
 80027b4:	2101      	movs	r1, #1
 80027b6:	48a4      	ldr	r0, [pc, #656]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 80027b8:	f005 fd02 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80027bc:	2201      	movs	r2, #1
 80027be:	2102      	movs	r1, #2
 80027c0:	48a1      	ldr	r0, [pc, #644]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 80027c2:	f005 fcfd 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80027c6:	2201      	movs	r2, #1
 80027c8:	2104      	movs	r1, #4
 80027ca:	489f      	ldr	r0, [pc, #636]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 80027cc:	f005 fcf8 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80027d0:	2201      	movs	r2, #1
 80027d2:	2108      	movs	r1, #8
 80027d4:	489c      	ldr	r0, [pc, #624]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 80027d6:	f005 fcf3 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80027da:	2201      	movs	r2, #1
 80027dc:	2110      	movs	r1, #16
 80027de:	489a      	ldr	r0, [pc, #616]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 80027e0:	f005 fcee 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80027e4:	2201      	movs	r2, #1
 80027e6:	2120      	movs	r1, #32
 80027e8:	4897      	ldr	r0, [pc, #604]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 80027ea:	f005 fce9 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 80027ee:	2201      	movs	r2, #1
 80027f0:	2140      	movs	r1, #64	@ 0x40
 80027f2:	4895      	ldr	r0, [pc, #596]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 80027f4:	f005 fce4 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 80027f8:	2201      	movs	r2, #1
 80027fa:	2180      	movs	r1, #128	@ 0x80
 80027fc:	4892      	ldr	r0, [pc, #584]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 80027fe:	f005 fcdf 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002802:	2201      	movs	r2, #1
 8002804:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002808:	488f      	ldr	r0, [pc, #572]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 800280a:	f005 fcd9 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 800280e:	2201      	movs	r2, #1
 8002810:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002814:	488c      	ldr	r0, [pc, #560]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 8002816:	f005 fcd3 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 800281a:	2201      	movs	r2, #1
 800281c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002820:	4889      	ldr	r0, [pc, #548]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 8002822:	f005 fccd 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002826:	2201      	movs	r2, #1
 8002828:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800282c:	4886      	ldr	r0, [pc, #536]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 800282e:	f005 fcc7 	bl	80081c0 <HAL_GPIO_WritePin>
		break;
 8002832:	e104      	b.n	8002a3e <MAX31855_CS_Disable+0x666>
	case TC_CH9:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8002834:	2201      	movs	r2, #1
 8002836:	2101      	movs	r1, #1
 8002838:	4883      	ldr	r0, [pc, #524]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 800283a:	f005 fcc1 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 800283e:	2201      	movs	r2, #1
 8002840:	2102      	movs	r1, #2
 8002842:	4881      	ldr	r0, [pc, #516]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 8002844:	f005 fcbc 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8002848:	2201      	movs	r2, #1
 800284a:	2104      	movs	r1, #4
 800284c:	487e      	ldr	r0, [pc, #504]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 800284e:	f005 fcb7 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8002852:	2201      	movs	r2, #1
 8002854:	2108      	movs	r1, #8
 8002856:	487c      	ldr	r0, [pc, #496]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 8002858:	f005 fcb2 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 800285c:	2201      	movs	r2, #1
 800285e:	2110      	movs	r1, #16
 8002860:	4879      	ldr	r0, [pc, #484]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 8002862:	f005 fcad 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8002866:	2201      	movs	r2, #1
 8002868:	2120      	movs	r1, #32
 800286a:	4877      	ldr	r0, [pc, #476]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 800286c:	f005 fca8 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002870:	2201      	movs	r2, #1
 8002872:	2140      	movs	r1, #64	@ 0x40
 8002874:	4874      	ldr	r0, [pc, #464]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 8002876:	f005 fca3 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 800287a:	2201      	movs	r2, #1
 800287c:	2180      	movs	r1, #128	@ 0x80
 800287e:	4872      	ldr	r0, [pc, #456]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 8002880:	f005 fc9e 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002884:	2201      	movs	r2, #1
 8002886:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800288a:	486f      	ldr	r0, [pc, #444]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 800288c:	f005 fc98 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002890:	2201      	movs	r2, #1
 8002892:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002896:	486c      	ldr	r0, [pc, #432]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 8002898:	f005 fc92 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 800289c:	2201      	movs	r2, #1
 800289e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80028a2:	4869      	ldr	r0, [pc, #420]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 80028a4:	f005 fc8c 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80028a8:	2201      	movs	r2, #1
 80028aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80028ae:	4866      	ldr	r0, [pc, #408]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 80028b0:	f005 fc86 	bl	80081c0 <HAL_GPIO_WritePin>
		break;
 80028b4:	e0c3      	b.n	8002a3e <MAX31855_CS_Disable+0x666>
	case TC_CH10:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80028b6:	2201      	movs	r2, #1
 80028b8:	2101      	movs	r1, #1
 80028ba:	4863      	ldr	r0, [pc, #396]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 80028bc:	f005 fc80 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80028c0:	2201      	movs	r2, #1
 80028c2:	2102      	movs	r1, #2
 80028c4:	4860      	ldr	r0, [pc, #384]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 80028c6:	f005 fc7b 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80028ca:	2201      	movs	r2, #1
 80028cc:	2104      	movs	r1, #4
 80028ce:	485e      	ldr	r0, [pc, #376]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 80028d0:	f005 fc76 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80028d4:	2201      	movs	r2, #1
 80028d6:	2108      	movs	r1, #8
 80028d8:	485b      	ldr	r0, [pc, #364]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 80028da:	f005 fc71 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80028de:	2201      	movs	r2, #1
 80028e0:	2110      	movs	r1, #16
 80028e2:	4859      	ldr	r0, [pc, #356]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 80028e4:	f005 fc6c 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80028e8:	2201      	movs	r2, #1
 80028ea:	2120      	movs	r1, #32
 80028ec:	4856      	ldr	r0, [pc, #344]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 80028ee:	f005 fc67 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 80028f2:	2201      	movs	r2, #1
 80028f4:	2140      	movs	r1, #64	@ 0x40
 80028f6:	4854      	ldr	r0, [pc, #336]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 80028f8:	f005 fc62 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 80028fc:	2201      	movs	r2, #1
 80028fe:	2180      	movs	r1, #128	@ 0x80
 8002900:	4851      	ldr	r0, [pc, #324]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 8002902:	f005 fc5d 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002906:	2201      	movs	r2, #1
 8002908:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800290c:	484e      	ldr	r0, [pc, #312]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 800290e:	f005 fc57 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002912:	2201      	movs	r2, #1
 8002914:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002918:	484b      	ldr	r0, [pc, #300]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 800291a:	f005 fc51 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 800291e:	2201      	movs	r2, #1
 8002920:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002924:	4848      	ldr	r0, [pc, #288]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 8002926:	f005 fc4b 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 800292a:	2201      	movs	r2, #1
 800292c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002930:	4845      	ldr	r0, [pc, #276]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 8002932:	f005 fc45 	bl	80081c0 <HAL_GPIO_WritePin>
		break;
 8002936:	e082      	b.n	8002a3e <MAX31855_CS_Disable+0x666>
	case TC_CH11:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8002938:	2201      	movs	r2, #1
 800293a:	2101      	movs	r1, #1
 800293c:	4842      	ldr	r0, [pc, #264]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 800293e:	f005 fc3f 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8002942:	2201      	movs	r2, #1
 8002944:	2102      	movs	r1, #2
 8002946:	4840      	ldr	r0, [pc, #256]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 8002948:	f005 fc3a 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 800294c:	2201      	movs	r2, #1
 800294e:	2104      	movs	r1, #4
 8002950:	483d      	ldr	r0, [pc, #244]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 8002952:	f005 fc35 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8002956:	2201      	movs	r2, #1
 8002958:	2108      	movs	r1, #8
 800295a:	483b      	ldr	r0, [pc, #236]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 800295c:	f005 fc30 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8002960:	2201      	movs	r2, #1
 8002962:	2110      	movs	r1, #16
 8002964:	4838      	ldr	r0, [pc, #224]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 8002966:	f005 fc2b 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 800296a:	2201      	movs	r2, #1
 800296c:	2120      	movs	r1, #32
 800296e:	4836      	ldr	r0, [pc, #216]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 8002970:	f005 fc26 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002974:	2201      	movs	r2, #1
 8002976:	2140      	movs	r1, #64	@ 0x40
 8002978:	4833      	ldr	r0, [pc, #204]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 800297a:	f005 fc21 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 800297e:	2201      	movs	r2, #1
 8002980:	2180      	movs	r1, #128	@ 0x80
 8002982:	4831      	ldr	r0, [pc, #196]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 8002984:	f005 fc1c 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002988:	2201      	movs	r2, #1
 800298a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800298e:	482e      	ldr	r0, [pc, #184]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 8002990:	f005 fc16 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002994:	2201      	movs	r2, #1
 8002996:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800299a:	482b      	ldr	r0, [pc, #172]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 800299c:	f005 fc10 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 80029a0:	2201      	movs	r2, #1
 80029a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80029a6:	4828      	ldr	r0, [pc, #160]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 80029a8:	f005 fc0a 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80029ac:	2201      	movs	r2, #1
 80029ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80029b2:	4825      	ldr	r0, [pc, #148]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 80029b4:	f005 fc04 	bl	80081c0 <HAL_GPIO_WritePin>
		break;
 80029b8:	e041      	b.n	8002a3e <MAX31855_CS_Disable+0x666>
	case TC_CH12:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80029ba:	2201      	movs	r2, #1
 80029bc:	2101      	movs	r1, #1
 80029be:	4822      	ldr	r0, [pc, #136]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 80029c0:	f005 fbfe 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80029c4:	2201      	movs	r2, #1
 80029c6:	2102      	movs	r1, #2
 80029c8:	481f      	ldr	r0, [pc, #124]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 80029ca:	f005 fbf9 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80029ce:	2201      	movs	r2, #1
 80029d0:	2104      	movs	r1, #4
 80029d2:	481d      	ldr	r0, [pc, #116]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 80029d4:	f005 fbf4 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80029d8:	2201      	movs	r2, #1
 80029da:	2108      	movs	r1, #8
 80029dc:	481a      	ldr	r0, [pc, #104]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 80029de:	f005 fbef 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80029e2:	2201      	movs	r2, #1
 80029e4:	2110      	movs	r1, #16
 80029e6:	4818      	ldr	r0, [pc, #96]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 80029e8:	f005 fbea 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80029ec:	2201      	movs	r2, #1
 80029ee:	2120      	movs	r1, #32
 80029f0:	4815      	ldr	r0, [pc, #84]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 80029f2:	f005 fbe5 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 80029f6:	2201      	movs	r2, #1
 80029f8:	2140      	movs	r1, #64	@ 0x40
 80029fa:	4813      	ldr	r0, [pc, #76]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 80029fc:	f005 fbe0 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8002a00:	2201      	movs	r2, #1
 8002a02:	2180      	movs	r1, #128	@ 0x80
 8002a04:	4810      	ldr	r0, [pc, #64]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 8002a06:	f005 fbdb 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002a10:	480d      	ldr	r0, [pc, #52]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 8002a12:	f005 fbd5 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002a16:	2201      	movs	r2, #1
 8002a18:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a1c:	480a      	ldr	r0, [pc, #40]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 8002a1e:	f005 fbcf 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8002a22:	2201      	movs	r2, #1
 8002a24:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a28:	4807      	ldr	r0, [pc, #28]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 8002a2a:	f005 fbc9 	bl	80081c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002a34:	4804      	ldr	r0, [pc, #16]	@ (8002a48 <MAX31855_CS_Disable+0x670>)
 8002a36:	f005 fbc3 	bl	80081c0 <HAL_GPIO_WritePin>
		break;
 8002a3a:	e000      	b.n	8002a3e <MAX31855_CS_Disable+0x666>
	default:
		break;
 8002a3c:	bf00      	nop
	}
}
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	58020c00 	.word	0x58020c00

08002a4c <MAX31855_ReadTemp_IT>:
uint8_t dummy_tx[4] = {0xFF, 0xFF, 0xFF, 0xFF};
uint8_t spi_rx_buffer[4];
double tc[MAX_TC_CH] = {0};

void MAX31855_ReadTemp_IT(uint8_t ch)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	71fb      	strb	r3, [r7, #7]
	MAX31855_CS_Enable(idx_tc);
 8002a56:	4b07      	ldr	r3, [pc, #28]	@ (8002a74 <MAX31855_ReadTemp_IT+0x28>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff f982 	bl	8001d64 <MAX31855_CS_Enable>
    //HAL_SPI_TransmitReceive_IT(&hspi1, dummy_tx, spi_rx_buffer, 4);
    HAL_SPI_Receive_IT(&hspi1, spi_rx_buffer, 4);
 8002a60:	2204      	movs	r2, #4
 8002a62:	4905      	ldr	r1, [pc, #20]	@ (8002a78 <MAX31855_ReadTemp_IT+0x2c>)
 8002a64:	4805      	ldr	r0, [pc, #20]	@ (8002a7c <MAX31855_ReadTemp_IT+0x30>)
 8002a66:	f009 fa6f 	bl	800bf48 <HAL_SPI_Receive_IT>

}
 8002a6a:	bf00      	nop
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	240004dd 	.word	0x240004dd
 8002a78:	240004e0 	.word	0x240004e0
 8002a7c:	24000304 	.word	0x24000304

08002a80 <MAX3188_StartRead>:

void MAX3188_StartRead()
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
	idx_tc = 0;
 8002a84:	4b06      	ldr	r3, [pc, #24]	@ (8002aa0 <MAX3188_StartRead+0x20>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	701a      	strb	r2, [r3, #0]
	fTemp = false;
 8002a8a:	4b06      	ldr	r3, [pc, #24]	@ (8002aa4 <MAX3188_StartRead+0x24>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	701a      	strb	r2, [r3, #0]

	MAX31855_ReadTemp_IT(idx_tc);
 8002a90:	4b03      	ldr	r3, [pc, #12]	@ (8002aa0 <MAX3188_StartRead+0x20>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff ffd9 	bl	8002a4c <MAX31855_ReadTemp_IT>
}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	240004dd 	.word	0x240004dd
 8002aa4:	240004dc 	.word	0x240004dc

08002aa8 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a27      	ldr	r2, [pc, #156]	@ (8002b54 <HAL_SPI_RxCpltCallback+0xac>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d147      	bne.n	8002b4a <HAL_SPI_RxCpltCallback+0xa2>
    {
    	MAX31855_CS_Disable(idx_tc);
 8002aba:	4b27      	ldr	r3, [pc, #156]	@ (8002b58 <HAL_SPI_RxCpltCallback+0xb0>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff fc8a 	bl	80023d8 <MAX31855_CS_Disable>

    	uint8_t data[4];
    	memcpy((void*)data,(void*)spi_rx_buffer,sizeof(uint8_t)*4);
 8002ac4:	4b25      	ldr	r3, [pc, #148]	@ (8002b5c <HAL_SPI_RxCpltCallback+0xb4>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	60fb      	str	r3, [r7, #12]

        int32_t value = ((int32_t)data[0] << 24) | ((int32_t)data[1] << 16) |
 8002aca:	7b3b      	ldrb	r3, [r7, #12]
 8002acc:	061a      	lsls	r2, r3, #24
 8002ace:	7b7b      	ldrb	r3, [r7, #13]
 8002ad0:	041b      	lsls	r3, r3, #16
 8002ad2:	431a      	orrs	r2, r3
                        ((int32_t)data[2] << 8)  | ((int32_t)data[3]);
 8002ad4:	7bbb      	ldrb	r3, [r7, #14]
 8002ad6:	021b      	lsls	r3, r3, #8
        int32_t value = ((int32_t)data[0] << 24) | ((int32_t)data[1] << 16) |
 8002ad8:	4313      	orrs	r3, r2
                        ((int32_t)data[2] << 8)  | ((int32_t)data[3]);
 8002ada:	7bfa      	ldrb	r2, [r7, #15]
        int32_t value = ((int32_t)data[0] << 24) | ((int32_t)data[1] << 16) |
 8002adc:	4313      	orrs	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]

        int16_t temp_data = (value >> 18) & 0x3FFF; // 14비트 Thermocouple data는 bit[31:18]에 위치
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	0c9b      	lsrs	r3, r3, #18
 8002ae4:	82fb      	strh	r3, [r7, #22]

        if (temp_data & 0x2000)
 8002ae6:	8afb      	ldrh	r3, [r7, #22]
 8002ae8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d005      	beq.n	8002afc <HAL_SPI_RxCpltCallback+0x54>
        {
            temp_data |= 0xC000; // Sign 확장
 8002af0:	8afb      	ldrh	r3, [r7, #22]
 8002af2:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8002af6:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 8002afa:	82fb      	strh	r3, [r7, #22]
        }

        tc[idx_tc] = (double)temp_data * 0.25f;
 8002afc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002b00:	ee07 3a90 	vmov	s15, r3
 8002b04:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002b08:	4b13      	ldr	r3, [pc, #76]	@ (8002b58 <HAL_SPI_RxCpltCallback+0xb0>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	eeb5 6b00 	vmov.f64	d6, #80	@ 0x3e800000  0.250
 8002b10:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002b14:	4a12      	ldr	r2, [pc, #72]	@ (8002b60 <HAL_SPI_RxCpltCallback+0xb8>)
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4413      	add	r3, r2
 8002b1a:	ed83 7b00 	vstr	d7, [r3]

        idx_tc++;
 8002b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002b58 <HAL_SPI_RxCpltCallback+0xb0>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	3301      	adds	r3, #1
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	4b0c      	ldr	r3, [pc, #48]	@ (8002b58 <HAL_SPI_RxCpltCallback+0xb0>)
 8002b28:	701a      	strb	r2, [r3, #0]

		if (idx_tc == MAX_TC_CH)
 8002b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b58 <HAL_SPI_RxCpltCallback+0xb0>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d106      	bne.n	8002b40 <HAL_SPI_RxCpltCallback+0x98>
		{
			idx_tc = 0;
 8002b32:	4b09      	ldr	r3, [pc, #36]	@ (8002b58 <HAL_SPI_RxCpltCallback+0xb0>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	701a      	strb	r2, [r3, #0]
			fTemp = true;
 8002b38:	4b0a      	ldr	r3, [pc, #40]	@ (8002b64 <HAL_SPI_RxCpltCallback+0xbc>)
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	701a      	strb	r2, [r3, #0]
		else
		{
			MAX31855_ReadTemp_IT(idx_tc);
		}
    }
}
 8002b3e:	e004      	b.n	8002b4a <HAL_SPI_RxCpltCallback+0xa2>
			MAX31855_ReadTemp_IT(idx_tc);
 8002b40:	4b05      	ldr	r3, [pc, #20]	@ (8002b58 <HAL_SPI_RxCpltCallback+0xb0>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff ff81 	bl	8002a4c <MAX31855_ReadTemp_IT>
}
 8002b4a:	bf00      	nop
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40013000 	.word	0x40013000
 8002b58:	240004dd 	.word	0x240004dd
 8002b5c:	240004e0 	.word	0x240004e0
 8002b60:	240004e8 	.word	0x240004e8
 8002b64:	240004dc 	.word	0x240004dc

08002b68 <GetTemp>:



void GetTemp(double* Temp)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < MAX_TC_CH; i++)
 8002b70:	2300      	movs	r3, #0
 8002b72:	73fb      	strb	r3, [r7, #15]
 8002b74:	e00e      	b.n	8002b94 <GetTemp+0x2c>
	{
		Temp[i] = tc[i];
 8002b76:	7bfb      	ldrb	r3, [r7, #15]
 8002b78:	7bfa      	ldrb	r2, [r7, #15]
 8002b7a:	00d2      	lsls	r2, r2, #3
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	4411      	add	r1, r2
 8002b80:	4a09      	ldr	r2, [pc, #36]	@ (8002ba8 <GetTemp+0x40>)
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	4413      	add	r3, r2
 8002b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8a:	e9c1 2300 	strd	r2, r3, [r1]
	for (uint8_t i = 0; i < MAX_TC_CH; i++)
 8002b8e:	7bfb      	ldrb	r3, [r7, #15]
 8002b90:	3301      	adds	r3, #1
 8002b92:	73fb      	strb	r3, [r7, #15]
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	d9ed      	bls.n	8002b76 <GetTemp+0xe>
	}
}
 8002b9a:	bf00      	nop
 8002b9c:	bf00      	nop
 8002b9e:	3714      	adds	r7, #20
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	240004e8 	.word	0x240004e8

08002bac <HAL_UART_RxCpltCallback>:
uint8_t NRecv = 0;

extern void Error_Handler(void);

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART4)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a19      	ldr	r2, [pc, #100]	@ (8002c20 <HAL_UART_RxCpltCallback+0x74>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d12c      	bne.n	8002c18 <HAL_UART_RxCpltCallback+0x6c>
	{
		rx_buffer[rx_index++] = rx_data;
 8002bbe:	4b19      	ldr	r3, [pc, #100]	@ (8002c24 <HAL_UART_RxCpltCallback+0x78>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	1c5a      	adds	r2, r3, #1
 8002bc4:	b2d1      	uxtb	r1, r2
 8002bc6:	4a17      	ldr	r2, [pc, #92]	@ (8002c24 <HAL_UART_RxCpltCallback+0x78>)
 8002bc8:	7011      	strb	r1, [r2, #0]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	4b16      	ldr	r3, [pc, #88]	@ (8002c28 <HAL_UART_RxCpltCallback+0x7c>)
 8002bce:	7819      	ldrb	r1, [r3, #0]
 8002bd0:	4b16      	ldr	r3, [pc, #88]	@ (8002c2c <HAL_UART_RxCpltCallback+0x80>)
 8002bd2:	5499      	strb	r1, [r3, r2]

		if (rx_data == 0x0A)
 8002bd4:	4b14      	ldr	r3, [pc, #80]	@ (8002c28 <HAL_UART_RxCpltCallback+0x7c>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b0a      	cmp	r3, #10
 8002bda:	d110      	bne.n	8002bfe <HAL_UART_RxCpltCallback+0x52>
		{
			fTC = true;
 8002bdc:	4b14      	ldr	r3, [pc, #80]	@ (8002c30 <HAL_UART_RxCpltCallback+0x84>)
 8002bde:	2201      	movs	r2, #1
 8002be0:	701a      	strb	r2, [r3, #0]
			memcpy((void*)tc_buffer, (void*)rx_buffer, sizeof(uint8_t)*rx_index);
 8002be2:	4b10      	ldr	r3, [pc, #64]	@ (8002c24 <HAL_UART_RxCpltCallback+0x78>)
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	461a      	mov	r2, r3
 8002be8:	4910      	ldr	r1, [pc, #64]	@ (8002c2c <HAL_UART_RxCpltCallback+0x80>)
 8002bea:	4812      	ldr	r0, [pc, #72]	@ (8002c34 <HAL_UART_RxCpltCallback+0x88>)
 8002bec:	f00d fe4f 	bl	801088e <memcpy>
			NRecv = rx_index;
 8002bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8002c24 <HAL_UART_RxCpltCallback+0x78>)
 8002bf2:	781a      	ldrb	r2, [r3, #0]
 8002bf4:	4b10      	ldr	r3, [pc, #64]	@ (8002c38 <HAL_UART_RxCpltCallback+0x8c>)
 8002bf6:	701a      	strb	r2, [r3, #0]
			rx_index = 0;
 8002bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8002c24 <HAL_UART_RxCpltCallback+0x78>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	701a      	strb	r2, [r3, #0]
		}

		// 순환 버퍼 또는 수신 종료 문자 조건으로 처리 가능
		if (rx_index >= MAX_TC_SIZE)
 8002bfe:	4b09      	ldr	r3, [pc, #36]	@ (8002c24 <HAL_UART_RxCpltCallback+0x78>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	b25b      	sxtb	r3, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	da02      	bge.n	8002c0e <HAL_UART_RxCpltCallback+0x62>
		{
			rx_index = 0; // 오버플로 방지
 8002c08:	4b06      	ldr	r3, [pc, #24]	@ (8002c24 <HAL_UART_RxCpltCallback+0x78>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	701a      	strb	r2, [r3, #0]
		}

		// 다음 수신 재시작
		HAL_UART_Receive_IT(&huart4, &rx_data, 1);
 8002c0e:	2201      	movs	r2, #1
 8002c10:	4905      	ldr	r1, [pc, #20]	@ (8002c28 <HAL_UART_RxCpltCallback+0x7c>)
 8002c12:	480a      	ldr	r0, [pc, #40]	@ (8002c3c <HAL_UART_RxCpltCallback+0x90>)
 8002c14:	f00a fb58 	bl	800d2c8 <HAL_UART_Receive_IT>
	}
}
 8002c18:	bf00      	nop
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40004c00 	.word	0x40004c00
 8002c24:	2400058c 	.word	0x2400058c
 8002c28:	24000509 	.word	0x24000509
 8002c2c:	2400050c 	.word	0x2400050c
 8002c30:	24000508 	.word	0x24000508
 8002c34:	24000590 	.word	0x24000590
 8002c38:	24000610 	.word	0x24000610
 8002c3c:	240003d8 	.word	0x240003d8

08002c40 <InitTMTC>:

void InitTMTC(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive_IT(&huart4, &rx_data, 1) != HAL_OK)
 8002c44:	2201      	movs	r2, #1
 8002c46:	4905      	ldr	r1, [pc, #20]	@ (8002c5c <InitTMTC+0x1c>)
 8002c48:	4805      	ldr	r0, [pc, #20]	@ (8002c60 <InitTMTC+0x20>)
 8002c4a:	f00a fb3d 	bl	800d2c8 <HAL_UART_Receive_IT>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <InitTMTC+0x18>
	{
		Error_Handler();
 8002c54:	f7fe fbbe 	bl	80013d4 <Error_Handler>
	}
}
 8002c58:	bf00      	nop
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	24000509 	.word	0x24000509
 8002c60:	240003d8 	.word	0x240003d8

08002c64 <GetTC>:

void GetTC(uint8_t* TC)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
	memcpy((void*)TC,(void*)tc_buffer,sizeof(uint8_t)*NRecv);
 8002c6c:	4b05      	ldr	r3, [pc, #20]	@ (8002c84 <GetTC+0x20>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	461a      	mov	r2, r3
 8002c72:	4905      	ldr	r1, [pc, #20]	@ (8002c88 <GetTC+0x24>)
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f00d fe0a 	bl	801088e <memcpy>
}
 8002c7a:	bf00      	nop
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	24000610 	.word	0x24000610
 8002c88:	24000590 	.word	0x24000590

08002c8c <SendTM>:

void SendTM(uint8_t* TM)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
	uint8_t n_send = strlen((char*)TM);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f7fd fb83 	bl	80003a0 <strlen>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart4, (uint8_t*)TM, n_send, HAL_MAX_DELAY);
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	4803      	ldr	r0, [pc, #12]	@ (8002cb8 <SendTM+0x2c>)
 8002caa:	f00a fa7f 	bl	800d1ac <HAL_UART_Transmit>
}
 8002cae:	bf00      	nop
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	240003d8 	.word	0x240003d8

08002cbc <SVCmdDecoding>:

void SVCmdDecoding(uint8_t* sv)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b0a6      	sub	sp, #152	@ 0x98
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
	uint8_t TC[MAX_TC_SIZE];
	GetTC(TC);
 8002cc4:	f107 030c 	add.w	r3, r7, #12
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff ffcb 	bl	8002c64 <GetTC>

	uint8_t sv_cnt = 0;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	char* tok;
	tok = strtok((char*)TC,",");
 8002cd4:	f107 030c 	add.w	r3, r7, #12
 8002cd8:	4921      	ldr	r1, [pc, #132]	@ (8002d60 <SVCmdDecoding+0xa4>)
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f00d fd04 	bl	80106e8 <strtok>
 8002ce0:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
	if (strcmp(tok,"IGRVT") == 0)
 8002ce4:	491f      	ldr	r1, [pc, #124]	@ (8002d64 <SVCmdDecoding+0xa8>)
 8002ce6:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002cea:	f7fd faf9 	bl	80002e0 <strcmp>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d131      	bne.n	8002d58 <SVCmdDecoding+0x9c>
	{
		tok = strtok(NULL,",");
 8002cf4:	491a      	ldr	r1, [pc, #104]	@ (8002d60 <SVCmdDecoding+0xa4>)
 8002cf6:	2000      	movs	r0, #0
 8002cf8:	f00d fcf6 	bl	80106e8 <strtok>
 8002cfc:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
		while( tok != NULL)
 8002d00:	e024      	b.n	8002d4c <SVCmdDecoding+0x90>
		{
			uint8_t data = (uint8_t)atoi(tok);
 8002d02:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002d06:	f00c fe4d 	bl	800f9a4 <atoi>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (data == 999)
				{
					sv_cnt = 0;
					break;
				}
				else if (data <= 1)
 8002d10:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d80a      	bhi.n	8002d2e <SVCmdDecoding+0x72>
				{
					sv[sv_cnt] = atoi(tok);
 8002d18:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002d1c:	f00c fe42 	bl	800f9a4 <atoi>
 8002d20:	4601      	mov	r1, r0
 8002d22:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	4413      	add	r3, r2
 8002d2a:	b2ca      	uxtb	r2, r1
 8002d2c:	701a      	strb	r2, [r3, #0]
				}
			}
			sv_cnt++;
 8002d2e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002d32:	3301      	adds	r3, #1
 8002d34:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
			if (sv_cnt > MAX_SV_NUM)
 8002d38:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002d3c:	2b06      	cmp	r3, #6
 8002d3e:	d80a      	bhi.n	8002d56 <SVCmdDecoding+0x9a>
			{
				break;
			}

			tok = strtok(NULL,",");
 8002d40:	4907      	ldr	r1, [pc, #28]	@ (8002d60 <SVCmdDecoding+0xa4>)
 8002d42:	2000      	movs	r0, #0
 8002d44:	f00d fcd0 	bl	80106e8 <strtok>
 8002d48:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
		while( tok != NULL)
 8002d4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1d6      	bne.n	8002d02 <SVCmdDecoding+0x46>
		}
	}
}
 8002d54:	e000      	b.n	8002d58 <SVCmdDecoding+0x9c>
				break;
 8002d56:	bf00      	nop
}
 8002d58:	bf00      	nop
 8002d5a:	3798      	adds	r7, #152	@ 0x98
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	08012774 	.word	0x08012774
 8002d64:	08012778 	.word	0x08012778

08002d68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002d68:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002da4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002d6c:	f7fd fd64 	bl	8000838 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d70:	f7fd fcb4 	bl	80006dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d74:	480c      	ldr	r0, [pc, #48]	@ (8002da8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d76:	490d      	ldr	r1, [pc, #52]	@ (8002dac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d78:	4a0d      	ldr	r2, [pc, #52]	@ (8002db0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d7c:	e002      	b.n	8002d84 <LoopCopyDataInit>

08002d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d82:	3304      	adds	r3, #4

08002d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d88:	d3f9      	bcc.n	8002d7e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002db4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d8c:	4c0a      	ldr	r4, [pc, #40]	@ (8002db8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d90:	e001      	b.n	8002d96 <LoopFillZerobss>

08002d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d94:	3204      	adds	r2, #4

08002d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d98:	d3fb      	bcc.n	8002d92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d9a:	f00d fd51 	bl	8010840 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d9e:	f7fd fdc1 	bl	8000924 <main>
  bx  lr
 8002da2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002da4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002da8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002dac:	240001f4 	.word	0x240001f4
  ldr r2, =_sidata
 8002db0:	08012ba8 	.word	0x08012ba8
  ldr r2, =_sbss
 8002db4:	240001f8 	.word	0x240001f8
  ldr r4, =_ebss
 8002db8:	24000804 	.word	0x24000804

08002dbc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dbc:	e7fe      	b.n	8002dbc <ADC3_IRQHandler>
	...

08002dc0 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b08c      	sub	sp, #48	@ 0x30
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d009      	beq.n	8002de8 <BSP_LED_Init+0x28>
 8002dd4:	79fb      	ldrb	r3, [r7, #7]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d006      	beq.n	8002de8 <BSP_LED_Init+0x28>
 8002dda:	79fb      	ldrb	r3, [r7, #7]
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d003      	beq.n	8002de8 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002de0:	f06f 0301 	mvn.w	r3, #1
 8002de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002de6:	e055      	b.n	8002e94 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8002de8:	79fb      	ldrb	r3, [r7, #7]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10f      	bne.n	8002e0e <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8002dee:	4b2c      	ldr	r3, [pc, #176]	@ (8002ea0 <BSP_LED_Init+0xe0>)
 8002df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002df4:	4a2a      	ldr	r2, [pc, #168]	@ (8002ea0 <BSP_LED_Init+0xe0>)
 8002df6:	f043 0302 	orr.w	r3, r3, #2
 8002dfa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002dfe:	4b28      	ldr	r3, [pc, #160]	@ (8002ea0 <BSP_LED_Init+0xe0>)
 8002e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	617b      	str	r3, [r7, #20]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	e021      	b.n	8002e52 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8002e0e:	79fb      	ldrb	r3, [r7, #7]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d10f      	bne.n	8002e34 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8002e14:	4b22      	ldr	r3, [pc, #136]	@ (8002ea0 <BSP_LED_Init+0xe0>)
 8002e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e1a:	4a21      	ldr	r2, [pc, #132]	@ (8002ea0 <BSP_LED_Init+0xe0>)
 8002e1c:	f043 0310 	orr.w	r3, r3, #16
 8002e20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e24:	4b1e      	ldr	r3, [pc, #120]	@ (8002ea0 <BSP_LED_Init+0xe0>)
 8002e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e2a:	f003 0310 	and.w	r3, r3, #16
 8002e2e:	613b      	str	r3, [r7, #16]
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	e00e      	b.n	8002e52 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8002e34:	4b1a      	ldr	r3, [pc, #104]	@ (8002ea0 <BSP_LED_Init+0xe0>)
 8002e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e3a:	4a19      	ldr	r2, [pc, #100]	@ (8002ea0 <BSP_LED_Init+0xe0>)
 8002e3c:	f043 0302 	orr.w	r3, r3, #2
 8002e40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e44:	4b16      	ldr	r3, [pc, #88]	@ (8002ea0 <BSP_LED_Init+0xe0>)
 8002e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8002e52:	79fb      	ldrb	r3, [r7, #7]
 8002e54:	4a13      	ldr	r2, [pc, #76]	@ (8002ea4 <BSP_LED_Init+0xe4>)
 8002e56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e5a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8002e60:	2300      	movs	r3, #0
 8002e62:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e64:	2303      	movs	r3, #3
 8002e66:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002e68:	79fb      	ldrb	r3, [r7, #7]
 8002e6a:	4a0f      	ldr	r2, [pc, #60]	@ (8002ea8 <BSP_LED_Init+0xe8>)
 8002e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e70:	f107 0218 	add.w	r2, r7, #24
 8002e74:	4611      	mov	r1, r2
 8002e76:	4618      	mov	r0, r3
 8002e78:	f004 fff2 	bl	8007e60 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002e7c:	79fb      	ldrb	r3, [r7, #7]
 8002e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ea8 <BSP_LED_Init+0xe8>)
 8002e80:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002e84:	79fb      	ldrb	r3, [r7, #7]
 8002e86:	4a07      	ldr	r2, [pc, #28]	@ (8002ea4 <BSP_LED_Init+0xe4>)
 8002e88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	4619      	mov	r1, r3
 8002e90:	f005 f996 	bl	80081c0 <HAL_GPIO_WritePin>
  }

  return ret;
 8002e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3730      	adds	r7, #48	@ 0x30
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	58024400 	.word	0x58024400
 8002ea4:	08012790 	.word	0x08012790
 8002ea8:	2400000c 	.word	0x2400000c

08002eac <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d009      	beq.n	8002ed4 <BSP_LED_On+0x28>
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d006      	beq.n	8002ed4 <BSP_LED_On+0x28>
 8002ec6:	79fb      	ldrb	r3, [r7, #7]
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d003      	beq.n	8002ed4 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002ecc:	f06f 0301 	mvn.w	r3, #1
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	e00b      	b.n	8002eec <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
 8002ed6:	4a08      	ldr	r2, [pc, #32]	@ (8002ef8 <BSP_LED_On+0x4c>)
 8002ed8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002edc:	79fb      	ldrb	r3, [r7, #7]
 8002ede:	4a07      	ldr	r2, [pc, #28]	@ (8002efc <BSP_LED_On+0x50>)
 8002ee0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	f005 f96a 	bl	80081c0 <HAL_GPIO_WritePin>
  }

  return ret;
 8002eec:	68fb      	ldr	r3, [r7, #12]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	2400000c 	.word	0x2400000c
 8002efc:	08012790 	.word	0x08012790

08002f00 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8002f0e:	79fb      	ldrb	r3, [r7, #7]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d009      	beq.n	8002f28 <BSP_LED_Off+0x28>
 8002f14:	79fb      	ldrb	r3, [r7, #7]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d006      	beq.n	8002f28 <BSP_LED_Off+0x28>
 8002f1a:	79fb      	ldrb	r3, [r7, #7]
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d003      	beq.n	8002f28 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002f20:	f06f 0301 	mvn.w	r3, #1
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	e00b      	b.n	8002f40 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	4a08      	ldr	r2, [pc, #32]	@ (8002f4c <BSP_LED_Off+0x4c>)
 8002f2c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002f30:	79fb      	ldrb	r3, [r7, #7]
 8002f32:	4a07      	ldr	r2, [pc, #28]	@ (8002f50 <BSP_LED_Off+0x50>)
 8002f34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	f005 f940 	bl	80081c0 <HAL_GPIO_WritePin>
  }

  return ret;
 8002f40:	68fb      	ldr	r3, [r7, #12]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	2400000c 	.word	0x2400000c
 8002f50:	08012790 	.word	0x08012790

08002f54 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d009      	beq.n	8002f7c <BSP_LED_Toggle+0x28>
 8002f68:	79fb      	ldrb	r3, [r7, #7]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d006      	beq.n	8002f7c <BSP_LED_Toggle+0x28>
 8002f6e:	79fb      	ldrb	r3, [r7, #7]
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d003      	beq.n	8002f7c <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002f74:	f06f 0301 	mvn.w	r3, #1
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	e00b      	b.n	8002f94 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002f7c:	79fb      	ldrb	r3, [r7, #7]
 8002f7e:	4a08      	ldr	r2, [pc, #32]	@ (8002fa0 <BSP_LED_Toggle+0x4c>)
 8002f80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002f84:	79fb      	ldrb	r3, [r7, #7]
 8002f86:	4907      	ldr	r1, [pc, #28]	@ (8002fa4 <BSP_LED_Toggle+0x50>)
 8002f88:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4610      	mov	r0, r2
 8002f90:	f005 f92f 	bl	80081f2 <HAL_GPIO_TogglePin>
  }

  return ret;
 8002f94:	68fb      	ldr	r3, [r7, #12]
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	2400000c 	.word	0x2400000c
 8002fa4:	08012790 	.word	0x08012790

08002fa8 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b088      	sub	sp, #32
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	460a      	mov	r2, r1
 8002fb2:	71fb      	strb	r3, [r7, #7]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8002fb8:	4b2e      	ldr	r3, [pc, #184]	@ (8003074 <BSP_PB_Init+0xcc>)
 8002fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fbe:	4a2d      	ldr	r2, [pc, #180]	@ (8003074 <BSP_PB_Init+0xcc>)
 8002fc0:	f043 0304 	orr.w	r3, r3, #4
 8002fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002fc8:	4b2a      	ldr	r3, [pc, #168]	@ (8003074 <BSP_PB_Init+0xcc>)
 8002fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fce:	f003 0304 	and.w	r3, r3, #4
 8002fd2:	60bb      	str	r3, [r7, #8]
 8002fd4:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8002fd6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002fda:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002fdc:	2302      	movs	r3, #2
 8002fde:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8002fe4:	79bb      	ldrb	r3, [r7, #6]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10c      	bne.n	8003004 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002fea:	2300      	movs	r3, #0
 8002fec:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8002fee:	79fb      	ldrb	r3, [r7, #7]
 8002ff0:	4a21      	ldr	r2, [pc, #132]	@ (8003078 <BSP_PB_Init+0xd0>)
 8002ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff6:	f107 020c 	add.w	r2, r7, #12
 8002ffa:	4611      	mov	r1, r2
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f004 ff2f 	bl	8007e60 <HAL_GPIO_Init>
 8003002:	e031      	b.n	8003068 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8003004:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003008:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	4a1a      	ldr	r2, [pc, #104]	@ (8003078 <BSP_PB_Init+0xd0>)
 800300e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003012:	f107 020c 	add.w	r2, r7, #12
 8003016:	4611      	mov	r1, r2
 8003018:	4618      	mov	r0, r3
 800301a:	f004 ff21 	bl	8007e60 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800301e:	79fb      	ldrb	r3, [r7, #7]
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	4a16      	ldr	r2, [pc, #88]	@ (800307c <BSP_PB_Init+0xd4>)
 8003024:	441a      	add	r2, r3
 8003026:	79fb      	ldrb	r3, [r7, #7]
 8003028:	4915      	ldr	r1, [pc, #84]	@ (8003080 <BSP_PB_Init+0xd8>)
 800302a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800302e:	4619      	mov	r1, r3
 8003030:	4610      	mov	r0, r2
 8003032:	f004 fec4 	bl	8007dbe <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8003036:	79fb      	ldrb	r3, [r7, #7]
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	4a10      	ldr	r2, [pc, #64]	@ (800307c <BSP_PB_Init+0xd4>)
 800303c:	1898      	adds	r0, r3, r2
 800303e:	79fb      	ldrb	r3, [r7, #7]
 8003040:	4a10      	ldr	r2, [pc, #64]	@ (8003084 <BSP_PB_Init+0xdc>)
 8003042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003046:	461a      	mov	r2, r3
 8003048:	2100      	movs	r1, #0
 800304a:	f004 fe99 	bl	8007d80 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800304e:	2028      	movs	r0, #40	@ 0x28
 8003050:	79fb      	ldrb	r3, [r7, #7]
 8003052:	4a0d      	ldr	r2, [pc, #52]	@ (8003088 <BSP_PB_Init+0xe0>)
 8003054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003058:	2200      	movs	r2, #0
 800305a:	4619      	mov	r1, r3
 800305c:	f002 f80d 	bl	800507a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8003060:	2328      	movs	r3, #40	@ 0x28
 8003062:	4618      	mov	r0, r3
 8003064:	f002 f823 	bl	80050ae <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3720      	adds	r7, #32
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	58024400 	.word	0x58024400
 8003078:	24000018 	.word	0x24000018
 800307c:	24000614 	.word	0x24000614
 8003080:	08012798 	.word	0x08012798
 8003084:	2400001c 	.word	0x2400001c
 8003088:	24000020 	.word	0x24000020

0800308c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	4603      	mov	r3, r0
 8003094:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8003096:	79fb      	ldrb	r3, [r7, #7]
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	4a04      	ldr	r2, [pc, #16]	@ (80030ac <BSP_PB_IRQHandler+0x20>)
 800309c:	4413      	add	r3, r2
 800309e:	4618      	mov	r0, r3
 80030a0:	f004 fea2 	bl	8007de8 <HAL_EXTI_IRQHandler>
}
 80030a4:	bf00      	nop
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	24000614 	.word	0x24000614

080030b0 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	6039      	str	r1, [r7, #0]
 80030ba:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80030bc:	2300      	movs	r3, #0
 80030be:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80030c6:	f06f 0301 	mvn.w	r3, #1
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	e018      	b.n	8003100 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80030ce:	79fb      	ldrb	r3, [r7, #7]
 80030d0:	2294      	movs	r2, #148	@ 0x94
 80030d2:	fb02 f303 	mul.w	r3, r2, r3
 80030d6:	4a0d      	ldr	r2, [pc, #52]	@ (800310c <BSP_COM_Init+0x5c>)
 80030d8:	4413      	add	r3, r2
 80030da:	4618      	mov	r0, r3
 80030dc:	f000 f86e 	bl	80031bc <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80030e0:	79fb      	ldrb	r3, [r7, #7]
 80030e2:	2294      	movs	r2, #148	@ 0x94
 80030e4:	fb02 f303 	mul.w	r3, r2, r3
 80030e8:	4a08      	ldr	r2, [pc, #32]	@ (800310c <BSP_COM_Init+0x5c>)
 80030ea:	4413      	add	r3, r2
 80030ec:	6839      	ldr	r1, [r7, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 f80e 	bl	8003110 <MX_USART3_Init>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80030fa:	f06f 0303 	mvn.w	r3, #3
 80030fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003100:	68fb      	ldr	r3, [r7, #12]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	2400061c 	.word	0x2400061c

08003110 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800311a:	4b15      	ldr	r3, [pc, #84]	@ (8003170 <MX_USART3_Init+0x60>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	220c      	movs	r2, #12
 800312e:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	895b      	ldrh	r3, [r3, #10]
 8003134:	461a      	mov	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	891b      	ldrh	r3, [r3, #8]
 8003146:	461a      	mov	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	899b      	ldrh	r3, [r3, #12]
 8003150:	461a      	mov	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800315c:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f009 ffd4 	bl	800d10c <HAL_UART_Init>
 8003164:	4603      	mov	r3, r0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	24000008 	.word	0x24000008

08003174 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 800317c:	4b09      	ldr	r3, [pc, #36]	@ (80031a4 <__io_putchar+0x30>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	461a      	mov	r2, r3
 8003182:	2394      	movs	r3, #148	@ 0x94
 8003184:	fb02 f303 	mul.w	r3, r2, r3
 8003188:	4a07      	ldr	r2, [pc, #28]	@ (80031a8 <__io_putchar+0x34>)
 800318a:	1898      	adds	r0, r3, r2
 800318c:	1d39      	adds	r1, r7, #4
 800318e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003192:	2201      	movs	r2, #1
 8003194:	f00a f80a 	bl	800d1ac <HAL_UART_Transmit>
  return ch;
 8003198:	687b      	ldr	r3, [r7, #4]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	240006b0 	.word	0x240006b0
 80031a8:	2400061c 	.word	0x2400061c

080031ac <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80031b0:	2000      	movs	r0, #0
 80031b2:	f7fe f8fb 	bl	80013ac <BSP_PB_Callback>
}
 80031b6:	bf00      	nop
 80031b8:	bd80      	pop	{r7, pc}
	...

080031bc <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08a      	sub	sp, #40	@ 0x28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80031c4:	4b27      	ldr	r3, [pc, #156]	@ (8003264 <COM1_MspInit+0xa8>)
 80031c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031ca:	4a26      	ldr	r2, [pc, #152]	@ (8003264 <COM1_MspInit+0xa8>)
 80031cc:	f043 0308 	orr.w	r3, r3, #8
 80031d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031d4:	4b23      	ldr	r3, [pc, #140]	@ (8003264 <COM1_MspInit+0xa8>)
 80031d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	613b      	str	r3, [r7, #16]
 80031e0:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80031e2:	4b20      	ldr	r3, [pc, #128]	@ (8003264 <COM1_MspInit+0xa8>)
 80031e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031e8:	4a1e      	ldr	r2, [pc, #120]	@ (8003264 <COM1_MspInit+0xa8>)
 80031ea:	f043 0308 	orr.w	r3, r3, #8
 80031ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031f2:	4b1c      	ldr	r3, [pc, #112]	@ (8003264 <COM1_MspInit+0xa8>)
 80031f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031f8:	f003 0308 	and.w	r3, r3, #8
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8003200:	4b18      	ldr	r3, [pc, #96]	@ (8003264 <COM1_MspInit+0xa8>)
 8003202:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003206:	4a17      	ldr	r2, [pc, #92]	@ (8003264 <COM1_MspInit+0xa8>)
 8003208:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800320c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003210:	4b14      	ldr	r3, [pc, #80]	@ (8003264 <COM1_MspInit+0xa8>)
 8003212:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003216:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800321a:	60bb      	str	r3, [r7, #8]
 800321c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 800321e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003222:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003224:	2302      	movs	r3, #2
 8003226:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003228:	2302      	movs	r3, #2
 800322a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800322c:	2301      	movs	r3, #1
 800322e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8003230:	2307      	movs	r3, #7
 8003232:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8003234:	f107 0314 	add.w	r3, r7, #20
 8003238:	4619      	mov	r1, r3
 800323a:	480b      	ldr	r0, [pc, #44]	@ (8003268 <COM1_MspInit+0xac>)
 800323c:	f004 fe10 	bl	8007e60 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8003240:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003244:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003246:	2302      	movs	r3, #2
 8003248:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800324a:	2307      	movs	r3, #7
 800324c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800324e:	f107 0314 	add.w	r3, r7, #20
 8003252:	4619      	mov	r1, r3
 8003254:	4804      	ldr	r0, [pc, #16]	@ (8003268 <COM1_MspInit+0xac>)
 8003256:	f004 fe03 	bl	8007e60 <HAL_GPIO_Init>
}
 800325a:	bf00      	nop
 800325c:	3728      	adds	r7, #40	@ 0x28
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	58024400 	.word	0x58024400
 8003268:	58020c00 	.word	0x58020c00

0800326c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003272:	2003      	movs	r0, #3
 8003274:	f001 fef6 	bl	8005064 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003278:	f005 fe6e 	bl	8008f58 <HAL_RCC_GetSysClockFreq>
 800327c:	4602      	mov	r2, r0
 800327e:	4b15      	ldr	r3, [pc, #84]	@ (80032d4 <HAL_Init+0x68>)
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	0a1b      	lsrs	r3, r3, #8
 8003284:	f003 030f 	and.w	r3, r3, #15
 8003288:	4913      	ldr	r1, [pc, #76]	@ (80032d8 <HAL_Init+0x6c>)
 800328a:	5ccb      	ldrb	r3, [r1, r3]
 800328c:	f003 031f 	and.w	r3, r3, #31
 8003290:	fa22 f303 	lsr.w	r3, r2, r3
 8003294:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003296:	4b0f      	ldr	r3, [pc, #60]	@ (80032d4 <HAL_Init+0x68>)
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	f003 030f 	and.w	r3, r3, #15
 800329e:	4a0e      	ldr	r2, [pc, #56]	@ (80032d8 <HAL_Init+0x6c>)
 80032a0:	5cd3      	ldrb	r3, [r2, r3]
 80032a2:	f003 031f 	and.w	r3, r3, #31
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	fa22 f303 	lsr.w	r3, r2, r3
 80032ac:	4a0b      	ldr	r2, [pc, #44]	@ (80032dc <HAL_Init+0x70>)
 80032ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032b0:	4a0b      	ldr	r2, [pc, #44]	@ (80032e0 <HAL_Init+0x74>)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032b6:	2000      	movs	r0, #0
 80032b8:	f000 f814 	bl	80032e4 <HAL_InitTick>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e002      	b.n	80032cc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80032c6:	f7fe f9d1 	bl	800166c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	58024400 	.word	0x58024400
 80032d8:	08012780 	.word	0x08012780
 80032dc:	24000004 	.word	0x24000004
 80032e0:	24000000 	.word	0x24000000

080032e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80032ec:	4b15      	ldr	r3, [pc, #84]	@ (8003344 <HAL_InitTick+0x60>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e021      	b.n	800333c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80032f8:	4b13      	ldr	r3, [pc, #76]	@ (8003348 <HAL_InitTick+0x64>)
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	4b11      	ldr	r3, [pc, #68]	@ (8003344 <HAL_InitTick+0x60>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	4619      	mov	r1, r3
 8003302:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003306:	fbb3 f3f1 	udiv	r3, r3, r1
 800330a:	fbb2 f3f3 	udiv	r3, r2, r3
 800330e:	4618      	mov	r0, r3
 8003310:	f001 fedb 	bl	80050ca <HAL_SYSTICK_Config>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e00e      	b.n	800333c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b0f      	cmp	r3, #15
 8003322:	d80a      	bhi.n	800333a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003324:	2200      	movs	r2, #0
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	f04f 30ff 	mov.w	r0, #4294967295
 800332c:	f001 fea5 	bl	800507a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003330:	4a06      	ldr	r2, [pc, #24]	@ (800334c <HAL_InitTick+0x68>)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003336:	2300      	movs	r3, #0
 8003338:	e000      	b.n	800333c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
}
 800333c:	4618      	mov	r0, r3
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	24000028 	.word	0x24000028
 8003348:	24000000 	.word	0x24000000
 800334c:	24000024 	.word	0x24000024

08003350 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003354:	4b06      	ldr	r3, [pc, #24]	@ (8003370 <HAL_IncTick+0x20>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	461a      	mov	r2, r3
 800335a:	4b06      	ldr	r3, [pc, #24]	@ (8003374 <HAL_IncTick+0x24>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4413      	add	r3, r2
 8003360:	4a04      	ldr	r2, [pc, #16]	@ (8003374 <HAL_IncTick+0x24>)
 8003362:	6013      	str	r3, [r2, #0]
}
 8003364:	bf00      	nop
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	24000028 	.word	0x24000028
 8003374:	240006b4 	.word	0x240006b4

08003378 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  return uwTick;
 800337c:	4b03      	ldr	r3, [pc, #12]	@ (800338c <HAL_GetTick+0x14>)
 800337e:	681b      	ldr	r3, [r3, #0]
}
 8003380:	4618      	mov	r0, r3
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	240006b4 	.word	0x240006b4

08003390 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003394:	4b03      	ldr	r3, [pc, #12]	@ (80033a4 <HAL_GetREVID+0x14>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	0c1b      	lsrs	r3, r3, #16
}
 800339a:	4618      	mov	r0, r3
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	5c001000 	.word	0x5c001000

080033a8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80033b0:	4b06      	ldr	r3, [pc, #24]	@ (80033cc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f023 0202 	bic.w	r2, r3, #2
 80033b8:	4904      	ldr	r1, [pc, #16]	@ (80033cc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4313      	orrs	r3, r2
 80033be:	600b      	str	r3, [r1, #0]
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	58003c00 	.word	0x58003c00

080033d0 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80033d4:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a04      	ldr	r2, [pc, #16]	@ (80033ec <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80033da:	f023 0301 	bic.w	r3, r3, #1
 80033de:	6013      	str	r3, [r2, #0]
}
 80033e0:	bf00      	nop
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	58003c00 	.word	0x58003c00

080033f0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80033fa:	4b07      	ldr	r3, [pc, #28]	@ (8003418 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	43db      	mvns	r3, r3
 8003402:	401a      	ands	r2, r3
 8003404:	4904      	ldr	r1, [pc, #16]	@ (8003418 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	4313      	orrs	r3, r2
 800340a:	604b      	str	r3, [r1, #4]
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	58000400 	.word	0x58000400

0800341c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	431a      	orrs	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	609a      	str	r2, [r3, #8]
}
 8003436:	bf00      	nop
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
 800344a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	431a      	orrs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	609a      	str	r2, [r3, #8]
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003478:	4618      	mov	r0, r3
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003484:	b480      	push	{r7}
 8003486:	b087      	sub	sp, #28
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003494:	2b00      	cmp	r3, #0
 8003496:	d107      	bne.n	80034a8 <LL_ADC_SetChannelPreselection+0x24>
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	0e9b      	lsrs	r3, r3, #26
 800349c:	f003 031f 	and.w	r3, r3, #31
 80034a0:	2201      	movs	r2, #1
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	e015      	b.n	80034d4 <LL_ADC_SetChannelPreselection+0x50>
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	fa93 f3a3 	rbit	r3, r3
 80034b2:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 80034be:	2320      	movs	r3, #32
 80034c0:	e003      	b.n	80034ca <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	fab3 f383 	clz	r3, r3
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	f003 031f 	and.w	r3, r3, #31
 80034ce:	2201      	movs	r2, #1
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	69d2      	ldr	r2, [r2, #28]
 80034d8:	431a      	orrs	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 80034de:	bf00      	nop
 80034e0:	371c      	adds	r7, #28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b087      	sub	sp, #28
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	607a      	str	r2, [r7, #4]
 80034f6:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	3360      	adds	r3, #96	@ 0x60
 80034fc:	461a      	mov	r2, r3
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	430b      	orrs	r3, r1
 8003518:	431a      	orrs	r2, r3
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800351e:	bf00      	nop
 8003520:	371c      	adds	r7, #28
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800352a:	b480      	push	{r7}
 800352c:	b085      	sub	sp, #20
 800352e:	af00      	add	r7, sp, #0
 8003530:	60f8      	str	r0, [r7, #12]
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	f003 031f 	and.w	r3, r3, #31
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	fa01 f303 	lsl.w	r3, r1, r3
 800354a:	431a      	orrs	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	611a      	str	r2, [r3, #16]
}
 8003550:	bf00      	nop
 8003552:	3714      	adds	r7, #20
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800355c:	b480      	push	{r7}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	3360      	adds	r3, #96	@ 0x60
 800356c:	461a      	mov	r2, r3
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	431a      	orrs	r2, r3
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	601a      	str	r2, [r3, #0]
  }
}
 8003586:	bf00      	nop
 8003588:	371c      	adds	r7, #28
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003592:	b480      	push	{r7}
 8003594:	b083      	sub	sp, #12
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b087      	sub	sp, #28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	3330      	adds	r3, #48	@ 0x30
 80035c8:	461a      	mov	r2, r3
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	0a1b      	lsrs	r3, r3, #8
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	f003 030c 	and.w	r3, r3, #12
 80035d4:	4413      	add	r3, r2
 80035d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	f003 031f 	and.w	r3, r3, #31
 80035e2:	211f      	movs	r1, #31
 80035e4:	fa01 f303 	lsl.w	r3, r1, r3
 80035e8:	43db      	mvns	r3, r3
 80035ea:	401a      	ands	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	0e9b      	lsrs	r3, r3, #26
 80035f0:	f003 011f 	and.w	r1, r3, #31
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f003 031f 	and.w	r3, r3, #31
 80035fa:	fa01 f303 	lsl.w	r3, r1, r3
 80035fe:	431a      	orrs	r2, r3
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003604:	bf00      	nop
 8003606:	371c      	adds	r7, #28
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f023 0203 	bic.w	r2, r3, #3
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	431a      	orrs	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	60da      	str	r2, [r3, #12]
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003636:	b480      	push	{r7}
 8003638:	b083      	sub	sp, #12
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003642:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800364a:	2301      	movs	r3, #1
 800364c:	e000      	b.n	8003650 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800365c:	b480      	push	{r7}
 800365e:	b087      	sub	sp, #28
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	3314      	adds	r3, #20
 800366c:	461a      	mov	r2, r3
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	0e5b      	lsrs	r3, r3, #25
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	4413      	add	r3, r2
 800367a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	0d1b      	lsrs	r3, r3, #20
 8003684:	f003 031f 	and.w	r3, r3, #31
 8003688:	2107      	movs	r1, #7
 800368a:	fa01 f303 	lsl.w	r3, r1, r3
 800368e:	43db      	mvns	r3, r3
 8003690:	401a      	ands	r2, r3
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	0d1b      	lsrs	r3, r3, #20
 8003696:	f003 031f 	and.w	r3, r3, #31
 800369a:	6879      	ldr	r1, [r7, #4]
 800369c:	fa01 f303 	lsl.w	r3, r1, r3
 80036a0:	431a      	orrs	r2, r3
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80036a6:	bf00      	nop
 80036a8:	371c      	adds	r7, #28
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
	...

080036b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036cc:	43db      	mvns	r3, r3
 80036ce:	401a      	ands	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f003 0318 	and.w	r3, r3, #24
 80036d6:	4908      	ldr	r1, [pc, #32]	@ (80036f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80036d8:	40d9      	lsrs	r1, r3
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	400b      	ands	r3, r1
 80036de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036e2:	431a      	orrs	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80036ea:	bf00      	nop
 80036ec:	3714      	adds	r7, #20
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	000fffff 	.word	0x000fffff

080036fc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 031f 	and.w	r3, r3, #31
}
 800370c:	4618      	mov	r0, r3
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8003728:	4618      	mov	r0, r3
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	4b04      	ldr	r3, [pc, #16]	@ (8003754 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003742:	4013      	ands	r3, r2
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6093      	str	r3, [r2, #8]
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	5fffffc0 	.word	0x5fffffc0

08003758 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003768:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800376c:	d101      	bne.n	8003772 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800376e:	2301      	movs	r3, #1
 8003770:	e000      	b.n	8003774 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	4b05      	ldr	r3, [pc, #20]	@ (80037a4 <LL_ADC_EnableInternalRegulator+0x24>)
 800378e:	4013      	ands	r3, r2
 8003790:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	6fffffc0 	.word	0x6fffffc0

080037a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037bc:	d101      	bne.n	80037c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80037be:	2301      	movs	r3, #1
 80037c0:	e000      	b.n	80037c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	4b05      	ldr	r3, [pc, #20]	@ (80037f4 <LL_ADC_Enable+0x24>)
 80037de:	4013      	ands	r3, r2
 80037e0:	f043 0201 	orr.w	r2, r3, #1
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	7fffffc0 	.word	0x7fffffc0

080037f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b01      	cmp	r3, #1
 800380a:	d101      	bne.n	8003810 <LL_ADC_IsEnabled+0x18>
 800380c:	2301      	movs	r3, #1
 800380e:	e000      	b.n	8003812 <LL_ADC_IsEnabled+0x1a>
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
	...

08003820 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	4b05      	ldr	r3, [pc, #20]	@ (8003844 <LL_ADC_REG_StartConversion+0x24>)
 800382e:	4013      	ands	r3, r2
 8003830:	f043 0204 	orr.w	r2, r3, #4
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	7fffffc0 	.word	0x7fffffc0

08003848 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b04      	cmp	r3, #4
 800385a:	d101      	bne.n	8003860 <LL_ADC_REG_IsConversionOngoing+0x18>
 800385c:	2301      	movs	r3, #1
 800385e:	e000      	b.n	8003862 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	2b08      	cmp	r3, #8
 8003880:	d101      	bne.n	8003886 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003882:	2301      	movs	r3, #1
 8003884:	e000      	b.n	8003888 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003894:	b590      	push	{r4, r7, lr}
 8003896:	b089      	sub	sp, #36	@ 0x24
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800389c:	2300      	movs	r3, #0
 800389e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80038a0:	2300      	movs	r3, #0
 80038a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e18f      	b.n	8003bce <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d109      	bne.n	80038d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7fd ff01 	bl	80016c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff ff3f 	bl	8003758 <LL_ADC_IsDeepPowerDownEnabled>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d004      	beq.n	80038ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff ff25 	bl	8003734 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff ff5a 	bl	80037a8 <LL_ADC_IsInternalRegulatorEnabled>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d114      	bne.n	8003924 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff ff3e 	bl	8003780 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003904:	4b87      	ldr	r3, [pc, #540]	@ (8003b24 <HAL_ADC_Init+0x290>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	099b      	lsrs	r3, r3, #6
 800390a:	4a87      	ldr	r2, [pc, #540]	@ (8003b28 <HAL_ADC_Init+0x294>)
 800390c:	fba2 2303 	umull	r2, r3, r2, r3
 8003910:	099b      	lsrs	r3, r3, #6
 8003912:	3301      	adds	r3, #1
 8003914:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003916:	e002      	b.n	800391e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	3b01      	subs	r3, #1
 800391c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1f9      	bne.n	8003918 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff ff3d 	bl	80037a8 <LL_ADC_IsInternalRegulatorEnabled>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10d      	bne.n	8003950 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003938:	f043 0210 	orr.w	r2, r3, #16
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003944:	f043 0201 	orr.w	r2, r3, #1
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff ff77 	bl	8003848 <LL_ADC_REG_IsConversionOngoing>
 800395a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003960:	f003 0310 	and.w	r3, r3, #16
 8003964:	2b00      	cmp	r3, #0
 8003966:	f040 8129 	bne.w	8003bbc <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2b00      	cmp	r3, #0
 800396e:	f040 8125 	bne.w	8003bbc <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003976:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800397a:	f043 0202 	orr.w	r2, r3, #2
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff ff36 	bl	80037f8 <LL_ADC_IsEnabled>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d136      	bne.n	8003a00 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a65      	ldr	r2, [pc, #404]	@ (8003b2c <HAL_ADC_Init+0x298>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d004      	beq.n	80039a6 <HAL_ADC_Init+0x112>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a63      	ldr	r2, [pc, #396]	@ (8003b30 <HAL_ADC_Init+0x29c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d10e      	bne.n	80039c4 <HAL_ADC_Init+0x130>
 80039a6:	4861      	ldr	r0, [pc, #388]	@ (8003b2c <HAL_ADC_Init+0x298>)
 80039a8:	f7ff ff26 	bl	80037f8 <LL_ADC_IsEnabled>
 80039ac:	4604      	mov	r4, r0
 80039ae:	4860      	ldr	r0, [pc, #384]	@ (8003b30 <HAL_ADC_Init+0x29c>)
 80039b0:	f7ff ff22 	bl	80037f8 <LL_ADC_IsEnabled>
 80039b4:	4603      	mov	r3, r0
 80039b6:	4323      	orrs	r3, r4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	bf0c      	ite	eq
 80039bc:	2301      	moveq	r3, #1
 80039be:	2300      	movne	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	e008      	b.n	80039d6 <HAL_ADC_Init+0x142>
 80039c4:	485b      	ldr	r0, [pc, #364]	@ (8003b34 <HAL_ADC_Init+0x2a0>)
 80039c6:	f7ff ff17 	bl	80037f8 <LL_ADC_IsEnabled>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	bf0c      	ite	eq
 80039d0:	2301      	moveq	r3, #1
 80039d2:	2300      	movne	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d012      	beq.n	8003a00 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a53      	ldr	r2, [pc, #332]	@ (8003b2c <HAL_ADC_Init+0x298>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d004      	beq.n	80039ee <HAL_ADC_Init+0x15a>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a51      	ldr	r2, [pc, #324]	@ (8003b30 <HAL_ADC_Init+0x29c>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d101      	bne.n	80039f2 <HAL_ADC_Init+0x15e>
 80039ee:	4a52      	ldr	r2, [pc, #328]	@ (8003b38 <HAL_ADC_Init+0x2a4>)
 80039f0:	e000      	b.n	80039f4 <HAL_ADC_Init+0x160>
 80039f2:	4a52      	ldr	r2, [pc, #328]	@ (8003b3c <HAL_ADC_Init+0x2a8>)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	4619      	mov	r1, r3
 80039fa:	4610      	mov	r0, r2
 80039fc:	f7ff fd0e 	bl	800341c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003a00:	f7ff fcc6 	bl	8003390 <HAL_GetREVID>
 8003a04:	4603      	mov	r3, r0
 8003a06:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d914      	bls.n	8003a38 <HAL_ADC_Init+0x1a4>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	2b10      	cmp	r3, #16
 8003a14:	d110      	bne.n	8003a38 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	7d5b      	ldrb	r3, [r3, #21]
 8003a1a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003a20:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003a26:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	7f1b      	ldrb	r3, [r3, #28]
 8003a2c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003a2e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003a30:	f043 030c 	orr.w	r3, r3, #12
 8003a34:	61bb      	str	r3, [r7, #24]
 8003a36:	e00d      	b.n	8003a54 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	7d5b      	ldrb	r3, [r3, #21]
 8003a3c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003a42:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003a48:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	7f1b      	ldrb	r3, [r3, #28]
 8003a4e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003a50:	4313      	orrs	r3, r2
 8003a52:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	7f1b      	ldrb	r3, [r3, #28]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d106      	bne.n	8003a6a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	3b01      	subs	r3, #1
 8003a62:	045b      	lsls	r3, r3, #17
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d009      	beq.n	8003a86 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a76:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a7e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68da      	ldr	r2, [r3, #12]
 8003a8c:	4b2c      	ldr	r3, [pc, #176]	@ (8003b40 <HAL_ADC_Init+0x2ac>)
 8003a8e:	4013      	ands	r3, r2
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	6812      	ldr	r2, [r2, #0]
 8003a94:	69b9      	ldr	r1, [r7, #24]
 8003a96:	430b      	orrs	r3, r1
 8003a98:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7ff fed2 	bl	8003848 <LL_ADC_REG_IsConversionOngoing>
 8003aa4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7ff fedf 	bl	800386e <LL_ADC_INJ_IsConversionOngoing>
 8003ab0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d15f      	bne.n	8003b78 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d15c      	bne.n	8003b78 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	7d1b      	ldrb	r3, [r3, #20]
 8003ac2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68da      	ldr	r2, [r3, #12]
 8003ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8003b44 <HAL_ADC_Init+0x2b0>)
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6812      	ldr	r2, [r2, #0]
 8003ada:	69b9      	ldr	r1, [r7, #24]
 8003adc:	430b      	orrs	r3, r1
 8003ade:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d130      	bne.n	8003b4c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aee:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	691a      	ldr	r2, [r3, #16]
 8003af6:	4b14      	ldr	r3, [pc, #80]	@ (8003b48 <HAL_ADC_Init+0x2b4>)
 8003af8:	4013      	ands	r3, r2
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003afe:	3a01      	subs	r2, #1
 8003b00:	0411      	lsls	r1, r2, #16
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003b06:	4311      	orrs	r1, r2
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003b0c:	4311      	orrs	r1, r2
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003b12:	430a      	orrs	r2, r1
 8003b14:	431a      	orrs	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0201 	orr.w	r2, r2, #1
 8003b1e:	611a      	str	r2, [r3, #16]
 8003b20:	e01c      	b.n	8003b5c <HAL_ADC_Init+0x2c8>
 8003b22:	bf00      	nop
 8003b24:	24000000 	.word	0x24000000
 8003b28:	053e2d63 	.word	0x053e2d63
 8003b2c:	40022000 	.word	0x40022000
 8003b30:	40022100 	.word	0x40022100
 8003b34:	58026000 	.word	0x58026000
 8003b38:	40022300 	.word	0x40022300
 8003b3c:	58026300 	.word	0x58026300
 8003b40:	fff0c003 	.word	0xfff0c003
 8003b44:	ffffbffc 	.word	0xffffbffc
 8003b48:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	691a      	ldr	r2, [r3, #16]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 0201 	bic.w	r2, r2, #1
 8003b5a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 ff64 	bl	8004a40 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d10c      	bne.n	8003b9a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b86:	f023 010f 	bic.w	r1, r3, #15
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	1e5a      	subs	r2, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b98:	e007      	b.n	8003baa <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 020f 	bic.w	r2, r2, #15
 8003ba8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bae:	f023 0303 	bic.w	r3, r3, #3
 8003bb2:	f043 0201 	orr.w	r2, r3, #1
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	655a      	str	r2, [r3, #84]	@ 0x54
 8003bba:	e007      	b.n	8003bcc <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc0:	f043 0210 	orr.w	r2, r3, #16
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003bcc:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3724      	adds	r7, #36	@ 0x24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd90      	pop	{r4, r7, pc}
 8003bd6:	bf00      	nop

08003bd8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a55      	ldr	r2, [pc, #340]	@ (8003d40 <HAL_ADC_Start_DMA+0x168>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d004      	beq.n	8003bf8 <HAL_ADC_Start_DMA+0x20>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a54      	ldr	r2, [pc, #336]	@ (8003d44 <HAL_ADC_Start_DMA+0x16c>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d101      	bne.n	8003bfc <HAL_ADC_Start_DMA+0x24>
 8003bf8:	4b53      	ldr	r3, [pc, #332]	@ (8003d48 <HAL_ADC_Start_DMA+0x170>)
 8003bfa:	e000      	b.n	8003bfe <HAL_ADC_Start_DMA+0x26>
 8003bfc:	4b53      	ldr	r3, [pc, #332]	@ (8003d4c <HAL_ADC_Start_DMA+0x174>)
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff fd7c 	bl	80036fc <LL_ADC_GetMultimode>
 8003c04:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7ff fe1c 	bl	8003848 <LL_ADC_REG_IsConversionOngoing>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f040 808c 	bne.w	8003d30 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d101      	bne.n	8003c26 <HAL_ADC_Start_DMA+0x4e>
 8003c22:	2302      	movs	r3, #2
 8003c24:	e087      	b.n	8003d36 <HAL_ADC_Start_DMA+0x15e>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d005      	beq.n	8003c40 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	2b05      	cmp	r3, #5
 8003c38:	d002      	beq.n	8003c40 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	2b09      	cmp	r3, #9
 8003c3e:	d170      	bne.n	8003d22 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 fddf 	bl	8004804 <ADC_Enable>
 8003c46:	4603      	mov	r3, r0
 8003c48:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003c4a:	7dfb      	ldrb	r3, [r7, #23]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d163      	bne.n	8003d18 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003c54:	4b3e      	ldr	r3, [pc, #248]	@ (8003d50 <HAL_ADC_Start_DMA+0x178>)
 8003c56:	4013      	ands	r3, r2
 8003c58:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a37      	ldr	r2, [pc, #220]	@ (8003d44 <HAL_ADC_Start_DMA+0x16c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d002      	beq.n	8003c70 <HAL_ADC_Start_DMA+0x98>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	e000      	b.n	8003c72 <HAL_ADC_Start_DMA+0x9a>
 8003c70:	4b33      	ldr	r3, [pc, #204]	@ (8003d40 <HAL_ADC_Start_DMA+0x168>)
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	6812      	ldr	r2, [r2, #0]
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d002      	beq.n	8003c80 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d105      	bne.n	8003c8c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c84:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d006      	beq.n	8003ca6 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c9c:	f023 0206 	bic.w	r2, r3, #6
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	659a      	str	r2, [r3, #88]	@ 0x58
 8003ca4:	e002      	b.n	8003cac <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cb0:	4a28      	ldr	r2, [pc, #160]	@ (8003d54 <HAL_ADC_Start_DMA+0x17c>)
 8003cb2:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cb8:	4a27      	ldr	r2, [pc, #156]	@ (8003d58 <HAL_ADC_Start_DMA+0x180>)
 8003cba:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cc0:	4a26      	ldr	r2, [pc, #152]	@ (8003d5c <HAL_ADC_Start_DMA+0x184>)
 8003cc2:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	221c      	movs	r2, #28
 8003cca:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0210 	orr.w	r2, r2, #16
 8003ce2:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cec:	4619      	mov	r1, r3
 8003cee:	4610      	mov	r0, r2
 8003cf0:	f7ff fc8e 	bl	8003610 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	3340      	adds	r3, #64	@ 0x40
 8003cfe:	4619      	mov	r1, r3
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f001 fd5c 	bl	80057c0 <HAL_DMA_Start_IT>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7ff fd85 	bl	8003820 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003d16:	e00d      	b.n	8003d34 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8003d20:	e008      	b.n	8003d34 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003d2e:	e001      	b.n	8003d34 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003d30:	2302      	movs	r3, #2
 8003d32:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3718      	adds	r7, #24
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	40022000 	.word	0x40022000
 8003d44:	40022100 	.word	0x40022100
 8003d48:	40022300 	.word	0x40022300
 8003d4c:	58026300 	.word	0x58026300
 8003d50:	fffff0fe 	.word	0xfffff0fe
 8003d54:	08004919 	.word	0x08004919
 8003d58:	080049f1 	.word	0x080049f1
 8003d5c:	08004a0d 	.word	0x08004a0d

08003d60 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b08a      	sub	sp, #40	@ 0x28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003d68:	2300      	movs	r3, #0
 8003d6a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a87      	ldr	r2, [pc, #540]	@ (8003fa0 <HAL_ADC_IRQHandler+0x240>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d004      	beq.n	8003d90 <HAL_ADC_IRQHandler+0x30>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a86      	ldr	r2, [pc, #536]	@ (8003fa4 <HAL_ADC_IRQHandler+0x244>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d101      	bne.n	8003d94 <HAL_ADC_IRQHandler+0x34>
 8003d90:	4b85      	ldr	r3, [pc, #532]	@ (8003fa8 <HAL_ADC_IRQHandler+0x248>)
 8003d92:	e000      	b.n	8003d96 <HAL_ADC_IRQHandler+0x36>
 8003d94:	4b85      	ldr	r3, [pc, #532]	@ (8003fac <HAL_ADC_IRQHandler+0x24c>)
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7ff fcb0 	bl	80036fc <LL_ADC_GetMultimode>
 8003d9c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d017      	beq.n	8003dd8 <HAL_ADC_IRQHandler+0x78>
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d012      	beq.n	8003dd8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003db6:	f003 0310 	and.w	r3, r3, #16
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d105      	bne.n	8003dca <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dc2:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 ff92 	bl	8004cf4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	f003 0304 	and.w	r3, r3, #4
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d004      	beq.n	8003dec <HAL_ADC_IRQHandler+0x8c>
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10a      	bne.n	8003e02 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 8083 	beq.w	8003efe <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d07d      	beq.n	8003efe <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e06:	f003 0310 	and.w	r3, r3, #16
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d105      	bne.n	8003e1a <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e12:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7ff fbb7 	bl	8003592 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d062      	beq.n	8003ef0 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a5d      	ldr	r2, [pc, #372]	@ (8003fa4 <HAL_ADC_IRQHandler+0x244>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d002      	beq.n	8003e3a <HAL_ADC_IRQHandler+0xda>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	e000      	b.n	8003e3c <HAL_ADC_IRQHandler+0xdc>
 8003e3a:	4b59      	ldr	r3, [pc, #356]	@ (8003fa0 <HAL_ADC_IRQHandler+0x240>)
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	6812      	ldr	r2, [r2, #0]
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d008      	beq.n	8003e56 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d005      	beq.n	8003e56 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	2b05      	cmp	r3, #5
 8003e4e:	d002      	beq.n	8003e56 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	2b09      	cmp	r3, #9
 8003e54:	d104      	bne.n	8003e60 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	623b      	str	r3, [r7, #32]
 8003e5e:	e00c      	b.n	8003e7a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a4f      	ldr	r2, [pc, #316]	@ (8003fa4 <HAL_ADC_IRQHandler+0x244>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d002      	beq.n	8003e70 <HAL_ADC_IRQHandler+0x110>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	e000      	b.n	8003e72 <HAL_ADC_IRQHandler+0x112>
 8003e70:	4b4b      	ldr	r3, [pc, #300]	@ (8003fa0 <HAL_ADC_IRQHandler+0x240>)
 8003e72:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003e7a:	6a3b      	ldr	r3, [r7, #32]
 8003e7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d135      	bne.n	8003ef0 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0308 	and.w	r3, r3, #8
 8003e8e:	2b08      	cmp	r3, #8
 8003e90:	d12e      	bne.n	8003ef0 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7ff fcd6 	bl	8003848 <LL_ADC_REG_IsConversionOngoing>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d11a      	bne.n	8003ed8 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 020c 	bic.w	r2, r2, #12
 8003eb0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ec2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d112      	bne.n	8003ef0 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ece:	f043 0201 	orr.w	r2, r3, #1
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	655a      	str	r2, [r3, #84]	@ 0x54
 8003ed6:	e00b      	b.n	8003ef0 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003edc:	f043 0210 	orr.w	r2, r3, #16
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ee8:	f043 0201 	orr.w	r2, r3, #1
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 f96f 	bl	80041d4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	220c      	movs	r2, #12
 8003efc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	f003 0320 	and.w	r3, r3, #32
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d004      	beq.n	8003f12 <HAL_ADC_IRQHandler+0x1b2>
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	f003 0320 	and.w	r3, r3, #32
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10b      	bne.n	8003f2a <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 80a0 	beq.w	800405e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 809a 	beq.w	800405e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f2e:	f003 0310 	and.w	r3, r3, #16
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d105      	bne.n	8003f42 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f3a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7ff fb75 	bl	8003636 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003f4c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff fb1d 	bl	8003592 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003f58:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a11      	ldr	r2, [pc, #68]	@ (8003fa4 <HAL_ADC_IRQHandler+0x244>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d002      	beq.n	8003f6a <HAL_ADC_IRQHandler+0x20a>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	e000      	b.n	8003f6c <HAL_ADC_IRQHandler+0x20c>
 8003f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003fa0 <HAL_ADC_IRQHandler+0x240>)
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	6812      	ldr	r2, [r2, #0]
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d008      	beq.n	8003f86 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d005      	beq.n	8003f86 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	2b06      	cmp	r3, #6
 8003f7e:	d002      	beq.n	8003f86 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	2b07      	cmp	r3, #7
 8003f84:	d104      	bne.n	8003f90 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	623b      	str	r3, [r7, #32]
 8003f8e:	e014      	b.n	8003fba <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a03      	ldr	r2, [pc, #12]	@ (8003fa4 <HAL_ADC_IRQHandler+0x244>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d00a      	beq.n	8003fb0 <HAL_ADC_IRQHandler+0x250>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	e008      	b.n	8003fb2 <HAL_ADC_IRQHandler+0x252>
 8003fa0:	40022000 	.word	0x40022000
 8003fa4:	40022100 	.word	0x40022100
 8003fa8:	40022300 	.word	0x40022300
 8003fac:	58026300 	.word	0x58026300
 8003fb0:	4b84      	ldr	r3, [pc, #528]	@ (80041c4 <HAL_ADC_IRQHandler+0x464>)
 8003fb2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d047      	beq.n	8004050 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003fc0:	6a3b      	ldr	r3, [r7, #32]
 8003fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d007      	beq.n	8003fda <HAL_ADC_IRQHandler+0x27a>
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d03f      	beq.n	8004050 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003fd0:	6a3b      	ldr	r3, [r7, #32]
 8003fd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d13a      	bne.n	8004050 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe4:	2b40      	cmp	r3, #64	@ 0x40
 8003fe6:	d133      	bne.n	8004050 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d12e      	bne.n	8004050 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7ff fc39 	bl	800386e <LL_ADC_INJ_IsConversionOngoing>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d11a      	bne.n	8004038 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004010:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004016:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004026:	2b00      	cmp	r3, #0
 8004028:	d112      	bne.n	8004050 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800402e:	f043 0201 	orr.w	r2, r3, #1
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	655a      	str	r2, [r3, #84]	@ 0x54
 8004036:	e00b      	b.n	8004050 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800403c:	f043 0210 	orr.w	r2, r3, #16
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004048:	f043 0201 	orr.w	r2, r3, #1
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 fe27 	bl	8004ca4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2260      	movs	r2, #96	@ 0x60
 800405c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004064:	2b00      	cmp	r3, #0
 8004066:	d011      	beq.n	800408c <HAL_ADC_IRQHandler+0x32c>
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00c      	beq.n	800408c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004076:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f8bc 	bl	80041fc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2280      	movs	r2, #128	@ 0x80
 800408a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004092:	2b00      	cmp	r3, #0
 8004094:	d012      	beq.n	80040bc <HAL_ADC_IRQHandler+0x35c>
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00d      	beq.n	80040bc <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 fe0d 	bl	8004ccc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80040ba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d012      	beq.n	80040ec <HAL_ADC_IRQHandler+0x38c>
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00d      	beq.n	80040ec <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040d4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 fdff 	bl	8004ce0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040ea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	f003 0310 	and.w	r3, r3, #16
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d043      	beq.n	800417e <HAL_ADC_IRQHandler+0x41e>
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	f003 0310 	and.w	r3, r3, #16
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d03e      	beq.n	800417e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004104:	2b00      	cmp	r3, #0
 8004106:	d102      	bne.n	800410e <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8004108:	2301      	movs	r3, #1
 800410a:	627b      	str	r3, [r7, #36]	@ 0x24
 800410c:	e021      	b.n	8004152 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d015      	beq.n	8004140 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a2a      	ldr	r2, [pc, #168]	@ (80041c4 <HAL_ADC_IRQHandler+0x464>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d004      	beq.n	8004128 <HAL_ADC_IRQHandler+0x3c8>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a29      	ldr	r2, [pc, #164]	@ (80041c8 <HAL_ADC_IRQHandler+0x468>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d101      	bne.n	800412c <HAL_ADC_IRQHandler+0x3cc>
 8004128:	4b28      	ldr	r3, [pc, #160]	@ (80041cc <HAL_ADC_IRQHandler+0x46c>)
 800412a:	e000      	b.n	800412e <HAL_ADC_IRQHandler+0x3ce>
 800412c:	4b28      	ldr	r3, [pc, #160]	@ (80041d0 <HAL_ADC_IRQHandler+0x470>)
 800412e:	4618      	mov	r0, r3
 8004130:	f7ff faf2 	bl	8003718 <LL_ADC_GetMultiDMATransfer>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00b      	beq.n	8004152 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800413a:	2301      	movs	r3, #1
 800413c:	627b      	str	r3, [r7, #36]	@ 0x24
 800413e:	e008      	b.n	8004152 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800414e:	2301      	movs	r3, #1
 8004150:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004154:	2b01      	cmp	r3, #1
 8004156:	d10e      	bne.n	8004176 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800415c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004168:	f043 0202 	orr.w	r2, r3, #2
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f84d 	bl	8004210 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2210      	movs	r2, #16
 800417c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004184:	2b00      	cmp	r3, #0
 8004186:	d018      	beq.n	80041ba <HAL_ADC_IRQHandler+0x45a>
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800418e:	2b00      	cmp	r3, #0
 8004190:	d013      	beq.n	80041ba <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004196:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a2:	f043 0208 	orr.w	r2, r3, #8
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80041b2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 fd7f 	bl	8004cb8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80041ba:	bf00      	nop
 80041bc:	3728      	adds	r7, #40	@ 0x28
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	40022000 	.word	0x40022000
 80041c8:	40022100 	.word	0x40022100
 80041cc:	40022300 	.word	0x40022300
 80041d0:	58026300 	.word	0x58026300

080041d4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004224:	b590      	push	{r4, r7, lr}
 8004226:	b08d      	sub	sp, #52	@ 0x34
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800422e:	2300      	movs	r3, #0
 8004230:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004234:	2300      	movs	r3, #0
 8004236:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	4a65      	ldr	r2, [pc, #404]	@ (80043d4 <HAL_ADC_ConfigChannel+0x1b0>)
 800423e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004246:	2b01      	cmp	r3, #1
 8004248:	d101      	bne.n	800424e <HAL_ADC_ConfigChannel+0x2a>
 800424a:	2302      	movs	r3, #2
 800424c:	e2c7      	b.n	80047de <HAL_ADC_ConfigChannel+0x5ba>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4618      	mov	r0, r3
 800425c:	f7ff faf4 	bl	8003848 <LL_ADC_REG_IsConversionOngoing>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	f040 82ac 	bne.w	80047c0 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	db2c      	blt.n	80042ca <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004278:	2b00      	cmp	r3, #0
 800427a:	d108      	bne.n	800428e <HAL_ADC_ConfigChannel+0x6a>
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	0e9b      	lsrs	r3, r3, #26
 8004282:	f003 031f 	and.w	r3, r3, #31
 8004286:	2201      	movs	r2, #1
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	e016      	b.n	80042bc <HAL_ADC_ConfigChannel+0x98>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	fa93 f3a3 	rbit	r3, r3
 800429a:	613b      	str	r3, [r7, #16]
  return result;
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 80042a6:	2320      	movs	r3, #32
 80042a8:	e003      	b.n	80042b2 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	fab3 f383 	clz	r3, r3
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	f003 031f 	and.w	r3, r3, #31
 80042b6:	2201      	movs	r2, #1
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	6812      	ldr	r2, [r2, #0]
 80042c0:	69d1      	ldr	r1, [r2, #28]
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	6812      	ldr	r2, [r2, #0]
 80042c6:	430b      	orrs	r3, r1
 80042c8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6818      	ldr	r0, [r3, #0]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	6859      	ldr	r1, [r3, #4]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	461a      	mov	r2, r3
 80042d8:	f7ff f96e 	bl	80035b8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7ff fab1 	bl	8003848 <LL_ADC_REG_IsConversionOngoing>
 80042e6:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7ff fabe 	bl	800386e <LL_ADC_INJ_IsConversionOngoing>
 80042f2:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80042f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f040 80b8 	bne.w	800446c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80042fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f040 80b4 	bne.w	800446c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6818      	ldr	r0, [r3, #0]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	6819      	ldr	r1, [r3, #0]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	461a      	mov	r2, r3
 8004312:	f7ff f9a3 	bl	800365c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004316:	4b30      	ldr	r3, [pc, #192]	@ (80043d8 <HAL_ADC_ConfigChannel+0x1b4>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800431e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004322:	d10b      	bne.n	800433c <HAL_ADC_ConfigChannel+0x118>
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	695a      	ldr	r2, [r3, #20]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	089b      	lsrs	r3, r3, #2
 8004330:	f003 0307 	and.w	r3, r3, #7
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	fa02 f303 	lsl.w	r3, r2, r3
 800433a:	e01d      	b.n	8004378 <HAL_ADC_ConfigChannel+0x154>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	f003 0310 	and.w	r3, r3, #16
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10b      	bne.n	8004362 <HAL_ADC_ConfigChannel+0x13e>
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	695a      	ldr	r2, [r3, #20]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	089b      	lsrs	r3, r3, #2
 8004356:	f003 0307 	and.w	r3, r3, #7
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	fa02 f303 	lsl.w	r3, r2, r3
 8004360:	e00a      	b.n	8004378 <HAL_ADC_ConfigChannel+0x154>
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	695a      	ldr	r2, [r3, #20]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	089b      	lsrs	r3, r3, #2
 800436e:	f003 0304 	and.w	r3, r3, #4
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	fa02 f303 	lsl.w	r3, r2, r3
 8004378:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	2b04      	cmp	r3, #4
 8004380:	d02c      	beq.n	80043dc <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6818      	ldr	r0, [r3, #0]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	6919      	ldr	r1, [r3, #16]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	6a3b      	ldr	r3, [r7, #32]
 8004390:	f7ff f8ab 	bl	80034ea <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6818      	ldr	r0, [r3, #0]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	6919      	ldr	r1, [r3, #16]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	7e5b      	ldrb	r3, [r3, #25]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d102      	bne.n	80043aa <HAL_ADC_ConfigChannel+0x186>
 80043a4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80043a8:	e000      	b.n	80043ac <HAL_ADC_ConfigChannel+0x188>
 80043aa:	2300      	movs	r3, #0
 80043ac:	461a      	mov	r2, r3
 80043ae:	f7ff f8d5 	bl	800355c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6818      	ldr	r0, [r3, #0]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	6919      	ldr	r1, [r3, #16]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	7e1b      	ldrb	r3, [r3, #24]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d102      	bne.n	80043c8 <HAL_ADC_ConfigChannel+0x1a4>
 80043c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80043c6:	e000      	b.n	80043ca <HAL_ADC_ConfigChannel+0x1a6>
 80043c8:	2300      	movs	r3, #0
 80043ca:	461a      	mov	r2, r3
 80043cc:	f7ff f8ad 	bl	800352a <LL_ADC_SetDataRightShift>
 80043d0:	e04c      	b.n	800446c <HAL_ADC_ConfigChannel+0x248>
 80043d2:	bf00      	nop
 80043d4:	47ff0000 	.word	0x47ff0000
 80043d8:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	069b      	lsls	r3, r3, #26
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d107      	bne.n	8004400 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80043fe:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004406:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	069b      	lsls	r3, r3, #26
 8004410:	429a      	cmp	r2, r3
 8004412:	d107      	bne.n	8004424 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004422:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800442a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	069b      	lsls	r3, r3, #26
 8004434:	429a      	cmp	r2, r3
 8004436:	d107      	bne.n	8004448 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004446:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800444e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	069b      	lsls	r3, r3, #26
 8004458:	429a      	cmp	r2, r3
 800445a:	d107      	bne.n	800446c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800446a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4618      	mov	r0, r3
 8004472:	f7ff f9c1 	bl	80037f8 <LL_ADC_IsEnabled>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	f040 81aa 	bne.w	80047d2 <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6818      	ldr	r0, [r3, #0]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	6819      	ldr	r1, [r3, #0]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	461a      	mov	r2, r3
 800448c:	f7ff f912 	bl	80036b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	4a87      	ldr	r2, [pc, #540]	@ (80046b4 <HAL_ADC_ConfigChannel+0x490>)
 8004496:	4293      	cmp	r3, r2
 8004498:	f040 809a 	bne.w	80045d0 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4984      	ldr	r1, [pc, #528]	@ (80046b8 <HAL_ADC_ConfigChannel+0x494>)
 80044a6:	428b      	cmp	r3, r1
 80044a8:	d147      	bne.n	800453a <HAL_ADC_ConfigChannel+0x316>
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4983      	ldr	r1, [pc, #524]	@ (80046bc <HAL_ADC_ConfigChannel+0x498>)
 80044b0:	428b      	cmp	r3, r1
 80044b2:	d040      	beq.n	8004536 <HAL_ADC_ConfigChannel+0x312>
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4981      	ldr	r1, [pc, #516]	@ (80046c0 <HAL_ADC_ConfigChannel+0x49c>)
 80044ba:	428b      	cmp	r3, r1
 80044bc:	d039      	beq.n	8004532 <HAL_ADC_ConfigChannel+0x30e>
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4980      	ldr	r1, [pc, #512]	@ (80046c4 <HAL_ADC_ConfigChannel+0x4a0>)
 80044c4:	428b      	cmp	r3, r1
 80044c6:	d032      	beq.n	800452e <HAL_ADC_ConfigChannel+0x30a>
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	497e      	ldr	r1, [pc, #504]	@ (80046c8 <HAL_ADC_ConfigChannel+0x4a4>)
 80044ce:	428b      	cmp	r3, r1
 80044d0:	d02b      	beq.n	800452a <HAL_ADC_ConfigChannel+0x306>
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	497d      	ldr	r1, [pc, #500]	@ (80046cc <HAL_ADC_ConfigChannel+0x4a8>)
 80044d8:	428b      	cmp	r3, r1
 80044da:	d024      	beq.n	8004526 <HAL_ADC_ConfigChannel+0x302>
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	497b      	ldr	r1, [pc, #492]	@ (80046d0 <HAL_ADC_ConfigChannel+0x4ac>)
 80044e2:	428b      	cmp	r3, r1
 80044e4:	d01d      	beq.n	8004522 <HAL_ADC_ConfigChannel+0x2fe>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	497a      	ldr	r1, [pc, #488]	@ (80046d4 <HAL_ADC_ConfigChannel+0x4b0>)
 80044ec:	428b      	cmp	r3, r1
 80044ee:	d016      	beq.n	800451e <HAL_ADC_ConfigChannel+0x2fa>
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4978      	ldr	r1, [pc, #480]	@ (80046d8 <HAL_ADC_ConfigChannel+0x4b4>)
 80044f6:	428b      	cmp	r3, r1
 80044f8:	d00f      	beq.n	800451a <HAL_ADC_ConfigChannel+0x2f6>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4977      	ldr	r1, [pc, #476]	@ (80046dc <HAL_ADC_ConfigChannel+0x4b8>)
 8004500:	428b      	cmp	r3, r1
 8004502:	d008      	beq.n	8004516 <HAL_ADC_ConfigChannel+0x2f2>
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4975      	ldr	r1, [pc, #468]	@ (80046e0 <HAL_ADC_ConfigChannel+0x4bc>)
 800450a:	428b      	cmp	r3, r1
 800450c:	d101      	bne.n	8004512 <HAL_ADC_ConfigChannel+0x2ee>
 800450e:	4b75      	ldr	r3, [pc, #468]	@ (80046e4 <HAL_ADC_ConfigChannel+0x4c0>)
 8004510:	e05a      	b.n	80045c8 <HAL_ADC_ConfigChannel+0x3a4>
 8004512:	2300      	movs	r3, #0
 8004514:	e058      	b.n	80045c8 <HAL_ADC_ConfigChannel+0x3a4>
 8004516:	4b74      	ldr	r3, [pc, #464]	@ (80046e8 <HAL_ADC_ConfigChannel+0x4c4>)
 8004518:	e056      	b.n	80045c8 <HAL_ADC_ConfigChannel+0x3a4>
 800451a:	4b74      	ldr	r3, [pc, #464]	@ (80046ec <HAL_ADC_ConfigChannel+0x4c8>)
 800451c:	e054      	b.n	80045c8 <HAL_ADC_ConfigChannel+0x3a4>
 800451e:	4b6e      	ldr	r3, [pc, #440]	@ (80046d8 <HAL_ADC_ConfigChannel+0x4b4>)
 8004520:	e052      	b.n	80045c8 <HAL_ADC_ConfigChannel+0x3a4>
 8004522:	4b6c      	ldr	r3, [pc, #432]	@ (80046d4 <HAL_ADC_ConfigChannel+0x4b0>)
 8004524:	e050      	b.n	80045c8 <HAL_ADC_ConfigChannel+0x3a4>
 8004526:	4b72      	ldr	r3, [pc, #456]	@ (80046f0 <HAL_ADC_ConfigChannel+0x4cc>)
 8004528:	e04e      	b.n	80045c8 <HAL_ADC_ConfigChannel+0x3a4>
 800452a:	4b72      	ldr	r3, [pc, #456]	@ (80046f4 <HAL_ADC_ConfigChannel+0x4d0>)
 800452c:	e04c      	b.n	80045c8 <HAL_ADC_ConfigChannel+0x3a4>
 800452e:	4b72      	ldr	r3, [pc, #456]	@ (80046f8 <HAL_ADC_ConfigChannel+0x4d4>)
 8004530:	e04a      	b.n	80045c8 <HAL_ADC_ConfigChannel+0x3a4>
 8004532:	4b72      	ldr	r3, [pc, #456]	@ (80046fc <HAL_ADC_ConfigChannel+0x4d8>)
 8004534:	e048      	b.n	80045c8 <HAL_ADC_ConfigChannel+0x3a4>
 8004536:	2301      	movs	r3, #1
 8004538:	e046      	b.n	80045c8 <HAL_ADC_ConfigChannel+0x3a4>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4970      	ldr	r1, [pc, #448]	@ (8004700 <HAL_ADC_ConfigChannel+0x4dc>)
 8004540:	428b      	cmp	r3, r1
 8004542:	d140      	bne.n	80045c6 <HAL_ADC_ConfigChannel+0x3a2>
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	495c      	ldr	r1, [pc, #368]	@ (80046bc <HAL_ADC_ConfigChannel+0x498>)
 800454a:	428b      	cmp	r3, r1
 800454c:	d039      	beq.n	80045c2 <HAL_ADC_ConfigChannel+0x39e>
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	495b      	ldr	r1, [pc, #364]	@ (80046c0 <HAL_ADC_ConfigChannel+0x49c>)
 8004554:	428b      	cmp	r3, r1
 8004556:	d032      	beq.n	80045be <HAL_ADC_ConfigChannel+0x39a>
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4959      	ldr	r1, [pc, #356]	@ (80046c4 <HAL_ADC_ConfigChannel+0x4a0>)
 800455e:	428b      	cmp	r3, r1
 8004560:	d02b      	beq.n	80045ba <HAL_ADC_ConfigChannel+0x396>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4958      	ldr	r1, [pc, #352]	@ (80046c8 <HAL_ADC_ConfigChannel+0x4a4>)
 8004568:	428b      	cmp	r3, r1
 800456a:	d024      	beq.n	80045b6 <HAL_ADC_ConfigChannel+0x392>
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4956      	ldr	r1, [pc, #344]	@ (80046cc <HAL_ADC_ConfigChannel+0x4a8>)
 8004572:	428b      	cmp	r3, r1
 8004574:	d01d      	beq.n	80045b2 <HAL_ADC_ConfigChannel+0x38e>
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4955      	ldr	r1, [pc, #340]	@ (80046d0 <HAL_ADC_ConfigChannel+0x4ac>)
 800457c:	428b      	cmp	r3, r1
 800457e:	d016      	beq.n	80045ae <HAL_ADC_ConfigChannel+0x38a>
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4953      	ldr	r1, [pc, #332]	@ (80046d4 <HAL_ADC_ConfigChannel+0x4b0>)
 8004586:	428b      	cmp	r3, r1
 8004588:	d00f      	beq.n	80045aa <HAL_ADC_ConfigChannel+0x386>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4952      	ldr	r1, [pc, #328]	@ (80046d8 <HAL_ADC_ConfigChannel+0x4b4>)
 8004590:	428b      	cmp	r3, r1
 8004592:	d008      	beq.n	80045a6 <HAL_ADC_ConfigChannel+0x382>
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4951      	ldr	r1, [pc, #324]	@ (80046e0 <HAL_ADC_ConfigChannel+0x4bc>)
 800459a:	428b      	cmp	r3, r1
 800459c:	d101      	bne.n	80045a2 <HAL_ADC_ConfigChannel+0x37e>
 800459e:	4b51      	ldr	r3, [pc, #324]	@ (80046e4 <HAL_ADC_ConfigChannel+0x4c0>)
 80045a0:	e012      	b.n	80045c8 <HAL_ADC_ConfigChannel+0x3a4>
 80045a2:	2300      	movs	r3, #0
 80045a4:	e010      	b.n	80045c8 <HAL_ADC_ConfigChannel+0x3a4>
 80045a6:	4b51      	ldr	r3, [pc, #324]	@ (80046ec <HAL_ADC_ConfigChannel+0x4c8>)
 80045a8:	e00e      	b.n	80045c8 <HAL_ADC_ConfigChannel+0x3a4>
 80045aa:	4b4b      	ldr	r3, [pc, #300]	@ (80046d8 <HAL_ADC_ConfigChannel+0x4b4>)
 80045ac:	e00c      	b.n	80045c8 <HAL_ADC_ConfigChannel+0x3a4>
 80045ae:	4b49      	ldr	r3, [pc, #292]	@ (80046d4 <HAL_ADC_ConfigChannel+0x4b0>)
 80045b0:	e00a      	b.n	80045c8 <HAL_ADC_ConfigChannel+0x3a4>
 80045b2:	4b4f      	ldr	r3, [pc, #316]	@ (80046f0 <HAL_ADC_ConfigChannel+0x4cc>)
 80045b4:	e008      	b.n	80045c8 <HAL_ADC_ConfigChannel+0x3a4>
 80045b6:	4b4f      	ldr	r3, [pc, #316]	@ (80046f4 <HAL_ADC_ConfigChannel+0x4d0>)
 80045b8:	e006      	b.n	80045c8 <HAL_ADC_ConfigChannel+0x3a4>
 80045ba:	4b4f      	ldr	r3, [pc, #316]	@ (80046f8 <HAL_ADC_ConfigChannel+0x4d4>)
 80045bc:	e004      	b.n	80045c8 <HAL_ADC_ConfigChannel+0x3a4>
 80045be:	4b4f      	ldr	r3, [pc, #316]	@ (80046fc <HAL_ADC_ConfigChannel+0x4d8>)
 80045c0:	e002      	b.n	80045c8 <HAL_ADC_ConfigChannel+0x3a4>
 80045c2:	2301      	movs	r3, #1
 80045c4:	e000      	b.n	80045c8 <HAL_ADC_ConfigChannel+0x3a4>
 80045c6:	2300      	movs	r3, #0
 80045c8:	4619      	mov	r1, r3
 80045ca:	4610      	mov	r0, r2
 80045cc:	f7fe ff5a 	bl	8003484 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f280 80fc 	bge.w	80047d2 <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a36      	ldr	r2, [pc, #216]	@ (80046b8 <HAL_ADC_ConfigChannel+0x494>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d004      	beq.n	80045ee <HAL_ADC_ConfigChannel+0x3ca>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a45      	ldr	r2, [pc, #276]	@ (8004700 <HAL_ADC_ConfigChannel+0x4dc>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d101      	bne.n	80045f2 <HAL_ADC_ConfigChannel+0x3ce>
 80045ee:	4b45      	ldr	r3, [pc, #276]	@ (8004704 <HAL_ADC_ConfigChannel+0x4e0>)
 80045f0:	e000      	b.n	80045f4 <HAL_ADC_ConfigChannel+0x3d0>
 80045f2:	4b45      	ldr	r3, [pc, #276]	@ (8004708 <HAL_ADC_ConfigChannel+0x4e4>)
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7fe ff37 	bl	8003468 <LL_ADC_GetCommonPathInternalCh>
 80045fa:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a2d      	ldr	r2, [pc, #180]	@ (80046b8 <HAL_ADC_ConfigChannel+0x494>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d004      	beq.n	8004610 <HAL_ADC_ConfigChannel+0x3ec>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a3d      	ldr	r2, [pc, #244]	@ (8004700 <HAL_ADC_ConfigChannel+0x4dc>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d10e      	bne.n	800462e <HAL_ADC_ConfigChannel+0x40a>
 8004610:	4829      	ldr	r0, [pc, #164]	@ (80046b8 <HAL_ADC_ConfigChannel+0x494>)
 8004612:	f7ff f8f1 	bl	80037f8 <LL_ADC_IsEnabled>
 8004616:	4604      	mov	r4, r0
 8004618:	4839      	ldr	r0, [pc, #228]	@ (8004700 <HAL_ADC_ConfigChannel+0x4dc>)
 800461a:	f7ff f8ed 	bl	80037f8 <LL_ADC_IsEnabled>
 800461e:	4603      	mov	r3, r0
 8004620:	4323      	orrs	r3, r4
 8004622:	2b00      	cmp	r3, #0
 8004624:	bf0c      	ite	eq
 8004626:	2301      	moveq	r3, #1
 8004628:	2300      	movne	r3, #0
 800462a:	b2db      	uxtb	r3, r3
 800462c:	e008      	b.n	8004640 <HAL_ADC_ConfigChannel+0x41c>
 800462e:	4837      	ldr	r0, [pc, #220]	@ (800470c <HAL_ADC_ConfigChannel+0x4e8>)
 8004630:	f7ff f8e2 	bl	80037f8 <LL_ADC_IsEnabled>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	bf0c      	ite	eq
 800463a:	2301      	moveq	r3, #1
 800463c:	2300      	movne	r3, #0
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 80b3 	beq.w	80047ac <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a31      	ldr	r2, [pc, #196]	@ (8004710 <HAL_ADC_ConfigChannel+0x4ec>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d165      	bne.n	800471c <HAL_ADC_ConfigChannel+0x4f8>
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d160      	bne.n	800471c <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a2b      	ldr	r2, [pc, #172]	@ (800470c <HAL_ADC_ConfigChannel+0x4e8>)
 8004660:	4293      	cmp	r3, r2
 8004662:	f040 80b6 	bne.w	80047d2 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a13      	ldr	r2, [pc, #76]	@ (80046b8 <HAL_ADC_ConfigChannel+0x494>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d004      	beq.n	800467a <HAL_ADC_ConfigChannel+0x456>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a22      	ldr	r2, [pc, #136]	@ (8004700 <HAL_ADC_ConfigChannel+0x4dc>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d101      	bne.n	800467e <HAL_ADC_ConfigChannel+0x45a>
 800467a:	4a22      	ldr	r2, [pc, #136]	@ (8004704 <HAL_ADC_ConfigChannel+0x4e0>)
 800467c:	e000      	b.n	8004680 <HAL_ADC_ConfigChannel+0x45c>
 800467e:	4a22      	ldr	r2, [pc, #136]	@ (8004708 <HAL_ADC_ConfigChannel+0x4e4>)
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004686:	4619      	mov	r1, r3
 8004688:	4610      	mov	r0, r2
 800468a:	f7fe feda 	bl	8003442 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800468e:	4b21      	ldr	r3, [pc, #132]	@ (8004714 <HAL_ADC_ConfigChannel+0x4f0>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	099b      	lsrs	r3, r3, #6
 8004694:	4a20      	ldr	r2, [pc, #128]	@ (8004718 <HAL_ADC_ConfigChannel+0x4f4>)
 8004696:	fba2 2303 	umull	r2, r3, r2, r3
 800469a:	099b      	lsrs	r3, r3, #6
 800469c:	3301      	adds	r3, #1
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80046a2:	e002      	b.n	80046aa <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	3b01      	subs	r3, #1
 80046a8:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1f9      	bne.n	80046a4 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046b0:	e08f      	b.n	80047d2 <HAL_ADC_ConfigChannel+0x5ae>
 80046b2:	bf00      	nop
 80046b4:	47ff0000 	.word	0x47ff0000
 80046b8:	40022000 	.word	0x40022000
 80046bc:	04300002 	.word	0x04300002
 80046c0:	08600004 	.word	0x08600004
 80046c4:	0c900008 	.word	0x0c900008
 80046c8:	10c00010 	.word	0x10c00010
 80046cc:	14f00020 	.word	0x14f00020
 80046d0:	2a000400 	.word	0x2a000400
 80046d4:	2e300800 	.word	0x2e300800
 80046d8:	32601000 	.word	0x32601000
 80046dc:	43210000 	.word	0x43210000
 80046e0:	4b840000 	.word	0x4b840000
 80046e4:	4fb80000 	.word	0x4fb80000
 80046e8:	47520000 	.word	0x47520000
 80046ec:	36902000 	.word	0x36902000
 80046f0:	25b00200 	.word	0x25b00200
 80046f4:	21800100 	.word	0x21800100
 80046f8:	1d500080 	.word	0x1d500080
 80046fc:	19200040 	.word	0x19200040
 8004700:	40022100 	.word	0x40022100
 8004704:	40022300 	.word	0x40022300
 8004708:	58026300 	.word	0x58026300
 800470c:	58026000 	.word	0x58026000
 8004710:	cb840000 	.word	0xcb840000
 8004714:	24000000 	.word	0x24000000
 8004718:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a31      	ldr	r2, [pc, #196]	@ (80047e8 <HAL_ADC_ConfigChannel+0x5c4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d11e      	bne.n	8004764 <HAL_ADC_ConfigChannel+0x540>
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d119      	bne.n	8004764 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a2d      	ldr	r2, [pc, #180]	@ (80047ec <HAL_ADC_ConfigChannel+0x5c8>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d14b      	bne.n	80047d2 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a2c      	ldr	r2, [pc, #176]	@ (80047f0 <HAL_ADC_ConfigChannel+0x5cc>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d004      	beq.n	800474e <HAL_ADC_ConfigChannel+0x52a>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a2a      	ldr	r2, [pc, #168]	@ (80047f4 <HAL_ADC_ConfigChannel+0x5d0>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d101      	bne.n	8004752 <HAL_ADC_ConfigChannel+0x52e>
 800474e:	4a2a      	ldr	r2, [pc, #168]	@ (80047f8 <HAL_ADC_ConfigChannel+0x5d4>)
 8004750:	e000      	b.n	8004754 <HAL_ADC_ConfigChannel+0x530>
 8004752:	4a2a      	ldr	r2, [pc, #168]	@ (80047fc <HAL_ADC_ConfigChannel+0x5d8>)
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800475a:	4619      	mov	r1, r3
 800475c:	4610      	mov	r0, r2
 800475e:	f7fe fe70 	bl	8003442 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004762:	e036      	b.n	80047d2 <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a25      	ldr	r2, [pc, #148]	@ (8004800 <HAL_ADC_ConfigChannel+0x5dc>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d131      	bne.n	80047d2 <HAL_ADC_ConfigChannel+0x5ae>
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d12c      	bne.n	80047d2 <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a1b      	ldr	r2, [pc, #108]	@ (80047ec <HAL_ADC_ConfigChannel+0x5c8>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d127      	bne.n	80047d2 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a1a      	ldr	r2, [pc, #104]	@ (80047f0 <HAL_ADC_ConfigChannel+0x5cc>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d004      	beq.n	8004796 <HAL_ADC_ConfigChannel+0x572>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a18      	ldr	r2, [pc, #96]	@ (80047f4 <HAL_ADC_ConfigChannel+0x5d0>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d101      	bne.n	800479a <HAL_ADC_ConfigChannel+0x576>
 8004796:	4a18      	ldr	r2, [pc, #96]	@ (80047f8 <HAL_ADC_ConfigChannel+0x5d4>)
 8004798:	e000      	b.n	800479c <HAL_ADC_ConfigChannel+0x578>
 800479a:	4a18      	ldr	r2, [pc, #96]	@ (80047fc <HAL_ADC_ConfigChannel+0x5d8>)
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80047a2:	4619      	mov	r1, r3
 80047a4:	4610      	mov	r0, r2
 80047a6:	f7fe fe4c 	bl	8003442 <LL_ADC_SetCommonPathInternalCh>
 80047aa:	e012      	b.n	80047d2 <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047b0:	f043 0220 	orr.w	r2, r3, #32
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80047be:	e008      	b.n	80047d2 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047c4:	f043 0220 	orr.w	r2, r3, #32
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80047da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3734      	adds	r7, #52	@ 0x34
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd90      	pop	{r4, r7, pc}
 80047e6:	bf00      	nop
 80047e8:	c7520000 	.word	0xc7520000
 80047ec:	58026000 	.word	0x58026000
 80047f0:	40022000 	.word	0x40022000
 80047f4:	40022100 	.word	0x40022100
 80047f8:	40022300 	.word	0x40022300
 80047fc:	58026300 	.word	0x58026300
 8004800:	cfb80000 	.word	0xcfb80000

08004804 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4618      	mov	r0, r3
 8004812:	f7fe fff1 	bl	80037f8 <LL_ADC_IsEnabled>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d16e      	bne.n	80048fa <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689a      	ldr	r2, [r3, #8]
 8004822:	4b38      	ldr	r3, [pc, #224]	@ (8004904 <ADC_Enable+0x100>)
 8004824:	4013      	ands	r3, r2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00d      	beq.n	8004846 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800482e:	f043 0210 	orr.w	r2, r3, #16
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800483a:	f043 0201 	orr.w	r2, r3, #1
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e05a      	b.n	80048fc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4618      	mov	r0, r3
 800484c:	f7fe ffc0 	bl	80037d0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004850:	f7fe fd92 	bl	8003378 <HAL_GetTick>
 8004854:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a2b      	ldr	r2, [pc, #172]	@ (8004908 <ADC_Enable+0x104>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d004      	beq.n	800486a <ADC_Enable+0x66>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a29      	ldr	r2, [pc, #164]	@ (800490c <ADC_Enable+0x108>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d101      	bne.n	800486e <ADC_Enable+0x6a>
 800486a:	4b29      	ldr	r3, [pc, #164]	@ (8004910 <ADC_Enable+0x10c>)
 800486c:	e000      	b.n	8004870 <ADC_Enable+0x6c>
 800486e:	4b29      	ldr	r3, [pc, #164]	@ (8004914 <ADC_Enable+0x110>)
 8004870:	4618      	mov	r0, r3
 8004872:	f7fe ff43 	bl	80036fc <LL_ADC_GetMultimode>
 8004876:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a23      	ldr	r2, [pc, #140]	@ (800490c <ADC_Enable+0x108>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d002      	beq.n	8004888 <ADC_Enable+0x84>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	e000      	b.n	800488a <ADC_Enable+0x86>
 8004888:	4b1f      	ldr	r3, [pc, #124]	@ (8004908 <ADC_Enable+0x104>)
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	6812      	ldr	r2, [r2, #0]
 800488e:	4293      	cmp	r3, r2
 8004890:	d02c      	beq.n	80048ec <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d130      	bne.n	80048fa <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004898:	e028      	b.n	80048ec <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fe ffaa 	bl	80037f8 <LL_ADC_IsEnabled>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d104      	bne.n	80048b4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fe ff8e 	bl	80037d0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80048b4:	f7fe fd60 	bl	8003378 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d914      	bls.n	80048ec <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d00d      	beq.n	80048ec <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048d4:	f043 0210 	orr.w	r2, r3, #16
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048e0:	f043 0201 	orr.w	r2, r3, #1
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e007      	b.n	80048fc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d1cf      	bne.n	800489a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	8000003f 	.word	0x8000003f
 8004908:	40022000 	.word	0x40022000
 800490c:	40022100 	.word	0x40022100
 8004910:	40022300 	.word	0x40022300
 8004914:	58026300 	.word	0x58026300

08004918 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004924:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800492a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800492e:	2b00      	cmp	r3, #0
 8004930:	d14b      	bne.n	80049ca <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004936:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0308 	and.w	r3, r3, #8
 8004948:	2b00      	cmp	r3, #0
 800494a:	d021      	beq.n	8004990 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4618      	mov	r0, r3
 8004952:	f7fe fe1e 	bl	8003592 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d032      	beq.n	80049c2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d12b      	bne.n	80049c2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800496e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800497a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d11f      	bne.n	80049c2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004986:	f043 0201 	orr.w	r2, r3, #1
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	655a      	str	r2, [r3, #84]	@ 0x54
 800498e:	e018      	b.n	80049c2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	f003 0303 	and.w	r3, r3, #3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d111      	bne.n	80049c2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049a2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d105      	bne.n	80049c2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ba:	f043 0201 	orr.w	r2, r3, #1
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f7ff fc06 	bl	80041d4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80049c8:	e00e      	b.n	80049e8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ce:	f003 0310 	and.w	r3, r3, #16
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f7ff fc1a 	bl	8004210 <HAL_ADC_ErrorCallback>
}
 80049dc:	e004      	b.n	80049e8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	4798      	blx	r3
}
 80049e8:	bf00      	nop
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049fc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f7ff fbf2 	bl	80041e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a04:	bf00      	nop
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a18:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a1e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a2a:	f043 0204 	orr.w	r2, r3, #4
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f7ff fbec 	bl	8004210 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a38:	bf00      	nop
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a7a      	ldr	r2, [pc, #488]	@ (8004c38 <ADC_ConfigureBoostMode+0x1f8>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d004      	beq.n	8004a5c <ADC_ConfigureBoostMode+0x1c>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a79      	ldr	r2, [pc, #484]	@ (8004c3c <ADC_ConfigureBoostMode+0x1fc>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d109      	bne.n	8004a70 <ADC_ConfigureBoostMode+0x30>
 8004a5c:	4b78      	ldr	r3, [pc, #480]	@ (8004c40 <ADC_ConfigureBoostMode+0x200>)
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	bf14      	ite	ne
 8004a68:	2301      	movne	r3, #1
 8004a6a:	2300      	moveq	r3, #0
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	e008      	b.n	8004a82 <ADC_ConfigureBoostMode+0x42>
 8004a70:	4b74      	ldr	r3, [pc, #464]	@ (8004c44 <ADC_ConfigureBoostMode+0x204>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	bf14      	ite	ne
 8004a7c:	2301      	movne	r3, #1
 8004a7e:	2300      	moveq	r3, #0
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d01c      	beq.n	8004ac0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004a86:	f004 fbe1 	bl	800924c <HAL_RCC_GetHCLKFreq>
 8004a8a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004a94:	d010      	beq.n	8004ab8 <ADC_ConfigureBoostMode+0x78>
 8004a96:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004a9a:	d873      	bhi.n	8004b84 <ADC_ConfigureBoostMode+0x144>
 8004a9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aa0:	d002      	beq.n	8004aa8 <ADC_ConfigureBoostMode+0x68>
 8004aa2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004aa6:	d16d      	bne.n	8004b84 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	0c1b      	lsrs	r3, r3, #16
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab4:	60fb      	str	r3, [r7, #12]
        break;
 8004ab6:	e068      	b.n	8004b8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	089b      	lsrs	r3, r3, #2
 8004abc:	60fb      	str	r3, [r7, #12]
        break;
 8004abe:	e064      	b.n	8004b8a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004ac0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004ac4:	f04f 0100 	mov.w	r1, #0
 8004ac8:	f005 fe26 	bl	800a718 <HAL_RCCEx_GetPeriphCLKFreq>
 8004acc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004ad6:	d051      	beq.n	8004b7c <ADC_ConfigureBoostMode+0x13c>
 8004ad8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004adc:	d854      	bhi.n	8004b88 <ADC_ConfigureBoostMode+0x148>
 8004ade:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004ae2:	d047      	beq.n	8004b74 <ADC_ConfigureBoostMode+0x134>
 8004ae4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004ae8:	d84e      	bhi.n	8004b88 <ADC_ConfigureBoostMode+0x148>
 8004aea:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004aee:	d03d      	beq.n	8004b6c <ADC_ConfigureBoostMode+0x12c>
 8004af0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004af4:	d848      	bhi.n	8004b88 <ADC_ConfigureBoostMode+0x148>
 8004af6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004afa:	d033      	beq.n	8004b64 <ADC_ConfigureBoostMode+0x124>
 8004afc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b00:	d842      	bhi.n	8004b88 <ADC_ConfigureBoostMode+0x148>
 8004b02:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004b06:	d029      	beq.n	8004b5c <ADC_ConfigureBoostMode+0x11c>
 8004b08:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004b0c:	d83c      	bhi.n	8004b88 <ADC_ConfigureBoostMode+0x148>
 8004b0e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004b12:	d01a      	beq.n	8004b4a <ADC_ConfigureBoostMode+0x10a>
 8004b14:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004b18:	d836      	bhi.n	8004b88 <ADC_ConfigureBoostMode+0x148>
 8004b1a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004b1e:	d014      	beq.n	8004b4a <ADC_ConfigureBoostMode+0x10a>
 8004b20:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004b24:	d830      	bhi.n	8004b88 <ADC_ConfigureBoostMode+0x148>
 8004b26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b2a:	d00e      	beq.n	8004b4a <ADC_ConfigureBoostMode+0x10a>
 8004b2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b30:	d82a      	bhi.n	8004b88 <ADC_ConfigureBoostMode+0x148>
 8004b32:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004b36:	d008      	beq.n	8004b4a <ADC_ConfigureBoostMode+0x10a>
 8004b38:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004b3c:	d824      	bhi.n	8004b88 <ADC_ConfigureBoostMode+0x148>
 8004b3e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b42:	d002      	beq.n	8004b4a <ADC_ConfigureBoostMode+0x10a>
 8004b44:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004b48:	d11e      	bne.n	8004b88 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	0c9b      	lsrs	r3, r3, #18
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b58:	60fb      	str	r3, [r7, #12]
        break;
 8004b5a:	e016      	b.n	8004b8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	091b      	lsrs	r3, r3, #4
 8004b60:	60fb      	str	r3, [r7, #12]
        break;
 8004b62:	e012      	b.n	8004b8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	095b      	lsrs	r3, r3, #5
 8004b68:	60fb      	str	r3, [r7, #12]
        break;
 8004b6a:	e00e      	b.n	8004b8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	099b      	lsrs	r3, r3, #6
 8004b70:	60fb      	str	r3, [r7, #12]
        break;
 8004b72:	e00a      	b.n	8004b8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	09db      	lsrs	r3, r3, #7
 8004b78:	60fb      	str	r3, [r7, #12]
        break;
 8004b7a:	e006      	b.n	8004b8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	0a1b      	lsrs	r3, r3, #8
 8004b80:	60fb      	str	r3, [r7, #12]
        break;
 8004b82:	e002      	b.n	8004b8a <ADC_ConfigureBoostMode+0x14a>
        break;
 8004b84:	bf00      	nop
 8004b86:	e000      	b.n	8004b8a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004b88:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004b8a:	f7fe fc01 	bl	8003390 <HAL_GetREVID>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d815      	bhi.n	8004bc4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	4a2b      	ldr	r2, [pc, #172]	@ (8004c48 <ADC_ConfigureBoostMode+0x208>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d908      	bls.n	8004bb2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689a      	ldr	r2, [r3, #8]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bae:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004bb0:	e03e      	b.n	8004c30 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	689a      	ldr	r2, [r3, #8]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004bc0:	609a      	str	r2, [r3, #8]
}
 8004bc2:	e035      	b.n	8004c30 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	085b      	lsrs	r3, r3, #1
 8004bc8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	4a1f      	ldr	r2, [pc, #124]	@ (8004c4c <ADC_ConfigureBoostMode+0x20c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d808      	bhi.n	8004be4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004be0:	609a      	str	r2, [r3, #8]
}
 8004be2:	e025      	b.n	8004c30 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	4a1a      	ldr	r2, [pc, #104]	@ (8004c50 <ADC_ConfigureBoostMode+0x210>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d80a      	bhi.n	8004c02 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bfe:	609a      	str	r2, [r3, #8]
}
 8004c00:	e016      	b.n	8004c30 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	4a13      	ldr	r2, [pc, #76]	@ (8004c54 <ADC_ConfigureBoostMode+0x214>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d80a      	bhi.n	8004c20 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c1c:	609a      	str	r2, [r3, #8]
}
 8004c1e:	e007      	b.n	8004c30 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689a      	ldr	r2, [r3, #8]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004c2e:	609a      	str	r2, [r3, #8]
}
 8004c30:	bf00      	nop
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	40022000 	.word	0x40022000
 8004c3c:	40022100 	.word	0x40022100
 8004c40:	40022300 	.word	0x40022300
 8004c44:	58026300 	.word	0x58026300
 8004c48:	01312d00 	.word	0x01312d00
 8004c4c:	005f5e10 	.word	0x005f5e10
 8004c50:	00bebc20 	.word	0x00bebc20
 8004c54:	017d7840 	.word	0x017d7840

08004c58 <LL_ADC_IsEnabled>:
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d101      	bne.n	8004c70 <LL_ADC_IsEnabled+0x18>
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e000      	b.n	8004c72 <LL_ADC_IsEnabled+0x1a>
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <LL_ADC_REG_IsConversionOngoing>:
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b083      	sub	sp, #12
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f003 0304 	and.w	r3, r3, #4
 8004c8e:	2b04      	cmp	r3, #4
 8004c90:	d101      	bne.n	8004c96 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004c92:	2301      	movs	r3, #1
 8004c94:	e000      	b.n	8004c98 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004d08:	b590      	push	{r4, r7, lr}
 8004d0a:	b09f      	sub	sp, #124	@ 0x7c
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d12:	2300      	movs	r3, #0
 8004d14:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d101      	bne.n	8004d26 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004d22:	2302      	movs	r3, #2
 8004d24:	e0be      	b.n	8004ea4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004d32:	2300      	movs	r3, #0
 8004d34:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a5c      	ldr	r2, [pc, #368]	@ (8004eac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d102      	bne.n	8004d46 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004d40:	4b5b      	ldr	r3, [pc, #364]	@ (8004eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004d42:	60bb      	str	r3, [r7, #8]
 8004d44:	e001      	b.n	8004d4a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004d46:	2300      	movs	r3, #0
 8004d48:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10b      	bne.n	8004d68 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d54:	f043 0220 	orr.w	r2, r3, #32
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e09d      	b.n	8004ea4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7ff ff87 	bl	8004c7e <LL_ADC_REG_IsConversionOngoing>
 8004d70:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7ff ff81 	bl	8004c7e <LL_ADC_REG_IsConversionOngoing>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d17f      	bne.n	8004e82 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004d82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d17c      	bne.n	8004e82 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a47      	ldr	r2, [pc, #284]	@ (8004eac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d004      	beq.n	8004d9c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a46      	ldr	r2, [pc, #280]	@ (8004eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d101      	bne.n	8004da0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004d9c:	4b45      	ldr	r3, [pc, #276]	@ (8004eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004d9e:	e000      	b.n	8004da2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004da0:	4b45      	ldr	r3, [pc, #276]	@ (8004eb8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004da2:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d039      	beq.n	8004e20 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004dac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	431a      	orrs	r2, r3
 8004dba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004dbc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a3a      	ldr	r2, [pc, #232]	@ (8004eac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d004      	beq.n	8004dd2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a38      	ldr	r2, [pc, #224]	@ (8004eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d10e      	bne.n	8004df0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004dd2:	4836      	ldr	r0, [pc, #216]	@ (8004eac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004dd4:	f7ff ff40 	bl	8004c58 <LL_ADC_IsEnabled>
 8004dd8:	4604      	mov	r4, r0
 8004dda:	4835      	ldr	r0, [pc, #212]	@ (8004eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004ddc:	f7ff ff3c 	bl	8004c58 <LL_ADC_IsEnabled>
 8004de0:	4603      	mov	r3, r0
 8004de2:	4323      	orrs	r3, r4
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	bf0c      	ite	eq
 8004de8:	2301      	moveq	r3, #1
 8004dea:	2300      	movne	r3, #0
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	e008      	b.n	8004e02 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004df0:	4832      	ldr	r0, [pc, #200]	@ (8004ebc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004df2:	f7ff ff31 	bl	8004c58 <LL_ADC_IsEnabled>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	bf0c      	ite	eq
 8004dfc:	2301      	moveq	r3, #1
 8004dfe:	2300      	movne	r3, #0
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d047      	beq.n	8004e96 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004e06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e08:	689a      	ldr	r2, [r3, #8]
 8004e0a:	4b2d      	ldr	r3, [pc, #180]	@ (8004ec0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	6811      	ldr	r1, [r2, #0]
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	6892      	ldr	r2, [r2, #8]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	431a      	orrs	r2, r3
 8004e1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e1c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e1e:	e03a      	b.n	8004e96 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004e20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004e28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e2a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a1e      	ldr	r2, [pc, #120]	@ (8004eac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d004      	beq.n	8004e40 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a1d      	ldr	r2, [pc, #116]	@ (8004eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d10e      	bne.n	8004e5e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004e40:	481a      	ldr	r0, [pc, #104]	@ (8004eac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004e42:	f7ff ff09 	bl	8004c58 <LL_ADC_IsEnabled>
 8004e46:	4604      	mov	r4, r0
 8004e48:	4819      	ldr	r0, [pc, #100]	@ (8004eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004e4a:	f7ff ff05 	bl	8004c58 <LL_ADC_IsEnabled>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	4323      	orrs	r3, r4
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	bf0c      	ite	eq
 8004e56:	2301      	moveq	r3, #1
 8004e58:	2300      	movne	r3, #0
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	e008      	b.n	8004e70 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004e5e:	4817      	ldr	r0, [pc, #92]	@ (8004ebc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004e60:	f7ff fefa 	bl	8004c58 <LL_ADC_IsEnabled>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	bf0c      	ite	eq
 8004e6a:	2301      	moveq	r3, #1
 8004e6c:	2300      	movne	r3, #0
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d010      	beq.n	8004e96 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004e74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	4b11      	ldr	r3, [pc, #68]	@ (8004ec0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004e7e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e80:	e009      	b.n	8004e96 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e86:	f043 0220 	orr.w	r2, r3, #32
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8004e94:	e000      	b.n	8004e98 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e96:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004ea0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	377c      	adds	r7, #124	@ 0x7c
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd90      	pop	{r4, r7, pc}
 8004eac:	40022000 	.word	0x40022000
 8004eb0:	40022100 	.word	0x40022100
 8004eb4:	40022300 	.word	0x40022300
 8004eb8:	58026300 	.word	0x58026300
 8004ebc:	58026000 	.word	0x58026000
 8004ec0:	fffff0e0 	.word	0xfffff0e0

08004ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f003 0307 	and.w	r3, r3, #7
 8004ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8004f04 <__NVIC_SetPriorityGrouping+0x40>)
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004eec:	4b06      	ldr	r3, [pc, #24]	@ (8004f08 <__NVIC_SetPriorityGrouping+0x44>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ef2:	4a04      	ldr	r2, [pc, #16]	@ (8004f04 <__NVIC_SetPriorityGrouping+0x40>)
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	60d3      	str	r3, [r2, #12]
}
 8004ef8:	bf00      	nop
 8004efa:	3714      	adds	r7, #20
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr
 8004f04:	e000ed00 	.word	0xe000ed00
 8004f08:	05fa0000 	.word	0x05fa0000

08004f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f10:	4b04      	ldr	r3, [pc, #16]	@ (8004f24 <__NVIC_GetPriorityGrouping+0x18>)
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	0a1b      	lsrs	r3, r3, #8
 8004f16:	f003 0307 	and.w	r3, r3, #7
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr
 8004f24:	e000ed00 	.word	0xe000ed00

08004f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	4603      	mov	r3, r0
 8004f30:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004f32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	db0b      	blt.n	8004f52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f3a:	88fb      	ldrh	r3, [r7, #6]
 8004f3c:	f003 021f 	and.w	r2, r3, #31
 8004f40:	4907      	ldr	r1, [pc, #28]	@ (8004f60 <__NVIC_EnableIRQ+0x38>)
 8004f42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f46:	095b      	lsrs	r3, r3, #5
 8004f48:	2001      	movs	r0, #1
 8004f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8004f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	e000e100 	.word	0xe000e100

08004f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	6039      	str	r1, [r7, #0]
 8004f6e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004f70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	db0a      	blt.n	8004f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	b2da      	uxtb	r2, r3
 8004f7c:	490c      	ldr	r1, [pc, #48]	@ (8004fb0 <__NVIC_SetPriority+0x4c>)
 8004f7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f82:	0112      	lsls	r2, r2, #4
 8004f84:	b2d2      	uxtb	r2, r2
 8004f86:	440b      	add	r3, r1
 8004f88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f8c:	e00a      	b.n	8004fa4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	b2da      	uxtb	r2, r3
 8004f92:	4908      	ldr	r1, [pc, #32]	@ (8004fb4 <__NVIC_SetPriority+0x50>)
 8004f94:	88fb      	ldrh	r3, [r7, #6]
 8004f96:	f003 030f 	and.w	r3, r3, #15
 8004f9a:	3b04      	subs	r3, #4
 8004f9c:	0112      	lsls	r2, r2, #4
 8004f9e:	b2d2      	uxtb	r2, r2
 8004fa0:	440b      	add	r3, r1
 8004fa2:	761a      	strb	r2, [r3, #24]
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	e000e100 	.word	0xe000e100
 8004fb4:	e000ed00 	.word	0xe000ed00

08004fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b089      	sub	sp, #36	@ 0x24
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	f1c3 0307 	rsb	r3, r3, #7
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	bf28      	it	cs
 8004fd6:	2304      	movcs	r3, #4
 8004fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	3304      	adds	r3, #4
 8004fde:	2b06      	cmp	r3, #6
 8004fe0:	d902      	bls.n	8004fe8 <NVIC_EncodePriority+0x30>
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	3b03      	subs	r3, #3
 8004fe6:	e000      	b.n	8004fea <NVIC_EncodePriority+0x32>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fec:	f04f 32ff 	mov.w	r2, #4294967295
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff6:	43da      	mvns	r2, r3
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	401a      	ands	r2, r3
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005000:	f04f 31ff 	mov.w	r1, #4294967295
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	fa01 f303 	lsl.w	r3, r1, r3
 800500a:	43d9      	mvns	r1, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005010:	4313      	orrs	r3, r2
         );
}
 8005012:	4618      	mov	r0, r3
 8005014:	3724      	adds	r7, #36	@ 0x24
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
	...

08005020 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	3b01      	subs	r3, #1
 800502c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005030:	d301      	bcc.n	8005036 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005032:	2301      	movs	r3, #1
 8005034:	e00f      	b.n	8005056 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005036:	4a0a      	ldr	r2, [pc, #40]	@ (8005060 <SysTick_Config+0x40>)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	3b01      	subs	r3, #1
 800503c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800503e:	210f      	movs	r1, #15
 8005040:	f04f 30ff 	mov.w	r0, #4294967295
 8005044:	f7ff ff8e 	bl	8004f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005048:	4b05      	ldr	r3, [pc, #20]	@ (8005060 <SysTick_Config+0x40>)
 800504a:	2200      	movs	r2, #0
 800504c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800504e:	4b04      	ldr	r3, [pc, #16]	@ (8005060 <SysTick_Config+0x40>)
 8005050:	2207      	movs	r2, #7
 8005052:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	e000e010 	.word	0xe000e010

08005064 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f7ff ff29 	bl	8004ec4 <__NVIC_SetPriorityGrouping>
}
 8005072:	bf00      	nop
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b086      	sub	sp, #24
 800507e:	af00      	add	r7, sp, #0
 8005080:	4603      	mov	r3, r0
 8005082:	60b9      	str	r1, [r7, #8]
 8005084:	607a      	str	r2, [r7, #4]
 8005086:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005088:	f7ff ff40 	bl	8004f0c <__NVIC_GetPriorityGrouping>
 800508c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	68b9      	ldr	r1, [r7, #8]
 8005092:	6978      	ldr	r0, [r7, #20]
 8005094:	f7ff ff90 	bl	8004fb8 <NVIC_EncodePriority>
 8005098:	4602      	mov	r2, r0
 800509a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800509e:	4611      	mov	r1, r2
 80050a0:	4618      	mov	r0, r3
 80050a2:	f7ff ff5f 	bl	8004f64 <__NVIC_SetPriority>
}
 80050a6:	bf00      	nop
 80050a8:	3718      	adds	r7, #24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b082      	sub	sp, #8
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	4603      	mov	r3, r0
 80050b6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050bc:	4618      	mov	r0, r3
 80050be:	f7ff ff33 	bl	8004f28 <__NVIC_EnableIRQ>
}
 80050c2:	bf00      	nop
 80050c4:	3708      	adds	r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b082      	sub	sp, #8
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f7ff ffa4 	bl	8005020 <SysTick_Config>
 80050d8:	4603      	mov	r3, r0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3708      	adds	r7, #8
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
	...

080050e4 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 80050e4:	b480      	push	{r7}
 80050e6:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 80050e8:	4b06      	ldr	r3, [pc, #24]	@ (8005104 <HAL_GetCurrentCPUID+0x20>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050f0:	2b70      	cmp	r3, #112	@ 0x70
 80050f2:	d101      	bne.n	80050f8 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e000      	b.n	80050fa <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 80050f8:	2301      	movs	r3, #1
  }
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	e000ed00 	.word	0xe000ed00

08005108 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005110:	f7fe f932 	bl	8003378 <HAL_GetTick>
 8005114:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e316      	b.n	800574e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a66      	ldr	r2, [pc, #408]	@ (80052c0 <HAL_DMA_Init+0x1b8>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d04a      	beq.n	80051c0 <HAL_DMA_Init+0xb8>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a65      	ldr	r2, [pc, #404]	@ (80052c4 <HAL_DMA_Init+0x1bc>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d045      	beq.n	80051c0 <HAL_DMA_Init+0xb8>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a63      	ldr	r2, [pc, #396]	@ (80052c8 <HAL_DMA_Init+0x1c0>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d040      	beq.n	80051c0 <HAL_DMA_Init+0xb8>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a62      	ldr	r2, [pc, #392]	@ (80052cc <HAL_DMA_Init+0x1c4>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d03b      	beq.n	80051c0 <HAL_DMA_Init+0xb8>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a60      	ldr	r2, [pc, #384]	@ (80052d0 <HAL_DMA_Init+0x1c8>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d036      	beq.n	80051c0 <HAL_DMA_Init+0xb8>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a5f      	ldr	r2, [pc, #380]	@ (80052d4 <HAL_DMA_Init+0x1cc>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d031      	beq.n	80051c0 <HAL_DMA_Init+0xb8>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a5d      	ldr	r2, [pc, #372]	@ (80052d8 <HAL_DMA_Init+0x1d0>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d02c      	beq.n	80051c0 <HAL_DMA_Init+0xb8>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a5c      	ldr	r2, [pc, #368]	@ (80052dc <HAL_DMA_Init+0x1d4>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d027      	beq.n	80051c0 <HAL_DMA_Init+0xb8>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a5a      	ldr	r2, [pc, #360]	@ (80052e0 <HAL_DMA_Init+0x1d8>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d022      	beq.n	80051c0 <HAL_DMA_Init+0xb8>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a59      	ldr	r2, [pc, #356]	@ (80052e4 <HAL_DMA_Init+0x1dc>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d01d      	beq.n	80051c0 <HAL_DMA_Init+0xb8>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a57      	ldr	r2, [pc, #348]	@ (80052e8 <HAL_DMA_Init+0x1e0>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d018      	beq.n	80051c0 <HAL_DMA_Init+0xb8>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a56      	ldr	r2, [pc, #344]	@ (80052ec <HAL_DMA_Init+0x1e4>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d013      	beq.n	80051c0 <HAL_DMA_Init+0xb8>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a54      	ldr	r2, [pc, #336]	@ (80052f0 <HAL_DMA_Init+0x1e8>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d00e      	beq.n	80051c0 <HAL_DMA_Init+0xb8>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a53      	ldr	r2, [pc, #332]	@ (80052f4 <HAL_DMA_Init+0x1ec>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d009      	beq.n	80051c0 <HAL_DMA_Init+0xb8>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a51      	ldr	r2, [pc, #324]	@ (80052f8 <HAL_DMA_Init+0x1f0>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d004      	beq.n	80051c0 <HAL_DMA_Init+0xb8>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a50      	ldr	r2, [pc, #320]	@ (80052fc <HAL_DMA_Init+0x1f4>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d101      	bne.n	80051c4 <HAL_DMA_Init+0xbc>
 80051c0:	2301      	movs	r3, #1
 80051c2:	e000      	b.n	80051c6 <HAL_DMA_Init+0xbe>
 80051c4:	2300      	movs	r3, #0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	f000 813b 	beq.w	8005442 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2202      	movs	r2, #2
 80051d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a37      	ldr	r2, [pc, #220]	@ (80052c0 <HAL_DMA_Init+0x1b8>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d04a      	beq.n	800527c <HAL_DMA_Init+0x174>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a36      	ldr	r2, [pc, #216]	@ (80052c4 <HAL_DMA_Init+0x1bc>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d045      	beq.n	800527c <HAL_DMA_Init+0x174>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a34      	ldr	r2, [pc, #208]	@ (80052c8 <HAL_DMA_Init+0x1c0>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d040      	beq.n	800527c <HAL_DMA_Init+0x174>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a33      	ldr	r2, [pc, #204]	@ (80052cc <HAL_DMA_Init+0x1c4>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d03b      	beq.n	800527c <HAL_DMA_Init+0x174>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a31      	ldr	r2, [pc, #196]	@ (80052d0 <HAL_DMA_Init+0x1c8>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d036      	beq.n	800527c <HAL_DMA_Init+0x174>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a30      	ldr	r2, [pc, #192]	@ (80052d4 <HAL_DMA_Init+0x1cc>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d031      	beq.n	800527c <HAL_DMA_Init+0x174>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a2e      	ldr	r2, [pc, #184]	@ (80052d8 <HAL_DMA_Init+0x1d0>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d02c      	beq.n	800527c <HAL_DMA_Init+0x174>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a2d      	ldr	r2, [pc, #180]	@ (80052dc <HAL_DMA_Init+0x1d4>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d027      	beq.n	800527c <HAL_DMA_Init+0x174>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a2b      	ldr	r2, [pc, #172]	@ (80052e0 <HAL_DMA_Init+0x1d8>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d022      	beq.n	800527c <HAL_DMA_Init+0x174>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a2a      	ldr	r2, [pc, #168]	@ (80052e4 <HAL_DMA_Init+0x1dc>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d01d      	beq.n	800527c <HAL_DMA_Init+0x174>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a28      	ldr	r2, [pc, #160]	@ (80052e8 <HAL_DMA_Init+0x1e0>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d018      	beq.n	800527c <HAL_DMA_Init+0x174>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a27      	ldr	r2, [pc, #156]	@ (80052ec <HAL_DMA_Init+0x1e4>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d013      	beq.n	800527c <HAL_DMA_Init+0x174>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a25      	ldr	r2, [pc, #148]	@ (80052f0 <HAL_DMA_Init+0x1e8>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d00e      	beq.n	800527c <HAL_DMA_Init+0x174>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a24      	ldr	r2, [pc, #144]	@ (80052f4 <HAL_DMA_Init+0x1ec>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d009      	beq.n	800527c <HAL_DMA_Init+0x174>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a22      	ldr	r2, [pc, #136]	@ (80052f8 <HAL_DMA_Init+0x1f0>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d004      	beq.n	800527c <HAL_DMA_Init+0x174>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a21      	ldr	r2, [pc, #132]	@ (80052fc <HAL_DMA_Init+0x1f4>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d108      	bne.n	800528e <HAL_DMA_Init+0x186>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f022 0201 	bic.w	r2, r2, #1
 800528a:	601a      	str	r2, [r3, #0]
 800528c:	e007      	b.n	800529e <HAL_DMA_Init+0x196>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 0201 	bic.w	r2, r2, #1
 800529c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800529e:	e02f      	b.n	8005300 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80052a0:	f7fe f86a 	bl	8003378 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	2b05      	cmp	r3, #5
 80052ac:	d928      	bls.n	8005300 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2220      	movs	r2, #32
 80052b2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2203      	movs	r2, #3
 80052b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e246      	b.n	800574e <HAL_DMA_Init+0x646>
 80052c0:	40020010 	.word	0x40020010
 80052c4:	40020028 	.word	0x40020028
 80052c8:	40020040 	.word	0x40020040
 80052cc:	40020058 	.word	0x40020058
 80052d0:	40020070 	.word	0x40020070
 80052d4:	40020088 	.word	0x40020088
 80052d8:	400200a0 	.word	0x400200a0
 80052dc:	400200b8 	.word	0x400200b8
 80052e0:	40020410 	.word	0x40020410
 80052e4:	40020428 	.word	0x40020428
 80052e8:	40020440 	.word	0x40020440
 80052ec:	40020458 	.word	0x40020458
 80052f0:	40020470 	.word	0x40020470
 80052f4:	40020488 	.word	0x40020488
 80052f8:	400204a0 	.word	0x400204a0
 80052fc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1c8      	bne.n	80052a0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	4b83      	ldr	r3, [pc, #524]	@ (8005528 <HAL_DMA_Init+0x420>)
 800531a:	4013      	ands	r3, r2
 800531c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005326:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005332:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800533e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	4313      	orrs	r3, r2
 800534a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005350:	2b04      	cmp	r3, #4
 8005352:	d107      	bne.n	8005364 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800535c:	4313      	orrs	r3, r2
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	4313      	orrs	r3, r2
 8005362:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005364:	4b71      	ldr	r3, [pc, #452]	@ (800552c <HAL_DMA_Init+0x424>)
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	4b71      	ldr	r3, [pc, #452]	@ (8005530 <HAL_DMA_Init+0x428>)
 800536a:	4013      	ands	r3, r2
 800536c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005370:	d328      	bcc.n	80053c4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	2b28      	cmp	r3, #40	@ 0x28
 8005378:	d903      	bls.n	8005382 <HAL_DMA_Init+0x27a>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005380:	d917      	bls.n	80053b2 <HAL_DMA_Init+0x2aa>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	2b3e      	cmp	r3, #62	@ 0x3e
 8005388:	d903      	bls.n	8005392 <HAL_DMA_Init+0x28a>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	2b42      	cmp	r3, #66	@ 0x42
 8005390:	d90f      	bls.n	80053b2 <HAL_DMA_Init+0x2aa>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	2b46      	cmp	r3, #70	@ 0x46
 8005398:	d903      	bls.n	80053a2 <HAL_DMA_Init+0x29a>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	2b48      	cmp	r3, #72	@ 0x48
 80053a0:	d907      	bls.n	80053b2 <HAL_DMA_Init+0x2aa>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	2b4e      	cmp	r3, #78	@ 0x4e
 80053a8:	d905      	bls.n	80053b6 <HAL_DMA_Init+0x2ae>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	2b52      	cmp	r3, #82	@ 0x52
 80053b0:	d801      	bhi.n	80053b6 <HAL_DMA_Init+0x2ae>
 80053b2:	2301      	movs	r3, #1
 80053b4:	e000      	b.n	80053b8 <HAL_DMA_Init+0x2b0>
 80053b6:	2300      	movs	r3, #0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d003      	beq.n	80053c4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053c2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	f023 0307 	bic.w	r3, r3, #7
 80053da:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ea:	2b04      	cmp	r3, #4
 80053ec:	d117      	bne.n	800541e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00e      	beq.n	800541e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f002 fb33 	bl	8007a6c <DMA_CheckFifoParam>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d008      	beq.n	800541e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2240      	movs	r2, #64	@ 0x40
 8005410:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e197      	b.n	800574e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f002 fa6e 	bl	8007908 <DMA_CalcBaseAndBitshift>
 800542c:	4603      	mov	r3, r0
 800542e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005434:	f003 031f 	and.w	r3, r3, #31
 8005438:	223f      	movs	r2, #63	@ 0x3f
 800543a:	409a      	lsls	r2, r3
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	609a      	str	r2, [r3, #8]
 8005440:	e0cd      	b.n	80055de <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a3b      	ldr	r2, [pc, #236]	@ (8005534 <HAL_DMA_Init+0x42c>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d022      	beq.n	8005492 <HAL_DMA_Init+0x38a>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a39      	ldr	r2, [pc, #228]	@ (8005538 <HAL_DMA_Init+0x430>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d01d      	beq.n	8005492 <HAL_DMA_Init+0x38a>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a38      	ldr	r2, [pc, #224]	@ (800553c <HAL_DMA_Init+0x434>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d018      	beq.n	8005492 <HAL_DMA_Init+0x38a>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a36      	ldr	r2, [pc, #216]	@ (8005540 <HAL_DMA_Init+0x438>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d013      	beq.n	8005492 <HAL_DMA_Init+0x38a>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a35      	ldr	r2, [pc, #212]	@ (8005544 <HAL_DMA_Init+0x43c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d00e      	beq.n	8005492 <HAL_DMA_Init+0x38a>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a33      	ldr	r2, [pc, #204]	@ (8005548 <HAL_DMA_Init+0x440>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d009      	beq.n	8005492 <HAL_DMA_Init+0x38a>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a32      	ldr	r2, [pc, #200]	@ (800554c <HAL_DMA_Init+0x444>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d004      	beq.n	8005492 <HAL_DMA_Init+0x38a>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a30      	ldr	r2, [pc, #192]	@ (8005550 <HAL_DMA_Init+0x448>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d101      	bne.n	8005496 <HAL_DMA_Init+0x38e>
 8005492:	2301      	movs	r3, #1
 8005494:	e000      	b.n	8005498 <HAL_DMA_Init+0x390>
 8005496:	2300      	movs	r3, #0
 8005498:	2b00      	cmp	r3, #0
 800549a:	f000 8097 	beq.w	80055cc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a24      	ldr	r2, [pc, #144]	@ (8005534 <HAL_DMA_Init+0x42c>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d021      	beq.n	80054ec <HAL_DMA_Init+0x3e4>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a22      	ldr	r2, [pc, #136]	@ (8005538 <HAL_DMA_Init+0x430>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d01c      	beq.n	80054ec <HAL_DMA_Init+0x3e4>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a21      	ldr	r2, [pc, #132]	@ (800553c <HAL_DMA_Init+0x434>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d017      	beq.n	80054ec <HAL_DMA_Init+0x3e4>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a1f      	ldr	r2, [pc, #124]	@ (8005540 <HAL_DMA_Init+0x438>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d012      	beq.n	80054ec <HAL_DMA_Init+0x3e4>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a1e      	ldr	r2, [pc, #120]	@ (8005544 <HAL_DMA_Init+0x43c>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d00d      	beq.n	80054ec <HAL_DMA_Init+0x3e4>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a1c      	ldr	r2, [pc, #112]	@ (8005548 <HAL_DMA_Init+0x440>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d008      	beq.n	80054ec <HAL_DMA_Init+0x3e4>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a1b      	ldr	r2, [pc, #108]	@ (800554c <HAL_DMA_Init+0x444>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d003      	beq.n	80054ec <HAL_DMA_Init+0x3e4>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a19      	ldr	r2, [pc, #100]	@ (8005550 <HAL_DMA_Init+0x448>)
 80054ea:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2202      	movs	r2, #2
 80054f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	4b13      	ldr	r3, [pc, #76]	@ (8005554 <HAL_DMA_Init+0x44c>)
 8005508:	4013      	ands	r3, r2
 800550a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	2b40      	cmp	r3, #64	@ 0x40
 8005512:	d021      	beq.n	8005558 <HAL_DMA_Init+0x450>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	2b80      	cmp	r3, #128	@ 0x80
 800551a:	d102      	bne.n	8005522 <HAL_DMA_Init+0x41a>
 800551c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005520:	e01b      	b.n	800555a <HAL_DMA_Init+0x452>
 8005522:	2300      	movs	r3, #0
 8005524:	e019      	b.n	800555a <HAL_DMA_Init+0x452>
 8005526:	bf00      	nop
 8005528:	fe10803f 	.word	0xfe10803f
 800552c:	5c001000 	.word	0x5c001000
 8005530:	ffff0000 	.word	0xffff0000
 8005534:	58025408 	.word	0x58025408
 8005538:	5802541c 	.word	0x5802541c
 800553c:	58025430 	.word	0x58025430
 8005540:	58025444 	.word	0x58025444
 8005544:	58025458 	.word	0x58025458
 8005548:	5802546c 	.word	0x5802546c
 800554c:	58025480 	.word	0x58025480
 8005550:	58025494 	.word	0x58025494
 8005554:	fffe000f 	.word	0xfffe000f
 8005558:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	68d2      	ldr	r2, [r2, #12]
 800555e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005560:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005568:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005570:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005578:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005580:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005588:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	4313      	orrs	r3, r2
 800558e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	461a      	mov	r2, r3
 800559e:	4b6e      	ldr	r3, [pc, #440]	@ (8005758 <HAL_DMA_Init+0x650>)
 80055a0:	4413      	add	r3, r2
 80055a2:	4a6e      	ldr	r2, [pc, #440]	@ (800575c <HAL_DMA_Init+0x654>)
 80055a4:	fba2 2303 	umull	r2, r3, r2, r3
 80055a8:	091b      	lsrs	r3, r3, #4
 80055aa:	009a      	lsls	r2, r3, #2
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f002 f9a9 	bl	8007908 <DMA_CalcBaseAndBitshift>
 80055b6:	4603      	mov	r3, r0
 80055b8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055be:	f003 031f 	and.w	r3, r3, #31
 80055c2:	2201      	movs	r2, #1
 80055c4:	409a      	lsls	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	605a      	str	r2, [r3, #4]
 80055ca:	e008      	b.n	80055de <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2240      	movs	r2, #64	@ 0x40
 80055d0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2203      	movs	r2, #3
 80055d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e0b7      	b.n	800574e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a5f      	ldr	r2, [pc, #380]	@ (8005760 <HAL_DMA_Init+0x658>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d072      	beq.n	80056ce <HAL_DMA_Init+0x5c6>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a5d      	ldr	r2, [pc, #372]	@ (8005764 <HAL_DMA_Init+0x65c>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d06d      	beq.n	80056ce <HAL_DMA_Init+0x5c6>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a5c      	ldr	r2, [pc, #368]	@ (8005768 <HAL_DMA_Init+0x660>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d068      	beq.n	80056ce <HAL_DMA_Init+0x5c6>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a5a      	ldr	r2, [pc, #360]	@ (800576c <HAL_DMA_Init+0x664>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d063      	beq.n	80056ce <HAL_DMA_Init+0x5c6>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a59      	ldr	r2, [pc, #356]	@ (8005770 <HAL_DMA_Init+0x668>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d05e      	beq.n	80056ce <HAL_DMA_Init+0x5c6>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a57      	ldr	r2, [pc, #348]	@ (8005774 <HAL_DMA_Init+0x66c>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d059      	beq.n	80056ce <HAL_DMA_Init+0x5c6>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a56      	ldr	r2, [pc, #344]	@ (8005778 <HAL_DMA_Init+0x670>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d054      	beq.n	80056ce <HAL_DMA_Init+0x5c6>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a54      	ldr	r2, [pc, #336]	@ (800577c <HAL_DMA_Init+0x674>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d04f      	beq.n	80056ce <HAL_DMA_Init+0x5c6>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a53      	ldr	r2, [pc, #332]	@ (8005780 <HAL_DMA_Init+0x678>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d04a      	beq.n	80056ce <HAL_DMA_Init+0x5c6>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a51      	ldr	r2, [pc, #324]	@ (8005784 <HAL_DMA_Init+0x67c>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d045      	beq.n	80056ce <HAL_DMA_Init+0x5c6>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a50      	ldr	r2, [pc, #320]	@ (8005788 <HAL_DMA_Init+0x680>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d040      	beq.n	80056ce <HAL_DMA_Init+0x5c6>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a4e      	ldr	r2, [pc, #312]	@ (800578c <HAL_DMA_Init+0x684>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d03b      	beq.n	80056ce <HAL_DMA_Init+0x5c6>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a4d      	ldr	r2, [pc, #308]	@ (8005790 <HAL_DMA_Init+0x688>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d036      	beq.n	80056ce <HAL_DMA_Init+0x5c6>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a4b      	ldr	r2, [pc, #300]	@ (8005794 <HAL_DMA_Init+0x68c>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d031      	beq.n	80056ce <HAL_DMA_Init+0x5c6>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a4a      	ldr	r2, [pc, #296]	@ (8005798 <HAL_DMA_Init+0x690>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d02c      	beq.n	80056ce <HAL_DMA_Init+0x5c6>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a48      	ldr	r2, [pc, #288]	@ (800579c <HAL_DMA_Init+0x694>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d027      	beq.n	80056ce <HAL_DMA_Init+0x5c6>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a47      	ldr	r2, [pc, #284]	@ (80057a0 <HAL_DMA_Init+0x698>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d022      	beq.n	80056ce <HAL_DMA_Init+0x5c6>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a45      	ldr	r2, [pc, #276]	@ (80057a4 <HAL_DMA_Init+0x69c>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d01d      	beq.n	80056ce <HAL_DMA_Init+0x5c6>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a44      	ldr	r2, [pc, #272]	@ (80057a8 <HAL_DMA_Init+0x6a0>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d018      	beq.n	80056ce <HAL_DMA_Init+0x5c6>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a42      	ldr	r2, [pc, #264]	@ (80057ac <HAL_DMA_Init+0x6a4>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d013      	beq.n	80056ce <HAL_DMA_Init+0x5c6>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a41      	ldr	r2, [pc, #260]	@ (80057b0 <HAL_DMA_Init+0x6a8>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d00e      	beq.n	80056ce <HAL_DMA_Init+0x5c6>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a3f      	ldr	r2, [pc, #252]	@ (80057b4 <HAL_DMA_Init+0x6ac>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d009      	beq.n	80056ce <HAL_DMA_Init+0x5c6>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a3e      	ldr	r2, [pc, #248]	@ (80057b8 <HAL_DMA_Init+0x6b0>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d004      	beq.n	80056ce <HAL_DMA_Init+0x5c6>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a3c      	ldr	r2, [pc, #240]	@ (80057bc <HAL_DMA_Init+0x6b4>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d101      	bne.n	80056d2 <HAL_DMA_Init+0x5ca>
 80056ce:	2301      	movs	r3, #1
 80056d0:	e000      	b.n	80056d4 <HAL_DMA_Init+0x5cc>
 80056d2:	2300      	movs	r3, #0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d032      	beq.n	800573e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f002 fa43 	bl	8007b64 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	2b80      	cmp	r3, #128	@ 0x80
 80056e4:	d102      	bne.n	80056ec <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056f4:	b2d2      	uxtb	r2, r2
 80056f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005700:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d010      	beq.n	800572c <HAL_DMA_Init+0x624>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	2b08      	cmp	r3, #8
 8005710:	d80c      	bhi.n	800572c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f002 fac0 	bl	8007c98 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800571c:	2200      	movs	r2, #0
 800571e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005728:	605a      	str	r2, [r3, #4]
 800572a:	e008      	b.n	800573e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3718      	adds	r7, #24
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	a7fdabf8 	.word	0xa7fdabf8
 800575c:	cccccccd 	.word	0xcccccccd
 8005760:	40020010 	.word	0x40020010
 8005764:	40020028 	.word	0x40020028
 8005768:	40020040 	.word	0x40020040
 800576c:	40020058 	.word	0x40020058
 8005770:	40020070 	.word	0x40020070
 8005774:	40020088 	.word	0x40020088
 8005778:	400200a0 	.word	0x400200a0
 800577c:	400200b8 	.word	0x400200b8
 8005780:	40020410 	.word	0x40020410
 8005784:	40020428 	.word	0x40020428
 8005788:	40020440 	.word	0x40020440
 800578c:	40020458 	.word	0x40020458
 8005790:	40020470 	.word	0x40020470
 8005794:	40020488 	.word	0x40020488
 8005798:	400204a0 	.word	0x400204a0
 800579c:	400204b8 	.word	0x400204b8
 80057a0:	58025408 	.word	0x58025408
 80057a4:	5802541c 	.word	0x5802541c
 80057a8:	58025430 	.word	0x58025430
 80057ac:	58025444 	.word	0x58025444
 80057b0:	58025458 	.word	0x58025458
 80057b4:	5802546c 	.word	0x5802546c
 80057b8:	58025480 	.word	0x58025480
 80057bc:	58025494 	.word	0x58025494

080057c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
 80057cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057ce:	2300      	movs	r3, #0
 80057d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d101      	bne.n	80057dc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e226      	b.n	8005c2a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d101      	bne.n	80057ea <HAL_DMA_Start_IT+0x2a>
 80057e6:	2302      	movs	r3, #2
 80057e8:	e21f      	b.n	8005c2a <HAL_DMA_Start_IT+0x46a>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	f040 820a 	bne.w	8005c14 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2202      	movs	r2, #2
 8005804:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a68      	ldr	r2, [pc, #416]	@ (80059b4 <HAL_DMA_Start_IT+0x1f4>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d04a      	beq.n	80058ae <HAL_DMA_Start_IT+0xee>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a66      	ldr	r2, [pc, #408]	@ (80059b8 <HAL_DMA_Start_IT+0x1f8>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d045      	beq.n	80058ae <HAL_DMA_Start_IT+0xee>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a65      	ldr	r2, [pc, #404]	@ (80059bc <HAL_DMA_Start_IT+0x1fc>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d040      	beq.n	80058ae <HAL_DMA_Start_IT+0xee>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a63      	ldr	r2, [pc, #396]	@ (80059c0 <HAL_DMA_Start_IT+0x200>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d03b      	beq.n	80058ae <HAL_DMA_Start_IT+0xee>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a62      	ldr	r2, [pc, #392]	@ (80059c4 <HAL_DMA_Start_IT+0x204>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d036      	beq.n	80058ae <HAL_DMA_Start_IT+0xee>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a60      	ldr	r2, [pc, #384]	@ (80059c8 <HAL_DMA_Start_IT+0x208>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d031      	beq.n	80058ae <HAL_DMA_Start_IT+0xee>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a5f      	ldr	r2, [pc, #380]	@ (80059cc <HAL_DMA_Start_IT+0x20c>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d02c      	beq.n	80058ae <HAL_DMA_Start_IT+0xee>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a5d      	ldr	r2, [pc, #372]	@ (80059d0 <HAL_DMA_Start_IT+0x210>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d027      	beq.n	80058ae <HAL_DMA_Start_IT+0xee>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a5c      	ldr	r2, [pc, #368]	@ (80059d4 <HAL_DMA_Start_IT+0x214>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d022      	beq.n	80058ae <HAL_DMA_Start_IT+0xee>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a5a      	ldr	r2, [pc, #360]	@ (80059d8 <HAL_DMA_Start_IT+0x218>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d01d      	beq.n	80058ae <HAL_DMA_Start_IT+0xee>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a59      	ldr	r2, [pc, #356]	@ (80059dc <HAL_DMA_Start_IT+0x21c>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d018      	beq.n	80058ae <HAL_DMA_Start_IT+0xee>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a57      	ldr	r2, [pc, #348]	@ (80059e0 <HAL_DMA_Start_IT+0x220>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d013      	beq.n	80058ae <HAL_DMA_Start_IT+0xee>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a56      	ldr	r2, [pc, #344]	@ (80059e4 <HAL_DMA_Start_IT+0x224>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d00e      	beq.n	80058ae <HAL_DMA_Start_IT+0xee>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a54      	ldr	r2, [pc, #336]	@ (80059e8 <HAL_DMA_Start_IT+0x228>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d009      	beq.n	80058ae <HAL_DMA_Start_IT+0xee>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a53      	ldr	r2, [pc, #332]	@ (80059ec <HAL_DMA_Start_IT+0x22c>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d004      	beq.n	80058ae <HAL_DMA_Start_IT+0xee>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a51      	ldr	r2, [pc, #324]	@ (80059f0 <HAL_DMA_Start_IT+0x230>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d108      	bne.n	80058c0 <HAL_DMA_Start_IT+0x100>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f022 0201 	bic.w	r2, r2, #1
 80058bc:	601a      	str	r2, [r3, #0]
 80058be:	e007      	b.n	80058d0 <HAL_DMA_Start_IT+0x110>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f022 0201 	bic.w	r2, r2, #1
 80058ce:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	68b9      	ldr	r1, [r7, #8]
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	f001 fe6a 	bl	80075b0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a34      	ldr	r2, [pc, #208]	@ (80059b4 <HAL_DMA_Start_IT+0x1f4>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d04a      	beq.n	800597c <HAL_DMA_Start_IT+0x1bc>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a33      	ldr	r2, [pc, #204]	@ (80059b8 <HAL_DMA_Start_IT+0x1f8>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d045      	beq.n	800597c <HAL_DMA_Start_IT+0x1bc>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a31      	ldr	r2, [pc, #196]	@ (80059bc <HAL_DMA_Start_IT+0x1fc>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d040      	beq.n	800597c <HAL_DMA_Start_IT+0x1bc>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a30      	ldr	r2, [pc, #192]	@ (80059c0 <HAL_DMA_Start_IT+0x200>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d03b      	beq.n	800597c <HAL_DMA_Start_IT+0x1bc>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a2e      	ldr	r2, [pc, #184]	@ (80059c4 <HAL_DMA_Start_IT+0x204>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d036      	beq.n	800597c <HAL_DMA_Start_IT+0x1bc>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a2d      	ldr	r2, [pc, #180]	@ (80059c8 <HAL_DMA_Start_IT+0x208>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d031      	beq.n	800597c <HAL_DMA_Start_IT+0x1bc>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a2b      	ldr	r2, [pc, #172]	@ (80059cc <HAL_DMA_Start_IT+0x20c>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d02c      	beq.n	800597c <HAL_DMA_Start_IT+0x1bc>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a2a      	ldr	r2, [pc, #168]	@ (80059d0 <HAL_DMA_Start_IT+0x210>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d027      	beq.n	800597c <HAL_DMA_Start_IT+0x1bc>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a28      	ldr	r2, [pc, #160]	@ (80059d4 <HAL_DMA_Start_IT+0x214>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d022      	beq.n	800597c <HAL_DMA_Start_IT+0x1bc>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a27      	ldr	r2, [pc, #156]	@ (80059d8 <HAL_DMA_Start_IT+0x218>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d01d      	beq.n	800597c <HAL_DMA_Start_IT+0x1bc>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a25      	ldr	r2, [pc, #148]	@ (80059dc <HAL_DMA_Start_IT+0x21c>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d018      	beq.n	800597c <HAL_DMA_Start_IT+0x1bc>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a24      	ldr	r2, [pc, #144]	@ (80059e0 <HAL_DMA_Start_IT+0x220>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d013      	beq.n	800597c <HAL_DMA_Start_IT+0x1bc>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a22      	ldr	r2, [pc, #136]	@ (80059e4 <HAL_DMA_Start_IT+0x224>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d00e      	beq.n	800597c <HAL_DMA_Start_IT+0x1bc>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a21      	ldr	r2, [pc, #132]	@ (80059e8 <HAL_DMA_Start_IT+0x228>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d009      	beq.n	800597c <HAL_DMA_Start_IT+0x1bc>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a1f      	ldr	r2, [pc, #124]	@ (80059ec <HAL_DMA_Start_IT+0x22c>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d004      	beq.n	800597c <HAL_DMA_Start_IT+0x1bc>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a1e      	ldr	r2, [pc, #120]	@ (80059f0 <HAL_DMA_Start_IT+0x230>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d101      	bne.n	8005980 <HAL_DMA_Start_IT+0x1c0>
 800597c:	2301      	movs	r3, #1
 800597e:	e000      	b.n	8005982 <HAL_DMA_Start_IT+0x1c2>
 8005980:	2300      	movs	r3, #0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d036      	beq.n	80059f4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f023 021e 	bic.w	r2, r3, #30
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f042 0216 	orr.w	r2, r2, #22
 8005998:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d03e      	beq.n	8005a20 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f042 0208 	orr.w	r2, r2, #8
 80059b0:	601a      	str	r2, [r3, #0]
 80059b2:	e035      	b.n	8005a20 <HAL_DMA_Start_IT+0x260>
 80059b4:	40020010 	.word	0x40020010
 80059b8:	40020028 	.word	0x40020028
 80059bc:	40020040 	.word	0x40020040
 80059c0:	40020058 	.word	0x40020058
 80059c4:	40020070 	.word	0x40020070
 80059c8:	40020088 	.word	0x40020088
 80059cc:	400200a0 	.word	0x400200a0
 80059d0:	400200b8 	.word	0x400200b8
 80059d4:	40020410 	.word	0x40020410
 80059d8:	40020428 	.word	0x40020428
 80059dc:	40020440 	.word	0x40020440
 80059e0:	40020458 	.word	0x40020458
 80059e4:	40020470 	.word	0x40020470
 80059e8:	40020488 	.word	0x40020488
 80059ec:	400204a0 	.word	0x400204a0
 80059f0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f023 020e 	bic.w	r2, r3, #14
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f042 020a 	orr.w	r2, r2, #10
 8005a06:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d007      	beq.n	8005a20 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f042 0204 	orr.w	r2, r2, #4
 8005a1e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a83      	ldr	r2, [pc, #524]	@ (8005c34 <HAL_DMA_Start_IT+0x474>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d072      	beq.n	8005b10 <HAL_DMA_Start_IT+0x350>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a82      	ldr	r2, [pc, #520]	@ (8005c38 <HAL_DMA_Start_IT+0x478>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d06d      	beq.n	8005b10 <HAL_DMA_Start_IT+0x350>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a80      	ldr	r2, [pc, #512]	@ (8005c3c <HAL_DMA_Start_IT+0x47c>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d068      	beq.n	8005b10 <HAL_DMA_Start_IT+0x350>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a7f      	ldr	r2, [pc, #508]	@ (8005c40 <HAL_DMA_Start_IT+0x480>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d063      	beq.n	8005b10 <HAL_DMA_Start_IT+0x350>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a7d      	ldr	r2, [pc, #500]	@ (8005c44 <HAL_DMA_Start_IT+0x484>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d05e      	beq.n	8005b10 <HAL_DMA_Start_IT+0x350>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a7c      	ldr	r2, [pc, #496]	@ (8005c48 <HAL_DMA_Start_IT+0x488>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d059      	beq.n	8005b10 <HAL_DMA_Start_IT+0x350>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a7a      	ldr	r2, [pc, #488]	@ (8005c4c <HAL_DMA_Start_IT+0x48c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d054      	beq.n	8005b10 <HAL_DMA_Start_IT+0x350>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a79      	ldr	r2, [pc, #484]	@ (8005c50 <HAL_DMA_Start_IT+0x490>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d04f      	beq.n	8005b10 <HAL_DMA_Start_IT+0x350>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a77      	ldr	r2, [pc, #476]	@ (8005c54 <HAL_DMA_Start_IT+0x494>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d04a      	beq.n	8005b10 <HAL_DMA_Start_IT+0x350>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a76      	ldr	r2, [pc, #472]	@ (8005c58 <HAL_DMA_Start_IT+0x498>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d045      	beq.n	8005b10 <HAL_DMA_Start_IT+0x350>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a74      	ldr	r2, [pc, #464]	@ (8005c5c <HAL_DMA_Start_IT+0x49c>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d040      	beq.n	8005b10 <HAL_DMA_Start_IT+0x350>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a73      	ldr	r2, [pc, #460]	@ (8005c60 <HAL_DMA_Start_IT+0x4a0>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d03b      	beq.n	8005b10 <HAL_DMA_Start_IT+0x350>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a71      	ldr	r2, [pc, #452]	@ (8005c64 <HAL_DMA_Start_IT+0x4a4>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d036      	beq.n	8005b10 <HAL_DMA_Start_IT+0x350>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a70      	ldr	r2, [pc, #448]	@ (8005c68 <HAL_DMA_Start_IT+0x4a8>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d031      	beq.n	8005b10 <HAL_DMA_Start_IT+0x350>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a6e      	ldr	r2, [pc, #440]	@ (8005c6c <HAL_DMA_Start_IT+0x4ac>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d02c      	beq.n	8005b10 <HAL_DMA_Start_IT+0x350>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a6d      	ldr	r2, [pc, #436]	@ (8005c70 <HAL_DMA_Start_IT+0x4b0>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d027      	beq.n	8005b10 <HAL_DMA_Start_IT+0x350>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a6b      	ldr	r2, [pc, #428]	@ (8005c74 <HAL_DMA_Start_IT+0x4b4>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d022      	beq.n	8005b10 <HAL_DMA_Start_IT+0x350>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a6a      	ldr	r2, [pc, #424]	@ (8005c78 <HAL_DMA_Start_IT+0x4b8>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d01d      	beq.n	8005b10 <HAL_DMA_Start_IT+0x350>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a68      	ldr	r2, [pc, #416]	@ (8005c7c <HAL_DMA_Start_IT+0x4bc>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d018      	beq.n	8005b10 <HAL_DMA_Start_IT+0x350>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a67      	ldr	r2, [pc, #412]	@ (8005c80 <HAL_DMA_Start_IT+0x4c0>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d013      	beq.n	8005b10 <HAL_DMA_Start_IT+0x350>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a65      	ldr	r2, [pc, #404]	@ (8005c84 <HAL_DMA_Start_IT+0x4c4>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d00e      	beq.n	8005b10 <HAL_DMA_Start_IT+0x350>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a64      	ldr	r2, [pc, #400]	@ (8005c88 <HAL_DMA_Start_IT+0x4c8>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d009      	beq.n	8005b10 <HAL_DMA_Start_IT+0x350>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a62      	ldr	r2, [pc, #392]	@ (8005c8c <HAL_DMA_Start_IT+0x4cc>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d004      	beq.n	8005b10 <HAL_DMA_Start_IT+0x350>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a61      	ldr	r2, [pc, #388]	@ (8005c90 <HAL_DMA_Start_IT+0x4d0>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d101      	bne.n	8005b14 <HAL_DMA_Start_IT+0x354>
 8005b10:	2301      	movs	r3, #1
 8005b12:	e000      	b.n	8005b16 <HAL_DMA_Start_IT+0x356>
 8005b14:	2300      	movs	r3, #0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d01a      	beq.n	8005b50 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d007      	beq.n	8005b38 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b36:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d007      	beq.n	8005b50 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b4e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a37      	ldr	r2, [pc, #220]	@ (8005c34 <HAL_DMA_Start_IT+0x474>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d04a      	beq.n	8005bf0 <HAL_DMA_Start_IT+0x430>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a36      	ldr	r2, [pc, #216]	@ (8005c38 <HAL_DMA_Start_IT+0x478>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d045      	beq.n	8005bf0 <HAL_DMA_Start_IT+0x430>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a34      	ldr	r2, [pc, #208]	@ (8005c3c <HAL_DMA_Start_IT+0x47c>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d040      	beq.n	8005bf0 <HAL_DMA_Start_IT+0x430>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a33      	ldr	r2, [pc, #204]	@ (8005c40 <HAL_DMA_Start_IT+0x480>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d03b      	beq.n	8005bf0 <HAL_DMA_Start_IT+0x430>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a31      	ldr	r2, [pc, #196]	@ (8005c44 <HAL_DMA_Start_IT+0x484>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d036      	beq.n	8005bf0 <HAL_DMA_Start_IT+0x430>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a30      	ldr	r2, [pc, #192]	@ (8005c48 <HAL_DMA_Start_IT+0x488>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d031      	beq.n	8005bf0 <HAL_DMA_Start_IT+0x430>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a2e      	ldr	r2, [pc, #184]	@ (8005c4c <HAL_DMA_Start_IT+0x48c>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d02c      	beq.n	8005bf0 <HAL_DMA_Start_IT+0x430>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a2d      	ldr	r2, [pc, #180]	@ (8005c50 <HAL_DMA_Start_IT+0x490>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d027      	beq.n	8005bf0 <HAL_DMA_Start_IT+0x430>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a2b      	ldr	r2, [pc, #172]	@ (8005c54 <HAL_DMA_Start_IT+0x494>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d022      	beq.n	8005bf0 <HAL_DMA_Start_IT+0x430>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a2a      	ldr	r2, [pc, #168]	@ (8005c58 <HAL_DMA_Start_IT+0x498>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d01d      	beq.n	8005bf0 <HAL_DMA_Start_IT+0x430>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a28      	ldr	r2, [pc, #160]	@ (8005c5c <HAL_DMA_Start_IT+0x49c>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d018      	beq.n	8005bf0 <HAL_DMA_Start_IT+0x430>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a27      	ldr	r2, [pc, #156]	@ (8005c60 <HAL_DMA_Start_IT+0x4a0>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d013      	beq.n	8005bf0 <HAL_DMA_Start_IT+0x430>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a25      	ldr	r2, [pc, #148]	@ (8005c64 <HAL_DMA_Start_IT+0x4a4>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d00e      	beq.n	8005bf0 <HAL_DMA_Start_IT+0x430>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a24      	ldr	r2, [pc, #144]	@ (8005c68 <HAL_DMA_Start_IT+0x4a8>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d009      	beq.n	8005bf0 <HAL_DMA_Start_IT+0x430>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a22      	ldr	r2, [pc, #136]	@ (8005c6c <HAL_DMA_Start_IT+0x4ac>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d004      	beq.n	8005bf0 <HAL_DMA_Start_IT+0x430>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a21      	ldr	r2, [pc, #132]	@ (8005c70 <HAL_DMA_Start_IT+0x4b0>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d108      	bne.n	8005c02 <HAL_DMA_Start_IT+0x442>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f042 0201 	orr.w	r2, r2, #1
 8005bfe:	601a      	str	r2, [r3, #0]
 8005c00:	e012      	b.n	8005c28 <HAL_DMA_Start_IT+0x468>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f042 0201 	orr.w	r2, r2, #1
 8005c10:	601a      	str	r2, [r3, #0]
 8005c12:	e009      	b.n	8005c28 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c1a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3718      	adds	r7, #24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	40020010 	.word	0x40020010
 8005c38:	40020028 	.word	0x40020028
 8005c3c:	40020040 	.word	0x40020040
 8005c40:	40020058 	.word	0x40020058
 8005c44:	40020070 	.word	0x40020070
 8005c48:	40020088 	.word	0x40020088
 8005c4c:	400200a0 	.word	0x400200a0
 8005c50:	400200b8 	.word	0x400200b8
 8005c54:	40020410 	.word	0x40020410
 8005c58:	40020428 	.word	0x40020428
 8005c5c:	40020440 	.word	0x40020440
 8005c60:	40020458 	.word	0x40020458
 8005c64:	40020470 	.word	0x40020470
 8005c68:	40020488 	.word	0x40020488
 8005c6c:	400204a0 	.word	0x400204a0
 8005c70:	400204b8 	.word	0x400204b8
 8005c74:	58025408 	.word	0x58025408
 8005c78:	5802541c 	.word	0x5802541c
 8005c7c:	58025430 	.word	0x58025430
 8005c80:	58025444 	.word	0x58025444
 8005c84:	58025458 	.word	0x58025458
 8005c88:	5802546c 	.word	0x5802546c
 8005c8c:	58025480 	.word	0x58025480
 8005c90:	58025494 	.word	0x58025494

08005c94 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005c9c:	f7fd fb6c 	bl	8003378 <HAL_GetTick>
 8005ca0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d101      	bne.n	8005cac <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e2dc      	b.n	8006266 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d008      	beq.n	8005cca <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2280      	movs	r2, #128	@ 0x80
 8005cbc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e2cd      	b.n	8006266 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a76      	ldr	r2, [pc, #472]	@ (8005ea8 <HAL_DMA_Abort+0x214>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d04a      	beq.n	8005d6a <HAL_DMA_Abort+0xd6>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a74      	ldr	r2, [pc, #464]	@ (8005eac <HAL_DMA_Abort+0x218>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d045      	beq.n	8005d6a <HAL_DMA_Abort+0xd6>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a73      	ldr	r2, [pc, #460]	@ (8005eb0 <HAL_DMA_Abort+0x21c>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d040      	beq.n	8005d6a <HAL_DMA_Abort+0xd6>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a71      	ldr	r2, [pc, #452]	@ (8005eb4 <HAL_DMA_Abort+0x220>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d03b      	beq.n	8005d6a <HAL_DMA_Abort+0xd6>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a70      	ldr	r2, [pc, #448]	@ (8005eb8 <HAL_DMA_Abort+0x224>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d036      	beq.n	8005d6a <HAL_DMA_Abort+0xd6>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a6e      	ldr	r2, [pc, #440]	@ (8005ebc <HAL_DMA_Abort+0x228>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d031      	beq.n	8005d6a <HAL_DMA_Abort+0xd6>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a6d      	ldr	r2, [pc, #436]	@ (8005ec0 <HAL_DMA_Abort+0x22c>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d02c      	beq.n	8005d6a <HAL_DMA_Abort+0xd6>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a6b      	ldr	r2, [pc, #428]	@ (8005ec4 <HAL_DMA_Abort+0x230>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d027      	beq.n	8005d6a <HAL_DMA_Abort+0xd6>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a6a      	ldr	r2, [pc, #424]	@ (8005ec8 <HAL_DMA_Abort+0x234>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d022      	beq.n	8005d6a <HAL_DMA_Abort+0xd6>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a68      	ldr	r2, [pc, #416]	@ (8005ecc <HAL_DMA_Abort+0x238>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d01d      	beq.n	8005d6a <HAL_DMA_Abort+0xd6>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a67      	ldr	r2, [pc, #412]	@ (8005ed0 <HAL_DMA_Abort+0x23c>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d018      	beq.n	8005d6a <HAL_DMA_Abort+0xd6>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a65      	ldr	r2, [pc, #404]	@ (8005ed4 <HAL_DMA_Abort+0x240>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d013      	beq.n	8005d6a <HAL_DMA_Abort+0xd6>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a64      	ldr	r2, [pc, #400]	@ (8005ed8 <HAL_DMA_Abort+0x244>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d00e      	beq.n	8005d6a <HAL_DMA_Abort+0xd6>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a62      	ldr	r2, [pc, #392]	@ (8005edc <HAL_DMA_Abort+0x248>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d009      	beq.n	8005d6a <HAL_DMA_Abort+0xd6>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a61      	ldr	r2, [pc, #388]	@ (8005ee0 <HAL_DMA_Abort+0x24c>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d004      	beq.n	8005d6a <HAL_DMA_Abort+0xd6>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a5f      	ldr	r2, [pc, #380]	@ (8005ee4 <HAL_DMA_Abort+0x250>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d101      	bne.n	8005d6e <HAL_DMA_Abort+0xda>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e000      	b.n	8005d70 <HAL_DMA_Abort+0xdc>
 8005d6e:	2300      	movs	r3, #0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d013      	beq.n	8005d9c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f022 021e 	bic.w	r2, r2, #30
 8005d82:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	695a      	ldr	r2, [r3, #20]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005d92:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	617b      	str	r3, [r7, #20]
 8005d9a:	e00a      	b.n	8005db2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f022 020e 	bic.w	r2, r2, #14
 8005daa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a3c      	ldr	r2, [pc, #240]	@ (8005ea8 <HAL_DMA_Abort+0x214>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d072      	beq.n	8005ea2 <HAL_DMA_Abort+0x20e>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a3a      	ldr	r2, [pc, #232]	@ (8005eac <HAL_DMA_Abort+0x218>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d06d      	beq.n	8005ea2 <HAL_DMA_Abort+0x20e>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a39      	ldr	r2, [pc, #228]	@ (8005eb0 <HAL_DMA_Abort+0x21c>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d068      	beq.n	8005ea2 <HAL_DMA_Abort+0x20e>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a37      	ldr	r2, [pc, #220]	@ (8005eb4 <HAL_DMA_Abort+0x220>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d063      	beq.n	8005ea2 <HAL_DMA_Abort+0x20e>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a36      	ldr	r2, [pc, #216]	@ (8005eb8 <HAL_DMA_Abort+0x224>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d05e      	beq.n	8005ea2 <HAL_DMA_Abort+0x20e>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a34      	ldr	r2, [pc, #208]	@ (8005ebc <HAL_DMA_Abort+0x228>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d059      	beq.n	8005ea2 <HAL_DMA_Abort+0x20e>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a33      	ldr	r2, [pc, #204]	@ (8005ec0 <HAL_DMA_Abort+0x22c>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d054      	beq.n	8005ea2 <HAL_DMA_Abort+0x20e>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a31      	ldr	r2, [pc, #196]	@ (8005ec4 <HAL_DMA_Abort+0x230>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d04f      	beq.n	8005ea2 <HAL_DMA_Abort+0x20e>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a30      	ldr	r2, [pc, #192]	@ (8005ec8 <HAL_DMA_Abort+0x234>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d04a      	beq.n	8005ea2 <HAL_DMA_Abort+0x20e>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a2e      	ldr	r2, [pc, #184]	@ (8005ecc <HAL_DMA_Abort+0x238>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d045      	beq.n	8005ea2 <HAL_DMA_Abort+0x20e>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a2d      	ldr	r2, [pc, #180]	@ (8005ed0 <HAL_DMA_Abort+0x23c>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d040      	beq.n	8005ea2 <HAL_DMA_Abort+0x20e>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a2b      	ldr	r2, [pc, #172]	@ (8005ed4 <HAL_DMA_Abort+0x240>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d03b      	beq.n	8005ea2 <HAL_DMA_Abort+0x20e>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a2a      	ldr	r2, [pc, #168]	@ (8005ed8 <HAL_DMA_Abort+0x244>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d036      	beq.n	8005ea2 <HAL_DMA_Abort+0x20e>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a28      	ldr	r2, [pc, #160]	@ (8005edc <HAL_DMA_Abort+0x248>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d031      	beq.n	8005ea2 <HAL_DMA_Abort+0x20e>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a27      	ldr	r2, [pc, #156]	@ (8005ee0 <HAL_DMA_Abort+0x24c>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d02c      	beq.n	8005ea2 <HAL_DMA_Abort+0x20e>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a25      	ldr	r2, [pc, #148]	@ (8005ee4 <HAL_DMA_Abort+0x250>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d027      	beq.n	8005ea2 <HAL_DMA_Abort+0x20e>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a24      	ldr	r2, [pc, #144]	@ (8005ee8 <HAL_DMA_Abort+0x254>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d022      	beq.n	8005ea2 <HAL_DMA_Abort+0x20e>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a22      	ldr	r2, [pc, #136]	@ (8005eec <HAL_DMA_Abort+0x258>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d01d      	beq.n	8005ea2 <HAL_DMA_Abort+0x20e>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a21      	ldr	r2, [pc, #132]	@ (8005ef0 <HAL_DMA_Abort+0x25c>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d018      	beq.n	8005ea2 <HAL_DMA_Abort+0x20e>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a1f      	ldr	r2, [pc, #124]	@ (8005ef4 <HAL_DMA_Abort+0x260>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d013      	beq.n	8005ea2 <HAL_DMA_Abort+0x20e>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a1e      	ldr	r2, [pc, #120]	@ (8005ef8 <HAL_DMA_Abort+0x264>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d00e      	beq.n	8005ea2 <HAL_DMA_Abort+0x20e>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a1c      	ldr	r2, [pc, #112]	@ (8005efc <HAL_DMA_Abort+0x268>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d009      	beq.n	8005ea2 <HAL_DMA_Abort+0x20e>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a1b      	ldr	r2, [pc, #108]	@ (8005f00 <HAL_DMA_Abort+0x26c>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d004      	beq.n	8005ea2 <HAL_DMA_Abort+0x20e>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a19      	ldr	r2, [pc, #100]	@ (8005f04 <HAL_DMA_Abort+0x270>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d132      	bne.n	8005f08 <HAL_DMA_Abort+0x274>
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e031      	b.n	8005f0a <HAL_DMA_Abort+0x276>
 8005ea6:	bf00      	nop
 8005ea8:	40020010 	.word	0x40020010
 8005eac:	40020028 	.word	0x40020028
 8005eb0:	40020040 	.word	0x40020040
 8005eb4:	40020058 	.word	0x40020058
 8005eb8:	40020070 	.word	0x40020070
 8005ebc:	40020088 	.word	0x40020088
 8005ec0:	400200a0 	.word	0x400200a0
 8005ec4:	400200b8 	.word	0x400200b8
 8005ec8:	40020410 	.word	0x40020410
 8005ecc:	40020428 	.word	0x40020428
 8005ed0:	40020440 	.word	0x40020440
 8005ed4:	40020458 	.word	0x40020458
 8005ed8:	40020470 	.word	0x40020470
 8005edc:	40020488 	.word	0x40020488
 8005ee0:	400204a0 	.word	0x400204a0
 8005ee4:	400204b8 	.word	0x400204b8
 8005ee8:	58025408 	.word	0x58025408
 8005eec:	5802541c 	.word	0x5802541c
 8005ef0:	58025430 	.word	0x58025430
 8005ef4:	58025444 	.word	0x58025444
 8005ef8:	58025458 	.word	0x58025458
 8005efc:	5802546c 	.word	0x5802546c
 8005f00:	58025480 	.word	0x58025480
 8005f04:	58025494 	.word	0x58025494
 8005f08:	2300      	movs	r3, #0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d007      	beq.n	8005f1e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a6d      	ldr	r2, [pc, #436]	@ (80060d8 <HAL_DMA_Abort+0x444>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d04a      	beq.n	8005fbe <HAL_DMA_Abort+0x32a>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a6b      	ldr	r2, [pc, #428]	@ (80060dc <HAL_DMA_Abort+0x448>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d045      	beq.n	8005fbe <HAL_DMA_Abort+0x32a>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a6a      	ldr	r2, [pc, #424]	@ (80060e0 <HAL_DMA_Abort+0x44c>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d040      	beq.n	8005fbe <HAL_DMA_Abort+0x32a>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a68      	ldr	r2, [pc, #416]	@ (80060e4 <HAL_DMA_Abort+0x450>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d03b      	beq.n	8005fbe <HAL_DMA_Abort+0x32a>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a67      	ldr	r2, [pc, #412]	@ (80060e8 <HAL_DMA_Abort+0x454>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d036      	beq.n	8005fbe <HAL_DMA_Abort+0x32a>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a65      	ldr	r2, [pc, #404]	@ (80060ec <HAL_DMA_Abort+0x458>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d031      	beq.n	8005fbe <HAL_DMA_Abort+0x32a>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a64      	ldr	r2, [pc, #400]	@ (80060f0 <HAL_DMA_Abort+0x45c>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d02c      	beq.n	8005fbe <HAL_DMA_Abort+0x32a>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a62      	ldr	r2, [pc, #392]	@ (80060f4 <HAL_DMA_Abort+0x460>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d027      	beq.n	8005fbe <HAL_DMA_Abort+0x32a>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a61      	ldr	r2, [pc, #388]	@ (80060f8 <HAL_DMA_Abort+0x464>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d022      	beq.n	8005fbe <HAL_DMA_Abort+0x32a>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a5f      	ldr	r2, [pc, #380]	@ (80060fc <HAL_DMA_Abort+0x468>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d01d      	beq.n	8005fbe <HAL_DMA_Abort+0x32a>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a5e      	ldr	r2, [pc, #376]	@ (8006100 <HAL_DMA_Abort+0x46c>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d018      	beq.n	8005fbe <HAL_DMA_Abort+0x32a>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a5c      	ldr	r2, [pc, #368]	@ (8006104 <HAL_DMA_Abort+0x470>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d013      	beq.n	8005fbe <HAL_DMA_Abort+0x32a>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a5b      	ldr	r2, [pc, #364]	@ (8006108 <HAL_DMA_Abort+0x474>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d00e      	beq.n	8005fbe <HAL_DMA_Abort+0x32a>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a59      	ldr	r2, [pc, #356]	@ (800610c <HAL_DMA_Abort+0x478>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d009      	beq.n	8005fbe <HAL_DMA_Abort+0x32a>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a58      	ldr	r2, [pc, #352]	@ (8006110 <HAL_DMA_Abort+0x47c>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d004      	beq.n	8005fbe <HAL_DMA_Abort+0x32a>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a56      	ldr	r2, [pc, #344]	@ (8006114 <HAL_DMA_Abort+0x480>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d108      	bne.n	8005fd0 <HAL_DMA_Abort+0x33c>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f022 0201 	bic.w	r2, r2, #1
 8005fcc:	601a      	str	r2, [r3, #0]
 8005fce:	e007      	b.n	8005fe0 <HAL_DMA_Abort+0x34c>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f022 0201 	bic.w	r2, r2, #1
 8005fde:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005fe0:	e013      	b.n	800600a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005fe2:	f7fd f9c9 	bl	8003378 <HAL_GetTick>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	2b05      	cmp	r3, #5
 8005fee:	d90c      	bls.n	800600a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2203      	movs	r2, #3
 8005ffa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e12d      	b.n	8006266 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1e5      	bne.n	8005fe2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a2f      	ldr	r2, [pc, #188]	@ (80060d8 <HAL_DMA_Abort+0x444>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d04a      	beq.n	80060b6 <HAL_DMA_Abort+0x422>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a2d      	ldr	r2, [pc, #180]	@ (80060dc <HAL_DMA_Abort+0x448>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d045      	beq.n	80060b6 <HAL_DMA_Abort+0x422>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a2c      	ldr	r2, [pc, #176]	@ (80060e0 <HAL_DMA_Abort+0x44c>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d040      	beq.n	80060b6 <HAL_DMA_Abort+0x422>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a2a      	ldr	r2, [pc, #168]	@ (80060e4 <HAL_DMA_Abort+0x450>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d03b      	beq.n	80060b6 <HAL_DMA_Abort+0x422>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a29      	ldr	r2, [pc, #164]	@ (80060e8 <HAL_DMA_Abort+0x454>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d036      	beq.n	80060b6 <HAL_DMA_Abort+0x422>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a27      	ldr	r2, [pc, #156]	@ (80060ec <HAL_DMA_Abort+0x458>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d031      	beq.n	80060b6 <HAL_DMA_Abort+0x422>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a26      	ldr	r2, [pc, #152]	@ (80060f0 <HAL_DMA_Abort+0x45c>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d02c      	beq.n	80060b6 <HAL_DMA_Abort+0x422>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a24      	ldr	r2, [pc, #144]	@ (80060f4 <HAL_DMA_Abort+0x460>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d027      	beq.n	80060b6 <HAL_DMA_Abort+0x422>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a23      	ldr	r2, [pc, #140]	@ (80060f8 <HAL_DMA_Abort+0x464>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d022      	beq.n	80060b6 <HAL_DMA_Abort+0x422>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a21      	ldr	r2, [pc, #132]	@ (80060fc <HAL_DMA_Abort+0x468>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d01d      	beq.n	80060b6 <HAL_DMA_Abort+0x422>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a20      	ldr	r2, [pc, #128]	@ (8006100 <HAL_DMA_Abort+0x46c>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d018      	beq.n	80060b6 <HAL_DMA_Abort+0x422>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a1e      	ldr	r2, [pc, #120]	@ (8006104 <HAL_DMA_Abort+0x470>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d013      	beq.n	80060b6 <HAL_DMA_Abort+0x422>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a1d      	ldr	r2, [pc, #116]	@ (8006108 <HAL_DMA_Abort+0x474>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d00e      	beq.n	80060b6 <HAL_DMA_Abort+0x422>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a1b      	ldr	r2, [pc, #108]	@ (800610c <HAL_DMA_Abort+0x478>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d009      	beq.n	80060b6 <HAL_DMA_Abort+0x422>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a1a      	ldr	r2, [pc, #104]	@ (8006110 <HAL_DMA_Abort+0x47c>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d004      	beq.n	80060b6 <HAL_DMA_Abort+0x422>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a18      	ldr	r2, [pc, #96]	@ (8006114 <HAL_DMA_Abort+0x480>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d101      	bne.n	80060ba <HAL_DMA_Abort+0x426>
 80060b6:	2301      	movs	r3, #1
 80060b8:	e000      	b.n	80060bc <HAL_DMA_Abort+0x428>
 80060ba:	2300      	movs	r3, #0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d02b      	beq.n	8006118 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060c4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060ca:	f003 031f 	and.w	r3, r3, #31
 80060ce:	223f      	movs	r2, #63	@ 0x3f
 80060d0:	409a      	lsls	r2, r3
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	609a      	str	r2, [r3, #8]
 80060d6:	e02a      	b.n	800612e <HAL_DMA_Abort+0x49a>
 80060d8:	40020010 	.word	0x40020010
 80060dc:	40020028 	.word	0x40020028
 80060e0:	40020040 	.word	0x40020040
 80060e4:	40020058 	.word	0x40020058
 80060e8:	40020070 	.word	0x40020070
 80060ec:	40020088 	.word	0x40020088
 80060f0:	400200a0 	.word	0x400200a0
 80060f4:	400200b8 	.word	0x400200b8
 80060f8:	40020410 	.word	0x40020410
 80060fc:	40020428 	.word	0x40020428
 8006100:	40020440 	.word	0x40020440
 8006104:	40020458 	.word	0x40020458
 8006108:	40020470 	.word	0x40020470
 800610c:	40020488 	.word	0x40020488
 8006110:	400204a0 	.word	0x400204a0
 8006114:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800611c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006122:	f003 031f 	and.w	r3, r3, #31
 8006126:	2201      	movs	r2, #1
 8006128:	409a      	lsls	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a4f      	ldr	r2, [pc, #316]	@ (8006270 <HAL_DMA_Abort+0x5dc>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d072      	beq.n	800621e <HAL_DMA_Abort+0x58a>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a4d      	ldr	r2, [pc, #308]	@ (8006274 <HAL_DMA_Abort+0x5e0>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d06d      	beq.n	800621e <HAL_DMA_Abort+0x58a>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a4c      	ldr	r2, [pc, #304]	@ (8006278 <HAL_DMA_Abort+0x5e4>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d068      	beq.n	800621e <HAL_DMA_Abort+0x58a>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a4a      	ldr	r2, [pc, #296]	@ (800627c <HAL_DMA_Abort+0x5e8>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d063      	beq.n	800621e <HAL_DMA_Abort+0x58a>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a49      	ldr	r2, [pc, #292]	@ (8006280 <HAL_DMA_Abort+0x5ec>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d05e      	beq.n	800621e <HAL_DMA_Abort+0x58a>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a47      	ldr	r2, [pc, #284]	@ (8006284 <HAL_DMA_Abort+0x5f0>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d059      	beq.n	800621e <HAL_DMA_Abort+0x58a>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a46      	ldr	r2, [pc, #280]	@ (8006288 <HAL_DMA_Abort+0x5f4>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d054      	beq.n	800621e <HAL_DMA_Abort+0x58a>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a44      	ldr	r2, [pc, #272]	@ (800628c <HAL_DMA_Abort+0x5f8>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d04f      	beq.n	800621e <HAL_DMA_Abort+0x58a>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a43      	ldr	r2, [pc, #268]	@ (8006290 <HAL_DMA_Abort+0x5fc>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d04a      	beq.n	800621e <HAL_DMA_Abort+0x58a>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a41      	ldr	r2, [pc, #260]	@ (8006294 <HAL_DMA_Abort+0x600>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d045      	beq.n	800621e <HAL_DMA_Abort+0x58a>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a40      	ldr	r2, [pc, #256]	@ (8006298 <HAL_DMA_Abort+0x604>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d040      	beq.n	800621e <HAL_DMA_Abort+0x58a>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a3e      	ldr	r2, [pc, #248]	@ (800629c <HAL_DMA_Abort+0x608>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d03b      	beq.n	800621e <HAL_DMA_Abort+0x58a>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a3d      	ldr	r2, [pc, #244]	@ (80062a0 <HAL_DMA_Abort+0x60c>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d036      	beq.n	800621e <HAL_DMA_Abort+0x58a>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a3b      	ldr	r2, [pc, #236]	@ (80062a4 <HAL_DMA_Abort+0x610>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d031      	beq.n	800621e <HAL_DMA_Abort+0x58a>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a3a      	ldr	r2, [pc, #232]	@ (80062a8 <HAL_DMA_Abort+0x614>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d02c      	beq.n	800621e <HAL_DMA_Abort+0x58a>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a38      	ldr	r2, [pc, #224]	@ (80062ac <HAL_DMA_Abort+0x618>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d027      	beq.n	800621e <HAL_DMA_Abort+0x58a>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a37      	ldr	r2, [pc, #220]	@ (80062b0 <HAL_DMA_Abort+0x61c>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d022      	beq.n	800621e <HAL_DMA_Abort+0x58a>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a35      	ldr	r2, [pc, #212]	@ (80062b4 <HAL_DMA_Abort+0x620>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d01d      	beq.n	800621e <HAL_DMA_Abort+0x58a>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a34      	ldr	r2, [pc, #208]	@ (80062b8 <HAL_DMA_Abort+0x624>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d018      	beq.n	800621e <HAL_DMA_Abort+0x58a>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a32      	ldr	r2, [pc, #200]	@ (80062bc <HAL_DMA_Abort+0x628>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d013      	beq.n	800621e <HAL_DMA_Abort+0x58a>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a31      	ldr	r2, [pc, #196]	@ (80062c0 <HAL_DMA_Abort+0x62c>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d00e      	beq.n	800621e <HAL_DMA_Abort+0x58a>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a2f      	ldr	r2, [pc, #188]	@ (80062c4 <HAL_DMA_Abort+0x630>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d009      	beq.n	800621e <HAL_DMA_Abort+0x58a>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a2e      	ldr	r2, [pc, #184]	@ (80062c8 <HAL_DMA_Abort+0x634>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d004      	beq.n	800621e <HAL_DMA_Abort+0x58a>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a2c      	ldr	r2, [pc, #176]	@ (80062cc <HAL_DMA_Abort+0x638>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d101      	bne.n	8006222 <HAL_DMA_Abort+0x58e>
 800621e:	2301      	movs	r3, #1
 8006220:	e000      	b.n	8006224 <HAL_DMA_Abort+0x590>
 8006222:	2300      	movs	r3, #0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d015      	beq.n	8006254 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006230:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00c      	beq.n	8006254 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006244:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006248:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006252:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3718      	adds	r7, #24
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	40020010 	.word	0x40020010
 8006274:	40020028 	.word	0x40020028
 8006278:	40020040 	.word	0x40020040
 800627c:	40020058 	.word	0x40020058
 8006280:	40020070 	.word	0x40020070
 8006284:	40020088 	.word	0x40020088
 8006288:	400200a0 	.word	0x400200a0
 800628c:	400200b8 	.word	0x400200b8
 8006290:	40020410 	.word	0x40020410
 8006294:	40020428 	.word	0x40020428
 8006298:	40020440 	.word	0x40020440
 800629c:	40020458 	.word	0x40020458
 80062a0:	40020470 	.word	0x40020470
 80062a4:	40020488 	.word	0x40020488
 80062a8:	400204a0 	.word	0x400204a0
 80062ac:	400204b8 	.word	0x400204b8
 80062b0:	58025408 	.word	0x58025408
 80062b4:	5802541c 	.word	0x5802541c
 80062b8:	58025430 	.word	0x58025430
 80062bc:	58025444 	.word	0x58025444
 80062c0:	58025458 	.word	0x58025458
 80062c4:	5802546c 	.word	0x5802546c
 80062c8:	58025480 	.word	0x58025480
 80062cc:	58025494 	.word	0x58025494

080062d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d101      	bne.n	80062e2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e237      	b.n	8006752 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d004      	beq.n	80062f8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2280      	movs	r2, #128	@ 0x80
 80062f2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e22c      	b.n	8006752 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a5c      	ldr	r2, [pc, #368]	@ (8006470 <HAL_DMA_Abort_IT+0x1a0>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d04a      	beq.n	8006398 <HAL_DMA_Abort_IT+0xc8>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a5b      	ldr	r2, [pc, #364]	@ (8006474 <HAL_DMA_Abort_IT+0x1a4>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d045      	beq.n	8006398 <HAL_DMA_Abort_IT+0xc8>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a59      	ldr	r2, [pc, #356]	@ (8006478 <HAL_DMA_Abort_IT+0x1a8>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d040      	beq.n	8006398 <HAL_DMA_Abort_IT+0xc8>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a58      	ldr	r2, [pc, #352]	@ (800647c <HAL_DMA_Abort_IT+0x1ac>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d03b      	beq.n	8006398 <HAL_DMA_Abort_IT+0xc8>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a56      	ldr	r2, [pc, #344]	@ (8006480 <HAL_DMA_Abort_IT+0x1b0>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d036      	beq.n	8006398 <HAL_DMA_Abort_IT+0xc8>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a55      	ldr	r2, [pc, #340]	@ (8006484 <HAL_DMA_Abort_IT+0x1b4>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d031      	beq.n	8006398 <HAL_DMA_Abort_IT+0xc8>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a53      	ldr	r2, [pc, #332]	@ (8006488 <HAL_DMA_Abort_IT+0x1b8>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d02c      	beq.n	8006398 <HAL_DMA_Abort_IT+0xc8>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a52      	ldr	r2, [pc, #328]	@ (800648c <HAL_DMA_Abort_IT+0x1bc>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d027      	beq.n	8006398 <HAL_DMA_Abort_IT+0xc8>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a50      	ldr	r2, [pc, #320]	@ (8006490 <HAL_DMA_Abort_IT+0x1c0>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d022      	beq.n	8006398 <HAL_DMA_Abort_IT+0xc8>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a4f      	ldr	r2, [pc, #316]	@ (8006494 <HAL_DMA_Abort_IT+0x1c4>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d01d      	beq.n	8006398 <HAL_DMA_Abort_IT+0xc8>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a4d      	ldr	r2, [pc, #308]	@ (8006498 <HAL_DMA_Abort_IT+0x1c8>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d018      	beq.n	8006398 <HAL_DMA_Abort_IT+0xc8>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a4c      	ldr	r2, [pc, #304]	@ (800649c <HAL_DMA_Abort_IT+0x1cc>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d013      	beq.n	8006398 <HAL_DMA_Abort_IT+0xc8>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a4a      	ldr	r2, [pc, #296]	@ (80064a0 <HAL_DMA_Abort_IT+0x1d0>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d00e      	beq.n	8006398 <HAL_DMA_Abort_IT+0xc8>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a49      	ldr	r2, [pc, #292]	@ (80064a4 <HAL_DMA_Abort_IT+0x1d4>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d009      	beq.n	8006398 <HAL_DMA_Abort_IT+0xc8>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a47      	ldr	r2, [pc, #284]	@ (80064a8 <HAL_DMA_Abort_IT+0x1d8>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d004      	beq.n	8006398 <HAL_DMA_Abort_IT+0xc8>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a46      	ldr	r2, [pc, #280]	@ (80064ac <HAL_DMA_Abort_IT+0x1dc>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d101      	bne.n	800639c <HAL_DMA_Abort_IT+0xcc>
 8006398:	2301      	movs	r3, #1
 800639a:	e000      	b.n	800639e <HAL_DMA_Abort_IT+0xce>
 800639c:	2300      	movs	r3, #0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	f000 8086 	beq.w	80064b0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2204      	movs	r2, #4
 80063a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a2f      	ldr	r2, [pc, #188]	@ (8006470 <HAL_DMA_Abort_IT+0x1a0>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d04a      	beq.n	800644c <HAL_DMA_Abort_IT+0x17c>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a2e      	ldr	r2, [pc, #184]	@ (8006474 <HAL_DMA_Abort_IT+0x1a4>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d045      	beq.n	800644c <HAL_DMA_Abort_IT+0x17c>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a2c      	ldr	r2, [pc, #176]	@ (8006478 <HAL_DMA_Abort_IT+0x1a8>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d040      	beq.n	800644c <HAL_DMA_Abort_IT+0x17c>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a2b      	ldr	r2, [pc, #172]	@ (800647c <HAL_DMA_Abort_IT+0x1ac>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d03b      	beq.n	800644c <HAL_DMA_Abort_IT+0x17c>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a29      	ldr	r2, [pc, #164]	@ (8006480 <HAL_DMA_Abort_IT+0x1b0>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d036      	beq.n	800644c <HAL_DMA_Abort_IT+0x17c>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a28      	ldr	r2, [pc, #160]	@ (8006484 <HAL_DMA_Abort_IT+0x1b4>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d031      	beq.n	800644c <HAL_DMA_Abort_IT+0x17c>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a26      	ldr	r2, [pc, #152]	@ (8006488 <HAL_DMA_Abort_IT+0x1b8>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d02c      	beq.n	800644c <HAL_DMA_Abort_IT+0x17c>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a25      	ldr	r2, [pc, #148]	@ (800648c <HAL_DMA_Abort_IT+0x1bc>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d027      	beq.n	800644c <HAL_DMA_Abort_IT+0x17c>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a23      	ldr	r2, [pc, #140]	@ (8006490 <HAL_DMA_Abort_IT+0x1c0>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d022      	beq.n	800644c <HAL_DMA_Abort_IT+0x17c>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a22      	ldr	r2, [pc, #136]	@ (8006494 <HAL_DMA_Abort_IT+0x1c4>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d01d      	beq.n	800644c <HAL_DMA_Abort_IT+0x17c>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a20      	ldr	r2, [pc, #128]	@ (8006498 <HAL_DMA_Abort_IT+0x1c8>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d018      	beq.n	800644c <HAL_DMA_Abort_IT+0x17c>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a1f      	ldr	r2, [pc, #124]	@ (800649c <HAL_DMA_Abort_IT+0x1cc>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d013      	beq.n	800644c <HAL_DMA_Abort_IT+0x17c>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a1d      	ldr	r2, [pc, #116]	@ (80064a0 <HAL_DMA_Abort_IT+0x1d0>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d00e      	beq.n	800644c <HAL_DMA_Abort_IT+0x17c>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a1c      	ldr	r2, [pc, #112]	@ (80064a4 <HAL_DMA_Abort_IT+0x1d4>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d009      	beq.n	800644c <HAL_DMA_Abort_IT+0x17c>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a1a      	ldr	r2, [pc, #104]	@ (80064a8 <HAL_DMA_Abort_IT+0x1d8>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d004      	beq.n	800644c <HAL_DMA_Abort_IT+0x17c>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a19      	ldr	r2, [pc, #100]	@ (80064ac <HAL_DMA_Abort_IT+0x1dc>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d108      	bne.n	800645e <HAL_DMA_Abort_IT+0x18e>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f022 0201 	bic.w	r2, r2, #1
 800645a:	601a      	str	r2, [r3, #0]
 800645c:	e178      	b.n	8006750 <HAL_DMA_Abort_IT+0x480>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f022 0201 	bic.w	r2, r2, #1
 800646c:	601a      	str	r2, [r3, #0]
 800646e:	e16f      	b.n	8006750 <HAL_DMA_Abort_IT+0x480>
 8006470:	40020010 	.word	0x40020010
 8006474:	40020028 	.word	0x40020028
 8006478:	40020040 	.word	0x40020040
 800647c:	40020058 	.word	0x40020058
 8006480:	40020070 	.word	0x40020070
 8006484:	40020088 	.word	0x40020088
 8006488:	400200a0 	.word	0x400200a0
 800648c:	400200b8 	.word	0x400200b8
 8006490:	40020410 	.word	0x40020410
 8006494:	40020428 	.word	0x40020428
 8006498:	40020440 	.word	0x40020440
 800649c:	40020458 	.word	0x40020458
 80064a0:	40020470 	.word	0x40020470
 80064a4:	40020488 	.word	0x40020488
 80064a8:	400204a0 	.word	0x400204a0
 80064ac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f022 020e 	bic.w	r2, r2, #14
 80064be:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a6c      	ldr	r2, [pc, #432]	@ (8006678 <HAL_DMA_Abort_IT+0x3a8>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d04a      	beq.n	8006560 <HAL_DMA_Abort_IT+0x290>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a6b      	ldr	r2, [pc, #428]	@ (800667c <HAL_DMA_Abort_IT+0x3ac>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d045      	beq.n	8006560 <HAL_DMA_Abort_IT+0x290>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a69      	ldr	r2, [pc, #420]	@ (8006680 <HAL_DMA_Abort_IT+0x3b0>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d040      	beq.n	8006560 <HAL_DMA_Abort_IT+0x290>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a68      	ldr	r2, [pc, #416]	@ (8006684 <HAL_DMA_Abort_IT+0x3b4>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d03b      	beq.n	8006560 <HAL_DMA_Abort_IT+0x290>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a66      	ldr	r2, [pc, #408]	@ (8006688 <HAL_DMA_Abort_IT+0x3b8>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d036      	beq.n	8006560 <HAL_DMA_Abort_IT+0x290>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a65      	ldr	r2, [pc, #404]	@ (800668c <HAL_DMA_Abort_IT+0x3bc>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d031      	beq.n	8006560 <HAL_DMA_Abort_IT+0x290>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a63      	ldr	r2, [pc, #396]	@ (8006690 <HAL_DMA_Abort_IT+0x3c0>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d02c      	beq.n	8006560 <HAL_DMA_Abort_IT+0x290>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a62      	ldr	r2, [pc, #392]	@ (8006694 <HAL_DMA_Abort_IT+0x3c4>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d027      	beq.n	8006560 <HAL_DMA_Abort_IT+0x290>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a60      	ldr	r2, [pc, #384]	@ (8006698 <HAL_DMA_Abort_IT+0x3c8>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d022      	beq.n	8006560 <HAL_DMA_Abort_IT+0x290>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a5f      	ldr	r2, [pc, #380]	@ (800669c <HAL_DMA_Abort_IT+0x3cc>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d01d      	beq.n	8006560 <HAL_DMA_Abort_IT+0x290>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a5d      	ldr	r2, [pc, #372]	@ (80066a0 <HAL_DMA_Abort_IT+0x3d0>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d018      	beq.n	8006560 <HAL_DMA_Abort_IT+0x290>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a5c      	ldr	r2, [pc, #368]	@ (80066a4 <HAL_DMA_Abort_IT+0x3d4>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d013      	beq.n	8006560 <HAL_DMA_Abort_IT+0x290>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a5a      	ldr	r2, [pc, #360]	@ (80066a8 <HAL_DMA_Abort_IT+0x3d8>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d00e      	beq.n	8006560 <HAL_DMA_Abort_IT+0x290>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a59      	ldr	r2, [pc, #356]	@ (80066ac <HAL_DMA_Abort_IT+0x3dc>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d009      	beq.n	8006560 <HAL_DMA_Abort_IT+0x290>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a57      	ldr	r2, [pc, #348]	@ (80066b0 <HAL_DMA_Abort_IT+0x3e0>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d004      	beq.n	8006560 <HAL_DMA_Abort_IT+0x290>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a56      	ldr	r2, [pc, #344]	@ (80066b4 <HAL_DMA_Abort_IT+0x3e4>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d108      	bne.n	8006572 <HAL_DMA_Abort_IT+0x2a2>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f022 0201 	bic.w	r2, r2, #1
 800656e:	601a      	str	r2, [r3, #0]
 8006570:	e007      	b.n	8006582 <HAL_DMA_Abort_IT+0x2b2>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f022 0201 	bic.w	r2, r2, #1
 8006580:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a3c      	ldr	r2, [pc, #240]	@ (8006678 <HAL_DMA_Abort_IT+0x3a8>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d072      	beq.n	8006672 <HAL_DMA_Abort_IT+0x3a2>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a3a      	ldr	r2, [pc, #232]	@ (800667c <HAL_DMA_Abort_IT+0x3ac>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d06d      	beq.n	8006672 <HAL_DMA_Abort_IT+0x3a2>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a39      	ldr	r2, [pc, #228]	@ (8006680 <HAL_DMA_Abort_IT+0x3b0>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d068      	beq.n	8006672 <HAL_DMA_Abort_IT+0x3a2>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a37      	ldr	r2, [pc, #220]	@ (8006684 <HAL_DMA_Abort_IT+0x3b4>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d063      	beq.n	8006672 <HAL_DMA_Abort_IT+0x3a2>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a36      	ldr	r2, [pc, #216]	@ (8006688 <HAL_DMA_Abort_IT+0x3b8>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d05e      	beq.n	8006672 <HAL_DMA_Abort_IT+0x3a2>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a34      	ldr	r2, [pc, #208]	@ (800668c <HAL_DMA_Abort_IT+0x3bc>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d059      	beq.n	8006672 <HAL_DMA_Abort_IT+0x3a2>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a33      	ldr	r2, [pc, #204]	@ (8006690 <HAL_DMA_Abort_IT+0x3c0>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d054      	beq.n	8006672 <HAL_DMA_Abort_IT+0x3a2>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a31      	ldr	r2, [pc, #196]	@ (8006694 <HAL_DMA_Abort_IT+0x3c4>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d04f      	beq.n	8006672 <HAL_DMA_Abort_IT+0x3a2>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a30      	ldr	r2, [pc, #192]	@ (8006698 <HAL_DMA_Abort_IT+0x3c8>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d04a      	beq.n	8006672 <HAL_DMA_Abort_IT+0x3a2>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a2e      	ldr	r2, [pc, #184]	@ (800669c <HAL_DMA_Abort_IT+0x3cc>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d045      	beq.n	8006672 <HAL_DMA_Abort_IT+0x3a2>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a2d      	ldr	r2, [pc, #180]	@ (80066a0 <HAL_DMA_Abort_IT+0x3d0>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d040      	beq.n	8006672 <HAL_DMA_Abort_IT+0x3a2>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a2b      	ldr	r2, [pc, #172]	@ (80066a4 <HAL_DMA_Abort_IT+0x3d4>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d03b      	beq.n	8006672 <HAL_DMA_Abort_IT+0x3a2>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a2a      	ldr	r2, [pc, #168]	@ (80066a8 <HAL_DMA_Abort_IT+0x3d8>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d036      	beq.n	8006672 <HAL_DMA_Abort_IT+0x3a2>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a28      	ldr	r2, [pc, #160]	@ (80066ac <HAL_DMA_Abort_IT+0x3dc>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d031      	beq.n	8006672 <HAL_DMA_Abort_IT+0x3a2>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a27      	ldr	r2, [pc, #156]	@ (80066b0 <HAL_DMA_Abort_IT+0x3e0>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d02c      	beq.n	8006672 <HAL_DMA_Abort_IT+0x3a2>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a25      	ldr	r2, [pc, #148]	@ (80066b4 <HAL_DMA_Abort_IT+0x3e4>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d027      	beq.n	8006672 <HAL_DMA_Abort_IT+0x3a2>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a24      	ldr	r2, [pc, #144]	@ (80066b8 <HAL_DMA_Abort_IT+0x3e8>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d022      	beq.n	8006672 <HAL_DMA_Abort_IT+0x3a2>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a22      	ldr	r2, [pc, #136]	@ (80066bc <HAL_DMA_Abort_IT+0x3ec>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d01d      	beq.n	8006672 <HAL_DMA_Abort_IT+0x3a2>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a21      	ldr	r2, [pc, #132]	@ (80066c0 <HAL_DMA_Abort_IT+0x3f0>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d018      	beq.n	8006672 <HAL_DMA_Abort_IT+0x3a2>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a1f      	ldr	r2, [pc, #124]	@ (80066c4 <HAL_DMA_Abort_IT+0x3f4>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d013      	beq.n	8006672 <HAL_DMA_Abort_IT+0x3a2>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a1e      	ldr	r2, [pc, #120]	@ (80066c8 <HAL_DMA_Abort_IT+0x3f8>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d00e      	beq.n	8006672 <HAL_DMA_Abort_IT+0x3a2>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a1c      	ldr	r2, [pc, #112]	@ (80066cc <HAL_DMA_Abort_IT+0x3fc>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d009      	beq.n	8006672 <HAL_DMA_Abort_IT+0x3a2>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a1b      	ldr	r2, [pc, #108]	@ (80066d0 <HAL_DMA_Abort_IT+0x400>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d004      	beq.n	8006672 <HAL_DMA_Abort_IT+0x3a2>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a19      	ldr	r2, [pc, #100]	@ (80066d4 <HAL_DMA_Abort_IT+0x404>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d132      	bne.n	80066d8 <HAL_DMA_Abort_IT+0x408>
 8006672:	2301      	movs	r3, #1
 8006674:	e031      	b.n	80066da <HAL_DMA_Abort_IT+0x40a>
 8006676:	bf00      	nop
 8006678:	40020010 	.word	0x40020010
 800667c:	40020028 	.word	0x40020028
 8006680:	40020040 	.word	0x40020040
 8006684:	40020058 	.word	0x40020058
 8006688:	40020070 	.word	0x40020070
 800668c:	40020088 	.word	0x40020088
 8006690:	400200a0 	.word	0x400200a0
 8006694:	400200b8 	.word	0x400200b8
 8006698:	40020410 	.word	0x40020410
 800669c:	40020428 	.word	0x40020428
 80066a0:	40020440 	.word	0x40020440
 80066a4:	40020458 	.word	0x40020458
 80066a8:	40020470 	.word	0x40020470
 80066ac:	40020488 	.word	0x40020488
 80066b0:	400204a0 	.word	0x400204a0
 80066b4:	400204b8 	.word	0x400204b8
 80066b8:	58025408 	.word	0x58025408
 80066bc:	5802541c 	.word	0x5802541c
 80066c0:	58025430 	.word	0x58025430
 80066c4:	58025444 	.word	0x58025444
 80066c8:	58025458 	.word	0x58025458
 80066cc:	5802546c 	.word	0x5802546c
 80066d0:	58025480 	.word	0x58025480
 80066d4:	58025494 	.word	0x58025494
 80066d8:	2300      	movs	r3, #0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d028      	beq.n	8006730 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80066ec:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066f2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066f8:	f003 031f 	and.w	r3, r3, #31
 80066fc:	2201      	movs	r2, #1
 80066fe:	409a      	lsls	r2, r3
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800670c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00c      	beq.n	8006730 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006720:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006724:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800672e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006744:	2b00      	cmp	r3, #0
 8006746:	d003      	beq.n	8006750 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop

0800675c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b08a      	sub	sp, #40	@ 0x28
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006764:	2300      	movs	r3, #0
 8006766:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006768:	4b67      	ldr	r3, [pc, #412]	@ (8006908 <HAL_DMA_IRQHandler+0x1ac>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a67      	ldr	r2, [pc, #412]	@ (800690c <HAL_DMA_IRQHandler+0x1b0>)
 800676e:	fba2 2303 	umull	r2, r3, r2, r3
 8006772:	0a9b      	lsrs	r3, r3, #10
 8006774:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800677a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006780:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a5f      	ldr	r2, [pc, #380]	@ (8006910 <HAL_DMA_IRQHandler+0x1b4>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d04a      	beq.n	800682e <HAL_DMA_IRQHandler+0xd2>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a5d      	ldr	r2, [pc, #372]	@ (8006914 <HAL_DMA_IRQHandler+0x1b8>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d045      	beq.n	800682e <HAL_DMA_IRQHandler+0xd2>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a5c      	ldr	r2, [pc, #368]	@ (8006918 <HAL_DMA_IRQHandler+0x1bc>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d040      	beq.n	800682e <HAL_DMA_IRQHandler+0xd2>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a5a      	ldr	r2, [pc, #360]	@ (800691c <HAL_DMA_IRQHandler+0x1c0>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d03b      	beq.n	800682e <HAL_DMA_IRQHandler+0xd2>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a59      	ldr	r2, [pc, #356]	@ (8006920 <HAL_DMA_IRQHandler+0x1c4>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d036      	beq.n	800682e <HAL_DMA_IRQHandler+0xd2>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a57      	ldr	r2, [pc, #348]	@ (8006924 <HAL_DMA_IRQHandler+0x1c8>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d031      	beq.n	800682e <HAL_DMA_IRQHandler+0xd2>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a56      	ldr	r2, [pc, #344]	@ (8006928 <HAL_DMA_IRQHandler+0x1cc>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d02c      	beq.n	800682e <HAL_DMA_IRQHandler+0xd2>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a54      	ldr	r2, [pc, #336]	@ (800692c <HAL_DMA_IRQHandler+0x1d0>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d027      	beq.n	800682e <HAL_DMA_IRQHandler+0xd2>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a53      	ldr	r2, [pc, #332]	@ (8006930 <HAL_DMA_IRQHandler+0x1d4>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d022      	beq.n	800682e <HAL_DMA_IRQHandler+0xd2>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a51      	ldr	r2, [pc, #324]	@ (8006934 <HAL_DMA_IRQHandler+0x1d8>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d01d      	beq.n	800682e <HAL_DMA_IRQHandler+0xd2>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a50      	ldr	r2, [pc, #320]	@ (8006938 <HAL_DMA_IRQHandler+0x1dc>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d018      	beq.n	800682e <HAL_DMA_IRQHandler+0xd2>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a4e      	ldr	r2, [pc, #312]	@ (800693c <HAL_DMA_IRQHandler+0x1e0>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d013      	beq.n	800682e <HAL_DMA_IRQHandler+0xd2>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a4d      	ldr	r2, [pc, #308]	@ (8006940 <HAL_DMA_IRQHandler+0x1e4>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d00e      	beq.n	800682e <HAL_DMA_IRQHandler+0xd2>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a4b      	ldr	r2, [pc, #300]	@ (8006944 <HAL_DMA_IRQHandler+0x1e8>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d009      	beq.n	800682e <HAL_DMA_IRQHandler+0xd2>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a4a      	ldr	r2, [pc, #296]	@ (8006948 <HAL_DMA_IRQHandler+0x1ec>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d004      	beq.n	800682e <HAL_DMA_IRQHandler+0xd2>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a48      	ldr	r2, [pc, #288]	@ (800694c <HAL_DMA_IRQHandler+0x1f0>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d101      	bne.n	8006832 <HAL_DMA_IRQHandler+0xd6>
 800682e:	2301      	movs	r3, #1
 8006830:	e000      	b.n	8006834 <HAL_DMA_IRQHandler+0xd8>
 8006832:	2300      	movs	r3, #0
 8006834:	2b00      	cmp	r3, #0
 8006836:	f000 842b 	beq.w	8007090 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800683e:	f003 031f 	and.w	r3, r3, #31
 8006842:	2208      	movs	r2, #8
 8006844:	409a      	lsls	r2, r3
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	4013      	ands	r3, r2
 800684a:	2b00      	cmp	r3, #0
 800684c:	f000 80a2 	beq.w	8006994 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a2e      	ldr	r2, [pc, #184]	@ (8006910 <HAL_DMA_IRQHandler+0x1b4>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d04a      	beq.n	80068f0 <HAL_DMA_IRQHandler+0x194>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a2d      	ldr	r2, [pc, #180]	@ (8006914 <HAL_DMA_IRQHandler+0x1b8>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d045      	beq.n	80068f0 <HAL_DMA_IRQHandler+0x194>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a2b      	ldr	r2, [pc, #172]	@ (8006918 <HAL_DMA_IRQHandler+0x1bc>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d040      	beq.n	80068f0 <HAL_DMA_IRQHandler+0x194>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a2a      	ldr	r2, [pc, #168]	@ (800691c <HAL_DMA_IRQHandler+0x1c0>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d03b      	beq.n	80068f0 <HAL_DMA_IRQHandler+0x194>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a28      	ldr	r2, [pc, #160]	@ (8006920 <HAL_DMA_IRQHandler+0x1c4>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d036      	beq.n	80068f0 <HAL_DMA_IRQHandler+0x194>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a27      	ldr	r2, [pc, #156]	@ (8006924 <HAL_DMA_IRQHandler+0x1c8>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d031      	beq.n	80068f0 <HAL_DMA_IRQHandler+0x194>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a25      	ldr	r2, [pc, #148]	@ (8006928 <HAL_DMA_IRQHandler+0x1cc>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d02c      	beq.n	80068f0 <HAL_DMA_IRQHandler+0x194>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a24      	ldr	r2, [pc, #144]	@ (800692c <HAL_DMA_IRQHandler+0x1d0>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d027      	beq.n	80068f0 <HAL_DMA_IRQHandler+0x194>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a22      	ldr	r2, [pc, #136]	@ (8006930 <HAL_DMA_IRQHandler+0x1d4>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d022      	beq.n	80068f0 <HAL_DMA_IRQHandler+0x194>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a21      	ldr	r2, [pc, #132]	@ (8006934 <HAL_DMA_IRQHandler+0x1d8>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d01d      	beq.n	80068f0 <HAL_DMA_IRQHandler+0x194>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a1f      	ldr	r2, [pc, #124]	@ (8006938 <HAL_DMA_IRQHandler+0x1dc>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d018      	beq.n	80068f0 <HAL_DMA_IRQHandler+0x194>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a1e      	ldr	r2, [pc, #120]	@ (800693c <HAL_DMA_IRQHandler+0x1e0>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d013      	beq.n	80068f0 <HAL_DMA_IRQHandler+0x194>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a1c      	ldr	r2, [pc, #112]	@ (8006940 <HAL_DMA_IRQHandler+0x1e4>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d00e      	beq.n	80068f0 <HAL_DMA_IRQHandler+0x194>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a1b      	ldr	r2, [pc, #108]	@ (8006944 <HAL_DMA_IRQHandler+0x1e8>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d009      	beq.n	80068f0 <HAL_DMA_IRQHandler+0x194>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a19      	ldr	r2, [pc, #100]	@ (8006948 <HAL_DMA_IRQHandler+0x1ec>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d004      	beq.n	80068f0 <HAL_DMA_IRQHandler+0x194>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a18      	ldr	r2, [pc, #96]	@ (800694c <HAL_DMA_IRQHandler+0x1f0>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d12f      	bne.n	8006950 <HAL_DMA_IRQHandler+0x1f4>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0304 	and.w	r3, r3, #4
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	bf14      	ite	ne
 80068fe:	2301      	movne	r3, #1
 8006900:	2300      	moveq	r3, #0
 8006902:	b2db      	uxtb	r3, r3
 8006904:	e02e      	b.n	8006964 <HAL_DMA_IRQHandler+0x208>
 8006906:	bf00      	nop
 8006908:	24000000 	.word	0x24000000
 800690c:	1b4e81b5 	.word	0x1b4e81b5
 8006910:	40020010 	.word	0x40020010
 8006914:	40020028 	.word	0x40020028
 8006918:	40020040 	.word	0x40020040
 800691c:	40020058 	.word	0x40020058
 8006920:	40020070 	.word	0x40020070
 8006924:	40020088 	.word	0x40020088
 8006928:	400200a0 	.word	0x400200a0
 800692c:	400200b8 	.word	0x400200b8
 8006930:	40020410 	.word	0x40020410
 8006934:	40020428 	.word	0x40020428
 8006938:	40020440 	.word	0x40020440
 800693c:	40020458 	.word	0x40020458
 8006940:	40020470 	.word	0x40020470
 8006944:	40020488 	.word	0x40020488
 8006948:	400204a0 	.word	0x400204a0
 800694c:	400204b8 	.word	0x400204b8
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0308 	and.w	r3, r3, #8
 800695a:	2b00      	cmp	r3, #0
 800695c:	bf14      	ite	ne
 800695e:	2301      	movne	r3, #1
 8006960:	2300      	moveq	r3, #0
 8006962:	b2db      	uxtb	r3, r3
 8006964:	2b00      	cmp	r3, #0
 8006966:	d015      	beq.n	8006994 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f022 0204 	bic.w	r2, r2, #4
 8006976:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800697c:	f003 031f 	and.w	r3, r3, #31
 8006980:	2208      	movs	r2, #8
 8006982:	409a      	lsls	r2, r3
 8006984:	6a3b      	ldr	r3, [r7, #32]
 8006986:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800698c:	f043 0201 	orr.w	r2, r3, #1
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006998:	f003 031f 	and.w	r3, r3, #31
 800699c:	69ba      	ldr	r2, [r7, #24]
 800699e:	fa22 f303 	lsr.w	r3, r2, r3
 80069a2:	f003 0301 	and.w	r3, r3, #1
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d06e      	beq.n	8006a88 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a69      	ldr	r2, [pc, #420]	@ (8006b54 <HAL_DMA_IRQHandler+0x3f8>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d04a      	beq.n	8006a4a <HAL_DMA_IRQHandler+0x2ee>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a67      	ldr	r2, [pc, #412]	@ (8006b58 <HAL_DMA_IRQHandler+0x3fc>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d045      	beq.n	8006a4a <HAL_DMA_IRQHandler+0x2ee>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a66      	ldr	r2, [pc, #408]	@ (8006b5c <HAL_DMA_IRQHandler+0x400>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d040      	beq.n	8006a4a <HAL_DMA_IRQHandler+0x2ee>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a64      	ldr	r2, [pc, #400]	@ (8006b60 <HAL_DMA_IRQHandler+0x404>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d03b      	beq.n	8006a4a <HAL_DMA_IRQHandler+0x2ee>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a63      	ldr	r2, [pc, #396]	@ (8006b64 <HAL_DMA_IRQHandler+0x408>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d036      	beq.n	8006a4a <HAL_DMA_IRQHandler+0x2ee>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a61      	ldr	r2, [pc, #388]	@ (8006b68 <HAL_DMA_IRQHandler+0x40c>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d031      	beq.n	8006a4a <HAL_DMA_IRQHandler+0x2ee>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a60      	ldr	r2, [pc, #384]	@ (8006b6c <HAL_DMA_IRQHandler+0x410>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d02c      	beq.n	8006a4a <HAL_DMA_IRQHandler+0x2ee>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a5e      	ldr	r2, [pc, #376]	@ (8006b70 <HAL_DMA_IRQHandler+0x414>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d027      	beq.n	8006a4a <HAL_DMA_IRQHandler+0x2ee>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a5d      	ldr	r2, [pc, #372]	@ (8006b74 <HAL_DMA_IRQHandler+0x418>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d022      	beq.n	8006a4a <HAL_DMA_IRQHandler+0x2ee>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a5b      	ldr	r2, [pc, #364]	@ (8006b78 <HAL_DMA_IRQHandler+0x41c>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d01d      	beq.n	8006a4a <HAL_DMA_IRQHandler+0x2ee>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a5a      	ldr	r2, [pc, #360]	@ (8006b7c <HAL_DMA_IRQHandler+0x420>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d018      	beq.n	8006a4a <HAL_DMA_IRQHandler+0x2ee>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a58      	ldr	r2, [pc, #352]	@ (8006b80 <HAL_DMA_IRQHandler+0x424>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d013      	beq.n	8006a4a <HAL_DMA_IRQHandler+0x2ee>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a57      	ldr	r2, [pc, #348]	@ (8006b84 <HAL_DMA_IRQHandler+0x428>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d00e      	beq.n	8006a4a <HAL_DMA_IRQHandler+0x2ee>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a55      	ldr	r2, [pc, #340]	@ (8006b88 <HAL_DMA_IRQHandler+0x42c>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d009      	beq.n	8006a4a <HAL_DMA_IRQHandler+0x2ee>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a54      	ldr	r2, [pc, #336]	@ (8006b8c <HAL_DMA_IRQHandler+0x430>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d004      	beq.n	8006a4a <HAL_DMA_IRQHandler+0x2ee>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a52      	ldr	r2, [pc, #328]	@ (8006b90 <HAL_DMA_IRQHandler+0x434>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d10a      	bne.n	8006a60 <HAL_DMA_IRQHandler+0x304>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	695b      	ldr	r3, [r3, #20]
 8006a50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	bf14      	ite	ne
 8006a58:	2301      	movne	r3, #1
 8006a5a:	2300      	moveq	r3, #0
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	e003      	b.n	8006a68 <HAL_DMA_IRQHandler+0x30c>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2300      	movs	r3, #0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d00d      	beq.n	8006a88 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a70:	f003 031f 	and.w	r3, r3, #31
 8006a74:	2201      	movs	r2, #1
 8006a76:	409a      	lsls	r2, r3
 8006a78:	6a3b      	ldr	r3, [r7, #32]
 8006a7a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a80:	f043 0202 	orr.w	r2, r3, #2
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a8c:	f003 031f 	and.w	r3, r3, #31
 8006a90:	2204      	movs	r2, #4
 8006a92:	409a      	lsls	r2, r3
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	4013      	ands	r3, r2
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f000 808f 	beq.w	8006bbc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a2c      	ldr	r2, [pc, #176]	@ (8006b54 <HAL_DMA_IRQHandler+0x3f8>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d04a      	beq.n	8006b3e <HAL_DMA_IRQHandler+0x3e2>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a2a      	ldr	r2, [pc, #168]	@ (8006b58 <HAL_DMA_IRQHandler+0x3fc>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d045      	beq.n	8006b3e <HAL_DMA_IRQHandler+0x3e2>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a29      	ldr	r2, [pc, #164]	@ (8006b5c <HAL_DMA_IRQHandler+0x400>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d040      	beq.n	8006b3e <HAL_DMA_IRQHandler+0x3e2>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a27      	ldr	r2, [pc, #156]	@ (8006b60 <HAL_DMA_IRQHandler+0x404>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d03b      	beq.n	8006b3e <HAL_DMA_IRQHandler+0x3e2>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a26      	ldr	r2, [pc, #152]	@ (8006b64 <HAL_DMA_IRQHandler+0x408>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d036      	beq.n	8006b3e <HAL_DMA_IRQHandler+0x3e2>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a24      	ldr	r2, [pc, #144]	@ (8006b68 <HAL_DMA_IRQHandler+0x40c>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d031      	beq.n	8006b3e <HAL_DMA_IRQHandler+0x3e2>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a23      	ldr	r2, [pc, #140]	@ (8006b6c <HAL_DMA_IRQHandler+0x410>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d02c      	beq.n	8006b3e <HAL_DMA_IRQHandler+0x3e2>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a21      	ldr	r2, [pc, #132]	@ (8006b70 <HAL_DMA_IRQHandler+0x414>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d027      	beq.n	8006b3e <HAL_DMA_IRQHandler+0x3e2>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a20      	ldr	r2, [pc, #128]	@ (8006b74 <HAL_DMA_IRQHandler+0x418>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d022      	beq.n	8006b3e <HAL_DMA_IRQHandler+0x3e2>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a1e      	ldr	r2, [pc, #120]	@ (8006b78 <HAL_DMA_IRQHandler+0x41c>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d01d      	beq.n	8006b3e <HAL_DMA_IRQHandler+0x3e2>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a1d      	ldr	r2, [pc, #116]	@ (8006b7c <HAL_DMA_IRQHandler+0x420>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d018      	beq.n	8006b3e <HAL_DMA_IRQHandler+0x3e2>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a1b      	ldr	r2, [pc, #108]	@ (8006b80 <HAL_DMA_IRQHandler+0x424>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d013      	beq.n	8006b3e <HAL_DMA_IRQHandler+0x3e2>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a1a      	ldr	r2, [pc, #104]	@ (8006b84 <HAL_DMA_IRQHandler+0x428>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d00e      	beq.n	8006b3e <HAL_DMA_IRQHandler+0x3e2>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a18      	ldr	r2, [pc, #96]	@ (8006b88 <HAL_DMA_IRQHandler+0x42c>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d009      	beq.n	8006b3e <HAL_DMA_IRQHandler+0x3e2>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a17      	ldr	r2, [pc, #92]	@ (8006b8c <HAL_DMA_IRQHandler+0x430>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d004      	beq.n	8006b3e <HAL_DMA_IRQHandler+0x3e2>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a15      	ldr	r2, [pc, #84]	@ (8006b90 <HAL_DMA_IRQHandler+0x434>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d12a      	bne.n	8006b94 <HAL_DMA_IRQHandler+0x438>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0302 	and.w	r3, r3, #2
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	bf14      	ite	ne
 8006b4c:	2301      	movne	r3, #1
 8006b4e:	2300      	moveq	r3, #0
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	e023      	b.n	8006b9c <HAL_DMA_IRQHandler+0x440>
 8006b54:	40020010 	.word	0x40020010
 8006b58:	40020028 	.word	0x40020028
 8006b5c:	40020040 	.word	0x40020040
 8006b60:	40020058 	.word	0x40020058
 8006b64:	40020070 	.word	0x40020070
 8006b68:	40020088 	.word	0x40020088
 8006b6c:	400200a0 	.word	0x400200a0
 8006b70:	400200b8 	.word	0x400200b8
 8006b74:	40020410 	.word	0x40020410
 8006b78:	40020428 	.word	0x40020428
 8006b7c:	40020440 	.word	0x40020440
 8006b80:	40020458 	.word	0x40020458
 8006b84:	40020470 	.word	0x40020470
 8006b88:	40020488 	.word	0x40020488
 8006b8c:	400204a0 	.word	0x400204a0
 8006b90:	400204b8 	.word	0x400204b8
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00d      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ba4:	f003 031f 	and.w	r3, r3, #31
 8006ba8:	2204      	movs	r2, #4
 8006baa:	409a      	lsls	r2, r3
 8006bac:	6a3b      	ldr	r3, [r7, #32]
 8006bae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bb4:	f043 0204 	orr.w	r2, r3, #4
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bc0:	f003 031f 	and.w	r3, r3, #31
 8006bc4:	2210      	movs	r2, #16
 8006bc6:	409a      	lsls	r2, r3
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	4013      	ands	r3, r2
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f000 80a6 	beq.w	8006d1e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a85      	ldr	r2, [pc, #532]	@ (8006dec <HAL_DMA_IRQHandler+0x690>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d04a      	beq.n	8006c72 <HAL_DMA_IRQHandler+0x516>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a83      	ldr	r2, [pc, #524]	@ (8006df0 <HAL_DMA_IRQHandler+0x694>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d045      	beq.n	8006c72 <HAL_DMA_IRQHandler+0x516>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a82      	ldr	r2, [pc, #520]	@ (8006df4 <HAL_DMA_IRQHandler+0x698>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d040      	beq.n	8006c72 <HAL_DMA_IRQHandler+0x516>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a80      	ldr	r2, [pc, #512]	@ (8006df8 <HAL_DMA_IRQHandler+0x69c>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d03b      	beq.n	8006c72 <HAL_DMA_IRQHandler+0x516>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a7f      	ldr	r2, [pc, #508]	@ (8006dfc <HAL_DMA_IRQHandler+0x6a0>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d036      	beq.n	8006c72 <HAL_DMA_IRQHandler+0x516>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a7d      	ldr	r2, [pc, #500]	@ (8006e00 <HAL_DMA_IRQHandler+0x6a4>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d031      	beq.n	8006c72 <HAL_DMA_IRQHandler+0x516>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a7c      	ldr	r2, [pc, #496]	@ (8006e04 <HAL_DMA_IRQHandler+0x6a8>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d02c      	beq.n	8006c72 <HAL_DMA_IRQHandler+0x516>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a7a      	ldr	r2, [pc, #488]	@ (8006e08 <HAL_DMA_IRQHandler+0x6ac>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d027      	beq.n	8006c72 <HAL_DMA_IRQHandler+0x516>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a79      	ldr	r2, [pc, #484]	@ (8006e0c <HAL_DMA_IRQHandler+0x6b0>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d022      	beq.n	8006c72 <HAL_DMA_IRQHandler+0x516>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a77      	ldr	r2, [pc, #476]	@ (8006e10 <HAL_DMA_IRQHandler+0x6b4>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d01d      	beq.n	8006c72 <HAL_DMA_IRQHandler+0x516>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a76      	ldr	r2, [pc, #472]	@ (8006e14 <HAL_DMA_IRQHandler+0x6b8>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d018      	beq.n	8006c72 <HAL_DMA_IRQHandler+0x516>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a74      	ldr	r2, [pc, #464]	@ (8006e18 <HAL_DMA_IRQHandler+0x6bc>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d013      	beq.n	8006c72 <HAL_DMA_IRQHandler+0x516>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a73      	ldr	r2, [pc, #460]	@ (8006e1c <HAL_DMA_IRQHandler+0x6c0>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d00e      	beq.n	8006c72 <HAL_DMA_IRQHandler+0x516>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a71      	ldr	r2, [pc, #452]	@ (8006e20 <HAL_DMA_IRQHandler+0x6c4>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d009      	beq.n	8006c72 <HAL_DMA_IRQHandler+0x516>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a70      	ldr	r2, [pc, #448]	@ (8006e24 <HAL_DMA_IRQHandler+0x6c8>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d004      	beq.n	8006c72 <HAL_DMA_IRQHandler+0x516>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a6e      	ldr	r2, [pc, #440]	@ (8006e28 <HAL_DMA_IRQHandler+0x6cc>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d10a      	bne.n	8006c88 <HAL_DMA_IRQHandler+0x52c>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 0308 	and.w	r3, r3, #8
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	bf14      	ite	ne
 8006c80:	2301      	movne	r3, #1
 8006c82:	2300      	moveq	r3, #0
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	e009      	b.n	8006c9c <HAL_DMA_IRQHandler+0x540>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 0304 	and.w	r3, r3, #4
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	bf14      	ite	ne
 8006c96:	2301      	movne	r3, #1
 8006c98:	2300      	moveq	r3, #0
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d03e      	beq.n	8006d1e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ca4:	f003 031f 	and.w	r3, r3, #31
 8006ca8:	2210      	movs	r2, #16
 8006caa:	409a      	lsls	r2, r3
 8006cac:	6a3b      	ldr	r3, [r7, #32]
 8006cae:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d018      	beq.n	8006cf0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d108      	bne.n	8006cde <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d024      	beq.n	8006d1e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	4798      	blx	r3
 8006cdc:	e01f      	b.n	8006d1e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d01b      	beq.n	8006d1e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	4798      	blx	r3
 8006cee:	e016      	b.n	8006d1e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d107      	bne.n	8006d0e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f022 0208 	bic.w	r2, r2, #8
 8006d0c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d003      	beq.n	8006d1e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d22:	f003 031f 	and.w	r3, r3, #31
 8006d26:	2220      	movs	r2, #32
 8006d28:	409a      	lsls	r2, r3
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	f000 8110 	beq.w	8006f54 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a2c      	ldr	r2, [pc, #176]	@ (8006dec <HAL_DMA_IRQHandler+0x690>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d04a      	beq.n	8006dd4 <HAL_DMA_IRQHandler+0x678>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a2b      	ldr	r2, [pc, #172]	@ (8006df0 <HAL_DMA_IRQHandler+0x694>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d045      	beq.n	8006dd4 <HAL_DMA_IRQHandler+0x678>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a29      	ldr	r2, [pc, #164]	@ (8006df4 <HAL_DMA_IRQHandler+0x698>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d040      	beq.n	8006dd4 <HAL_DMA_IRQHandler+0x678>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a28      	ldr	r2, [pc, #160]	@ (8006df8 <HAL_DMA_IRQHandler+0x69c>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d03b      	beq.n	8006dd4 <HAL_DMA_IRQHandler+0x678>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a26      	ldr	r2, [pc, #152]	@ (8006dfc <HAL_DMA_IRQHandler+0x6a0>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d036      	beq.n	8006dd4 <HAL_DMA_IRQHandler+0x678>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a25      	ldr	r2, [pc, #148]	@ (8006e00 <HAL_DMA_IRQHandler+0x6a4>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d031      	beq.n	8006dd4 <HAL_DMA_IRQHandler+0x678>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a23      	ldr	r2, [pc, #140]	@ (8006e04 <HAL_DMA_IRQHandler+0x6a8>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d02c      	beq.n	8006dd4 <HAL_DMA_IRQHandler+0x678>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a22      	ldr	r2, [pc, #136]	@ (8006e08 <HAL_DMA_IRQHandler+0x6ac>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d027      	beq.n	8006dd4 <HAL_DMA_IRQHandler+0x678>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a20      	ldr	r2, [pc, #128]	@ (8006e0c <HAL_DMA_IRQHandler+0x6b0>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d022      	beq.n	8006dd4 <HAL_DMA_IRQHandler+0x678>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a1f      	ldr	r2, [pc, #124]	@ (8006e10 <HAL_DMA_IRQHandler+0x6b4>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d01d      	beq.n	8006dd4 <HAL_DMA_IRQHandler+0x678>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8006e14 <HAL_DMA_IRQHandler+0x6b8>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d018      	beq.n	8006dd4 <HAL_DMA_IRQHandler+0x678>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a1c      	ldr	r2, [pc, #112]	@ (8006e18 <HAL_DMA_IRQHandler+0x6bc>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d013      	beq.n	8006dd4 <HAL_DMA_IRQHandler+0x678>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a1a      	ldr	r2, [pc, #104]	@ (8006e1c <HAL_DMA_IRQHandler+0x6c0>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d00e      	beq.n	8006dd4 <HAL_DMA_IRQHandler+0x678>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a19      	ldr	r2, [pc, #100]	@ (8006e20 <HAL_DMA_IRQHandler+0x6c4>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d009      	beq.n	8006dd4 <HAL_DMA_IRQHandler+0x678>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a17      	ldr	r2, [pc, #92]	@ (8006e24 <HAL_DMA_IRQHandler+0x6c8>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d004      	beq.n	8006dd4 <HAL_DMA_IRQHandler+0x678>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a16      	ldr	r2, [pc, #88]	@ (8006e28 <HAL_DMA_IRQHandler+0x6cc>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d12b      	bne.n	8006e2c <HAL_DMA_IRQHandler+0x6d0>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0310 	and.w	r3, r3, #16
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	bf14      	ite	ne
 8006de2:	2301      	movne	r3, #1
 8006de4:	2300      	moveq	r3, #0
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	e02a      	b.n	8006e40 <HAL_DMA_IRQHandler+0x6e4>
 8006dea:	bf00      	nop
 8006dec:	40020010 	.word	0x40020010
 8006df0:	40020028 	.word	0x40020028
 8006df4:	40020040 	.word	0x40020040
 8006df8:	40020058 	.word	0x40020058
 8006dfc:	40020070 	.word	0x40020070
 8006e00:	40020088 	.word	0x40020088
 8006e04:	400200a0 	.word	0x400200a0
 8006e08:	400200b8 	.word	0x400200b8
 8006e0c:	40020410 	.word	0x40020410
 8006e10:	40020428 	.word	0x40020428
 8006e14:	40020440 	.word	0x40020440
 8006e18:	40020458 	.word	0x40020458
 8006e1c:	40020470 	.word	0x40020470
 8006e20:	40020488 	.word	0x40020488
 8006e24:	400204a0 	.word	0x400204a0
 8006e28:	400204b8 	.word	0x400204b8
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 0302 	and.w	r3, r3, #2
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	bf14      	ite	ne
 8006e3a:	2301      	movne	r3, #1
 8006e3c:	2300      	moveq	r3, #0
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f000 8087 	beq.w	8006f54 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e4a:	f003 031f 	and.w	r3, r3, #31
 8006e4e:	2220      	movs	r2, #32
 8006e50:	409a      	lsls	r2, r3
 8006e52:	6a3b      	ldr	r3, [r7, #32]
 8006e54:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b04      	cmp	r3, #4
 8006e60:	d139      	bne.n	8006ed6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f022 0216 	bic.w	r2, r2, #22
 8006e70:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	695a      	ldr	r2, [r3, #20]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006e80:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d103      	bne.n	8006e92 <HAL_DMA_IRQHandler+0x736>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d007      	beq.n	8006ea2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f022 0208 	bic.w	r2, r2, #8
 8006ea0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ea6:	f003 031f 	and.w	r3, r3, #31
 8006eaa:	223f      	movs	r2, #63	@ 0x3f
 8006eac:	409a      	lsls	r2, r3
 8006eae:	6a3b      	ldr	r3, [r7, #32]
 8006eb0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f000 834a 	beq.w	8007560 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	4798      	blx	r3
          }
          return;
 8006ed4:	e344      	b.n	8007560 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d018      	beq.n	8006f16 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d108      	bne.n	8006f04 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d02c      	beq.n	8006f54 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	4798      	blx	r3
 8006f02:	e027      	b.n	8006f54 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d023      	beq.n	8006f54 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	4798      	blx	r3
 8006f14:	e01e      	b.n	8006f54 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d10f      	bne.n	8006f44 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f022 0210 	bic.w	r2, r2, #16
 8006f32:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d003      	beq.n	8006f54 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f000 8306 	beq.w	800756a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f62:	f003 0301 	and.w	r3, r3, #1
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	f000 8088 	beq.w	800707c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2204      	movs	r2, #4
 8006f70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a7a      	ldr	r2, [pc, #488]	@ (8007164 <HAL_DMA_IRQHandler+0xa08>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d04a      	beq.n	8007014 <HAL_DMA_IRQHandler+0x8b8>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a79      	ldr	r2, [pc, #484]	@ (8007168 <HAL_DMA_IRQHandler+0xa0c>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d045      	beq.n	8007014 <HAL_DMA_IRQHandler+0x8b8>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a77      	ldr	r2, [pc, #476]	@ (800716c <HAL_DMA_IRQHandler+0xa10>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d040      	beq.n	8007014 <HAL_DMA_IRQHandler+0x8b8>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a76      	ldr	r2, [pc, #472]	@ (8007170 <HAL_DMA_IRQHandler+0xa14>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d03b      	beq.n	8007014 <HAL_DMA_IRQHandler+0x8b8>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a74      	ldr	r2, [pc, #464]	@ (8007174 <HAL_DMA_IRQHandler+0xa18>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d036      	beq.n	8007014 <HAL_DMA_IRQHandler+0x8b8>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a73      	ldr	r2, [pc, #460]	@ (8007178 <HAL_DMA_IRQHandler+0xa1c>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d031      	beq.n	8007014 <HAL_DMA_IRQHandler+0x8b8>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a71      	ldr	r2, [pc, #452]	@ (800717c <HAL_DMA_IRQHandler+0xa20>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d02c      	beq.n	8007014 <HAL_DMA_IRQHandler+0x8b8>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a70      	ldr	r2, [pc, #448]	@ (8007180 <HAL_DMA_IRQHandler+0xa24>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d027      	beq.n	8007014 <HAL_DMA_IRQHandler+0x8b8>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a6e      	ldr	r2, [pc, #440]	@ (8007184 <HAL_DMA_IRQHandler+0xa28>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d022      	beq.n	8007014 <HAL_DMA_IRQHandler+0x8b8>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a6d      	ldr	r2, [pc, #436]	@ (8007188 <HAL_DMA_IRQHandler+0xa2c>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d01d      	beq.n	8007014 <HAL_DMA_IRQHandler+0x8b8>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a6b      	ldr	r2, [pc, #428]	@ (800718c <HAL_DMA_IRQHandler+0xa30>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d018      	beq.n	8007014 <HAL_DMA_IRQHandler+0x8b8>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a6a      	ldr	r2, [pc, #424]	@ (8007190 <HAL_DMA_IRQHandler+0xa34>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d013      	beq.n	8007014 <HAL_DMA_IRQHandler+0x8b8>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a68      	ldr	r2, [pc, #416]	@ (8007194 <HAL_DMA_IRQHandler+0xa38>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d00e      	beq.n	8007014 <HAL_DMA_IRQHandler+0x8b8>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a67      	ldr	r2, [pc, #412]	@ (8007198 <HAL_DMA_IRQHandler+0xa3c>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d009      	beq.n	8007014 <HAL_DMA_IRQHandler+0x8b8>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a65      	ldr	r2, [pc, #404]	@ (800719c <HAL_DMA_IRQHandler+0xa40>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d004      	beq.n	8007014 <HAL_DMA_IRQHandler+0x8b8>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a64      	ldr	r2, [pc, #400]	@ (80071a0 <HAL_DMA_IRQHandler+0xa44>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d108      	bne.n	8007026 <HAL_DMA_IRQHandler+0x8ca>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f022 0201 	bic.w	r2, r2, #1
 8007022:	601a      	str	r2, [r3, #0]
 8007024:	e007      	b.n	8007036 <HAL_DMA_IRQHandler+0x8da>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f022 0201 	bic.w	r2, r2, #1
 8007034:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	3301      	adds	r3, #1
 800703a:	60fb      	str	r3, [r7, #12]
 800703c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800703e:	429a      	cmp	r2, r3
 8007040:	d307      	bcc.n	8007052 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 0301 	and.w	r3, r3, #1
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1f2      	bne.n	8007036 <HAL_DMA_IRQHandler+0x8da>
 8007050:	e000      	b.n	8007054 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007052:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f003 0301 	and.w	r3, r3, #1
 800705e:	2b00      	cmp	r3, #0
 8007060:	d004      	beq.n	800706c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2203      	movs	r2, #3
 8007066:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800706a:	e003      	b.n	8007074 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007080:	2b00      	cmp	r3, #0
 8007082:	f000 8272 	beq.w	800756a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	4798      	blx	r3
 800708e:	e26c      	b.n	800756a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a43      	ldr	r2, [pc, #268]	@ (80071a4 <HAL_DMA_IRQHandler+0xa48>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d022      	beq.n	80070e0 <HAL_DMA_IRQHandler+0x984>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a42      	ldr	r2, [pc, #264]	@ (80071a8 <HAL_DMA_IRQHandler+0xa4c>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d01d      	beq.n	80070e0 <HAL_DMA_IRQHandler+0x984>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a40      	ldr	r2, [pc, #256]	@ (80071ac <HAL_DMA_IRQHandler+0xa50>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d018      	beq.n	80070e0 <HAL_DMA_IRQHandler+0x984>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a3f      	ldr	r2, [pc, #252]	@ (80071b0 <HAL_DMA_IRQHandler+0xa54>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d013      	beq.n	80070e0 <HAL_DMA_IRQHandler+0x984>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a3d      	ldr	r2, [pc, #244]	@ (80071b4 <HAL_DMA_IRQHandler+0xa58>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d00e      	beq.n	80070e0 <HAL_DMA_IRQHandler+0x984>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a3c      	ldr	r2, [pc, #240]	@ (80071b8 <HAL_DMA_IRQHandler+0xa5c>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d009      	beq.n	80070e0 <HAL_DMA_IRQHandler+0x984>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a3a      	ldr	r2, [pc, #232]	@ (80071bc <HAL_DMA_IRQHandler+0xa60>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d004      	beq.n	80070e0 <HAL_DMA_IRQHandler+0x984>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a39      	ldr	r2, [pc, #228]	@ (80071c0 <HAL_DMA_IRQHandler+0xa64>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d101      	bne.n	80070e4 <HAL_DMA_IRQHandler+0x988>
 80070e0:	2301      	movs	r3, #1
 80070e2:	e000      	b.n	80070e6 <HAL_DMA_IRQHandler+0x98a>
 80070e4:	2300      	movs	r3, #0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f000 823f 	beq.w	800756a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070f8:	f003 031f 	and.w	r3, r3, #31
 80070fc:	2204      	movs	r2, #4
 80070fe:	409a      	lsls	r2, r3
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	4013      	ands	r3, r2
 8007104:	2b00      	cmp	r3, #0
 8007106:	f000 80cd 	beq.w	80072a4 <HAL_DMA_IRQHandler+0xb48>
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	f003 0304 	and.w	r3, r3, #4
 8007110:	2b00      	cmp	r3, #0
 8007112:	f000 80c7 	beq.w	80072a4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800711a:	f003 031f 	and.w	r3, r3, #31
 800711e:	2204      	movs	r2, #4
 8007120:	409a      	lsls	r2, r3
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d049      	beq.n	80071c4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d109      	bne.n	800714e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800713e:	2b00      	cmp	r3, #0
 8007140:	f000 8210 	beq.w	8007564 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800714c:	e20a      	b.n	8007564 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007152:	2b00      	cmp	r3, #0
 8007154:	f000 8206 	beq.w	8007564 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007160:	e200      	b.n	8007564 <HAL_DMA_IRQHandler+0xe08>
 8007162:	bf00      	nop
 8007164:	40020010 	.word	0x40020010
 8007168:	40020028 	.word	0x40020028
 800716c:	40020040 	.word	0x40020040
 8007170:	40020058 	.word	0x40020058
 8007174:	40020070 	.word	0x40020070
 8007178:	40020088 	.word	0x40020088
 800717c:	400200a0 	.word	0x400200a0
 8007180:	400200b8 	.word	0x400200b8
 8007184:	40020410 	.word	0x40020410
 8007188:	40020428 	.word	0x40020428
 800718c:	40020440 	.word	0x40020440
 8007190:	40020458 	.word	0x40020458
 8007194:	40020470 	.word	0x40020470
 8007198:	40020488 	.word	0x40020488
 800719c:	400204a0 	.word	0x400204a0
 80071a0:	400204b8 	.word	0x400204b8
 80071a4:	58025408 	.word	0x58025408
 80071a8:	5802541c 	.word	0x5802541c
 80071ac:	58025430 	.word	0x58025430
 80071b0:	58025444 	.word	0x58025444
 80071b4:	58025458 	.word	0x58025458
 80071b8:	5802546c 	.word	0x5802546c
 80071bc:	58025480 	.word	0x58025480
 80071c0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	f003 0320 	and.w	r3, r3, #32
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d160      	bne.n	8007290 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a7f      	ldr	r2, [pc, #508]	@ (80073d0 <HAL_DMA_IRQHandler+0xc74>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d04a      	beq.n	800726e <HAL_DMA_IRQHandler+0xb12>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a7d      	ldr	r2, [pc, #500]	@ (80073d4 <HAL_DMA_IRQHandler+0xc78>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d045      	beq.n	800726e <HAL_DMA_IRQHandler+0xb12>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a7c      	ldr	r2, [pc, #496]	@ (80073d8 <HAL_DMA_IRQHandler+0xc7c>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d040      	beq.n	800726e <HAL_DMA_IRQHandler+0xb12>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a7a      	ldr	r2, [pc, #488]	@ (80073dc <HAL_DMA_IRQHandler+0xc80>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d03b      	beq.n	800726e <HAL_DMA_IRQHandler+0xb12>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a79      	ldr	r2, [pc, #484]	@ (80073e0 <HAL_DMA_IRQHandler+0xc84>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d036      	beq.n	800726e <HAL_DMA_IRQHandler+0xb12>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a77      	ldr	r2, [pc, #476]	@ (80073e4 <HAL_DMA_IRQHandler+0xc88>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d031      	beq.n	800726e <HAL_DMA_IRQHandler+0xb12>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a76      	ldr	r2, [pc, #472]	@ (80073e8 <HAL_DMA_IRQHandler+0xc8c>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d02c      	beq.n	800726e <HAL_DMA_IRQHandler+0xb12>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a74      	ldr	r2, [pc, #464]	@ (80073ec <HAL_DMA_IRQHandler+0xc90>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d027      	beq.n	800726e <HAL_DMA_IRQHandler+0xb12>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a73      	ldr	r2, [pc, #460]	@ (80073f0 <HAL_DMA_IRQHandler+0xc94>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d022      	beq.n	800726e <HAL_DMA_IRQHandler+0xb12>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a71      	ldr	r2, [pc, #452]	@ (80073f4 <HAL_DMA_IRQHandler+0xc98>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d01d      	beq.n	800726e <HAL_DMA_IRQHandler+0xb12>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a70      	ldr	r2, [pc, #448]	@ (80073f8 <HAL_DMA_IRQHandler+0xc9c>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d018      	beq.n	800726e <HAL_DMA_IRQHandler+0xb12>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a6e      	ldr	r2, [pc, #440]	@ (80073fc <HAL_DMA_IRQHandler+0xca0>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d013      	beq.n	800726e <HAL_DMA_IRQHandler+0xb12>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a6d      	ldr	r2, [pc, #436]	@ (8007400 <HAL_DMA_IRQHandler+0xca4>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d00e      	beq.n	800726e <HAL_DMA_IRQHandler+0xb12>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a6b      	ldr	r2, [pc, #428]	@ (8007404 <HAL_DMA_IRQHandler+0xca8>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d009      	beq.n	800726e <HAL_DMA_IRQHandler+0xb12>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a6a      	ldr	r2, [pc, #424]	@ (8007408 <HAL_DMA_IRQHandler+0xcac>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d004      	beq.n	800726e <HAL_DMA_IRQHandler+0xb12>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a68      	ldr	r2, [pc, #416]	@ (800740c <HAL_DMA_IRQHandler+0xcb0>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d108      	bne.n	8007280 <HAL_DMA_IRQHandler+0xb24>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f022 0208 	bic.w	r2, r2, #8
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	e007      	b.n	8007290 <HAL_DMA_IRQHandler+0xb34>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f022 0204 	bic.w	r2, r2, #4
 800728e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007294:	2b00      	cmp	r3, #0
 8007296:	f000 8165 	beq.w	8007564 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80072a2:	e15f      	b.n	8007564 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072a8:	f003 031f 	and.w	r3, r3, #31
 80072ac:	2202      	movs	r2, #2
 80072ae:	409a      	lsls	r2, r3
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	4013      	ands	r3, r2
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	f000 80c5 	beq.w	8007444 <HAL_DMA_IRQHandler+0xce8>
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	f003 0302 	and.w	r3, r3, #2
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f000 80bf 	beq.w	8007444 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072ca:	f003 031f 	and.w	r3, r3, #31
 80072ce:	2202      	movs	r2, #2
 80072d0:	409a      	lsls	r2, r3
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d018      	beq.n	8007312 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d109      	bne.n	80072fe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	f000 813a 	beq.w	8007568 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80072fc:	e134      	b.n	8007568 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007302:	2b00      	cmp	r3, #0
 8007304:	f000 8130 	beq.w	8007568 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007310:	e12a      	b.n	8007568 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	f003 0320 	and.w	r3, r3, #32
 8007318:	2b00      	cmp	r3, #0
 800731a:	f040 8089 	bne.w	8007430 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a2b      	ldr	r2, [pc, #172]	@ (80073d0 <HAL_DMA_IRQHandler+0xc74>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d04a      	beq.n	80073be <HAL_DMA_IRQHandler+0xc62>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a29      	ldr	r2, [pc, #164]	@ (80073d4 <HAL_DMA_IRQHandler+0xc78>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d045      	beq.n	80073be <HAL_DMA_IRQHandler+0xc62>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a28      	ldr	r2, [pc, #160]	@ (80073d8 <HAL_DMA_IRQHandler+0xc7c>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d040      	beq.n	80073be <HAL_DMA_IRQHandler+0xc62>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a26      	ldr	r2, [pc, #152]	@ (80073dc <HAL_DMA_IRQHandler+0xc80>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d03b      	beq.n	80073be <HAL_DMA_IRQHandler+0xc62>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a25      	ldr	r2, [pc, #148]	@ (80073e0 <HAL_DMA_IRQHandler+0xc84>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d036      	beq.n	80073be <HAL_DMA_IRQHandler+0xc62>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a23      	ldr	r2, [pc, #140]	@ (80073e4 <HAL_DMA_IRQHandler+0xc88>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d031      	beq.n	80073be <HAL_DMA_IRQHandler+0xc62>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a22      	ldr	r2, [pc, #136]	@ (80073e8 <HAL_DMA_IRQHandler+0xc8c>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d02c      	beq.n	80073be <HAL_DMA_IRQHandler+0xc62>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a20      	ldr	r2, [pc, #128]	@ (80073ec <HAL_DMA_IRQHandler+0xc90>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d027      	beq.n	80073be <HAL_DMA_IRQHandler+0xc62>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a1f      	ldr	r2, [pc, #124]	@ (80073f0 <HAL_DMA_IRQHandler+0xc94>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d022      	beq.n	80073be <HAL_DMA_IRQHandler+0xc62>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a1d      	ldr	r2, [pc, #116]	@ (80073f4 <HAL_DMA_IRQHandler+0xc98>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d01d      	beq.n	80073be <HAL_DMA_IRQHandler+0xc62>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a1c      	ldr	r2, [pc, #112]	@ (80073f8 <HAL_DMA_IRQHandler+0xc9c>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d018      	beq.n	80073be <HAL_DMA_IRQHandler+0xc62>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a1a      	ldr	r2, [pc, #104]	@ (80073fc <HAL_DMA_IRQHandler+0xca0>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d013      	beq.n	80073be <HAL_DMA_IRQHandler+0xc62>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a19      	ldr	r2, [pc, #100]	@ (8007400 <HAL_DMA_IRQHandler+0xca4>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d00e      	beq.n	80073be <HAL_DMA_IRQHandler+0xc62>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a17      	ldr	r2, [pc, #92]	@ (8007404 <HAL_DMA_IRQHandler+0xca8>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d009      	beq.n	80073be <HAL_DMA_IRQHandler+0xc62>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a16      	ldr	r2, [pc, #88]	@ (8007408 <HAL_DMA_IRQHandler+0xcac>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d004      	beq.n	80073be <HAL_DMA_IRQHandler+0xc62>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a14      	ldr	r2, [pc, #80]	@ (800740c <HAL_DMA_IRQHandler+0xcb0>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d128      	bne.n	8007410 <HAL_DMA_IRQHandler+0xcb4>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f022 0214 	bic.w	r2, r2, #20
 80073cc:	601a      	str	r2, [r3, #0]
 80073ce:	e027      	b.n	8007420 <HAL_DMA_IRQHandler+0xcc4>
 80073d0:	40020010 	.word	0x40020010
 80073d4:	40020028 	.word	0x40020028
 80073d8:	40020040 	.word	0x40020040
 80073dc:	40020058 	.word	0x40020058
 80073e0:	40020070 	.word	0x40020070
 80073e4:	40020088 	.word	0x40020088
 80073e8:	400200a0 	.word	0x400200a0
 80073ec:	400200b8 	.word	0x400200b8
 80073f0:	40020410 	.word	0x40020410
 80073f4:	40020428 	.word	0x40020428
 80073f8:	40020440 	.word	0x40020440
 80073fc:	40020458 	.word	0x40020458
 8007400:	40020470 	.word	0x40020470
 8007404:	40020488 	.word	0x40020488
 8007408:	400204a0 	.word	0x400204a0
 800740c:	400204b8 	.word	0x400204b8
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f022 020a 	bic.w	r2, r2, #10
 800741e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007434:	2b00      	cmp	r3, #0
 8007436:	f000 8097 	beq.w	8007568 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007442:	e091      	b.n	8007568 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007448:	f003 031f 	and.w	r3, r3, #31
 800744c:	2208      	movs	r2, #8
 800744e:	409a      	lsls	r2, r3
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	4013      	ands	r3, r2
 8007454:	2b00      	cmp	r3, #0
 8007456:	f000 8088 	beq.w	800756a <HAL_DMA_IRQHandler+0xe0e>
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	f003 0308 	and.w	r3, r3, #8
 8007460:	2b00      	cmp	r3, #0
 8007462:	f000 8082 	beq.w	800756a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a41      	ldr	r2, [pc, #260]	@ (8007570 <HAL_DMA_IRQHandler+0xe14>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d04a      	beq.n	8007506 <HAL_DMA_IRQHandler+0xdaa>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a3f      	ldr	r2, [pc, #252]	@ (8007574 <HAL_DMA_IRQHandler+0xe18>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d045      	beq.n	8007506 <HAL_DMA_IRQHandler+0xdaa>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a3e      	ldr	r2, [pc, #248]	@ (8007578 <HAL_DMA_IRQHandler+0xe1c>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d040      	beq.n	8007506 <HAL_DMA_IRQHandler+0xdaa>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a3c      	ldr	r2, [pc, #240]	@ (800757c <HAL_DMA_IRQHandler+0xe20>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d03b      	beq.n	8007506 <HAL_DMA_IRQHandler+0xdaa>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a3b      	ldr	r2, [pc, #236]	@ (8007580 <HAL_DMA_IRQHandler+0xe24>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d036      	beq.n	8007506 <HAL_DMA_IRQHandler+0xdaa>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a39      	ldr	r2, [pc, #228]	@ (8007584 <HAL_DMA_IRQHandler+0xe28>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d031      	beq.n	8007506 <HAL_DMA_IRQHandler+0xdaa>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a38      	ldr	r2, [pc, #224]	@ (8007588 <HAL_DMA_IRQHandler+0xe2c>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d02c      	beq.n	8007506 <HAL_DMA_IRQHandler+0xdaa>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a36      	ldr	r2, [pc, #216]	@ (800758c <HAL_DMA_IRQHandler+0xe30>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d027      	beq.n	8007506 <HAL_DMA_IRQHandler+0xdaa>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a35      	ldr	r2, [pc, #212]	@ (8007590 <HAL_DMA_IRQHandler+0xe34>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d022      	beq.n	8007506 <HAL_DMA_IRQHandler+0xdaa>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a33      	ldr	r2, [pc, #204]	@ (8007594 <HAL_DMA_IRQHandler+0xe38>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d01d      	beq.n	8007506 <HAL_DMA_IRQHandler+0xdaa>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a32      	ldr	r2, [pc, #200]	@ (8007598 <HAL_DMA_IRQHandler+0xe3c>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d018      	beq.n	8007506 <HAL_DMA_IRQHandler+0xdaa>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a30      	ldr	r2, [pc, #192]	@ (800759c <HAL_DMA_IRQHandler+0xe40>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d013      	beq.n	8007506 <HAL_DMA_IRQHandler+0xdaa>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a2f      	ldr	r2, [pc, #188]	@ (80075a0 <HAL_DMA_IRQHandler+0xe44>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d00e      	beq.n	8007506 <HAL_DMA_IRQHandler+0xdaa>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a2d      	ldr	r2, [pc, #180]	@ (80075a4 <HAL_DMA_IRQHandler+0xe48>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d009      	beq.n	8007506 <HAL_DMA_IRQHandler+0xdaa>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a2c      	ldr	r2, [pc, #176]	@ (80075a8 <HAL_DMA_IRQHandler+0xe4c>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d004      	beq.n	8007506 <HAL_DMA_IRQHandler+0xdaa>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a2a      	ldr	r2, [pc, #168]	@ (80075ac <HAL_DMA_IRQHandler+0xe50>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d108      	bne.n	8007518 <HAL_DMA_IRQHandler+0xdbc>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f022 021c 	bic.w	r2, r2, #28
 8007514:	601a      	str	r2, [r3, #0]
 8007516:	e007      	b.n	8007528 <HAL_DMA_IRQHandler+0xdcc>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f022 020e 	bic.w	r2, r2, #14
 8007526:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800752c:	f003 031f 	and.w	r3, r3, #31
 8007530:	2201      	movs	r2, #1
 8007532:	409a      	lsls	r2, r3
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2201      	movs	r2, #1
 8007542:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007552:	2b00      	cmp	r3, #0
 8007554:	d009      	beq.n	800756a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	4798      	blx	r3
 800755e:	e004      	b.n	800756a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007560:	bf00      	nop
 8007562:	e002      	b.n	800756a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007564:	bf00      	nop
 8007566:	e000      	b.n	800756a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007568:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800756a:	3728      	adds	r7, #40	@ 0x28
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	40020010 	.word	0x40020010
 8007574:	40020028 	.word	0x40020028
 8007578:	40020040 	.word	0x40020040
 800757c:	40020058 	.word	0x40020058
 8007580:	40020070 	.word	0x40020070
 8007584:	40020088 	.word	0x40020088
 8007588:	400200a0 	.word	0x400200a0
 800758c:	400200b8 	.word	0x400200b8
 8007590:	40020410 	.word	0x40020410
 8007594:	40020428 	.word	0x40020428
 8007598:	40020440 	.word	0x40020440
 800759c:	40020458 	.word	0x40020458
 80075a0:	40020470 	.word	0x40020470
 80075a4:	40020488 	.word	0x40020488
 80075a8:	400204a0 	.word	0x400204a0
 80075ac:	400204b8 	.word	0x400204b8

080075b0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b087      	sub	sp, #28
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	607a      	str	r2, [r7, #4]
 80075bc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075c2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075c8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a7f      	ldr	r2, [pc, #508]	@ (80077cc <DMA_SetConfig+0x21c>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d072      	beq.n	80076ba <DMA_SetConfig+0x10a>
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a7d      	ldr	r2, [pc, #500]	@ (80077d0 <DMA_SetConfig+0x220>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d06d      	beq.n	80076ba <DMA_SetConfig+0x10a>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a7c      	ldr	r2, [pc, #496]	@ (80077d4 <DMA_SetConfig+0x224>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d068      	beq.n	80076ba <DMA_SetConfig+0x10a>
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a7a      	ldr	r2, [pc, #488]	@ (80077d8 <DMA_SetConfig+0x228>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d063      	beq.n	80076ba <DMA_SetConfig+0x10a>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a79      	ldr	r2, [pc, #484]	@ (80077dc <DMA_SetConfig+0x22c>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d05e      	beq.n	80076ba <DMA_SetConfig+0x10a>
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a77      	ldr	r2, [pc, #476]	@ (80077e0 <DMA_SetConfig+0x230>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d059      	beq.n	80076ba <DMA_SetConfig+0x10a>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a76      	ldr	r2, [pc, #472]	@ (80077e4 <DMA_SetConfig+0x234>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d054      	beq.n	80076ba <DMA_SetConfig+0x10a>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a74      	ldr	r2, [pc, #464]	@ (80077e8 <DMA_SetConfig+0x238>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d04f      	beq.n	80076ba <DMA_SetConfig+0x10a>
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a73      	ldr	r2, [pc, #460]	@ (80077ec <DMA_SetConfig+0x23c>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d04a      	beq.n	80076ba <DMA_SetConfig+0x10a>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a71      	ldr	r2, [pc, #452]	@ (80077f0 <DMA_SetConfig+0x240>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d045      	beq.n	80076ba <DMA_SetConfig+0x10a>
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a70      	ldr	r2, [pc, #448]	@ (80077f4 <DMA_SetConfig+0x244>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d040      	beq.n	80076ba <DMA_SetConfig+0x10a>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a6e      	ldr	r2, [pc, #440]	@ (80077f8 <DMA_SetConfig+0x248>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d03b      	beq.n	80076ba <DMA_SetConfig+0x10a>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a6d      	ldr	r2, [pc, #436]	@ (80077fc <DMA_SetConfig+0x24c>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d036      	beq.n	80076ba <DMA_SetConfig+0x10a>
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a6b      	ldr	r2, [pc, #428]	@ (8007800 <DMA_SetConfig+0x250>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d031      	beq.n	80076ba <DMA_SetConfig+0x10a>
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a6a      	ldr	r2, [pc, #424]	@ (8007804 <DMA_SetConfig+0x254>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d02c      	beq.n	80076ba <DMA_SetConfig+0x10a>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a68      	ldr	r2, [pc, #416]	@ (8007808 <DMA_SetConfig+0x258>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d027      	beq.n	80076ba <DMA_SetConfig+0x10a>
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a67      	ldr	r2, [pc, #412]	@ (800780c <DMA_SetConfig+0x25c>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d022      	beq.n	80076ba <DMA_SetConfig+0x10a>
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a65      	ldr	r2, [pc, #404]	@ (8007810 <DMA_SetConfig+0x260>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d01d      	beq.n	80076ba <DMA_SetConfig+0x10a>
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a64      	ldr	r2, [pc, #400]	@ (8007814 <DMA_SetConfig+0x264>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d018      	beq.n	80076ba <DMA_SetConfig+0x10a>
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a62      	ldr	r2, [pc, #392]	@ (8007818 <DMA_SetConfig+0x268>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d013      	beq.n	80076ba <DMA_SetConfig+0x10a>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a61      	ldr	r2, [pc, #388]	@ (800781c <DMA_SetConfig+0x26c>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d00e      	beq.n	80076ba <DMA_SetConfig+0x10a>
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a5f      	ldr	r2, [pc, #380]	@ (8007820 <DMA_SetConfig+0x270>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d009      	beq.n	80076ba <DMA_SetConfig+0x10a>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a5e      	ldr	r2, [pc, #376]	@ (8007824 <DMA_SetConfig+0x274>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d004      	beq.n	80076ba <DMA_SetConfig+0x10a>
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a5c      	ldr	r2, [pc, #368]	@ (8007828 <DMA_SetConfig+0x278>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d101      	bne.n	80076be <DMA_SetConfig+0x10e>
 80076ba:	2301      	movs	r3, #1
 80076bc:	e000      	b.n	80076c0 <DMA_SetConfig+0x110>
 80076be:	2300      	movs	r3, #0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00d      	beq.n	80076e0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80076cc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d004      	beq.n	80076e0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80076de:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a39      	ldr	r2, [pc, #228]	@ (80077cc <DMA_SetConfig+0x21c>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d04a      	beq.n	8007780 <DMA_SetConfig+0x1d0>
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a38      	ldr	r2, [pc, #224]	@ (80077d0 <DMA_SetConfig+0x220>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d045      	beq.n	8007780 <DMA_SetConfig+0x1d0>
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a36      	ldr	r2, [pc, #216]	@ (80077d4 <DMA_SetConfig+0x224>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d040      	beq.n	8007780 <DMA_SetConfig+0x1d0>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a35      	ldr	r2, [pc, #212]	@ (80077d8 <DMA_SetConfig+0x228>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d03b      	beq.n	8007780 <DMA_SetConfig+0x1d0>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a33      	ldr	r2, [pc, #204]	@ (80077dc <DMA_SetConfig+0x22c>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d036      	beq.n	8007780 <DMA_SetConfig+0x1d0>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a32      	ldr	r2, [pc, #200]	@ (80077e0 <DMA_SetConfig+0x230>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d031      	beq.n	8007780 <DMA_SetConfig+0x1d0>
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a30      	ldr	r2, [pc, #192]	@ (80077e4 <DMA_SetConfig+0x234>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d02c      	beq.n	8007780 <DMA_SetConfig+0x1d0>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a2f      	ldr	r2, [pc, #188]	@ (80077e8 <DMA_SetConfig+0x238>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d027      	beq.n	8007780 <DMA_SetConfig+0x1d0>
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a2d      	ldr	r2, [pc, #180]	@ (80077ec <DMA_SetConfig+0x23c>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d022      	beq.n	8007780 <DMA_SetConfig+0x1d0>
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a2c      	ldr	r2, [pc, #176]	@ (80077f0 <DMA_SetConfig+0x240>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d01d      	beq.n	8007780 <DMA_SetConfig+0x1d0>
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a2a      	ldr	r2, [pc, #168]	@ (80077f4 <DMA_SetConfig+0x244>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d018      	beq.n	8007780 <DMA_SetConfig+0x1d0>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a29      	ldr	r2, [pc, #164]	@ (80077f8 <DMA_SetConfig+0x248>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d013      	beq.n	8007780 <DMA_SetConfig+0x1d0>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a27      	ldr	r2, [pc, #156]	@ (80077fc <DMA_SetConfig+0x24c>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d00e      	beq.n	8007780 <DMA_SetConfig+0x1d0>
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a26      	ldr	r2, [pc, #152]	@ (8007800 <DMA_SetConfig+0x250>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d009      	beq.n	8007780 <DMA_SetConfig+0x1d0>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a24      	ldr	r2, [pc, #144]	@ (8007804 <DMA_SetConfig+0x254>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d004      	beq.n	8007780 <DMA_SetConfig+0x1d0>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a23      	ldr	r2, [pc, #140]	@ (8007808 <DMA_SetConfig+0x258>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d101      	bne.n	8007784 <DMA_SetConfig+0x1d4>
 8007780:	2301      	movs	r3, #1
 8007782:	e000      	b.n	8007786 <DMA_SetConfig+0x1d6>
 8007784:	2300      	movs	r3, #0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d059      	beq.n	800783e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800778e:	f003 031f 	and.w	r3, r3, #31
 8007792:	223f      	movs	r2, #63	@ 0x3f
 8007794:	409a      	lsls	r2, r3
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80077a8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	683a      	ldr	r2, [r7, #0]
 80077b0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	2b40      	cmp	r3, #64	@ 0x40
 80077b8:	d138      	bne.n	800782c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	68ba      	ldr	r2, [r7, #8]
 80077c8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80077ca:	e086      	b.n	80078da <DMA_SetConfig+0x32a>
 80077cc:	40020010 	.word	0x40020010
 80077d0:	40020028 	.word	0x40020028
 80077d4:	40020040 	.word	0x40020040
 80077d8:	40020058 	.word	0x40020058
 80077dc:	40020070 	.word	0x40020070
 80077e0:	40020088 	.word	0x40020088
 80077e4:	400200a0 	.word	0x400200a0
 80077e8:	400200b8 	.word	0x400200b8
 80077ec:	40020410 	.word	0x40020410
 80077f0:	40020428 	.word	0x40020428
 80077f4:	40020440 	.word	0x40020440
 80077f8:	40020458 	.word	0x40020458
 80077fc:	40020470 	.word	0x40020470
 8007800:	40020488 	.word	0x40020488
 8007804:	400204a0 	.word	0x400204a0
 8007808:	400204b8 	.word	0x400204b8
 800780c:	58025408 	.word	0x58025408
 8007810:	5802541c 	.word	0x5802541c
 8007814:	58025430 	.word	0x58025430
 8007818:	58025444 	.word	0x58025444
 800781c:	58025458 	.word	0x58025458
 8007820:	5802546c 	.word	0x5802546c
 8007824:	58025480 	.word	0x58025480
 8007828:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	68ba      	ldr	r2, [r7, #8]
 8007832:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	60da      	str	r2, [r3, #12]
}
 800783c:	e04d      	b.n	80078da <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a29      	ldr	r2, [pc, #164]	@ (80078e8 <DMA_SetConfig+0x338>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d022      	beq.n	800788e <DMA_SetConfig+0x2de>
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a27      	ldr	r2, [pc, #156]	@ (80078ec <DMA_SetConfig+0x33c>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d01d      	beq.n	800788e <DMA_SetConfig+0x2de>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a26      	ldr	r2, [pc, #152]	@ (80078f0 <DMA_SetConfig+0x340>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d018      	beq.n	800788e <DMA_SetConfig+0x2de>
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a24      	ldr	r2, [pc, #144]	@ (80078f4 <DMA_SetConfig+0x344>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d013      	beq.n	800788e <DMA_SetConfig+0x2de>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a23      	ldr	r2, [pc, #140]	@ (80078f8 <DMA_SetConfig+0x348>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d00e      	beq.n	800788e <DMA_SetConfig+0x2de>
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a21      	ldr	r2, [pc, #132]	@ (80078fc <DMA_SetConfig+0x34c>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d009      	beq.n	800788e <DMA_SetConfig+0x2de>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a20      	ldr	r2, [pc, #128]	@ (8007900 <DMA_SetConfig+0x350>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d004      	beq.n	800788e <DMA_SetConfig+0x2de>
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a1e      	ldr	r2, [pc, #120]	@ (8007904 <DMA_SetConfig+0x354>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d101      	bne.n	8007892 <DMA_SetConfig+0x2e2>
 800788e:	2301      	movs	r3, #1
 8007890:	e000      	b.n	8007894 <DMA_SetConfig+0x2e4>
 8007892:	2300      	movs	r3, #0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d020      	beq.n	80078da <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800789c:	f003 031f 	and.w	r3, r3, #31
 80078a0:	2201      	movs	r2, #1
 80078a2:	409a      	lsls	r2, r3
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	683a      	ldr	r2, [r7, #0]
 80078ae:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	2b40      	cmp	r3, #64	@ 0x40
 80078b6:	d108      	bne.n	80078ca <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68ba      	ldr	r2, [r7, #8]
 80078c6:	60da      	str	r2, [r3, #12]
}
 80078c8:	e007      	b.n	80078da <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68ba      	ldr	r2, [r7, #8]
 80078d0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	60da      	str	r2, [r3, #12]
}
 80078da:	bf00      	nop
 80078dc:	371c      	adds	r7, #28
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop
 80078e8:	58025408 	.word	0x58025408
 80078ec:	5802541c 	.word	0x5802541c
 80078f0:	58025430 	.word	0x58025430
 80078f4:	58025444 	.word	0x58025444
 80078f8:	58025458 	.word	0x58025458
 80078fc:	5802546c 	.word	0x5802546c
 8007900:	58025480 	.word	0x58025480
 8007904:	58025494 	.word	0x58025494

08007908 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007908:	b480      	push	{r7}
 800790a:	b085      	sub	sp, #20
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a42      	ldr	r2, [pc, #264]	@ (8007a20 <DMA_CalcBaseAndBitshift+0x118>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d04a      	beq.n	80079b0 <DMA_CalcBaseAndBitshift+0xa8>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a41      	ldr	r2, [pc, #260]	@ (8007a24 <DMA_CalcBaseAndBitshift+0x11c>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d045      	beq.n	80079b0 <DMA_CalcBaseAndBitshift+0xa8>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a3f      	ldr	r2, [pc, #252]	@ (8007a28 <DMA_CalcBaseAndBitshift+0x120>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d040      	beq.n	80079b0 <DMA_CalcBaseAndBitshift+0xa8>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a3e      	ldr	r2, [pc, #248]	@ (8007a2c <DMA_CalcBaseAndBitshift+0x124>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d03b      	beq.n	80079b0 <DMA_CalcBaseAndBitshift+0xa8>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a3c      	ldr	r2, [pc, #240]	@ (8007a30 <DMA_CalcBaseAndBitshift+0x128>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d036      	beq.n	80079b0 <DMA_CalcBaseAndBitshift+0xa8>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a3b      	ldr	r2, [pc, #236]	@ (8007a34 <DMA_CalcBaseAndBitshift+0x12c>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d031      	beq.n	80079b0 <DMA_CalcBaseAndBitshift+0xa8>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a39      	ldr	r2, [pc, #228]	@ (8007a38 <DMA_CalcBaseAndBitshift+0x130>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d02c      	beq.n	80079b0 <DMA_CalcBaseAndBitshift+0xa8>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a38      	ldr	r2, [pc, #224]	@ (8007a3c <DMA_CalcBaseAndBitshift+0x134>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d027      	beq.n	80079b0 <DMA_CalcBaseAndBitshift+0xa8>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a36      	ldr	r2, [pc, #216]	@ (8007a40 <DMA_CalcBaseAndBitshift+0x138>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d022      	beq.n	80079b0 <DMA_CalcBaseAndBitshift+0xa8>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a35      	ldr	r2, [pc, #212]	@ (8007a44 <DMA_CalcBaseAndBitshift+0x13c>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d01d      	beq.n	80079b0 <DMA_CalcBaseAndBitshift+0xa8>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a33      	ldr	r2, [pc, #204]	@ (8007a48 <DMA_CalcBaseAndBitshift+0x140>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d018      	beq.n	80079b0 <DMA_CalcBaseAndBitshift+0xa8>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a32      	ldr	r2, [pc, #200]	@ (8007a4c <DMA_CalcBaseAndBitshift+0x144>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d013      	beq.n	80079b0 <DMA_CalcBaseAndBitshift+0xa8>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a30      	ldr	r2, [pc, #192]	@ (8007a50 <DMA_CalcBaseAndBitshift+0x148>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d00e      	beq.n	80079b0 <DMA_CalcBaseAndBitshift+0xa8>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a2f      	ldr	r2, [pc, #188]	@ (8007a54 <DMA_CalcBaseAndBitshift+0x14c>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d009      	beq.n	80079b0 <DMA_CalcBaseAndBitshift+0xa8>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a2d      	ldr	r2, [pc, #180]	@ (8007a58 <DMA_CalcBaseAndBitshift+0x150>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d004      	beq.n	80079b0 <DMA_CalcBaseAndBitshift+0xa8>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a2c      	ldr	r2, [pc, #176]	@ (8007a5c <DMA_CalcBaseAndBitshift+0x154>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d101      	bne.n	80079b4 <DMA_CalcBaseAndBitshift+0xac>
 80079b0:	2301      	movs	r3, #1
 80079b2:	e000      	b.n	80079b6 <DMA_CalcBaseAndBitshift+0xae>
 80079b4:	2300      	movs	r3, #0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d024      	beq.n	8007a04 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	3b10      	subs	r3, #16
 80079c2:	4a27      	ldr	r2, [pc, #156]	@ (8007a60 <DMA_CalcBaseAndBitshift+0x158>)
 80079c4:	fba2 2303 	umull	r2, r3, r2, r3
 80079c8:	091b      	lsrs	r3, r3, #4
 80079ca:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f003 0307 	and.w	r3, r3, #7
 80079d2:	4a24      	ldr	r2, [pc, #144]	@ (8007a64 <DMA_CalcBaseAndBitshift+0x15c>)
 80079d4:	5cd3      	ldrb	r3, [r2, r3]
 80079d6:	461a      	mov	r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2b03      	cmp	r3, #3
 80079e0:	d908      	bls.n	80079f4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	461a      	mov	r2, r3
 80079e8:	4b1f      	ldr	r3, [pc, #124]	@ (8007a68 <DMA_CalcBaseAndBitshift+0x160>)
 80079ea:	4013      	ands	r3, r2
 80079ec:	1d1a      	adds	r2, r3, #4
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	659a      	str	r2, [r3, #88]	@ 0x58
 80079f2:	e00d      	b.n	8007a10 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	461a      	mov	r2, r3
 80079fa:	4b1b      	ldr	r3, [pc, #108]	@ (8007a68 <DMA_CalcBaseAndBitshift+0x160>)
 80079fc:	4013      	ands	r3, r2
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a02:	e005      	b.n	8007a10 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3714      	adds	r7, #20
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr
 8007a20:	40020010 	.word	0x40020010
 8007a24:	40020028 	.word	0x40020028
 8007a28:	40020040 	.word	0x40020040
 8007a2c:	40020058 	.word	0x40020058
 8007a30:	40020070 	.word	0x40020070
 8007a34:	40020088 	.word	0x40020088
 8007a38:	400200a0 	.word	0x400200a0
 8007a3c:	400200b8 	.word	0x400200b8
 8007a40:	40020410 	.word	0x40020410
 8007a44:	40020428 	.word	0x40020428
 8007a48:	40020440 	.word	0x40020440
 8007a4c:	40020458 	.word	0x40020458
 8007a50:	40020470 	.word	0x40020470
 8007a54:	40020488 	.word	0x40020488
 8007a58:	400204a0 	.word	0x400204a0
 8007a5c:	400204b8 	.word	0x400204b8
 8007a60:	aaaaaaab 	.word	0xaaaaaaab
 8007a64:	0801279c 	.word	0x0801279c
 8007a68:	fffffc00 	.word	0xfffffc00

08007a6c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b085      	sub	sp, #20
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a74:	2300      	movs	r3, #0
 8007a76:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	699b      	ldr	r3, [r3, #24]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d120      	bne.n	8007ac2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a84:	2b03      	cmp	r3, #3
 8007a86:	d858      	bhi.n	8007b3a <DMA_CheckFifoParam+0xce>
 8007a88:	a201      	add	r2, pc, #4	@ (adr r2, 8007a90 <DMA_CheckFifoParam+0x24>)
 8007a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8e:	bf00      	nop
 8007a90:	08007aa1 	.word	0x08007aa1
 8007a94:	08007ab3 	.word	0x08007ab3
 8007a98:	08007aa1 	.word	0x08007aa1
 8007a9c:	08007b3b 	.word	0x08007b3b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aa4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d048      	beq.n	8007b3e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007ab0:	e045      	b.n	8007b3e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ab6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007aba:	d142      	bne.n	8007b42 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007ac0:	e03f      	b.n	8007b42 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	699b      	ldr	r3, [r3, #24]
 8007ac6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007aca:	d123      	bne.n	8007b14 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad0:	2b03      	cmp	r3, #3
 8007ad2:	d838      	bhi.n	8007b46 <DMA_CheckFifoParam+0xda>
 8007ad4:	a201      	add	r2, pc, #4	@ (adr r2, 8007adc <DMA_CheckFifoParam+0x70>)
 8007ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ada:	bf00      	nop
 8007adc:	08007aed 	.word	0x08007aed
 8007ae0:	08007af3 	.word	0x08007af3
 8007ae4:	08007aed 	.word	0x08007aed
 8007ae8:	08007b05 	.word	0x08007b05
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	73fb      	strb	r3, [r7, #15]
        break;
 8007af0:	e030      	b.n	8007b54 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007af6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d025      	beq.n	8007b4a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007b02:	e022      	b.n	8007b4a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b08:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007b0c:	d11f      	bne.n	8007b4e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007b12:	e01c      	b.n	8007b4e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d902      	bls.n	8007b22 <DMA_CheckFifoParam+0xb6>
 8007b1c:	2b03      	cmp	r3, #3
 8007b1e:	d003      	beq.n	8007b28 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007b20:	e018      	b.n	8007b54 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	73fb      	strb	r3, [r7, #15]
        break;
 8007b26:	e015      	b.n	8007b54 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00e      	beq.n	8007b52 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	73fb      	strb	r3, [r7, #15]
    break;
 8007b38:	e00b      	b.n	8007b52 <DMA_CheckFifoParam+0xe6>
        break;
 8007b3a:	bf00      	nop
 8007b3c:	e00a      	b.n	8007b54 <DMA_CheckFifoParam+0xe8>
        break;
 8007b3e:	bf00      	nop
 8007b40:	e008      	b.n	8007b54 <DMA_CheckFifoParam+0xe8>
        break;
 8007b42:	bf00      	nop
 8007b44:	e006      	b.n	8007b54 <DMA_CheckFifoParam+0xe8>
        break;
 8007b46:	bf00      	nop
 8007b48:	e004      	b.n	8007b54 <DMA_CheckFifoParam+0xe8>
        break;
 8007b4a:	bf00      	nop
 8007b4c:	e002      	b.n	8007b54 <DMA_CheckFifoParam+0xe8>
        break;
 8007b4e:	bf00      	nop
 8007b50:	e000      	b.n	8007b54 <DMA_CheckFifoParam+0xe8>
    break;
 8007b52:	bf00      	nop
    }
  }

  return status;
 8007b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3714      	adds	r7, #20
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop

08007b64 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b085      	sub	sp, #20
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a38      	ldr	r2, [pc, #224]	@ (8007c58 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d022      	beq.n	8007bc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a36      	ldr	r2, [pc, #216]	@ (8007c5c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d01d      	beq.n	8007bc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a35      	ldr	r2, [pc, #212]	@ (8007c60 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d018      	beq.n	8007bc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a33      	ldr	r2, [pc, #204]	@ (8007c64 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d013      	beq.n	8007bc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a32      	ldr	r2, [pc, #200]	@ (8007c68 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d00e      	beq.n	8007bc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a30      	ldr	r2, [pc, #192]	@ (8007c6c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d009      	beq.n	8007bc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a2f      	ldr	r2, [pc, #188]	@ (8007c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d004      	beq.n	8007bc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a2d      	ldr	r2, [pc, #180]	@ (8007c74 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d101      	bne.n	8007bc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e000      	b.n	8007bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d01a      	beq.n	8007c02 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	3b08      	subs	r3, #8
 8007bd4:	4a28      	ldr	r2, [pc, #160]	@ (8007c78 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8007bda:	091b      	lsrs	r3, r3, #4
 8007bdc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	4b26      	ldr	r3, [pc, #152]	@ (8007c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007be2:	4413      	add	r3, r2
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	461a      	mov	r2, r3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a24      	ldr	r2, [pc, #144]	@ (8007c80 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007bf0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f003 031f 	and.w	r3, r3, #31
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	409a      	lsls	r2, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007c00:	e024      	b.n	8007c4c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	3b10      	subs	r3, #16
 8007c0a:	4a1e      	ldr	r2, [pc, #120]	@ (8007c84 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c10:	091b      	lsrs	r3, r3, #4
 8007c12:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	4a1c      	ldr	r2, [pc, #112]	@ (8007c88 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d806      	bhi.n	8007c2a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	4a1b      	ldr	r2, [pc, #108]	@ (8007c8c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d902      	bls.n	8007c2a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	3308      	adds	r3, #8
 8007c28:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007c2a:	68fa      	ldr	r2, [r7, #12]
 8007c2c:	4b18      	ldr	r3, [pc, #96]	@ (8007c90 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007c2e:	4413      	add	r3, r2
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	461a      	mov	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	4a16      	ldr	r2, [pc, #88]	@ (8007c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007c3c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f003 031f 	and.w	r3, r3, #31
 8007c44:	2201      	movs	r2, #1
 8007c46:	409a      	lsls	r2, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007c4c:	bf00      	nop
 8007c4e:	3714      	adds	r7, #20
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr
 8007c58:	58025408 	.word	0x58025408
 8007c5c:	5802541c 	.word	0x5802541c
 8007c60:	58025430 	.word	0x58025430
 8007c64:	58025444 	.word	0x58025444
 8007c68:	58025458 	.word	0x58025458
 8007c6c:	5802546c 	.word	0x5802546c
 8007c70:	58025480 	.word	0x58025480
 8007c74:	58025494 	.word	0x58025494
 8007c78:	cccccccd 	.word	0xcccccccd
 8007c7c:	16009600 	.word	0x16009600
 8007c80:	58025880 	.word	0x58025880
 8007c84:	aaaaaaab 	.word	0xaaaaaaab
 8007c88:	400204b8 	.word	0x400204b8
 8007c8c:	4002040f 	.word	0x4002040f
 8007c90:	10008200 	.word	0x10008200
 8007c94:	40020880 	.word	0x40020880

08007c98 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d04a      	beq.n	8007d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2b08      	cmp	r3, #8
 8007cb2:	d847      	bhi.n	8007d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a25      	ldr	r2, [pc, #148]	@ (8007d50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d022      	beq.n	8007d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a24      	ldr	r2, [pc, #144]	@ (8007d54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d01d      	beq.n	8007d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a22      	ldr	r2, [pc, #136]	@ (8007d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d018      	beq.n	8007d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a21      	ldr	r2, [pc, #132]	@ (8007d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d013      	beq.n	8007d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a1f      	ldr	r2, [pc, #124]	@ (8007d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d00e      	beq.n	8007d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a1e      	ldr	r2, [pc, #120]	@ (8007d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d009      	beq.n	8007d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a1c      	ldr	r2, [pc, #112]	@ (8007d68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d004      	beq.n	8007d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a1b      	ldr	r2, [pc, #108]	@ (8007d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d101      	bne.n	8007d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007d04:	2301      	movs	r3, #1
 8007d06:	e000      	b.n	8007d0a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007d08:	2300      	movs	r3, #0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00a      	beq.n	8007d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	4b17      	ldr	r3, [pc, #92]	@ (8007d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007d12:	4413      	add	r3, r2
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	461a      	mov	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a15      	ldr	r2, [pc, #84]	@ (8007d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007d20:	671a      	str	r2, [r3, #112]	@ 0x70
 8007d22:	e009      	b.n	8007d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	4b14      	ldr	r3, [pc, #80]	@ (8007d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007d28:	4413      	add	r3, r2
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	4a11      	ldr	r2, [pc, #68]	@ (8007d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007d36:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	409a      	lsls	r2, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8007d44:	bf00      	nop
 8007d46:	3714      	adds	r7, #20
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr
 8007d50:	58025408 	.word	0x58025408
 8007d54:	5802541c 	.word	0x5802541c
 8007d58:	58025430 	.word	0x58025430
 8007d5c:	58025444 	.word	0x58025444
 8007d60:	58025458 	.word	0x58025458
 8007d64:	5802546c 	.word	0x5802546c
 8007d68:	58025480 	.word	0x58025480
 8007d6c:	58025494 	.word	0x58025494
 8007d70:	1600963f 	.word	0x1600963f
 8007d74:	58025940 	.word	0x58025940
 8007d78:	1000823f 	.word	0x1000823f
 8007d7c:	40020940 	.word	0x40020940

08007d80 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8007d80:	b480      	push	{r7}
 8007d82:	b087      	sub	sp, #28
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	607a      	str	r2, [r7, #4]
 8007d8c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d101      	bne.n	8007d9c <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e00a      	b.n	8007db2 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8007d9c:	7afb      	ldrb	r3, [r7, #11]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d103      	bne.n	8007daa <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	605a      	str	r2, [r3, #4]
      break;
 8007da8:	e002      	b.n	8007db0 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	75fb      	strb	r3, [r7, #23]
      break;
 8007dae:	bf00      	nop
  }

  return status;
 8007db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	371c      	adds	r7, #28
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr

08007dbe <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8007dbe:	b480      	push	{r7}
 8007dc0:	b083      	sub	sp, #12
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
 8007dc6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d101      	bne.n	8007dd2 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e003      	b.n	8007dda <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	683a      	ldr	r2, [r7, #0]
 8007dd6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
  }
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	370c      	adds	r7, #12
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr
	...

08007de8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b086      	sub	sp, #24
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	0c1b      	lsrs	r3, r3, #16
 8007df6:	f003 0303 	and.w	r3, r3, #3
 8007dfa:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f003 031f 	and.w	r3, r3, #31
 8007e04:	2201      	movs	r2, #1
 8007e06:	fa02 f303 	lsl.w	r3, r2, r3
 8007e0a:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8007e0c:	f7fd f96a 	bl	80050e4 <HAL_GetCurrentCPUID>
 8007e10:	4603      	mov	r3, r0
 8007e12:	2b03      	cmp	r3, #3
 8007e14:	d105      	bne.n	8007e22 <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	011a      	lsls	r2, r3, #4
 8007e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8007e58 <HAL_EXTI_IRQHandler+0x70>)
 8007e1c:	4413      	add	r3, r2
 8007e1e:	617b      	str	r3, [r7, #20]
 8007e20:	e004      	b.n	8007e2c <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	011a      	lsls	r2, r3, #4
 8007e26:	4b0d      	ldr	r3, [pc, #52]	@ (8007e5c <HAL_EXTI_IRQHandler+0x74>)
 8007e28:	4413      	add	r3, r2
 8007e2a:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	4013      	ands	r3, r2
 8007e34:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d009      	beq.n	8007e50 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	68fa      	ldr	r2, [r7, #12]
 8007e40:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d002      	beq.n	8007e50 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	4798      	blx	r3
    }
  }
}
 8007e50:	bf00      	nop
 8007e52:	3718      	adds	r7, #24
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	58000088 	.word	0x58000088
 8007e5c:	580000c8 	.word	0x580000c8

08007e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b089      	sub	sp, #36	@ 0x24
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007e6e:	4b89      	ldr	r3, [pc, #548]	@ (8008094 <HAL_GPIO_Init+0x234>)
 8007e70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007e72:	e194      	b.n	800819e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	2101      	movs	r1, #1
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8007e80:	4013      	ands	r3, r2
 8007e82:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	f000 8186 	beq.w	8008198 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	f003 0303 	and.w	r3, r3, #3
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d005      	beq.n	8007ea4 <HAL_GPIO_Init+0x44>
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	f003 0303 	and.w	r3, r3, #3
 8007ea0:	2b02      	cmp	r3, #2
 8007ea2:	d130      	bne.n	8007f06 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	005b      	lsls	r3, r3, #1
 8007eae:	2203      	movs	r2, #3
 8007eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8007eb4:	43db      	mvns	r3, r3
 8007eb6:	69ba      	ldr	r2, [r7, #24]
 8007eb8:	4013      	ands	r3, r2
 8007eba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	68da      	ldr	r2, [r3, #12]
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	005b      	lsls	r3, r3, #1
 8007ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec8:	69ba      	ldr	r2, [r7, #24]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	69ba      	ldr	r2, [r7, #24]
 8007ed2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007eda:	2201      	movs	r2, #1
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee2:	43db      	mvns	r3, r3
 8007ee4:	69ba      	ldr	r2, [r7, #24]
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	091b      	lsrs	r3, r3, #4
 8007ef0:	f003 0201 	and.w	r2, r3, #1
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8007efa:	69ba      	ldr	r2, [r7, #24]
 8007efc:	4313      	orrs	r3, r2
 8007efe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	69ba      	ldr	r2, [r7, #24]
 8007f04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	f003 0303 	and.w	r3, r3, #3
 8007f0e:	2b03      	cmp	r3, #3
 8007f10:	d017      	beq.n	8007f42 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	005b      	lsls	r3, r3, #1
 8007f1c:	2203      	movs	r2, #3
 8007f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f22:	43db      	mvns	r3, r3
 8007f24:	69ba      	ldr	r2, [r7, #24]
 8007f26:	4013      	ands	r3, r2
 8007f28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	689a      	ldr	r2, [r3, #8]
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	005b      	lsls	r3, r3, #1
 8007f32:	fa02 f303 	lsl.w	r3, r2, r3
 8007f36:	69ba      	ldr	r2, [r7, #24]
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	69ba      	ldr	r2, [r7, #24]
 8007f40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	f003 0303 	and.w	r3, r3, #3
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d123      	bne.n	8007f96 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	08da      	lsrs	r2, r3, #3
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	3208      	adds	r2, #8
 8007f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	f003 0307 	and.w	r3, r3, #7
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	220f      	movs	r2, #15
 8007f66:	fa02 f303 	lsl.w	r3, r2, r3
 8007f6a:	43db      	mvns	r3, r3
 8007f6c:	69ba      	ldr	r2, [r7, #24]
 8007f6e:	4013      	ands	r3, r2
 8007f70:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	691a      	ldr	r2, [r3, #16]
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	f003 0307 	and.w	r3, r3, #7
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f82:	69ba      	ldr	r2, [r7, #24]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	08da      	lsrs	r2, r3, #3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	3208      	adds	r2, #8
 8007f90:	69b9      	ldr	r1, [r7, #24]
 8007f92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	005b      	lsls	r3, r3, #1
 8007fa0:	2203      	movs	r2, #3
 8007fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8007fa6:	43db      	mvns	r3, r3
 8007fa8:	69ba      	ldr	r2, [r7, #24]
 8007faa:	4013      	ands	r3, r2
 8007fac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	f003 0203 	and.w	r2, r3, #3
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	005b      	lsls	r3, r3, #1
 8007fba:	fa02 f303 	lsl.w	r3, r2, r3
 8007fbe:	69ba      	ldr	r2, [r7, #24]
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	69ba      	ldr	r2, [r7, #24]
 8007fc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	f000 80e0 	beq.w	8008198 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007fd8:	4b2f      	ldr	r3, [pc, #188]	@ (8008098 <HAL_GPIO_Init+0x238>)
 8007fda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007fde:	4a2e      	ldr	r2, [pc, #184]	@ (8008098 <HAL_GPIO_Init+0x238>)
 8007fe0:	f043 0302 	orr.w	r3, r3, #2
 8007fe4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007fe8:	4b2b      	ldr	r3, [pc, #172]	@ (8008098 <HAL_GPIO_Init+0x238>)
 8007fea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007fee:	f003 0302 	and.w	r3, r3, #2
 8007ff2:	60fb      	str	r3, [r7, #12]
 8007ff4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007ff6:	4a29      	ldr	r2, [pc, #164]	@ (800809c <HAL_GPIO_Init+0x23c>)
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	089b      	lsrs	r3, r3, #2
 8007ffc:	3302      	adds	r3, #2
 8007ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008002:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	f003 0303 	and.w	r3, r3, #3
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	220f      	movs	r2, #15
 800800e:	fa02 f303 	lsl.w	r3, r2, r3
 8008012:	43db      	mvns	r3, r3
 8008014:	69ba      	ldr	r2, [r7, #24]
 8008016:	4013      	ands	r3, r2
 8008018:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4a20      	ldr	r2, [pc, #128]	@ (80080a0 <HAL_GPIO_Init+0x240>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d052      	beq.n	80080c8 <HAL_GPIO_Init+0x268>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	4a1f      	ldr	r2, [pc, #124]	@ (80080a4 <HAL_GPIO_Init+0x244>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d031      	beq.n	800808e <HAL_GPIO_Init+0x22e>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4a1e      	ldr	r2, [pc, #120]	@ (80080a8 <HAL_GPIO_Init+0x248>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d02b      	beq.n	800808a <HAL_GPIO_Init+0x22a>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4a1d      	ldr	r2, [pc, #116]	@ (80080ac <HAL_GPIO_Init+0x24c>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d025      	beq.n	8008086 <HAL_GPIO_Init+0x226>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4a1c      	ldr	r2, [pc, #112]	@ (80080b0 <HAL_GPIO_Init+0x250>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d01f      	beq.n	8008082 <HAL_GPIO_Init+0x222>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	4a1b      	ldr	r2, [pc, #108]	@ (80080b4 <HAL_GPIO_Init+0x254>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d019      	beq.n	800807e <HAL_GPIO_Init+0x21e>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4a1a      	ldr	r2, [pc, #104]	@ (80080b8 <HAL_GPIO_Init+0x258>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d013      	beq.n	800807a <HAL_GPIO_Init+0x21a>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	4a19      	ldr	r2, [pc, #100]	@ (80080bc <HAL_GPIO_Init+0x25c>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d00d      	beq.n	8008076 <HAL_GPIO_Init+0x216>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	4a18      	ldr	r2, [pc, #96]	@ (80080c0 <HAL_GPIO_Init+0x260>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d007      	beq.n	8008072 <HAL_GPIO_Init+0x212>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	4a17      	ldr	r2, [pc, #92]	@ (80080c4 <HAL_GPIO_Init+0x264>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d101      	bne.n	800806e <HAL_GPIO_Init+0x20e>
 800806a:	2309      	movs	r3, #9
 800806c:	e02d      	b.n	80080ca <HAL_GPIO_Init+0x26a>
 800806e:	230a      	movs	r3, #10
 8008070:	e02b      	b.n	80080ca <HAL_GPIO_Init+0x26a>
 8008072:	2308      	movs	r3, #8
 8008074:	e029      	b.n	80080ca <HAL_GPIO_Init+0x26a>
 8008076:	2307      	movs	r3, #7
 8008078:	e027      	b.n	80080ca <HAL_GPIO_Init+0x26a>
 800807a:	2306      	movs	r3, #6
 800807c:	e025      	b.n	80080ca <HAL_GPIO_Init+0x26a>
 800807e:	2305      	movs	r3, #5
 8008080:	e023      	b.n	80080ca <HAL_GPIO_Init+0x26a>
 8008082:	2304      	movs	r3, #4
 8008084:	e021      	b.n	80080ca <HAL_GPIO_Init+0x26a>
 8008086:	2303      	movs	r3, #3
 8008088:	e01f      	b.n	80080ca <HAL_GPIO_Init+0x26a>
 800808a:	2302      	movs	r3, #2
 800808c:	e01d      	b.n	80080ca <HAL_GPIO_Init+0x26a>
 800808e:	2301      	movs	r3, #1
 8008090:	e01b      	b.n	80080ca <HAL_GPIO_Init+0x26a>
 8008092:	bf00      	nop
 8008094:	58000080 	.word	0x58000080
 8008098:	58024400 	.word	0x58024400
 800809c:	58000400 	.word	0x58000400
 80080a0:	58020000 	.word	0x58020000
 80080a4:	58020400 	.word	0x58020400
 80080a8:	58020800 	.word	0x58020800
 80080ac:	58020c00 	.word	0x58020c00
 80080b0:	58021000 	.word	0x58021000
 80080b4:	58021400 	.word	0x58021400
 80080b8:	58021800 	.word	0x58021800
 80080bc:	58021c00 	.word	0x58021c00
 80080c0:	58022000 	.word	0x58022000
 80080c4:	58022400 	.word	0x58022400
 80080c8:	2300      	movs	r3, #0
 80080ca:	69fa      	ldr	r2, [r7, #28]
 80080cc:	f002 0203 	and.w	r2, r2, #3
 80080d0:	0092      	lsls	r2, r2, #2
 80080d2:	4093      	lsls	r3, r2
 80080d4:	69ba      	ldr	r2, [r7, #24]
 80080d6:	4313      	orrs	r3, r2
 80080d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80080da:	4938      	ldr	r1, [pc, #224]	@ (80081bc <HAL_GPIO_Init+0x35c>)
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	089b      	lsrs	r3, r3, #2
 80080e0:	3302      	adds	r3, #2
 80080e2:	69ba      	ldr	r2, [r7, #24]
 80080e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80080e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	43db      	mvns	r3, r3
 80080f4:	69ba      	ldr	r2, [r7, #24]
 80080f6:	4013      	ands	r3, r2
 80080f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008102:	2b00      	cmp	r3, #0
 8008104:	d003      	beq.n	800810e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008106:	69ba      	ldr	r2, [r7, #24]
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	4313      	orrs	r3, r2
 800810c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800810e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008116:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	43db      	mvns	r3, r3
 8008122:	69ba      	ldr	r2, [r7, #24]
 8008124:	4013      	ands	r3, r2
 8008126:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008130:	2b00      	cmp	r3, #0
 8008132:	d003      	beq.n	800813c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008134:	69ba      	ldr	r2, [r7, #24]
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	4313      	orrs	r3, r2
 800813a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800813c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	43db      	mvns	r3, r3
 800814e:	69ba      	ldr	r2, [r7, #24]
 8008150:	4013      	ands	r3, r2
 8008152:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800815c:	2b00      	cmp	r3, #0
 800815e:	d003      	beq.n	8008168 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008160:	69ba      	ldr	r2, [r7, #24]
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	4313      	orrs	r3, r2
 8008166:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	69ba      	ldr	r2, [r7, #24]
 800816c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	43db      	mvns	r3, r3
 8008178:	69ba      	ldr	r2, [r7, #24]
 800817a:	4013      	ands	r3, r2
 800817c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008186:	2b00      	cmp	r3, #0
 8008188:	d003      	beq.n	8008192 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800818a:	69ba      	ldr	r2, [r7, #24]
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	4313      	orrs	r3, r2
 8008190:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	69ba      	ldr	r2, [r7, #24]
 8008196:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	3301      	adds	r3, #1
 800819c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	fa22 f303 	lsr.w	r3, r2, r3
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f47f ae63 	bne.w	8007e74 <HAL_GPIO_Init+0x14>
  }
}
 80081ae:	bf00      	nop
 80081b0:	bf00      	nop
 80081b2:	3724      	adds	r7, #36	@ 0x24
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr
 80081bc:	58000400 	.word	0x58000400

080081c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	460b      	mov	r3, r1
 80081ca:	807b      	strh	r3, [r7, #2]
 80081cc:	4613      	mov	r3, r2
 80081ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80081d0:	787b      	ldrb	r3, [r7, #1]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d003      	beq.n	80081de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80081d6:	887a      	ldrh	r2, [r7, #2]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80081dc:	e003      	b.n	80081e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80081de:	887b      	ldrh	r3, [r7, #2]
 80081e0:	041a      	lsls	r2, r3, #16
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	619a      	str	r2, [r3, #24]
}
 80081e6:	bf00      	nop
 80081e8:	370c      	adds	r7, #12
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr

080081f2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80081f2:	b480      	push	{r7}
 80081f4:	b085      	sub	sp, #20
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
 80081fa:	460b      	mov	r3, r1
 80081fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	695b      	ldr	r3, [r3, #20]
 8008202:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008204:	887a      	ldrh	r2, [r7, #2]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	4013      	ands	r3, r2
 800820a:	041a      	lsls	r2, r3, #16
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	43d9      	mvns	r1, r3
 8008210:	887b      	ldrh	r3, [r7, #2]
 8008212:	400b      	ands	r3, r1
 8008214:	431a      	orrs	r2, r3
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	619a      	str	r2, [r3, #24]
}
 800821a:	bf00      	nop
 800821c:	3714      	adds	r7, #20
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr
	...

08008228 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8008228:	b480      	push	{r7}
 800822a:	b083      	sub	sp, #12
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8008230:	4a08      	ldr	r2, [pc, #32]	@ (8008254 <HAL_HSEM_FastTake+0x2c>)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	3320      	adds	r3, #32
 8008236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800823a:	4a07      	ldr	r2, [pc, #28]	@ (8008258 <HAL_HSEM_FastTake+0x30>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d101      	bne.n	8008244 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8008240:	2300      	movs	r3, #0
 8008242:	e000      	b.n	8008246 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8008244:	2301      	movs	r3, #1
}
 8008246:	4618      	mov	r0, r3
 8008248:	370c      	adds	r7, #12
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	58026400 	.word	0x58026400
 8008258:	80000300 	.word	0x80000300

0800825c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8008266:	4906      	ldr	r1, [pc, #24]	@ (8008280 <HAL_HSEM_Release+0x24>)
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8008274:	bf00      	nop
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr
 8008280:	58026400 	.word	0x58026400

08008284 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800828c:	4b29      	ldr	r3, [pc, #164]	@ (8008334 <HAL_PWREx_ConfigSupply+0xb0>)
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	f003 0307 	and.w	r3, r3, #7
 8008294:	2b06      	cmp	r3, #6
 8008296:	d00a      	beq.n	80082ae <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008298:	4b26      	ldr	r3, [pc, #152]	@ (8008334 <HAL_PWREx_ConfigSupply+0xb0>)
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d001      	beq.n	80082aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e040      	b.n	800832c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80082aa:	2300      	movs	r3, #0
 80082ac:	e03e      	b.n	800832c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80082ae:	4b21      	ldr	r3, [pc, #132]	@ (8008334 <HAL_PWREx_ConfigSupply+0xb0>)
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80082b6:	491f      	ldr	r1, [pc, #124]	@ (8008334 <HAL_PWREx_ConfigSupply+0xb0>)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4313      	orrs	r3, r2
 80082bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80082be:	f7fb f85b 	bl	8003378 <HAL_GetTick>
 80082c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80082c4:	e009      	b.n	80082da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80082c6:	f7fb f857 	bl	8003378 <HAL_GetTick>
 80082ca:	4602      	mov	r2, r0
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	1ad3      	subs	r3, r2, r3
 80082d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80082d4:	d901      	bls.n	80082da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	e028      	b.n	800832c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80082da:	4b16      	ldr	r3, [pc, #88]	@ (8008334 <HAL_PWREx_ConfigSupply+0xb0>)
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80082e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082e6:	d1ee      	bne.n	80082c6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2b1e      	cmp	r3, #30
 80082ec:	d008      	beq.n	8008300 <HAL_PWREx_ConfigSupply+0x7c>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80082f2:	d005      	beq.n	8008300 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2b1d      	cmp	r3, #29
 80082f8:	d002      	beq.n	8008300 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2b2d      	cmp	r3, #45	@ 0x2d
 80082fe:	d114      	bne.n	800832a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8008300:	f7fb f83a 	bl	8003378 <HAL_GetTick>
 8008304:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008306:	e009      	b.n	800831c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008308:	f7fb f836 	bl	8003378 <HAL_GetTick>
 800830c:	4602      	mov	r2, r0
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008316:	d901      	bls.n	800831c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	e007      	b.n	800832c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800831c:	4b05      	ldr	r3, [pc, #20]	@ (8008334 <HAL_PWREx_ConfigSupply+0xb0>)
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008324:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008328:	d1ee      	bne.n	8008308 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800832a:	2300      	movs	r3, #0
}
 800832c:	4618      	mov	r0, r3
 800832e:	3710      	adds	r7, #16
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}
 8008334:	58024800 	.word	0x58024800

08008338 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b08c      	sub	sp, #48	@ 0x30
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d102      	bne.n	800834c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	f000 bc48 	b.w	8008bdc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f003 0301 	and.w	r3, r3, #1
 8008354:	2b00      	cmp	r3, #0
 8008356:	f000 8088 	beq.w	800846a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800835a:	4b99      	ldr	r3, [pc, #612]	@ (80085c0 <HAL_RCC_OscConfig+0x288>)
 800835c:	691b      	ldr	r3, [r3, #16]
 800835e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008362:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008364:	4b96      	ldr	r3, [pc, #600]	@ (80085c0 <HAL_RCC_OscConfig+0x288>)
 8008366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008368:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800836a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800836c:	2b10      	cmp	r3, #16
 800836e:	d007      	beq.n	8008380 <HAL_RCC_OscConfig+0x48>
 8008370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008372:	2b18      	cmp	r3, #24
 8008374:	d111      	bne.n	800839a <HAL_RCC_OscConfig+0x62>
 8008376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008378:	f003 0303 	and.w	r3, r3, #3
 800837c:	2b02      	cmp	r3, #2
 800837e:	d10c      	bne.n	800839a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008380:	4b8f      	ldr	r3, [pc, #572]	@ (80085c0 <HAL_RCC_OscConfig+0x288>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008388:	2b00      	cmp	r3, #0
 800838a:	d06d      	beq.n	8008468 <HAL_RCC_OscConfig+0x130>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d169      	bne.n	8008468 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	f000 bc21 	b.w	8008bdc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083a2:	d106      	bne.n	80083b2 <HAL_RCC_OscConfig+0x7a>
 80083a4:	4b86      	ldr	r3, [pc, #536]	@ (80085c0 <HAL_RCC_OscConfig+0x288>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a85      	ldr	r2, [pc, #532]	@ (80085c0 <HAL_RCC_OscConfig+0x288>)
 80083aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083ae:	6013      	str	r3, [r2, #0]
 80083b0:	e02e      	b.n	8008410 <HAL_RCC_OscConfig+0xd8>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d10c      	bne.n	80083d4 <HAL_RCC_OscConfig+0x9c>
 80083ba:	4b81      	ldr	r3, [pc, #516]	@ (80085c0 <HAL_RCC_OscConfig+0x288>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a80      	ldr	r2, [pc, #512]	@ (80085c0 <HAL_RCC_OscConfig+0x288>)
 80083c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083c4:	6013      	str	r3, [r2, #0]
 80083c6:	4b7e      	ldr	r3, [pc, #504]	@ (80085c0 <HAL_RCC_OscConfig+0x288>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a7d      	ldr	r2, [pc, #500]	@ (80085c0 <HAL_RCC_OscConfig+0x288>)
 80083cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80083d0:	6013      	str	r3, [r2, #0]
 80083d2:	e01d      	b.n	8008410 <HAL_RCC_OscConfig+0xd8>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80083dc:	d10c      	bne.n	80083f8 <HAL_RCC_OscConfig+0xc0>
 80083de:	4b78      	ldr	r3, [pc, #480]	@ (80085c0 <HAL_RCC_OscConfig+0x288>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a77      	ldr	r2, [pc, #476]	@ (80085c0 <HAL_RCC_OscConfig+0x288>)
 80083e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80083e8:	6013      	str	r3, [r2, #0]
 80083ea:	4b75      	ldr	r3, [pc, #468]	@ (80085c0 <HAL_RCC_OscConfig+0x288>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a74      	ldr	r2, [pc, #464]	@ (80085c0 <HAL_RCC_OscConfig+0x288>)
 80083f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083f4:	6013      	str	r3, [r2, #0]
 80083f6:	e00b      	b.n	8008410 <HAL_RCC_OscConfig+0xd8>
 80083f8:	4b71      	ldr	r3, [pc, #452]	@ (80085c0 <HAL_RCC_OscConfig+0x288>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a70      	ldr	r2, [pc, #448]	@ (80085c0 <HAL_RCC_OscConfig+0x288>)
 80083fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008402:	6013      	str	r3, [r2, #0]
 8008404:	4b6e      	ldr	r3, [pc, #440]	@ (80085c0 <HAL_RCC_OscConfig+0x288>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a6d      	ldr	r2, [pc, #436]	@ (80085c0 <HAL_RCC_OscConfig+0x288>)
 800840a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800840e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d013      	beq.n	8008440 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008418:	f7fa ffae 	bl	8003378 <HAL_GetTick>
 800841c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800841e:	e008      	b.n	8008432 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008420:	f7fa ffaa 	bl	8003378 <HAL_GetTick>
 8008424:	4602      	mov	r2, r0
 8008426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	2b64      	cmp	r3, #100	@ 0x64
 800842c:	d901      	bls.n	8008432 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800842e:	2303      	movs	r3, #3
 8008430:	e3d4      	b.n	8008bdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008432:	4b63      	ldr	r3, [pc, #396]	@ (80085c0 <HAL_RCC_OscConfig+0x288>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800843a:	2b00      	cmp	r3, #0
 800843c:	d0f0      	beq.n	8008420 <HAL_RCC_OscConfig+0xe8>
 800843e:	e014      	b.n	800846a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008440:	f7fa ff9a 	bl	8003378 <HAL_GetTick>
 8008444:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008446:	e008      	b.n	800845a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008448:	f7fa ff96 	bl	8003378 <HAL_GetTick>
 800844c:	4602      	mov	r2, r0
 800844e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008450:	1ad3      	subs	r3, r2, r3
 8008452:	2b64      	cmp	r3, #100	@ 0x64
 8008454:	d901      	bls.n	800845a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008456:	2303      	movs	r3, #3
 8008458:	e3c0      	b.n	8008bdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800845a:	4b59      	ldr	r3, [pc, #356]	@ (80085c0 <HAL_RCC_OscConfig+0x288>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008462:	2b00      	cmp	r3, #0
 8008464:	d1f0      	bne.n	8008448 <HAL_RCC_OscConfig+0x110>
 8008466:	e000      	b.n	800846a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f003 0302 	and.w	r3, r3, #2
 8008472:	2b00      	cmp	r3, #0
 8008474:	f000 80ca 	beq.w	800860c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008478:	4b51      	ldr	r3, [pc, #324]	@ (80085c0 <HAL_RCC_OscConfig+0x288>)
 800847a:	691b      	ldr	r3, [r3, #16]
 800847c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008480:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008482:	4b4f      	ldr	r3, [pc, #316]	@ (80085c0 <HAL_RCC_OscConfig+0x288>)
 8008484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008486:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008488:	6a3b      	ldr	r3, [r7, #32]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d007      	beq.n	800849e <HAL_RCC_OscConfig+0x166>
 800848e:	6a3b      	ldr	r3, [r7, #32]
 8008490:	2b18      	cmp	r3, #24
 8008492:	d156      	bne.n	8008542 <HAL_RCC_OscConfig+0x20a>
 8008494:	69fb      	ldr	r3, [r7, #28]
 8008496:	f003 0303 	and.w	r3, r3, #3
 800849a:	2b00      	cmp	r3, #0
 800849c:	d151      	bne.n	8008542 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800849e:	4b48      	ldr	r3, [pc, #288]	@ (80085c0 <HAL_RCC_OscConfig+0x288>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f003 0304 	and.w	r3, r3, #4
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d005      	beq.n	80084b6 <HAL_RCC_OscConfig+0x17e>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d101      	bne.n	80084b6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80084b2:	2301      	movs	r3, #1
 80084b4:	e392      	b.n	8008bdc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80084b6:	4b42      	ldr	r3, [pc, #264]	@ (80085c0 <HAL_RCC_OscConfig+0x288>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f023 0219 	bic.w	r2, r3, #25
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	493f      	ldr	r1, [pc, #252]	@ (80085c0 <HAL_RCC_OscConfig+0x288>)
 80084c4:	4313      	orrs	r3, r2
 80084c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084c8:	f7fa ff56 	bl	8003378 <HAL_GetTick>
 80084cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80084ce:	e008      	b.n	80084e2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084d0:	f7fa ff52 	bl	8003378 <HAL_GetTick>
 80084d4:	4602      	mov	r2, r0
 80084d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d8:	1ad3      	subs	r3, r2, r3
 80084da:	2b02      	cmp	r3, #2
 80084dc:	d901      	bls.n	80084e2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80084de:	2303      	movs	r3, #3
 80084e0:	e37c      	b.n	8008bdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80084e2:	4b37      	ldr	r3, [pc, #220]	@ (80085c0 <HAL_RCC_OscConfig+0x288>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f003 0304 	and.w	r3, r3, #4
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d0f0      	beq.n	80084d0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084ee:	f7fa ff4f 	bl	8003390 <HAL_GetREVID>
 80084f2:	4603      	mov	r3, r0
 80084f4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d817      	bhi.n	800852c <HAL_RCC_OscConfig+0x1f4>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	691b      	ldr	r3, [r3, #16]
 8008500:	2b40      	cmp	r3, #64	@ 0x40
 8008502:	d108      	bne.n	8008516 <HAL_RCC_OscConfig+0x1de>
 8008504:	4b2e      	ldr	r3, [pc, #184]	@ (80085c0 <HAL_RCC_OscConfig+0x288>)
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800850c:	4a2c      	ldr	r2, [pc, #176]	@ (80085c0 <HAL_RCC_OscConfig+0x288>)
 800850e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008512:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008514:	e07a      	b.n	800860c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008516:	4b2a      	ldr	r3, [pc, #168]	@ (80085c0 <HAL_RCC_OscConfig+0x288>)
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	031b      	lsls	r3, r3, #12
 8008524:	4926      	ldr	r1, [pc, #152]	@ (80085c0 <HAL_RCC_OscConfig+0x288>)
 8008526:	4313      	orrs	r3, r2
 8008528:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800852a:	e06f      	b.n	800860c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800852c:	4b24      	ldr	r3, [pc, #144]	@ (80085c0 <HAL_RCC_OscConfig+0x288>)
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	061b      	lsls	r3, r3, #24
 800853a:	4921      	ldr	r1, [pc, #132]	@ (80085c0 <HAL_RCC_OscConfig+0x288>)
 800853c:	4313      	orrs	r3, r2
 800853e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008540:	e064      	b.n	800860c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d047      	beq.n	80085da <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800854a:	4b1d      	ldr	r3, [pc, #116]	@ (80085c0 <HAL_RCC_OscConfig+0x288>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f023 0219 	bic.w	r2, r3, #25
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	491a      	ldr	r1, [pc, #104]	@ (80085c0 <HAL_RCC_OscConfig+0x288>)
 8008558:	4313      	orrs	r3, r2
 800855a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800855c:	f7fa ff0c 	bl	8003378 <HAL_GetTick>
 8008560:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008562:	e008      	b.n	8008576 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008564:	f7fa ff08 	bl	8003378 <HAL_GetTick>
 8008568:	4602      	mov	r2, r0
 800856a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800856c:	1ad3      	subs	r3, r2, r3
 800856e:	2b02      	cmp	r3, #2
 8008570:	d901      	bls.n	8008576 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008572:	2303      	movs	r3, #3
 8008574:	e332      	b.n	8008bdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008576:	4b12      	ldr	r3, [pc, #72]	@ (80085c0 <HAL_RCC_OscConfig+0x288>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 0304 	and.w	r3, r3, #4
 800857e:	2b00      	cmp	r3, #0
 8008580:	d0f0      	beq.n	8008564 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008582:	f7fa ff05 	bl	8003390 <HAL_GetREVID>
 8008586:	4603      	mov	r3, r0
 8008588:	f241 0203 	movw	r2, #4099	@ 0x1003
 800858c:	4293      	cmp	r3, r2
 800858e:	d819      	bhi.n	80085c4 <HAL_RCC_OscConfig+0x28c>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	691b      	ldr	r3, [r3, #16]
 8008594:	2b40      	cmp	r3, #64	@ 0x40
 8008596:	d108      	bne.n	80085aa <HAL_RCC_OscConfig+0x272>
 8008598:	4b09      	ldr	r3, [pc, #36]	@ (80085c0 <HAL_RCC_OscConfig+0x288>)
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80085a0:	4a07      	ldr	r2, [pc, #28]	@ (80085c0 <HAL_RCC_OscConfig+0x288>)
 80085a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085a6:	6053      	str	r3, [r2, #4]
 80085a8:	e030      	b.n	800860c <HAL_RCC_OscConfig+0x2d4>
 80085aa:	4b05      	ldr	r3, [pc, #20]	@ (80085c0 <HAL_RCC_OscConfig+0x288>)
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	031b      	lsls	r3, r3, #12
 80085b8:	4901      	ldr	r1, [pc, #4]	@ (80085c0 <HAL_RCC_OscConfig+0x288>)
 80085ba:	4313      	orrs	r3, r2
 80085bc:	604b      	str	r3, [r1, #4]
 80085be:	e025      	b.n	800860c <HAL_RCC_OscConfig+0x2d4>
 80085c0:	58024400 	.word	0x58024400
 80085c4:	4b9a      	ldr	r3, [pc, #616]	@ (8008830 <HAL_RCC_OscConfig+0x4f8>)
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	061b      	lsls	r3, r3, #24
 80085d2:	4997      	ldr	r1, [pc, #604]	@ (8008830 <HAL_RCC_OscConfig+0x4f8>)
 80085d4:	4313      	orrs	r3, r2
 80085d6:	604b      	str	r3, [r1, #4]
 80085d8:	e018      	b.n	800860c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80085da:	4b95      	ldr	r3, [pc, #596]	@ (8008830 <HAL_RCC_OscConfig+0x4f8>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a94      	ldr	r2, [pc, #592]	@ (8008830 <HAL_RCC_OscConfig+0x4f8>)
 80085e0:	f023 0301 	bic.w	r3, r3, #1
 80085e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085e6:	f7fa fec7 	bl	8003378 <HAL_GetTick>
 80085ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80085ec:	e008      	b.n	8008600 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085ee:	f7fa fec3 	bl	8003378 <HAL_GetTick>
 80085f2:	4602      	mov	r2, r0
 80085f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f6:	1ad3      	subs	r3, r2, r3
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	d901      	bls.n	8008600 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80085fc:	2303      	movs	r3, #3
 80085fe:	e2ed      	b.n	8008bdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008600:	4b8b      	ldr	r3, [pc, #556]	@ (8008830 <HAL_RCC_OscConfig+0x4f8>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f003 0304 	and.w	r3, r3, #4
 8008608:	2b00      	cmp	r3, #0
 800860a:	d1f0      	bne.n	80085ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f003 0310 	and.w	r3, r3, #16
 8008614:	2b00      	cmp	r3, #0
 8008616:	f000 80a9 	beq.w	800876c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800861a:	4b85      	ldr	r3, [pc, #532]	@ (8008830 <HAL_RCC_OscConfig+0x4f8>)
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008622:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008624:	4b82      	ldr	r3, [pc, #520]	@ (8008830 <HAL_RCC_OscConfig+0x4f8>)
 8008626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008628:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800862a:	69bb      	ldr	r3, [r7, #24]
 800862c:	2b08      	cmp	r3, #8
 800862e:	d007      	beq.n	8008640 <HAL_RCC_OscConfig+0x308>
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	2b18      	cmp	r3, #24
 8008634:	d13a      	bne.n	80086ac <HAL_RCC_OscConfig+0x374>
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	f003 0303 	and.w	r3, r3, #3
 800863c:	2b01      	cmp	r3, #1
 800863e:	d135      	bne.n	80086ac <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008640:	4b7b      	ldr	r3, [pc, #492]	@ (8008830 <HAL_RCC_OscConfig+0x4f8>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008648:	2b00      	cmp	r3, #0
 800864a:	d005      	beq.n	8008658 <HAL_RCC_OscConfig+0x320>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	69db      	ldr	r3, [r3, #28]
 8008650:	2b80      	cmp	r3, #128	@ 0x80
 8008652:	d001      	beq.n	8008658 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008654:	2301      	movs	r3, #1
 8008656:	e2c1      	b.n	8008bdc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008658:	f7fa fe9a 	bl	8003390 <HAL_GetREVID>
 800865c:	4603      	mov	r3, r0
 800865e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008662:	4293      	cmp	r3, r2
 8008664:	d817      	bhi.n	8008696 <HAL_RCC_OscConfig+0x35e>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a1b      	ldr	r3, [r3, #32]
 800866a:	2b20      	cmp	r3, #32
 800866c:	d108      	bne.n	8008680 <HAL_RCC_OscConfig+0x348>
 800866e:	4b70      	ldr	r3, [pc, #448]	@ (8008830 <HAL_RCC_OscConfig+0x4f8>)
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008676:	4a6e      	ldr	r2, [pc, #440]	@ (8008830 <HAL_RCC_OscConfig+0x4f8>)
 8008678:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800867c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800867e:	e075      	b.n	800876c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008680:	4b6b      	ldr	r3, [pc, #428]	@ (8008830 <HAL_RCC_OscConfig+0x4f8>)
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a1b      	ldr	r3, [r3, #32]
 800868c:	069b      	lsls	r3, r3, #26
 800868e:	4968      	ldr	r1, [pc, #416]	@ (8008830 <HAL_RCC_OscConfig+0x4f8>)
 8008690:	4313      	orrs	r3, r2
 8008692:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008694:	e06a      	b.n	800876c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008696:	4b66      	ldr	r3, [pc, #408]	@ (8008830 <HAL_RCC_OscConfig+0x4f8>)
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a1b      	ldr	r3, [r3, #32]
 80086a2:	061b      	lsls	r3, r3, #24
 80086a4:	4962      	ldr	r1, [pc, #392]	@ (8008830 <HAL_RCC_OscConfig+0x4f8>)
 80086a6:	4313      	orrs	r3, r2
 80086a8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80086aa:	e05f      	b.n	800876c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	69db      	ldr	r3, [r3, #28]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d042      	beq.n	800873a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80086b4:	4b5e      	ldr	r3, [pc, #376]	@ (8008830 <HAL_RCC_OscConfig+0x4f8>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a5d      	ldr	r2, [pc, #372]	@ (8008830 <HAL_RCC_OscConfig+0x4f8>)
 80086ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086c0:	f7fa fe5a 	bl	8003378 <HAL_GetTick>
 80086c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80086c6:	e008      	b.n	80086da <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80086c8:	f7fa fe56 	bl	8003378 <HAL_GetTick>
 80086cc:	4602      	mov	r2, r0
 80086ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d0:	1ad3      	subs	r3, r2, r3
 80086d2:	2b02      	cmp	r3, #2
 80086d4:	d901      	bls.n	80086da <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80086d6:	2303      	movs	r3, #3
 80086d8:	e280      	b.n	8008bdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80086da:	4b55      	ldr	r3, [pc, #340]	@ (8008830 <HAL_RCC_OscConfig+0x4f8>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d0f0      	beq.n	80086c8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80086e6:	f7fa fe53 	bl	8003390 <HAL_GetREVID>
 80086ea:	4603      	mov	r3, r0
 80086ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d817      	bhi.n	8008724 <HAL_RCC_OscConfig+0x3ec>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6a1b      	ldr	r3, [r3, #32]
 80086f8:	2b20      	cmp	r3, #32
 80086fa:	d108      	bne.n	800870e <HAL_RCC_OscConfig+0x3d6>
 80086fc:	4b4c      	ldr	r3, [pc, #304]	@ (8008830 <HAL_RCC_OscConfig+0x4f8>)
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008704:	4a4a      	ldr	r2, [pc, #296]	@ (8008830 <HAL_RCC_OscConfig+0x4f8>)
 8008706:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800870a:	6053      	str	r3, [r2, #4]
 800870c:	e02e      	b.n	800876c <HAL_RCC_OscConfig+0x434>
 800870e:	4b48      	ldr	r3, [pc, #288]	@ (8008830 <HAL_RCC_OscConfig+0x4f8>)
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6a1b      	ldr	r3, [r3, #32]
 800871a:	069b      	lsls	r3, r3, #26
 800871c:	4944      	ldr	r1, [pc, #272]	@ (8008830 <HAL_RCC_OscConfig+0x4f8>)
 800871e:	4313      	orrs	r3, r2
 8008720:	604b      	str	r3, [r1, #4]
 8008722:	e023      	b.n	800876c <HAL_RCC_OscConfig+0x434>
 8008724:	4b42      	ldr	r3, [pc, #264]	@ (8008830 <HAL_RCC_OscConfig+0x4f8>)
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6a1b      	ldr	r3, [r3, #32]
 8008730:	061b      	lsls	r3, r3, #24
 8008732:	493f      	ldr	r1, [pc, #252]	@ (8008830 <HAL_RCC_OscConfig+0x4f8>)
 8008734:	4313      	orrs	r3, r2
 8008736:	60cb      	str	r3, [r1, #12]
 8008738:	e018      	b.n	800876c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800873a:	4b3d      	ldr	r3, [pc, #244]	@ (8008830 <HAL_RCC_OscConfig+0x4f8>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a3c      	ldr	r2, [pc, #240]	@ (8008830 <HAL_RCC_OscConfig+0x4f8>)
 8008740:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008744:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008746:	f7fa fe17 	bl	8003378 <HAL_GetTick>
 800874a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800874c:	e008      	b.n	8008760 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800874e:	f7fa fe13 	bl	8003378 <HAL_GetTick>
 8008752:	4602      	mov	r2, r0
 8008754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008756:	1ad3      	subs	r3, r2, r3
 8008758:	2b02      	cmp	r3, #2
 800875a:	d901      	bls.n	8008760 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800875c:	2303      	movs	r3, #3
 800875e:	e23d      	b.n	8008bdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008760:	4b33      	ldr	r3, [pc, #204]	@ (8008830 <HAL_RCC_OscConfig+0x4f8>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008768:	2b00      	cmp	r3, #0
 800876a:	d1f0      	bne.n	800874e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f003 0308 	and.w	r3, r3, #8
 8008774:	2b00      	cmp	r3, #0
 8008776:	d036      	beq.n	80087e6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	695b      	ldr	r3, [r3, #20]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d019      	beq.n	80087b4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008780:	4b2b      	ldr	r3, [pc, #172]	@ (8008830 <HAL_RCC_OscConfig+0x4f8>)
 8008782:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008784:	4a2a      	ldr	r2, [pc, #168]	@ (8008830 <HAL_RCC_OscConfig+0x4f8>)
 8008786:	f043 0301 	orr.w	r3, r3, #1
 800878a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800878c:	f7fa fdf4 	bl	8003378 <HAL_GetTick>
 8008790:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008792:	e008      	b.n	80087a6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008794:	f7fa fdf0 	bl	8003378 <HAL_GetTick>
 8008798:	4602      	mov	r2, r0
 800879a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800879c:	1ad3      	subs	r3, r2, r3
 800879e:	2b02      	cmp	r3, #2
 80087a0:	d901      	bls.n	80087a6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80087a2:	2303      	movs	r3, #3
 80087a4:	e21a      	b.n	8008bdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80087a6:	4b22      	ldr	r3, [pc, #136]	@ (8008830 <HAL_RCC_OscConfig+0x4f8>)
 80087a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087aa:	f003 0302 	and.w	r3, r3, #2
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d0f0      	beq.n	8008794 <HAL_RCC_OscConfig+0x45c>
 80087b2:	e018      	b.n	80087e6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80087b4:	4b1e      	ldr	r3, [pc, #120]	@ (8008830 <HAL_RCC_OscConfig+0x4f8>)
 80087b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087b8:	4a1d      	ldr	r2, [pc, #116]	@ (8008830 <HAL_RCC_OscConfig+0x4f8>)
 80087ba:	f023 0301 	bic.w	r3, r3, #1
 80087be:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087c0:	f7fa fdda 	bl	8003378 <HAL_GetTick>
 80087c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80087c6:	e008      	b.n	80087da <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087c8:	f7fa fdd6 	bl	8003378 <HAL_GetTick>
 80087cc:	4602      	mov	r2, r0
 80087ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d0:	1ad3      	subs	r3, r2, r3
 80087d2:	2b02      	cmp	r3, #2
 80087d4:	d901      	bls.n	80087da <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80087d6:	2303      	movs	r3, #3
 80087d8:	e200      	b.n	8008bdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80087da:	4b15      	ldr	r3, [pc, #84]	@ (8008830 <HAL_RCC_OscConfig+0x4f8>)
 80087dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087de:	f003 0302 	and.w	r3, r3, #2
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d1f0      	bne.n	80087c8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f003 0320 	and.w	r3, r3, #32
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d039      	beq.n	8008866 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	699b      	ldr	r3, [r3, #24]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d01c      	beq.n	8008834 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80087fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008830 <HAL_RCC_OscConfig+0x4f8>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a0c      	ldr	r2, [pc, #48]	@ (8008830 <HAL_RCC_OscConfig+0x4f8>)
 8008800:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008804:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008806:	f7fa fdb7 	bl	8003378 <HAL_GetTick>
 800880a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800880c:	e008      	b.n	8008820 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800880e:	f7fa fdb3 	bl	8003378 <HAL_GetTick>
 8008812:	4602      	mov	r2, r0
 8008814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008816:	1ad3      	subs	r3, r2, r3
 8008818:	2b02      	cmp	r3, #2
 800881a:	d901      	bls.n	8008820 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800881c:	2303      	movs	r3, #3
 800881e:	e1dd      	b.n	8008bdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008820:	4b03      	ldr	r3, [pc, #12]	@ (8008830 <HAL_RCC_OscConfig+0x4f8>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008828:	2b00      	cmp	r3, #0
 800882a:	d0f0      	beq.n	800880e <HAL_RCC_OscConfig+0x4d6>
 800882c:	e01b      	b.n	8008866 <HAL_RCC_OscConfig+0x52e>
 800882e:	bf00      	nop
 8008830:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008834:	4b9b      	ldr	r3, [pc, #620]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a9a      	ldr	r2, [pc, #616]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 800883a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800883e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008840:	f7fa fd9a 	bl	8003378 <HAL_GetTick>
 8008844:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008846:	e008      	b.n	800885a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008848:	f7fa fd96 	bl	8003378 <HAL_GetTick>
 800884c:	4602      	mov	r2, r0
 800884e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008850:	1ad3      	subs	r3, r2, r3
 8008852:	2b02      	cmp	r3, #2
 8008854:	d901      	bls.n	800885a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008856:	2303      	movs	r3, #3
 8008858:	e1c0      	b.n	8008bdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800885a:	4b92      	ldr	r3, [pc, #584]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008862:	2b00      	cmp	r3, #0
 8008864:	d1f0      	bne.n	8008848 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f003 0304 	and.w	r3, r3, #4
 800886e:	2b00      	cmp	r3, #0
 8008870:	f000 8081 	beq.w	8008976 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008874:	4b8c      	ldr	r3, [pc, #560]	@ (8008aa8 <HAL_RCC_OscConfig+0x770>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a8b      	ldr	r2, [pc, #556]	@ (8008aa8 <HAL_RCC_OscConfig+0x770>)
 800887a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800887e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008880:	f7fa fd7a 	bl	8003378 <HAL_GetTick>
 8008884:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008886:	e008      	b.n	800889a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008888:	f7fa fd76 	bl	8003378 <HAL_GetTick>
 800888c:	4602      	mov	r2, r0
 800888e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	2b64      	cmp	r3, #100	@ 0x64
 8008894:	d901      	bls.n	800889a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008896:	2303      	movs	r3, #3
 8008898:	e1a0      	b.n	8008bdc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800889a:	4b83      	ldr	r3, [pc, #524]	@ (8008aa8 <HAL_RCC_OscConfig+0x770>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d0f0      	beq.n	8008888 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d106      	bne.n	80088bc <HAL_RCC_OscConfig+0x584>
 80088ae:	4b7d      	ldr	r3, [pc, #500]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 80088b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088b2:	4a7c      	ldr	r2, [pc, #496]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 80088b4:	f043 0301 	orr.w	r3, r3, #1
 80088b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80088ba:	e02d      	b.n	8008918 <HAL_RCC_OscConfig+0x5e0>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d10c      	bne.n	80088de <HAL_RCC_OscConfig+0x5a6>
 80088c4:	4b77      	ldr	r3, [pc, #476]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 80088c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088c8:	4a76      	ldr	r2, [pc, #472]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 80088ca:	f023 0301 	bic.w	r3, r3, #1
 80088ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80088d0:	4b74      	ldr	r3, [pc, #464]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 80088d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088d4:	4a73      	ldr	r2, [pc, #460]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 80088d6:	f023 0304 	bic.w	r3, r3, #4
 80088da:	6713      	str	r3, [r2, #112]	@ 0x70
 80088dc:	e01c      	b.n	8008918 <HAL_RCC_OscConfig+0x5e0>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	2b05      	cmp	r3, #5
 80088e4:	d10c      	bne.n	8008900 <HAL_RCC_OscConfig+0x5c8>
 80088e6:	4b6f      	ldr	r3, [pc, #444]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 80088e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088ea:	4a6e      	ldr	r2, [pc, #440]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 80088ec:	f043 0304 	orr.w	r3, r3, #4
 80088f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80088f2:	4b6c      	ldr	r3, [pc, #432]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 80088f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088f6:	4a6b      	ldr	r2, [pc, #428]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 80088f8:	f043 0301 	orr.w	r3, r3, #1
 80088fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80088fe:	e00b      	b.n	8008918 <HAL_RCC_OscConfig+0x5e0>
 8008900:	4b68      	ldr	r3, [pc, #416]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 8008902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008904:	4a67      	ldr	r2, [pc, #412]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 8008906:	f023 0301 	bic.w	r3, r3, #1
 800890a:	6713      	str	r3, [r2, #112]	@ 0x70
 800890c:	4b65      	ldr	r3, [pc, #404]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 800890e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008910:	4a64      	ldr	r2, [pc, #400]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 8008912:	f023 0304 	bic.w	r3, r3, #4
 8008916:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	689b      	ldr	r3, [r3, #8]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d015      	beq.n	800894c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008920:	f7fa fd2a 	bl	8003378 <HAL_GetTick>
 8008924:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008926:	e00a      	b.n	800893e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008928:	f7fa fd26 	bl	8003378 <HAL_GetTick>
 800892c:	4602      	mov	r2, r0
 800892e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008930:	1ad3      	subs	r3, r2, r3
 8008932:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008936:	4293      	cmp	r3, r2
 8008938:	d901      	bls.n	800893e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800893a:	2303      	movs	r3, #3
 800893c:	e14e      	b.n	8008bdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800893e:	4b59      	ldr	r3, [pc, #356]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 8008940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008942:	f003 0302 	and.w	r3, r3, #2
 8008946:	2b00      	cmp	r3, #0
 8008948:	d0ee      	beq.n	8008928 <HAL_RCC_OscConfig+0x5f0>
 800894a:	e014      	b.n	8008976 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800894c:	f7fa fd14 	bl	8003378 <HAL_GetTick>
 8008950:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008952:	e00a      	b.n	800896a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008954:	f7fa fd10 	bl	8003378 <HAL_GetTick>
 8008958:	4602      	mov	r2, r0
 800895a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800895c:	1ad3      	subs	r3, r2, r3
 800895e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008962:	4293      	cmp	r3, r2
 8008964:	d901      	bls.n	800896a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008966:	2303      	movs	r3, #3
 8008968:	e138      	b.n	8008bdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800896a:	4b4e      	ldr	r3, [pc, #312]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 800896c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800896e:	f003 0302 	and.w	r3, r3, #2
 8008972:	2b00      	cmp	r3, #0
 8008974:	d1ee      	bne.n	8008954 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800897a:	2b00      	cmp	r3, #0
 800897c:	f000 812d 	beq.w	8008bda <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008980:	4b48      	ldr	r3, [pc, #288]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 8008982:	691b      	ldr	r3, [r3, #16]
 8008984:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008988:	2b18      	cmp	r3, #24
 800898a:	f000 80bd 	beq.w	8008b08 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008992:	2b02      	cmp	r3, #2
 8008994:	f040 809e 	bne.w	8008ad4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008998:	4b42      	ldr	r3, [pc, #264]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a41      	ldr	r2, [pc, #260]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 800899e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80089a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089a4:	f7fa fce8 	bl	8003378 <HAL_GetTick>
 80089a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80089aa:	e008      	b.n	80089be <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089ac:	f7fa fce4 	bl	8003378 <HAL_GetTick>
 80089b0:	4602      	mov	r2, r0
 80089b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b4:	1ad3      	subs	r3, r2, r3
 80089b6:	2b02      	cmp	r3, #2
 80089b8:	d901      	bls.n	80089be <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80089ba:	2303      	movs	r3, #3
 80089bc:	e10e      	b.n	8008bdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80089be:	4b39      	ldr	r3, [pc, #228]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d1f0      	bne.n	80089ac <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80089ca:	4b36      	ldr	r3, [pc, #216]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 80089cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80089ce:	4b37      	ldr	r3, [pc, #220]	@ (8008aac <HAL_RCC_OscConfig+0x774>)
 80089d0:	4013      	ands	r3, r2
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80089da:	0112      	lsls	r2, r2, #4
 80089dc:	430a      	orrs	r2, r1
 80089de:	4931      	ldr	r1, [pc, #196]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 80089e0:	4313      	orrs	r3, r2
 80089e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089e8:	3b01      	subs	r3, #1
 80089ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089f2:	3b01      	subs	r3, #1
 80089f4:	025b      	lsls	r3, r3, #9
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	431a      	orrs	r2, r3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089fe:	3b01      	subs	r3, #1
 8008a00:	041b      	lsls	r3, r3, #16
 8008a02:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008a06:	431a      	orrs	r2, r3
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	061b      	lsls	r3, r3, #24
 8008a10:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008a14:	4923      	ldr	r1, [pc, #140]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 8008a16:	4313      	orrs	r3, r2
 8008a18:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008a1a:	4b22      	ldr	r3, [pc, #136]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 8008a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a1e:	4a21      	ldr	r2, [pc, #132]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 8008a20:	f023 0301 	bic.w	r3, r3, #1
 8008a24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008a26:	4b1f      	ldr	r3, [pc, #124]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 8008a28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a2a:	4b21      	ldr	r3, [pc, #132]	@ (8008ab0 <HAL_RCC_OscConfig+0x778>)
 8008a2c:	4013      	ands	r3, r2
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008a32:	00d2      	lsls	r2, r2, #3
 8008a34:	491b      	ldr	r1, [pc, #108]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 8008a36:	4313      	orrs	r3, r2
 8008a38:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 8008a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a3e:	f023 020c 	bic.w	r2, r3, #12
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a46:	4917      	ldr	r1, [pc, #92]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008a4c:	4b15      	ldr	r3, [pc, #84]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 8008a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a50:	f023 0202 	bic.w	r2, r3, #2
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a58:	4912      	ldr	r1, [pc, #72]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008a5e:	4b11      	ldr	r3, [pc, #68]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 8008a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a62:	4a10      	ldr	r2, [pc, #64]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 8008a64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 8008a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a6e:	4a0d      	ldr	r2, [pc, #52]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 8008a70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008a76:	4b0b      	ldr	r3, [pc, #44]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 8008a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 8008a7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008a80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008a82:	4b08      	ldr	r3, [pc, #32]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 8008a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a86:	4a07      	ldr	r2, [pc, #28]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 8008a88:	f043 0301 	orr.w	r3, r3, #1
 8008a8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a8e:	4b05      	ldr	r3, [pc, #20]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a04      	ldr	r2, [pc, #16]	@ (8008aa4 <HAL_RCC_OscConfig+0x76c>)
 8008a94:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008a98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a9a:	f7fa fc6d 	bl	8003378 <HAL_GetTick>
 8008a9e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008aa0:	e011      	b.n	8008ac6 <HAL_RCC_OscConfig+0x78e>
 8008aa2:	bf00      	nop
 8008aa4:	58024400 	.word	0x58024400
 8008aa8:	58024800 	.word	0x58024800
 8008aac:	fffffc0c 	.word	0xfffffc0c
 8008ab0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ab4:	f7fa fc60 	bl	8003378 <HAL_GetTick>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	d901      	bls.n	8008ac6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008ac2:	2303      	movs	r3, #3
 8008ac4:	e08a      	b.n	8008bdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008ac6:	4b47      	ldr	r3, [pc, #284]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d0f0      	beq.n	8008ab4 <HAL_RCC_OscConfig+0x77c>
 8008ad2:	e082      	b.n	8008bda <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ad4:	4b43      	ldr	r3, [pc, #268]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a42      	ldr	r2, [pc, #264]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008ada:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ae0:	f7fa fc4a 	bl	8003378 <HAL_GetTick>
 8008ae4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ae6:	e008      	b.n	8008afa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ae8:	f7fa fc46 	bl	8003378 <HAL_GetTick>
 8008aec:	4602      	mov	r2, r0
 8008aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af0:	1ad3      	subs	r3, r2, r3
 8008af2:	2b02      	cmp	r3, #2
 8008af4:	d901      	bls.n	8008afa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008af6:	2303      	movs	r3, #3
 8008af8:	e070      	b.n	8008bdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008afa:	4b3a      	ldr	r3, [pc, #232]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d1f0      	bne.n	8008ae8 <HAL_RCC_OscConfig+0x7b0>
 8008b06:	e068      	b.n	8008bda <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008b08:	4b36      	ldr	r3, [pc, #216]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b0c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008b0e:	4b35      	ldr	r3, [pc, #212]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b12:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d031      	beq.n	8008b80 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	f003 0203 	and.w	r2, r3, #3
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d12a      	bne.n	8008b80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	091b      	lsrs	r3, r3, #4
 8008b2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d122      	bne.n	8008b80 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b44:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d11a      	bne.n	8008b80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	0a5b      	lsrs	r3, r3, #9
 8008b4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b56:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d111      	bne.n	8008b80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	0c1b      	lsrs	r3, r3, #16
 8008b60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b68:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d108      	bne.n	8008b80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	0e1b      	lsrs	r3, r3, #24
 8008b72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b7a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d001      	beq.n	8008b84 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	e02b      	b.n	8008bdc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008b84:	4b17      	ldr	r3, [pc, #92]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008b86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b88:	08db      	lsrs	r3, r3, #3
 8008b8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b8e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b94:	693a      	ldr	r2, [r7, #16]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d01f      	beq.n	8008bda <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008b9a:	4b12      	ldr	r3, [pc, #72]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b9e:	4a11      	ldr	r2, [pc, #68]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008ba0:	f023 0301 	bic.w	r3, r3, #1
 8008ba4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008ba6:	f7fa fbe7 	bl	8003378 <HAL_GetTick>
 8008baa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008bac:	bf00      	nop
 8008bae:	f7fa fbe3 	bl	8003378 <HAL_GetTick>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d0f9      	beq.n	8008bae <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008bba:	4b0a      	ldr	r3, [pc, #40]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008bbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8008be8 <HAL_RCC_OscConfig+0x8b0>)
 8008bc0:	4013      	ands	r3, r2
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008bc6:	00d2      	lsls	r2, r2, #3
 8008bc8:	4906      	ldr	r1, [pc, #24]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008bce:	4b05      	ldr	r3, [pc, #20]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bd2:	4a04      	ldr	r2, [pc, #16]	@ (8008be4 <HAL_RCC_OscConfig+0x8ac>)
 8008bd4:	f043 0301 	orr.w	r3, r3, #1
 8008bd8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008bda:	2300      	movs	r3, #0
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3730      	adds	r7, #48	@ 0x30
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}
 8008be4:	58024400 	.word	0x58024400
 8008be8:	ffff0007 	.word	0xffff0007

08008bec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b086      	sub	sp, #24
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d101      	bne.n	8008c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	e19c      	b.n	8008f3a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008c00:	4b8a      	ldr	r3, [pc, #552]	@ (8008e2c <HAL_RCC_ClockConfig+0x240>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f003 030f 	and.w	r3, r3, #15
 8008c08:	683a      	ldr	r2, [r7, #0]
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d910      	bls.n	8008c30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c0e:	4b87      	ldr	r3, [pc, #540]	@ (8008e2c <HAL_RCC_ClockConfig+0x240>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f023 020f 	bic.w	r2, r3, #15
 8008c16:	4985      	ldr	r1, [pc, #532]	@ (8008e2c <HAL_RCC_ClockConfig+0x240>)
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c1e:	4b83      	ldr	r3, [pc, #524]	@ (8008e2c <HAL_RCC_ClockConfig+0x240>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f003 030f 	and.w	r3, r3, #15
 8008c26:	683a      	ldr	r2, [r7, #0]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d001      	beq.n	8008c30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e184      	b.n	8008f3a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f003 0304 	and.w	r3, r3, #4
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d010      	beq.n	8008c5e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	691a      	ldr	r2, [r3, #16]
 8008c40:	4b7b      	ldr	r3, [pc, #492]	@ (8008e30 <HAL_RCC_ClockConfig+0x244>)
 8008c42:	699b      	ldr	r3, [r3, #24]
 8008c44:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d908      	bls.n	8008c5e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008c4c:	4b78      	ldr	r3, [pc, #480]	@ (8008e30 <HAL_RCC_ClockConfig+0x244>)
 8008c4e:	699b      	ldr	r3, [r3, #24]
 8008c50:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	691b      	ldr	r3, [r3, #16]
 8008c58:	4975      	ldr	r1, [pc, #468]	@ (8008e30 <HAL_RCC_ClockConfig+0x244>)
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f003 0308 	and.w	r3, r3, #8
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d010      	beq.n	8008c8c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	695a      	ldr	r2, [r3, #20]
 8008c6e:	4b70      	ldr	r3, [pc, #448]	@ (8008e30 <HAL_RCC_ClockConfig+0x244>)
 8008c70:	69db      	ldr	r3, [r3, #28]
 8008c72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d908      	bls.n	8008c8c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008c7a:	4b6d      	ldr	r3, [pc, #436]	@ (8008e30 <HAL_RCC_ClockConfig+0x244>)
 8008c7c:	69db      	ldr	r3, [r3, #28]
 8008c7e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	695b      	ldr	r3, [r3, #20]
 8008c86:	496a      	ldr	r1, [pc, #424]	@ (8008e30 <HAL_RCC_ClockConfig+0x244>)
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 0310 	and.w	r3, r3, #16
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d010      	beq.n	8008cba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	699a      	ldr	r2, [r3, #24]
 8008c9c:	4b64      	ldr	r3, [pc, #400]	@ (8008e30 <HAL_RCC_ClockConfig+0x244>)
 8008c9e:	69db      	ldr	r3, [r3, #28]
 8008ca0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d908      	bls.n	8008cba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008ca8:	4b61      	ldr	r3, [pc, #388]	@ (8008e30 <HAL_RCC_ClockConfig+0x244>)
 8008caa:	69db      	ldr	r3, [r3, #28]
 8008cac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	699b      	ldr	r3, [r3, #24]
 8008cb4:	495e      	ldr	r1, [pc, #376]	@ (8008e30 <HAL_RCC_ClockConfig+0x244>)
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f003 0320 	and.w	r3, r3, #32
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d010      	beq.n	8008ce8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	69da      	ldr	r2, [r3, #28]
 8008cca:	4b59      	ldr	r3, [pc, #356]	@ (8008e30 <HAL_RCC_ClockConfig+0x244>)
 8008ccc:	6a1b      	ldr	r3, [r3, #32]
 8008cce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d908      	bls.n	8008ce8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008cd6:	4b56      	ldr	r3, [pc, #344]	@ (8008e30 <HAL_RCC_ClockConfig+0x244>)
 8008cd8:	6a1b      	ldr	r3, [r3, #32]
 8008cda:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	69db      	ldr	r3, [r3, #28]
 8008ce2:	4953      	ldr	r1, [pc, #332]	@ (8008e30 <HAL_RCC_ClockConfig+0x244>)
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f003 0302 	and.w	r3, r3, #2
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d010      	beq.n	8008d16 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	68da      	ldr	r2, [r3, #12]
 8008cf8:	4b4d      	ldr	r3, [pc, #308]	@ (8008e30 <HAL_RCC_ClockConfig+0x244>)
 8008cfa:	699b      	ldr	r3, [r3, #24]
 8008cfc:	f003 030f 	and.w	r3, r3, #15
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d908      	bls.n	8008d16 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d04:	4b4a      	ldr	r3, [pc, #296]	@ (8008e30 <HAL_RCC_ClockConfig+0x244>)
 8008d06:	699b      	ldr	r3, [r3, #24]
 8008d08:	f023 020f 	bic.w	r2, r3, #15
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	4947      	ldr	r1, [pc, #284]	@ (8008e30 <HAL_RCC_ClockConfig+0x244>)
 8008d12:	4313      	orrs	r3, r2
 8008d14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f003 0301 	and.w	r3, r3, #1
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d055      	beq.n	8008dce <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008d22:	4b43      	ldr	r3, [pc, #268]	@ (8008e30 <HAL_RCC_ClockConfig+0x244>)
 8008d24:	699b      	ldr	r3, [r3, #24]
 8008d26:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	4940      	ldr	r1, [pc, #256]	@ (8008e30 <HAL_RCC_ClockConfig+0x244>)
 8008d30:	4313      	orrs	r3, r2
 8008d32:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	2b02      	cmp	r3, #2
 8008d3a:	d107      	bne.n	8008d4c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d3c:	4b3c      	ldr	r3, [pc, #240]	@ (8008e30 <HAL_RCC_ClockConfig+0x244>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d121      	bne.n	8008d8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e0f6      	b.n	8008f3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	2b03      	cmp	r3, #3
 8008d52:	d107      	bne.n	8008d64 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d54:	4b36      	ldr	r3, [pc, #216]	@ (8008e30 <HAL_RCC_ClockConfig+0x244>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d115      	bne.n	8008d8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d60:	2301      	movs	r3, #1
 8008d62:	e0ea      	b.n	8008f3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d107      	bne.n	8008d7c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008d6c:	4b30      	ldr	r3, [pc, #192]	@ (8008e30 <HAL_RCC_ClockConfig+0x244>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d109      	bne.n	8008d8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e0de      	b.n	8008f3a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d7c:	4b2c      	ldr	r3, [pc, #176]	@ (8008e30 <HAL_RCC_ClockConfig+0x244>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f003 0304 	and.w	r3, r3, #4
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d101      	bne.n	8008d8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e0d6      	b.n	8008f3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008d8c:	4b28      	ldr	r3, [pc, #160]	@ (8008e30 <HAL_RCC_ClockConfig+0x244>)
 8008d8e:	691b      	ldr	r3, [r3, #16]
 8008d90:	f023 0207 	bic.w	r2, r3, #7
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	4925      	ldr	r1, [pc, #148]	@ (8008e30 <HAL_RCC_ClockConfig+0x244>)
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d9e:	f7fa faeb 	bl	8003378 <HAL_GetTick>
 8008da2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008da4:	e00a      	b.n	8008dbc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008da6:	f7fa fae7 	bl	8003378 <HAL_GetTick>
 8008daa:	4602      	mov	r2, r0
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	1ad3      	subs	r3, r2, r3
 8008db0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d901      	bls.n	8008dbc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008db8:	2303      	movs	r3, #3
 8008dba:	e0be      	b.n	8008f3a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008dbc:	4b1c      	ldr	r3, [pc, #112]	@ (8008e30 <HAL_RCC_ClockConfig+0x244>)
 8008dbe:	691b      	ldr	r3, [r3, #16]
 8008dc0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	00db      	lsls	r3, r3, #3
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d1eb      	bne.n	8008da6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f003 0302 	and.w	r3, r3, #2
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d010      	beq.n	8008dfc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	68da      	ldr	r2, [r3, #12]
 8008dde:	4b14      	ldr	r3, [pc, #80]	@ (8008e30 <HAL_RCC_ClockConfig+0x244>)
 8008de0:	699b      	ldr	r3, [r3, #24]
 8008de2:	f003 030f 	and.w	r3, r3, #15
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d208      	bcs.n	8008dfc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008dea:	4b11      	ldr	r3, [pc, #68]	@ (8008e30 <HAL_RCC_ClockConfig+0x244>)
 8008dec:	699b      	ldr	r3, [r3, #24]
 8008dee:	f023 020f 	bic.w	r2, r3, #15
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	68db      	ldr	r3, [r3, #12]
 8008df6:	490e      	ldr	r1, [pc, #56]	@ (8008e30 <HAL_RCC_ClockConfig+0x244>)
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8008e2c <HAL_RCC_ClockConfig+0x240>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f003 030f 	and.w	r3, r3, #15
 8008e04:	683a      	ldr	r2, [r7, #0]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d214      	bcs.n	8008e34 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e0a:	4b08      	ldr	r3, [pc, #32]	@ (8008e2c <HAL_RCC_ClockConfig+0x240>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f023 020f 	bic.w	r2, r3, #15
 8008e12:	4906      	ldr	r1, [pc, #24]	@ (8008e2c <HAL_RCC_ClockConfig+0x240>)
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e1a:	4b04      	ldr	r3, [pc, #16]	@ (8008e2c <HAL_RCC_ClockConfig+0x240>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f003 030f 	and.w	r3, r3, #15
 8008e22:	683a      	ldr	r2, [r7, #0]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d005      	beq.n	8008e34 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	e086      	b.n	8008f3a <HAL_RCC_ClockConfig+0x34e>
 8008e2c:	52002000 	.word	0x52002000
 8008e30:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f003 0304 	and.w	r3, r3, #4
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d010      	beq.n	8008e62 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	691a      	ldr	r2, [r3, #16]
 8008e44:	4b3f      	ldr	r3, [pc, #252]	@ (8008f44 <HAL_RCC_ClockConfig+0x358>)
 8008e46:	699b      	ldr	r3, [r3, #24]
 8008e48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d208      	bcs.n	8008e62 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008e50:	4b3c      	ldr	r3, [pc, #240]	@ (8008f44 <HAL_RCC_ClockConfig+0x358>)
 8008e52:	699b      	ldr	r3, [r3, #24]
 8008e54:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	4939      	ldr	r1, [pc, #228]	@ (8008f44 <HAL_RCC_ClockConfig+0x358>)
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f003 0308 	and.w	r3, r3, #8
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d010      	beq.n	8008e90 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	695a      	ldr	r2, [r3, #20]
 8008e72:	4b34      	ldr	r3, [pc, #208]	@ (8008f44 <HAL_RCC_ClockConfig+0x358>)
 8008e74:	69db      	ldr	r3, [r3, #28]
 8008e76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d208      	bcs.n	8008e90 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008e7e:	4b31      	ldr	r3, [pc, #196]	@ (8008f44 <HAL_RCC_ClockConfig+0x358>)
 8008e80:	69db      	ldr	r3, [r3, #28]
 8008e82:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	695b      	ldr	r3, [r3, #20]
 8008e8a:	492e      	ldr	r1, [pc, #184]	@ (8008f44 <HAL_RCC_ClockConfig+0x358>)
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f003 0310 	and.w	r3, r3, #16
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d010      	beq.n	8008ebe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	699a      	ldr	r2, [r3, #24]
 8008ea0:	4b28      	ldr	r3, [pc, #160]	@ (8008f44 <HAL_RCC_ClockConfig+0x358>)
 8008ea2:	69db      	ldr	r3, [r3, #28]
 8008ea4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d208      	bcs.n	8008ebe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008eac:	4b25      	ldr	r3, [pc, #148]	@ (8008f44 <HAL_RCC_ClockConfig+0x358>)
 8008eae:	69db      	ldr	r3, [r3, #28]
 8008eb0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	699b      	ldr	r3, [r3, #24]
 8008eb8:	4922      	ldr	r1, [pc, #136]	@ (8008f44 <HAL_RCC_ClockConfig+0x358>)
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f003 0320 	and.w	r3, r3, #32
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d010      	beq.n	8008eec <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	69da      	ldr	r2, [r3, #28]
 8008ece:	4b1d      	ldr	r3, [pc, #116]	@ (8008f44 <HAL_RCC_ClockConfig+0x358>)
 8008ed0:	6a1b      	ldr	r3, [r3, #32]
 8008ed2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d208      	bcs.n	8008eec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008eda:	4b1a      	ldr	r3, [pc, #104]	@ (8008f44 <HAL_RCC_ClockConfig+0x358>)
 8008edc:	6a1b      	ldr	r3, [r3, #32]
 8008ede:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	69db      	ldr	r3, [r3, #28]
 8008ee6:	4917      	ldr	r1, [pc, #92]	@ (8008f44 <HAL_RCC_ClockConfig+0x358>)
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008eec:	f000 f834 	bl	8008f58 <HAL_RCC_GetSysClockFreq>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	4b14      	ldr	r3, [pc, #80]	@ (8008f44 <HAL_RCC_ClockConfig+0x358>)
 8008ef4:	699b      	ldr	r3, [r3, #24]
 8008ef6:	0a1b      	lsrs	r3, r3, #8
 8008ef8:	f003 030f 	and.w	r3, r3, #15
 8008efc:	4912      	ldr	r1, [pc, #72]	@ (8008f48 <HAL_RCC_ClockConfig+0x35c>)
 8008efe:	5ccb      	ldrb	r3, [r1, r3]
 8008f00:	f003 031f 	and.w	r3, r3, #31
 8008f04:	fa22 f303 	lsr.w	r3, r2, r3
 8008f08:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8008f44 <HAL_RCC_ClockConfig+0x358>)
 8008f0c:	699b      	ldr	r3, [r3, #24]
 8008f0e:	f003 030f 	and.w	r3, r3, #15
 8008f12:	4a0d      	ldr	r2, [pc, #52]	@ (8008f48 <HAL_RCC_ClockConfig+0x35c>)
 8008f14:	5cd3      	ldrb	r3, [r2, r3]
 8008f16:	f003 031f 	and.w	r3, r3, #31
 8008f1a:	693a      	ldr	r2, [r7, #16]
 8008f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f20:	4a0a      	ldr	r2, [pc, #40]	@ (8008f4c <HAL_RCC_ClockConfig+0x360>)
 8008f22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008f24:	4a0a      	ldr	r2, [pc, #40]	@ (8008f50 <HAL_RCC_ClockConfig+0x364>)
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8008f54 <HAL_RCC_ClockConfig+0x368>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7fa f9d8 	bl	80032e4 <HAL_InitTick>
 8008f34:	4603      	mov	r3, r0
 8008f36:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3718      	adds	r7, #24
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	58024400 	.word	0x58024400
 8008f48:	08012780 	.word	0x08012780
 8008f4c:	24000004 	.word	0x24000004
 8008f50:	24000000 	.word	0x24000000
 8008f54:	24000024 	.word	0x24000024

08008f58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b089      	sub	sp, #36	@ 0x24
 8008f5c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008f5e:	4bb3      	ldr	r3, [pc, #716]	@ (800922c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f60:	691b      	ldr	r3, [r3, #16]
 8008f62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f66:	2b18      	cmp	r3, #24
 8008f68:	f200 8155 	bhi.w	8009216 <HAL_RCC_GetSysClockFreq+0x2be>
 8008f6c:	a201      	add	r2, pc, #4	@ (adr r2, 8008f74 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f72:	bf00      	nop
 8008f74:	08008fd9 	.word	0x08008fd9
 8008f78:	08009217 	.word	0x08009217
 8008f7c:	08009217 	.word	0x08009217
 8008f80:	08009217 	.word	0x08009217
 8008f84:	08009217 	.word	0x08009217
 8008f88:	08009217 	.word	0x08009217
 8008f8c:	08009217 	.word	0x08009217
 8008f90:	08009217 	.word	0x08009217
 8008f94:	08008fff 	.word	0x08008fff
 8008f98:	08009217 	.word	0x08009217
 8008f9c:	08009217 	.word	0x08009217
 8008fa0:	08009217 	.word	0x08009217
 8008fa4:	08009217 	.word	0x08009217
 8008fa8:	08009217 	.word	0x08009217
 8008fac:	08009217 	.word	0x08009217
 8008fb0:	08009217 	.word	0x08009217
 8008fb4:	08009005 	.word	0x08009005
 8008fb8:	08009217 	.word	0x08009217
 8008fbc:	08009217 	.word	0x08009217
 8008fc0:	08009217 	.word	0x08009217
 8008fc4:	08009217 	.word	0x08009217
 8008fc8:	08009217 	.word	0x08009217
 8008fcc:	08009217 	.word	0x08009217
 8008fd0:	08009217 	.word	0x08009217
 8008fd4:	0800900b 	.word	0x0800900b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fd8:	4b94      	ldr	r3, [pc, #592]	@ (800922c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f003 0320 	and.w	r3, r3, #32
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d009      	beq.n	8008ff8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008fe4:	4b91      	ldr	r3, [pc, #580]	@ (800922c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	08db      	lsrs	r3, r3, #3
 8008fea:	f003 0303 	and.w	r3, r3, #3
 8008fee:	4a90      	ldr	r2, [pc, #576]	@ (8009230 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ff4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008ff6:	e111      	b.n	800921c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008ff8:	4b8d      	ldr	r3, [pc, #564]	@ (8009230 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008ffa:	61bb      	str	r3, [r7, #24]
      break;
 8008ffc:	e10e      	b.n	800921c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008ffe:	4b8d      	ldr	r3, [pc, #564]	@ (8009234 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009000:	61bb      	str	r3, [r7, #24]
      break;
 8009002:	e10b      	b.n	800921c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009004:	4b8c      	ldr	r3, [pc, #560]	@ (8009238 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009006:	61bb      	str	r3, [r7, #24]
      break;
 8009008:	e108      	b.n	800921c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800900a:	4b88      	ldr	r3, [pc, #544]	@ (800922c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800900c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800900e:	f003 0303 	and.w	r3, r3, #3
 8009012:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009014:	4b85      	ldr	r3, [pc, #532]	@ (800922c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009018:	091b      	lsrs	r3, r3, #4
 800901a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800901e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009020:	4b82      	ldr	r3, [pc, #520]	@ (800922c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009024:	f003 0301 	and.w	r3, r3, #1
 8009028:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800902a:	4b80      	ldr	r3, [pc, #512]	@ (800922c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800902c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800902e:	08db      	lsrs	r3, r3, #3
 8009030:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009034:	68fa      	ldr	r2, [r7, #12]
 8009036:	fb02 f303 	mul.w	r3, r2, r3
 800903a:	ee07 3a90 	vmov	s15, r3
 800903e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009042:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	2b00      	cmp	r3, #0
 800904a:	f000 80e1 	beq.w	8009210 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	2b02      	cmp	r3, #2
 8009052:	f000 8083 	beq.w	800915c <HAL_RCC_GetSysClockFreq+0x204>
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	2b02      	cmp	r3, #2
 800905a:	f200 80a1 	bhi.w	80091a0 <HAL_RCC_GetSysClockFreq+0x248>
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d003      	beq.n	800906c <HAL_RCC_GetSysClockFreq+0x114>
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	2b01      	cmp	r3, #1
 8009068:	d056      	beq.n	8009118 <HAL_RCC_GetSysClockFreq+0x1c0>
 800906a:	e099      	b.n	80091a0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800906c:	4b6f      	ldr	r3, [pc, #444]	@ (800922c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f003 0320 	and.w	r3, r3, #32
 8009074:	2b00      	cmp	r3, #0
 8009076:	d02d      	beq.n	80090d4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009078:	4b6c      	ldr	r3, [pc, #432]	@ (800922c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	08db      	lsrs	r3, r3, #3
 800907e:	f003 0303 	and.w	r3, r3, #3
 8009082:	4a6b      	ldr	r2, [pc, #428]	@ (8009230 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009084:	fa22 f303 	lsr.w	r3, r2, r3
 8009088:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	ee07 3a90 	vmov	s15, r3
 8009090:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	ee07 3a90 	vmov	s15, r3
 800909a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800909e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090a2:	4b62      	ldr	r3, [pc, #392]	@ (800922c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090aa:	ee07 3a90 	vmov	s15, r3
 80090ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80090b6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800923c <HAL_RCC_GetSysClockFreq+0x2e4>
 80090ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090ce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80090d2:	e087      	b.n	80091e4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	ee07 3a90 	vmov	s15, r3
 80090da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090de:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009240 <HAL_RCC_GetSysClockFreq+0x2e8>
 80090e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090e6:	4b51      	ldr	r3, [pc, #324]	@ (800922c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ee:	ee07 3a90 	vmov	s15, r3
 80090f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80090fa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800923c <HAL_RCC_GetSysClockFreq+0x2e4>
 80090fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009106:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800910a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800910e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009112:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009116:	e065      	b.n	80091e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	ee07 3a90 	vmov	s15, r3
 800911e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009122:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009244 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800912a:	4b40      	ldr	r3, [pc, #256]	@ (800922c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800912c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800912e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009132:	ee07 3a90 	vmov	s15, r3
 8009136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800913a:	ed97 6a02 	vldr	s12, [r7, #8]
 800913e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800923c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800914a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800914e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009156:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800915a:	e043      	b.n	80091e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	ee07 3a90 	vmov	s15, r3
 8009162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009166:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009248 <HAL_RCC_GetSysClockFreq+0x2f0>
 800916a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800916e:	4b2f      	ldr	r3, [pc, #188]	@ (800922c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009176:	ee07 3a90 	vmov	s15, r3
 800917a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800917e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009182:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800923c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800918a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800918e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800919a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800919e:	e021      	b.n	80091e4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	ee07 3a90 	vmov	s15, r3
 80091a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091aa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009244 <HAL_RCC_GetSysClockFreq+0x2ec>
 80091ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091b2:	4b1e      	ldr	r3, [pc, #120]	@ (800922c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091ba:	ee07 3a90 	vmov	s15, r3
 80091be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80091c6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800923c <HAL_RCC_GetSysClockFreq+0x2e4>
 80091ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80091e2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80091e4:	4b11      	ldr	r3, [pc, #68]	@ (800922c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091e8:	0a5b      	lsrs	r3, r3, #9
 80091ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091ee:	3301      	adds	r3, #1
 80091f0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	ee07 3a90 	vmov	s15, r3
 80091f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80091fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009200:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009204:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009208:	ee17 3a90 	vmov	r3, s15
 800920c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800920e:	e005      	b.n	800921c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009210:	2300      	movs	r3, #0
 8009212:	61bb      	str	r3, [r7, #24]
      break;
 8009214:	e002      	b.n	800921c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009216:	4b07      	ldr	r3, [pc, #28]	@ (8009234 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009218:	61bb      	str	r3, [r7, #24]
      break;
 800921a:	bf00      	nop
  }

  return sysclockfreq;
 800921c:	69bb      	ldr	r3, [r7, #24]
}
 800921e:	4618      	mov	r0, r3
 8009220:	3724      	adds	r7, #36	@ 0x24
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr
 800922a:	bf00      	nop
 800922c:	58024400 	.word	0x58024400
 8009230:	03d09000 	.word	0x03d09000
 8009234:	003d0900 	.word	0x003d0900
 8009238:	017d7840 	.word	0x017d7840
 800923c:	46000000 	.word	0x46000000
 8009240:	4c742400 	.word	0x4c742400
 8009244:	4a742400 	.word	0x4a742400
 8009248:	4bbebc20 	.word	0x4bbebc20

0800924c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009252:	f7ff fe81 	bl	8008f58 <HAL_RCC_GetSysClockFreq>
 8009256:	4602      	mov	r2, r0
 8009258:	4b10      	ldr	r3, [pc, #64]	@ (800929c <HAL_RCC_GetHCLKFreq+0x50>)
 800925a:	699b      	ldr	r3, [r3, #24]
 800925c:	0a1b      	lsrs	r3, r3, #8
 800925e:	f003 030f 	and.w	r3, r3, #15
 8009262:	490f      	ldr	r1, [pc, #60]	@ (80092a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8009264:	5ccb      	ldrb	r3, [r1, r3]
 8009266:	f003 031f 	and.w	r3, r3, #31
 800926a:	fa22 f303 	lsr.w	r3, r2, r3
 800926e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009270:	4b0a      	ldr	r3, [pc, #40]	@ (800929c <HAL_RCC_GetHCLKFreq+0x50>)
 8009272:	699b      	ldr	r3, [r3, #24]
 8009274:	f003 030f 	and.w	r3, r3, #15
 8009278:	4a09      	ldr	r2, [pc, #36]	@ (80092a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800927a:	5cd3      	ldrb	r3, [r2, r3]
 800927c:	f003 031f 	and.w	r3, r3, #31
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	fa22 f303 	lsr.w	r3, r2, r3
 8009286:	4a07      	ldr	r2, [pc, #28]	@ (80092a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8009288:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800928a:	4a07      	ldr	r2, [pc, #28]	@ (80092a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009290:	4b04      	ldr	r3, [pc, #16]	@ (80092a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8009292:	681b      	ldr	r3, [r3, #0]
}
 8009294:	4618      	mov	r0, r3
 8009296:	3708      	adds	r7, #8
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}
 800929c:	58024400 	.word	0x58024400
 80092a0:	08012780 	.word	0x08012780
 80092a4:	24000004 	.word	0x24000004
 80092a8:	24000000 	.word	0x24000000

080092ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80092b0:	f7ff ffcc 	bl	800924c <HAL_RCC_GetHCLKFreq>
 80092b4:	4602      	mov	r2, r0
 80092b6:	4b06      	ldr	r3, [pc, #24]	@ (80092d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80092b8:	69db      	ldr	r3, [r3, #28]
 80092ba:	091b      	lsrs	r3, r3, #4
 80092bc:	f003 0307 	and.w	r3, r3, #7
 80092c0:	4904      	ldr	r1, [pc, #16]	@ (80092d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80092c2:	5ccb      	ldrb	r3, [r1, r3]
 80092c4:	f003 031f 	and.w	r3, r3, #31
 80092c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	bd80      	pop	{r7, pc}
 80092d0:	58024400 	.word	0x58024400
 80092d4:	08012780 	.word	0x08012780

080092d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80092dc:	f7ff ffb6 	bl	800924c <HAL_RCC_GetHCLKFreq>
 80092e0:	4602      	mov	r2, r0
 80092e2:	4b06      	ldr	r3, [pc, #24]	@ (80092fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80092e4:	69db      	ldr	r3, [r3, #28]
 80092e6:	0a1b      	lsrs	r3, r3, #8
 80092e8:	f003 0307 	and.w	r3, r3, #7
 80092ec:	4904      	ldr	r1, [pc, #16]	@ (8009300 <HAL_RCC_GetPCLK2Freq+0x28>)
 80092ee:	5ccb      	ldrb	r3, [r1, r3]
 80092f0:	f003 031f 	and.w	r3, r3, #31
 80092f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	58024400 	.word	0x58024400
 8009300:	08012780 	.word	0x08012780

08009304 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009308:	b0ca      	sub	sp, #296	@ 0x128
 800930a:	af00      	add	r7, sp, #0
 800930c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009310:	2300      	movs	r3, #0
 8009312:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009316:	2300      	movs	r3, #0
 8009318:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800931c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009324:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009328:	2500      	movs	r5, #0
 800932a:	ea54 0305 	orrs.w	r3, r4, r5
 800932e:	d049      	beq.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009334:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009336:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800933a:	d02f      	beq.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800933c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009340:	d828      	bhi.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009342:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009346:	d01a      	beq.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009348:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800934c:	d822      	bhi.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800934e:	2b00      	cmp	r3, #0
 8009350:	d003      	beq.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009352:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009356:	d007      	beq.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009358:	e01c      	b.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800935a:	4bb8      	ldr	r3, [pc, #736]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800935c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800935e:	4ab7      	ldr	r2, [pc, #732]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009360:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009364:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009366:	e01a      	b.n	800939e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800936c:	3308      	adds	r3, #8
 800936e:	2102      	movs	r1, #2
 8009370:	4618      	mov	r0, r3
 8009372:	f002 fb61 	bl	800ba38 <RCCEx_PLL2_Config>
 8009376:	4603      	mov	r3, r0
 8009378:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800937c:	e00f      	b.n	800939e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800937e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009382:	3328      	adds	r3, #40	@ 0x28
 8009384:	2102      	movs	r1, #2
 8009386:	4618      	mov	r0, r3
 8009388:	f002 fc08 	bl	800bb9c <RCCEx_PLL3_Config>
 800938c:	4603      	mov	r3, r0
 800938e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009392:	e004      	b.n	800939e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009394:	2301      	movs	r3, #1
 8009396:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800939a:	e000      	b.n	800939e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800939c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800939e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d10a      	bne.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80093a6:	4ba5      	ldr	r3, [pc, #660]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80093a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093aa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80093ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093b4:	4aa1      	ldr	r2, [pc, #644]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80093b6:	430b      	orrs	r3, r1
 80093b8:	6513      	str	r3, [r2, #80]	@ 0x50
 80093ba:	e003      	b.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80093c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093cc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80093d0:	f04f 0900 	mov.w	r9, #0
 80093d4:	ea58 0309 	orrs.w	r3, r8, r9
 80093d8:	d047      	beq.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80093da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093e0:	2b04      	cmp	r3, #4
 80093e2:	d82a      	bhi.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80093e4:	a201      	add	r2, pc, #4	@ (adr r2, 80093ec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80093e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ea:	bf00      	nop
 80093ec:	08009401 	.word	0x08009401
 80093f0:	0800940f 	.word	0x0800940f
 80093f4:	08009425 	.word	0x08009425
 80093f8:	08009443 	.word	0x08009443
 80093fc:	08009443 	.word	0x08009443
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009400:	4b8e      	ldr	r3, [pc, #568]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009404:	4a8d      	ldr	r2, [pc, #564]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009406:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800940a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800940c:	e01a      	b.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800940e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009412:	3308      	adds	r3, #8
 8009414:	2100      	movs	r1, #0
 8009416:	4618      	mov	r0, r3
 8009418:	f002 fb0e 	bl	800ba38 <RCCEx_PLL2_Config>
 800941c:	4603      	mov	r3, r0
 800941e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009422:	e00f      	b.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009428:	3328      	adds	r3, #40	@ 0x28
 800942a:	2100      	movs	r1, #0
 800942c:	4618      	mov	r0, r3
 800942e:	f002 fbb5 	bl	800bb9c <RCCEx_PLL3_Config>
 8009432:	4603      	mov	r3, r0
 8009434:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009438:	e004      	b.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800943a:	2301      	movs	r3, #1
 800943c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009440:	e000      	b.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009442:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009444:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009448:	2b00      	cmp	r3, #0
 800944a:	d10a      	bne.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800944c:	4b7b      	ldr	r3, [pc, #492]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800944e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009450:	f023 0107 	bic.w	r1, r3, #7
 8009454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800945a:	4a78      	ldr	r2, [pc, #480]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800945c:	430b      	orrs	r3, r1
 800945e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009460:	e003      	b.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009462:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009466:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800946a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800946e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009472:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8009476:	f04f 0b00 	mov.w	fp, #0
 800947a:	ea5a 030b 	orrs.w	r3, sl, fp
 800947e:	d04c      	beq.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009486:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800948a:	d030      	beq.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800948c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009490:	d829      	bhi.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009492:	2bc0      	cmp	r3, #192	@ 0xc0
 8009494:	d02d      	beq.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009496:	2bc0      	cmp	r3, #192	@ 0xc0
 8009498:	d825      	bhi.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800949a:	2b80      	cmp	r3, #128	@ 0x80
 800949c:	d018      	beq.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800949e:	2b80      	cmp	r3, #128	@ 0x80
 80094a0:	d821      	bhi.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d002      	beq.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80094a6:	2b40      	cmp	r3, #64	@ 0x40
 80094a8:	d007      	beq.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80094aa:	e01c      	b.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094ac:	4b63      	ldr	r3, [pc, #396]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80094ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094b0:	4a62      	ldr	r2, [pc, #392]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80094b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80094b8:	e01c      	b.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80094ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094be:	3308      	adds	r3, #8
 80094c0:	2100      	movs	r1, #0
 80094c2:	4618      	mov	r0, r3
 80094c4:	f002 fab8 	bl	800ba38 <RCCEx_PLL2_Config>
 80094c8:	4603      	mov	r3, r0
 80094ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80094ce:	e011      	b.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80094d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094d4:	3328      	adds	r3, #40	@ 0x28
 80094d6:	2100      	movs	r1, #0
 80094d8:	4618      	mov	r0, r3
 80094da:	f002 fb5f 	bl	800bb9c <RCCEx_PLL3_Config>
 80094de:	4603      	mov	r3, r0
 80094e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80094e4:	e006      	b.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094e6:	2301      	movs	r3, #1
 80094e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80094ec:	e002      	b.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80094ee:	bf00      	nop
 80094f0:	e000      	b.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80094f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d10a      	bne.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80094fc:	4b4f      	ldr	r3, [pc, #316]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80094fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009500:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800950a:	4a4c      	ldr	r2, [pc, #304]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800950c:	430b      	orrs	r3, r1
 800950e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009510:	e003      	b.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009512:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009516:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800951a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800951e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009522:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8009526:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800952a:	2300      	movs	r3, #0
 800952c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8009530:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8009534:	460b      	mov	r3, r1
 8009536:	4313      	orrs	r3, r2
 8009538:	d053      	beq.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800953a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800953e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009542:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009546:	d035      	beq.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009548:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800954c:	d82e      	bhi.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800954e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009552:	d031      	beq.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009554:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009558:	d828      	bhi.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800955a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800955e:	d01a      	beq.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009560:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009564:	d822      	bhi.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009566:	2b00      	cmp	r3, #0
 8009568:	d003      	beq.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800956a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800956e:	d007      	beq.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009570:	e01c      	b.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009572:	4b32      	ldr	r3, [pc, #200]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009576:	4a31      	ldr	r2, [pc, #196]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009578:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800957c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800957e:	e01c      	b.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009584:	3308      	adds	r3, #8
 8009586:	2100      	movs	r1, #0
 8009588:	4618      	mov	r0, r3
 800958a:	f002 fa55 	bl	800ba38 <RCCEx_PLL2_Config>
 800958e:	4603      	mov	r3, r0
 8009590:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009594:	e011      	b.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800959a:	3328      	adds	r3, #40	@ 0x28
 800959c:	2100      	movs	r1, #0
 800959e:	4618      	mov	r0, r3
 80095a0:	f002 fafc 	bl	800bb9c <RCCEx_PLL3_Config>
 80095a4:	4603      	mov	r3, r0
 80095a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80095aa:	e006      	b.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80095ac:	2301      	movs	r3, #1
 80095ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80095b2:	e002      	b.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80095b4:	bf00      	nop
 80095b6:	e000      	b.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80095b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d10b      	bne.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80095c2:	4b1e      	ldr	r3, [pc, #120]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80095c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095c6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80095ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80095d2:	4a1a      	ldr	r2, [pc, #104]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80095d4:	430b      	orrs	r3, r1
 80095d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80095d8:	e003      	b.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80095e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ea:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80095ee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80095f2:	2300      	movs	r3, #0
 80095f4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80095f8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80095fc:	460b      	mov	r3, r1
 80095fe:	4313      	orrs	r3, r2
 8009600:	d056      	beq.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009606:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800960a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800960e:	d038      	beq.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009610:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009614:	d831      	bhi.n	800967a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009616:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800961a:	d034      	beq.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800961c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009620:	d82b      	bhi.n	800967a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009622:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009626:	d01d      	beq.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009628:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800962c:	d825      	bhi.n	800967a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800962e:	2b00      	cmp	r3, #0
 8009630:	d006      	beq.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009632:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009636:	d00a      	beq.n	800964e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009638:	e01f      	b.n	800967a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800963a:	bf00      	nop
 800963c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009640:	4ba2      	ldr	r3, [pc, #648]	@ (80098cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009644:	4aa1      	ldr	r2, [pc, #644]	@ (80098cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009646:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800964a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800964c:	e01c      	b.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800964e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009652:	3308      	adds	r3, #8
 8009654:	2100      	movs	r1, #0
 8009656:	4618      	mov	r0, r3
 8009658:	f002 f9ee 	bl	800ba38 <RCCEx_PLL2_Config>
 800965c:	4603      	mov	r3, r0
 800965e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009662:	e011      	b.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009668:	3328      	adds	r3, #40	@ 0x28
 800966a:	2100      	movs	r1, #0
 800966c:	4618      	mov	r0, r3
 800966e:	f002 fa95 	bl	800bb9c <RCCEx_PLL3_Config>
 8009672:	4603      	mov	r3, r0
 8009674:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009678:	e006      	b.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800967a:	2301      	movs	r3, #1
 800967c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009680:	e002      	b.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009682:	bf00      	nop
 8009684:	e000      	b.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009686:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009688:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800968c:	2b00      	cmp	r3, #0
 800968e:	d10b      	bne.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009690:	4b8e      	ldr	r3, [pc, #568]	@ (80098cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009694:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800969c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80096a0:	4a8a      	ldr	r2, [pc, #552]	@ (80098cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80096a2:	430b      	orrs	r3, r1
 80096a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80096a6:	e003      	b.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80096b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80096bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80096c0:	2300      	movs	r3, #0
 80096c2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80096c6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80096ca:	460b      	mov	r3, r1
 80096cc:	4313      	orrs	r3, r2
 80096ce:	d03a      	beq.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80096d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096d6:	2b30      	cmp	r3, #48	@ 0x30
 80096d8:	d01f      	beq.n	800971a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80096da:	2b30      	cmp	r3, #48	@ 0x30
 80096dc:	d819      	bhi.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80096de:	2b20      	cmp	r3, #32
 80096e0:	d00c      	beq.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80096e2:	2b20      	cmp	r3, #32
 80096e4:	d815      	bhi.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d019      	beq.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80096ea:	2b10      	cmp	r3, #16
 80096ec:	d111      	bne.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096ee:	4b77      	ldr	r3, [pc, #476]	@ (80098cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80096f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096f2:	4a76      	ldr	r2, [pc, #472]	@ (80098cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80096f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80096f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80096fa:	e011      	b.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80096fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009700:	3308      	adds	r3, #8
 8009702:	2102      	movs	r1, #2
 8009704:	4618      	mov	r0, r3
 8009706:	f002 f997 	bl	800ba38 <RCCEx_PLL2_Config>
 800970a:	4603      	mov	r3, r0
 800970c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009710:	e006      	b.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009712:	2301      	movs	r3, #1
 8009714:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009718:	e002      	b.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800971a:	bf00      	nop
 800971c:	e000      	b.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800971e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009720:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009724:	2b00      	cmp	r3, #0
 8009726:	d10a      	bne.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009728:	4b68      	ldr	r3, [pc, #416]	@ (80098cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800972a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800972c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009736:	4a65      	ldr	r2, [pc, #404]	@ (80098cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009738:	430b      	orrs	r3, r1
 800973a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800973c:	e003      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800973e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009742:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800974a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009752:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009756:	2300      	movs	r3, #0
 8009758:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800975c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009760:	460b      	mov	r3, r1
 8009762:	4313      	orrs	r3, r2
 8009764:	d051      	beq.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800976a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800976c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009770:	d035      	beq.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009772:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009776:	d82e      	bhi.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009778:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800977c:	d031      	beq.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800977e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009782:	d828      	bhi.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009784:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009788:	d01a      	beq.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800978a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800978e:	d822      	bhi.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009790:	2b00      	cmp	r3, #0
 8009792:	d003      	beq.n	800979c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009794:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009798:	d007      	beq.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800979a:	e01c      	b.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800979c:	4b4b      	ldr	r3, [pc, #300]	@ (80098cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800979e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097a0:	4a4a      	ldr	r2, [pc, #296]	@ (80098cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80097a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80097a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80097a8:	e01c      	b.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097ae:	3308      	adds	r3, #8
 80097b0:	2100      	movs	r1, #0
 80097b2:	4618      	mov	r0, r3
 80097b4:	f002 f940 	bl	800ba38 <RCCEx_PLL2_Config>
 80097b8:	4603      	mov	r3, r0
 80097ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80097be:	e011      	b.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80097c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097c4:	3328      	adds	r3, #40	@ 0x28
 80097c6:	2100      	movs	r1, #0
 80097c8:	4618      	mov	r0, r3
 80097ca:	f002 f9e7 	bl	800bb9c <RCCEx_PLL3_Config>
 80097ce:	4603      	mov	r3, r0
 80097d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80097d4:	e006      	b.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097d6:	2301      	movs	r3, #1
 80097d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80097dc:	e002      	b.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80097de:	bf00      	nop
 80097e0:	e000      	b.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80097e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d10a      	bne.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80097ec:	4b37      	ldr	r3, [pc, #220]	@ (80098cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80097ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097f0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80097f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097fa:	4a34      	ldr	r2, [pc, #208]	@ (80098cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80097fc:	430b      	orrs	r3, r1
 80097fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8009800:	e003      	b.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009802:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009806:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800980a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800980e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009812:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009816:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800981a:	2300      	movs	r3, #0
 800981c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009820:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009824:	460b      	mov	r3, r1
 8009826:	4313      	orrs	r3, r2
 8009828:	d056      	beq.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800982a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800982e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009830:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009834:	d033      	beq.n	800989e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009836:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800983a:	d82c      	bhi.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800983c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009840:	d02f      	beq.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009842:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009846:	d826      	bhi.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009848:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800984c:	d02b      	beq.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800984e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009852:	d820      	bhi.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009854:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009858:	d012      	beq.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800985a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800985e:	d81a      	bhi.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009860:	2b00      	cmp	r3, #0
 8009862:	d022      	beq.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009864:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009868:	d115      	bne.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800986a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800986e:	3308      	adds	r3, #8
 8009870:	2101      	movs	r1, #1
 8009872:	4618      	mov	r0, r3
 8009874:	f002 f8e0 	bl	800ba38 <RCCEx_PLL2_Config>
 8009878:	4603      	mov	r3, r0
 800987a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800987e:	e015      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009884:	3328      	adds	r3, #40	@ 0x28
 8009886:	2101      	movs	r1, #1
 8009888:	4618      	mov	r0, r3
 800988a:	f002 f987 	bl	800bb9c <RCCEx_PLL3_Config>
 800988e:	4603      	mov	r3, r0
 8009890:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009894:	e00a      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009896:	2301      	movs	r3, #1
 8009898:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800989c:	e006      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800989e:	bf00      	nop
 80098a0:	e004      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80098a2:	bf00      	nop
 80098a4:	e002      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80098a6:	bf00      	nop
 80098a8:	e000      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80098aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d10d      	bne.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80098b4:	4b05      	ldr	r3, [pc, #20]	@ (80098cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80098b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098b8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80098bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098c2:	4a02      	ldr	r2, [pc, #8]	@ (80098cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80098c4:	430b      	orrs	r3, r1
 80098c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80098c8:	e006      	b.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80098ca:	bf00      	nop
 80098cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80098d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80098e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80098e8:	2300      	movs	r3, #0
 80098ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80098ee:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80098f2:	460b      	mov	r3, r1
 80098f4:	4313      	orrs	r3, r2
 80098f6:	d055      	beq.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80098f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009900:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009904:	d033      	beq.n	800996e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009906:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800990a:	d82c      	bhi.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800990c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009910:	d02f      	beq.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009912:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009916:	d826      	bhi.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009918:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800991c:	d02b      	beq.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800991e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009922:	d820      	bhi.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009924:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009928:	d012      	beq.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800992a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800992e:	d81a      	bhi.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009930:	2b00      	cmp	r3, #0
 8009932:	d022      	beq.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009934:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009938:	d115      	bne.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800993a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800993e:	3308      	adds	r3, #8
 8009940:	2101      	movs	r1, #1
 8009942:	4618      	mov	r0, r3
 8009944:	f002 f878 	bl	800ba38 <RCCEx_PLL2_Config>
 8009948:	4603      	mov	r3, r0
 800994a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800994e:	e015      	b.n	800997c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009954:	3328      	adds	r3, #40	@ 0x28
 8009956:	2101      	movs	r1, #1
 8009958:	4618      	mov	r0, r3
 800995a:	f002 f91f 	bl	800bb9c <RCCEx_PLL3_Config>
 800995e:	4603      	mov	r3, r0
 8009960:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009964:	e00a      	b.n	800997c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009966:	2301      	movs	r3, #1
 8009968:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800996c:	e006      	b.n	800997c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800996e:	bf00      	nop
 8009970:	e004      	b.n	800997c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009972:	bf00      	nop
 8009974:	e002      	b.n	800997c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009976:	bf00      	nop
 8009978:	e000      	b.n	800997c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800997a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800997c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009980:	2b00      	cmp	r3, #0
 8009982:	d10b      	bne.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009984:	4ba3      	ldr	r3, [pc, #652]	@ (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009988:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800998c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009990:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009994:	4a9f      	ldr	r2, [pc, #636]	@ (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009996:	430b      	orrs	r3, r1
 8009998:	6593      	str	r3, [r2, #88]	@ 0x58
 800999a:	e003      	b.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800999c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80099a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ac:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80099b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80099b4:	2300      	movs	r3, #0
 80099b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80099ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80099be:	460b      	mov	r3, r1
 80099c0:	4313      	orrs	r3, r2
 80099c2:	d037      	beq.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80099c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099ce:	d00e      	beq.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80099d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099d4:	d816      	bhi.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d018      	beq.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x708>
 80099da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099de:	d111      	bne.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099e0:	4b8c      	ldr	r3, [pc, #560]	@ (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099e4:	4a8b      	ldr	r2, [pc, #556]	@ (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80099ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80099ec:	e00f      	b.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80099ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099f2:	3308      	adds	r3, #8
 80099f4:	2101      	movs	r1, #1
 80099f6:	4618      	mov	r0, r3
 80099f8:	f002 f81e 	bl	800ba38 <RCCEx_PLL2_Config>
 80099fc:	4603      	mov	r3, r0
 80099fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009a02:	e004      	b.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a04:	2301      	movs	r3, #1
 8009a06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a0a:	e000      	b.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009a0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d10a      	bne.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009a16:	4b7f      	ldr	r3, [pc, #508]	@ (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a1a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a24:	4a7b      	ldr	r2, [pc, #492]	@ (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a26:	430b      	orrs	r3, r1
 8009a28:	6513      	str	r3, [r2, #80]	@ 0x50
 8009a2a:	e003      	b.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009a40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009a44:	2300      	movs	r3, #0
 8009a46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009a4a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009a4e:	460b      	mov	r3, r1
 8009a50:	4313      	orrs	r3, r2
 8009a52:	d039      	beq.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a5a:	2b03      	cmp	r3, #3
 8009a5c:	d81c      	bhi.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8009a64 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a64:	08009aa1 	.word	0x08009aa1
 8009a68:	08009a75 	.word	0x08009a75
 8009a6c:	08009a83 	.word	0x08009a83
 8009a70:	08009aa1 	.word	0x08009aa1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a74:	4b67      	ldr	r3, [pc, #412]	@ (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a78:	4a66      	ldr	r2, [pc, #408]	@ (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009a80:	e00f      	b.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a86:	3308      	adds	r3, #8
 8009a88:	2102      	movs	r1, #2
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f001 ffd4 	bl	800ba38 <RCCEx_PLL2_Config>
 8009a90:	4603      	mov	r3, r0
 8009a92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009a96:	e004      	b.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a9e:	e000      	b.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009aa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009aa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d10a      	bne.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009aaa:	4b5a      	ldr	r3, [pc, #360]	@ (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009aae:	f023 0103 	bic.w	r1, r3, #3
 8009ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ab6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ab8:	4a56      	ldr	r2, [pc, #344]	@ (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009aba:	430b      	orrs	r3, r1
 8009abc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009abe:	e003      	b.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ac0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ac4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009ad4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009ad8:	2300      	movs	r3, #0
 8009ada:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009ade:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	f000 809f 	beq.w	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009aea:	4b4b      	ldr	r3, [pc, #300]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4a4a      	ldr	r2, [pc, #296]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009af0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009af4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009af6:	f7f9 fc3f 	bl	8003378 <HAL_GetTick>
 8009afa:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009afe:	e00b      	b.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b00:	f7f9 fc3a 	bl	8003378 <HAL_GetTick>
 8009b04:	4602      	mov	r2, r0
 8009b06:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009b0a:	1ad3      	subs	r3, r2, r3
 8009b0c:	2b64      	cmp	r3, #100	@ 0x64
 8009b0e:	d903      	bls.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009b10:	2303      	movs	r3, #3
 8009b12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009b16:	e005      	b.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b18:	4b3f      	ldr	r3, [pc, #252]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d0ed      	beq.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009b24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d179      	bne.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009b2c:	4b39      	ldr	r3, [pc, #228]	@ (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b2e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b34:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009b38:	4053      	eors	r3, r2
 8009b3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d015      	beq.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009b42:	4b34      	ldr	r3, [pc, #208]	@ (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b4a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009b4e:	4b31      	ldr	r3, [pc, #196]	@ (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b52:	4a30      	ldr	r2, [pc, #192]	@ (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009b58:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009b5a:	4b2e      	ldr	r3, [pc, #184]	@ (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b5e:	4a2d      	ldr	r2, [pc, #180]	@ (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b64:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009b66:	4a2b      	ldr	r2, [pc, #172]	@ (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009b6c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009b76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b7a:	d118      	bne.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b7c:	f7f9 fbfc 	bl	8003378 <HAL_GetTick>
 8009b80:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009b84:	e00d      	b.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b86:	f7f9 fbf7 	bl	8003378 <HAL_GetTick>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009b90:	1ad2      	subs	r2, r2, r3
 8009b92:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d903      	bls.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009b9a:	2303      	movs	r3, #3
 8009b9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8009ba0:	e005      	b.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ba2:	4b1c      	ldr	r3, [pc, #112]	@ (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ba6:	f003 0302 	and.w	r3, r3, #2
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d0eb      	beq.n	8009b86 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009bae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d129      	bne.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009bbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009bc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009bc6:	d10e      	bne.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009bc8:	4b12      	ldr	r3, [pc, #72]	@ (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009bca:	691b      	ldr	r3, [r3, #16]
 8009bcc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bd4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009bd8:	091a      	lsrs	r2, r3, #4
 8009bda:	4b10      	ldr	r3, [pc, #64]	@ (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009bdc:	4013      	ands	r3, r2
 8009bde:	4a0d      	ldr	r2, [pc, #52]	@ (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009be0:	430b      	orrs	r3, r1
 8009be2:	6113      	str	r3, [r2, #16]
 8009be4:	e005      	b.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009be6:	4b0b      	ldr	r3, [pc, #44]	@ (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009be8:	691b      	ldr	r3, [r3, #16]
 8009bea:	4a0a      	ldr	r2, [pc, #40]	@ (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009bec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009bf0:	6113      	str	r3, [r2, #16]
 8009bf2:	4b08      	ldr	r3, [pc, #32]	@ (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009bf4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bfa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009bfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c02:	4a04      	ldr	r2, [pc, #16]	@ (8009c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c04:	430b      	orrs	r3, r1
 8009c06:	6713      	str	r3, [r2, #112]	@ 0x70
 8009c08:	e00e      	b.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009c0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8009c12:	e009      	b.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009c14:	58024400 	.word	0x58024400
 8009c18:	58024800 	.word	0x58024800
 8009c1c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c30:	f002 0301 	and.w	r3, r2, #1
 8009c34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009c38:	2300      	movs	r3, #0
 8009c3a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009c3e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009c42:	460b      	mov	r3, r1
 8009c44:	4313      	orrs	r3, r2
 8009c46:	f000 8089 	beq.w	8009d5c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c50:	2b28      	cmp	r3, #40	@ 0x28
 8009c52:	d86b      	bhi.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009c54:	a201      	add	r2, pc, #4	@ (adr r2, 8009c5c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c5a:	bf00      	nop
 8009c5c:	08009d35 	.word	0x08009d35
 8009c60:	08009d2d 	.word	0x08009d2d
 8009c64:	08009d2d 	.word	0x08009d2d
 8009c68:	08009d2d 	.word	0x08009d2d
 8009c6c:	08009d2d 	.word	0x08009d2d
 8009c70:	08009d2d 	.word	0x08009d2d
 8009c74:	08009d2d 	.word	0x08009d2d
 8009c78:	08009d2d 	.word	0x08009d2d
 8009c7c:	08009d01 	.word	0x08009d01
 8009c80:	08009d2d 	.word	0x08009d2d
 8009c84:	08009d2d 	.word	0x08009d2d
 8009c88:	08009d2d 	.word	0x08009d2d
 8009c8c:	08009d2d 	.word	0x08009d2d
 8009c90:	08009d2d 	.word	0x08009d2d
 8009c94:	08009d2d 	.word	0x08009d2d
 8009c98:	08009d2d 	.word	0x08009d2d
 8009c9c:	08009d17 	.word	0x08009d17
 8009ca0:	08009d2d 	.word	0x08009d2d
 8009ca4:	08009d2d 	.word	0x08009d2d
 8009ca8:	08009d2d 	.word	0x08009d2d
 8009cac:	08009d2d 	.word	0x08009d2d
 8009cb0:	08009d2d 	.word	0x08009d2d
 8009cb4:	08009d2d 	.word	0x08009d2d
 8009cb8:	08009d2d 	.word	0x08009d2d
 8009cbc:	08009d35 	.word	0x08009d35
 8009cc0:	08009d2d 	.word	0x08009d2d
 8009cc4:	08009d2d 	.word	0x08009d2d
 8009cc8:	08009d2d 	.word	0x08009d2d
 8009ccc:	08009d2d 	.word	0x08009d2d
 8009cd0:	08009d2d 	.word	0x08009d2d
 8009cd4:	08009d2d 	.word	0x08009d2d
 8009cd8:	08009d2d 	.word	0x08009d2d
 8009cdc:	08009d35 	.word	0x08009d35
 8009ce0:	08009d2d 	.word	0x08009d2d
 8009ce4:	08009d2d 	.word	0x08009d2d
 8009ce8:	08009d2d 	.word	0x08009d2d
 8009cec:	08009d2d 	.word	0x08009d2d
 8009cf0:	08009d2d 	.word	0x08009d2d
 8009cf4:	08009d2d 	.word	0x08009d2d
 8009cf8:	08009d2d 	.word	0x08009d2d
 8009cfc:	08009d35 	.word	0x08009d35
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d04:	3308      	adds	r3, #8
 8009d06:	2101      	movs	r1, #1
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f001 fe95 	bl	800ba38 <RCCEx_PLL2_Config>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009d14:	e00f      	b.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d1a:	3328      	adds	r3, #40	@ 0x28
 8009d1c:	2101      	movs	r1, #1
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f001 ff3c 	bl	800bb9c <RCCEx_PLL3_Config>
 8009d24:	4603      	mov	r3, r0
 8009d26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009d2a:	e004      	b.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009d32:	e000      	b.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009d34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d10a      	bne.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009d3e:	4bbf      	ldr	r3, [pc, #764]	@ (800a03c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d42:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009d4c:	4abb      	ldr	r2, [pc, #748]	@ (800a03c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009d4e:	430b      	orrs	r3, r1
 8009d50:	6553      	str	r3, [r2, #84]	@ 0x54
 8009d52:	e003      	b.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d64:	f002 0302 	and.w	r3, r2, #2
 8009d68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009d72:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009d76:	460b      	mov	r3, r1
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	d041      	beq.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009d82:	2b05      	cmp	r3, #5
 8009d84:	d824      	bhi.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009d86:	a201      	add	r2, pc, #4	@ (adr r2, 8009d8c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d8c:	08009dd9 	.word	0x08009dd9
 8009d90:	08009da5 	.word	0x08009da5
 8009d94:	08009dbb 	.word	0x08009dbb
 8009d98:	08009dd9 	.word	0x08009dd9
 8009d9c:	08009dd9 	.word	0x08009dd9
 8009da0:	08009dd9 	.word	0x08009dd9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009da8:	3308      	adds	r3, #8
 8009daa:	2101      	movs	r1, #1
 8009dac:	4618      	mov	r0, r3
 8009dae:	f001 fe43 	bl	800ba38 <RCCEx_PLL2_Config>
 8009db2:	4603      	mov	r3, r0
 8009db4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009db8:	e00f      	b.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dbe:	3328      	adds	r3, #40	@ 0x28
 8009dc0:	2101      	movs	r1, #1
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f001 feea 	bl	800bb9c <RCCEx_PLL3_Config>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009dce:	e004      	b.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009dd6:	e000      	b.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009dd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d10a      	bne.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009de2:	4b96      	ldr	r3, [pc, #600]	@ (800a03c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009de6:	f023 0107 	bic.w	r1, r3, #7
 8009dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009df0:	4a92      	ldr	r2, [pc, #584]	@ (800a03c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009df2:	430b      	orrs	r3, r1
 8009df4:	6553      	str	r3, [r2, #84]	@ 0x54
 8009df6:	e003      	b.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009df8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009dfc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e08:	f002 0304 	and.w	r3, r2, #4
 8009e0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009e10:	2300      	movs	r3, #0
 8009e12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009e16:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009e1a:	460b      	mov	r3, r1
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	d044      	beq.n	8009eaa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e28:	2b05      	cmp	r3, #5
 8009e2a:	d825      	bhi.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009e2c:	a201      	add	r2, pc, #4	@ (adr r2, 8009e34 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e32:	bf00      	nop
 8009e34:	08009e81 	.word	0x08009e81
 8009e38:	08009e4d 	.word	0x08009e4d
 8009e3c:	08009e63 	.word	0x08009e63
 8009e40:	08009e81 	.word	0x08009e81
 8009e44:	08009e81 	.word	0x08009e81
 8009e48:	08009e81 	.word	0x08009e81
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e50:	3308      	adds	r3, #8
 8009e52:	2101      	movs	r1, #1
 8009e54:	4618      	mov	r0, r3
 8009e56:	f001 fdef 	bl	800ba38 <RCCEx_PLL2_Config>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009e60:	e00f      	b.n	8009e82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e66:	3328      	adds	r3, #40	@ 0x28
 8009e68:	2101      	movs	r1, #1
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f001 fe96 	bl	800bb9c <RCCEx_PLL3_Config>
 8009e70:	4603      	mov	r3, r0
 8009e72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009e76:	e004      	b.n	8009e82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e7e:	e000      	b.n	8009e82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009e80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d10b      	bne.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009e8a:	4b6c      	ldr	r3, [pc, #432]	@ (800a03c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e8e:	f023 0107 	bic.w	r1, r3, #7
 8009e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e9a:	4a68      	ldr	r2, [pc, #416]	@ (800a03c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009e9c:	430b      	orrs	r3, r1
 8009e9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009ea0:	e003      	b.n	8009eaa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ea6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb2:	f002 0320 	and.w	r3, r2, #32
 8009eb6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009eba:	2300      	movs	r3, #0
 8009ebc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009ec0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	d055      	beq.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ed2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009ed6:	d033      	beq.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009ed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009edc:	d82c      	bhi.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009ede:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ee2:	d02f      	beq.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ee8:	d826      	bhi.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009eea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009eee:	d02b      	beq.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009ef0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009ef4:	d820      	bhi.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009ef6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009efa:	d012      	beq.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009efc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f00:	d81a      	bhi.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d022      	beq.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009f06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f0a:	d115      	bne.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f10:	3308      	adds	r3, #8
 8009f12:	2100      	movs	r1, #0
 8009f14:	4618      	mov	r0, r3
 8009f16:	f001 fd8f 	bl	800ba38 <RCCEx_PLL2_Config>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009f20:	e015      	b.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f26:	3328      	adds	r3, #40	@ 0x28
 8009f28:	2102      	movs	r1, #2
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f001 fe36 	bl	800bb9c <RCCEx_PLL3_Config>
 8009f30:	4603      	mov	r3, r0
 8009f32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009f36:	e00a      	b.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f3e:	e006      	b.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009f40:	bf00      	nop
 8009f42:	e004      	b.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009f44:	bf00      	nop
 8009f46:	e002      	b.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009f48:	bf00      	nop
 8009f4a:	e000      	b.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009f4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d10b      	bne.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009f56:	4b39      	ldr	r3, [pc, #228]	@ (800a03c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f5a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f66:	4a35      	ldr	r2, [pc, #212]	@ (800a03c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009f68:	430b      	orrs	r3, r1
 8009f6a:	6553      	str	r3, [r2, #84]	@ 0x54
 8009f6c:	e003      	b.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009f82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009f86:	2300      	movs	r3, #0
 8009f88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009f8c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009f90:	460b      	mov	r3, r1
 8009f92:	4313      	orrs	r3, r2
 8009f94:	d058      	beq.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009f9e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009fa2:	d033      	beq.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009fa4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009fa8:	d82c      	bhi.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009faa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fae:	d02f      	beq.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009fb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fb4:	d826      	bhi.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009fb6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009fba:	d02b      	beq.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009fbc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009fc0:	d820      	bhi.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009fc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009fc6:	d012      	beq.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009fc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009fcc:	d81a      	bhi.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d022      	beq.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009fd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009fd6:	d115      	bne.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fdc:	3308      	adds	r3, #8
 8009fde:	2100      	movs	r1, #0
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f001 fd29 	bl	800ba38 <RCCEx_PLL2_Config>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009fec:	e015      	b.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ff2:	3328      	adds	r3, #40	@ 0x28
 8009ff4:	2102      	movs	r1, #2
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f001 fdd0 	bl	800bb9c <RCCEx_PLL3_Config>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a002:	e00a      	b.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a004:	2301      	movs	r3, #1
 800a006:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a00a:	e006      	b.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a00c:	bf00      	nop
 800a00e:	e004      	b.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a010:	bf00      	nop
 800a012:	e002      	b.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a014:	bf00      	nop
 800a016:	e000      	b.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a018:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a01a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d10e      	bne.n	800a040 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a022:	4b06      	ldr	r3, [pc, #24]	@ (800a03c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a026:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a02a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a02e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a032:	4a02      	ldr	r2, [pc, #8]	@ (800a03c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a034:	430b      	orrs	r3, r1
 800a036:	6593      	str	r3, [r2, #88]	@ 0x58
 800a038:	e006      	b.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a03a:	bf00      	nop
 800a03c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a040:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a044:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a050:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a054:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a058:	2300      	movs	r3, #0
 800a05a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a05e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a062:	460b      	mov	r3, r1
 800a064:	4313      	orrs	r3, r2
 800a066:	d055      	beq.n	800a114 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a06c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a070:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a074:	d033      	beq.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a076:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a07a:	d82c      	bhi.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a07c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a080:	d02f      	beq.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a082:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a086:	d826      	bhi.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a088:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a08c:	d02b      	beq.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a08e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a092:	d820      	bhi.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a094:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a098:	d012      	beq.n	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a09a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a09e:	d81a      	bhi.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d022      	beq.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a0a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a0a8:	d115      	bne.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a0aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0ae:	3308      	adds	r3, #8
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f001 fcc0 	bl	800ba38 <RCCEx_PLL2_Config>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a0be:	e015      	b.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a0c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0c4:	3328      	adds	r3, #40	@ 0x28
 800a0c6:	2102      	movs	r1, #2
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f001 fd67 	bl	800bb9c <RCCEx_PLL3_Config>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a0d4:	e00a      	b.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a0dc:	e006      	b.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a0de:	bf00      	nop
 800a0e0:	e004      	b.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a0e2:	bf00      	nop
 800a0e4:	e002      	b.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a0e6:	bf00      	nop
 800a0e8:	e000      	b.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a0ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d10b      	bne.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a0f4:	4ba1      	ldr	r3, [pc, #644]	@ (800a37c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a0f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0f8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a0fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a100:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a104:	4a9d      	ldr	r2, [pc, #628]	@ (800a37c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a106:	430b      	orrs	r3, r1
 800a108:	6593      	str	r3, [r2, #88]	@ 0x58
 800a10a:	e003      	b.n	800a114 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a10c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a110:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a114:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a11c:	f002 0308 	and.w	r3, r2, #8
 800a120:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a124:	2300      	movs	r3, #0
 800a126:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a12a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a12e:	460b      	mov	r3, r1
 800a130:	4313      	orrs	r3, r2
 800a132:	d01e      	beq.n	800a172 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a138:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a13c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a140:	d10c      	bne.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a146:	3328      	adds	r3, #40	@ 0x28
 800a148:	2102      	movs	r1, #2
 800a14a:	4618      	mov	r0, r3
 800a14c:	f001 fd26 	bl	800bb9c <RCCEx_PLL3_Config>
 800a150:	4603      	mov	r3, r0
 800a152:	2b00      	cmp	r3, #0
 800a154:	d002      	beq.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a156:	2301      	movs	r3, #1
 800a158:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a15c:	4b87      	ldr	r3, [pc, #540]	@ (800a37c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a15e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a160:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a168:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a16c:	4a83      	ldr	r2, [pc, #524]	@ (800a37c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a16e:	430b      	orrs	r3, r1
 800a170:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17a:	f002 0310 	and.w	r3, r2, #16
 800a17e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a182:	2300      	movs	r3, #0
 800a184:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a188:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a18c:	460b      	mov	r3, r1
 800a18e:	4313      	orrs	r3, r2
 800a190:	d01e      	beq.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a196:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a19a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a19e:	d10c      	bne.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a1a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1a4:	3328      	adds	r3, #40	@ 0x28
 800a1a6:	2102      	movs	r1, #2
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f001 fcf7 	bl	800bb9c <RCCEx_PLL3_Config>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d002      	beq.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a1ba:	4b70      	ldr	r3, [pc, #448]	@ (800a37c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a1bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1be:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a1c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a1ca:	4a6c      	ldr	r2, [pc, #432]	@ (800a37c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a1cc:	430b      	orrs	r3, r1
 800a1ce:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a1d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a1dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a1e6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a1ea:	460b      	mov	r3, r1
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	d03e      	beq.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a1f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a1f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1fc:	d022      	beq.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a1fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a202:	d81b      	bhi.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a204:	2b00      	cmp	r3, #0
 800a206:	d003      	beq.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a20c:	d00b      	beq.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a20e:	e015      	b.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a214:	3308      	adds	r3, #8
 800a216:	2100      	movs	r1, #0
 800a218:	4618      	mov	r0, r3
 800a21a:	f001 fc0d 	bl	800ba38 <RCCEx_PLL2_Config>
 800a21e:	4603      	mov	r3, r0
 800a220:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a224:	e00f      	b.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a22a:	3328      	adds	r3, #40	@ 0x28
 800a22c:	2102      	movs	r1, #2
 800a22e:	4618      	mov	r0, r3
 800a230:	f001 fcb4 	bl	800bb9c <RCCEx_PLL3_Config>
 800a234:	4603      	mov	r3, r0
 800a236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a23a:	e004      	b.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a23c:	2301      	movs	r3, #1
 800a23e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a242:	e000      	b.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a244:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a246:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d10b      	bne.n	800a266 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a24e:	4b4b      	ldr	r3, [pc, #300]	@ (800a37c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a252:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a25a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a25e:	4a47      	ldr	r2, [pc, #284]	@ (800a37c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a260:	430b      	orrs	r3, r1
 800a262:	6593      	str	r3, [r2, #88]	@ 0x58
 800a264:	e003      	b.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a266:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a26a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a26e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a276:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a27a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a27c:	2300      	movs	r3, #0
 800a27e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a280:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a284:	460b      	mov	r3, r1
 800a286:	4313      	orrs	r3, r2
 800a288:	d03b      	beq.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a28a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a28e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a292:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a296:	d01f      	beq.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a298:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a29c:	d818      	bhi.n	800a2d0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a29e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a2a2:	d003      	beq.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a2a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a2a8:	d007      	beq.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a2aa:	e011      	b.n	800a2d0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2ac:	4b33      	ldr	r3, [pc, #204]	@ (800a37c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a2ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2b0:	4a32      	ldr	r2, [pc, #200]	@ (800a37c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a2b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a2b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a2b8:	e00f      	b.n	800a2da <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a2ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2be:	3328      	adds	r3, #40	@ 0x28
 800a2c0:	2101      	movs	r1, #1
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f001 fc6a 	bl	800bb9c <RCCEx_PLL3_Config>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a2ce:	e004      	b.n	800a2da <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a2d6:	e000      	b.n	800a2da <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a2d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d10b      	bne.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a2e2:	4b26      	ldr	r3, [pc, #152]	@ (800a37c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a2e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2e6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a2ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2f2:	4a22      	ldr	r2, [pc, #136]	@ (800a37c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a2f4:	430b      	orrs	r3, r1
 800a2f6:	6553      	str	r3, [r2, #84]	@ 0x54
 800a2f8:	e003      	b.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a30e:	673b      	str	r3, [r7, #112]	@ 0x70
 800a310:	2300      	movs	r3, #0
 800a312:	677b      	str	r3, [r7, #116]	@ 0x74
 800a314:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a318:	460b      	mov	r3, r1
 800a31a:	4313      	orrs	r3, r2
 800a31c:	d034      	beq.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a31e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a324:	2b00      	cmp	r3, #0
 800a326:	d003      	beq.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a328:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a32c:	d007      	beq.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a32e:	e011      	b.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a330:	4b12      	ldr	r3, [pc, #72]	@ (800a37c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a334:	4a11      	ldr	r2, [pc, #68]	@ (800a37c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a336:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a33a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a33c:	e00e      	b.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a33e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a342:	3308      	adds	r3, #8
 800a344:	2102      	movs	r1, #2
 800a346:	4618      	mov	r0, r3
 800a348:	f001 fb76 	bl	800ba38 <RCCEx_PLL2_Config>
 800a34c:	4603      	mov	r3, r0
 800a34e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a352:	e003      	b.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a354:	2301      	movs	r3, #1
 800a356:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a35a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a35c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a360:	2b00      	cmp	r3, #0
 800a362:	d10d      	bne.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a364:	4b05      	ldr	r3, [pc, #20]	@ (800a37c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a366:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a368:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a36c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a370:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a372:	4a02      	ldr	r2, [pc, #8]	@ (800a37c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a374:	430b      	orrs	r3, r1
 800a376:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a378:	e006      	b.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a37a:	bf00      	nop
 800a37c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a380:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a384:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a390:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a394:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a396:	2300      	movs	r3, #0
 800a398:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a39a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a39e:	460b      	mov	r3, r1
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	d00c      	beq.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a3a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3a8:	3328      	adds	r3, #40	@ 0x28
 800a3aa:	2102      	movs	r1, #2
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f001 fbf5 	bl	800bb9c <RCCEx_PLL3_Config>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d002      	beq.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a3be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a3ca:	663b      	str	r3, [r7, #96]	@ 0x60
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	667b      	str	r3, [r7, #100]	@ 0x64
 800a3d0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	d038      	beq.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a3da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a3e6:	d018      	beq.n	800a41a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a3e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a3ec:	d811      	bhi.n	800a412 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a3ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3f2:	d014      	beq.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a3f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3f8:	d80b      	bhi.n	800a412 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d011      	beq.n	800a422 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a3fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a402:	d106      	bne.n	800a412 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a404:	4bc3      	ldr	r3, [pc, #780]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a408:	4ac2      	ldr	r2, [pc, #776]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a40a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a40e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a410:	e008      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a412:	2301      	movs	r3, #1
 800a414:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a418:	e004      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a41a:	bf00      	nop
 800a41c:	e002      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a41e:	bf00      	nop
 800a420:	e000      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a422:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a424:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d10b      	bne.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a42c:	4bb9      	ldr	r3, [pc, #740]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a42e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a430:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a438:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a43c:	4ab5      	ldr	r2, [pc, #724]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a43e:	430b      	orrs	r3, r1
 800a440:	6553      	str	r3, [r2, #84]	@ 0x54
 800a442:	e003      	b.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a444:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a448:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a44c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a454:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a458:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a45a:	2300      	movs	r3, #0
 800a45c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a45e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a462:	460b      	mov	r3, r1
 800a464:	4313      	orrs	r3, r2
 800a466:	d009      	beq.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a468:	4baa      	ldr	r3, [pc, #680]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a46a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a46c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a474:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a476:	4aa7      	ldr	r2, [pc, #668]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a478:	430b      	orrs	r3, r1
 800a47a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a47c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a484:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800a488:	653b      	str	r3, [r7, #80]	@ 0x50
 800a48a:	2300      	movs	r3, #0
 800a48c:	657b      	str	r3, [r7, #84]	@ 0x54
 800a48e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a492:	460b      	mov	r3, r1
 800a494:	4313      	orrs	r3, r2
 800a496:	d00a      	beq.n	800a4ae <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a498:	4b9e      	ldr	r3, [pc, #632]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a49a:	691b      	ldr	r3, [r3, #16]
 800a49c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800a4a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a4a8:	4a9a      	ldr	r2, [pc, #616]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4aa:	430b      	orrs	r3, r1
 800a4ac:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a4ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a4ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a4bc:	2300      	movs	r3, #0
 800a4be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a4c0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a4c4:	460b      	mov	r3, r1
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	d009      	beq.n	800a4de <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a4ca:	4b92      	ldr	r3, [pc, #584]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4ce:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a4d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4d8:	4a8e      	ldr	r2, [pc, #568]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4da:	430b      	orrs	r3, r1
 800a4dc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a4de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a4ea:	643b      	str	r3, [r7, #64]	@ 0x40
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4f0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a4f4:	460b      	mov	r3, r1
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	d00e      	beq.n	800a518 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a4fa:	4b86      	ldr	r3, [pc, #536]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4fc:	691b      	ldr	r3, [r3, #16]
 800a4fe:	4a85      	ldr	r2, [pc, #532]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a500:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a504:	6113      	str	r3, [r2, #16]
 800a506:	4b83      	ldr	r3, [pc, #524]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a508:	6919      	ldr	r1, [r3, #16]
 800a50a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a50e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a512:	4a80      	ldr	r2, [pc, #512]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a514:	430b      	orrs	r3, r1
 800a516:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a520:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a524:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a526:	2300      	movs	r3, #0
 800a528:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a52a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a52e:	460b      	mov	r3, r1
 800a530:	4313      	orrs	r3, r2
 800a532:	d009      	beq.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a534:	4b77      	ldr	r3, [pc, #476]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a538:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a53c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a542:	4a74      	ldr	r2, [pc, #464]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a544:	430b      	orrs	r3, r1
 800a546:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a550:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a554:	633b      	str	r3, [r7, #48]	@ 0x30
 800a556:	2300      	movs	r3, #0
 800a558:	637b      	str	r3, [r7, #52]	@ 0x34
 800a55a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a55e:	460b      	mov	r3, r1
 800a560:	4313      	orrs	r3, r2
 800a562:	d00a      	beq.n	800a57a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a564:	4b6b      	ldr	r3, [pc, #428]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a568:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a56c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a570:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a574:	4a67      	ldr	r2, [pc, #412]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a576:	430b      	orrs	r3, r1
 800a578:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a57a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a582:	2100      	movs	r1, #0
 800a584:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a586:	f003 0301 	and.w	r3, r3, #1
 800a58a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a58c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a590:	460b      	mov	r3, r1
 800a592:	4313      	orrs	r3, r2
 800a594:	d011      	beq.n	800a5ba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a59a:	3308      	adds	r3, #8
 800a59c:	2100      	movs	r1, #0
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f001 fa4a 	bl	800ba38 <RCCEx_PLL2_Config>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a5aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d003      	beq.n	800a5ba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a5ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c2:	2100      	movs	r1, #0
 800a5c4:	6239      	str	r1, [r7, #32]
 800a5c6:	f003 0302 	and.w	r3, r3, #2
 800a5ca:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5cc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a5d0:	460b      	mov	r3, r1
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	d011      	beq.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a5d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5da:	3308      	adds	r3, #8
 800a5dc:	2101      	movs	r1, #1
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f001 fa2a 	bl	800ba38 <RCCEx_PLL2_Config>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a5ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d003      	beq.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a5fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a602:	2100      	movs	r1, #0
 800a604:	61b9      	str	r1, [r7, #24]
 800a606:	f003 0304 	and.w	r3, r3, #4
 800a60a:	61fb      	str	r3, [r7, #28]
 800a60c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a610:	460b      	mov	r3, r1
 800a612:	4313      	orrs	r3, r2
 800a614:	d011      	beq.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a61a:	3308      	adds	r3, #8
 800a61c:	2102      	movs	r1, #2
 800a61e:	4618      	mov	r0, r3
 800a620:	f001 fa0a 	bl	800ba38 <RCCEx_PLL2_Config>
 800a624:	4603      	mov	r3, r0
 800a626:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a62a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d003      	beq.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a632:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a636:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a63a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a642:	2100      	movs	r1, #0
 800a644:	6139      	str	r1, [r7, #16]
 800a646:	f003 0308 	and.w	r3, r3, #8
 800a64a:	617b      	str	r3, [r7, #20]
 800a64c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a650:	460b      	mov	r3, r1
 800a652:	4313      	orrs	r3, r2
 800a654:	d011      	beq.n	800a67a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a65a:	3328      	adds	r3, #40	@ 0x28
 800a65c:	2100      	movs	r1, #0
 800a65e:	4618      	mov	r0, r3
 800a660:	f001 fa9c 	bl	800bb9c <RCCEx_PLL3_Config>
 800a664:	4603      	mov	r3, r0
 800a666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800a66a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d003      	beq.n	800a67a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a672:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a676:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a67a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a682:	2100      	movs	r1, #0
 800a684:	60b9      	str	r1, [r7, #8]
 800a686:	f003 0310 	and.w	r3, r3, #16
 800a68a:	60fb      	str	r3, [r7, #12]
 800a68c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a690:	460b      	mov	r3, r1
 800a692:	4313      	orrs	r3, r2
 800a694:	d011      	beq.n	800a6ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a69a:	3328      	adds	r3, #40	@ 0x28
 800a69c:	2101      	movs	r1, #1
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f001 fa7c 	bl	800bb9c <RCCEx_PLL3_Config>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a6aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d003      	beq.n	800a6ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a6b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a6ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c2:	2100      	movs	r1, #0
 800a6c4:	6039      	str	r1, [r7, #0]
 800a6c6:	f003 0320 	and.w	r3, r3, #32
 800a6ca:	607b      	str	r3, [r7, #4]
 800a6cc:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a6d0:	460b      	mov	r3, r1
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	d011      	beq.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a6d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6da:	3328      	adds	r3, #40	@ 0x28
 800a6dc:	2102      	movs	r1, #2
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f001 fa5c 	bl	800bb9c <RCCEx_PLL3_Config>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a6ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d003      	beq.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a6f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800a6fa:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d101      	bne.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a702:	2300      	movs	r3, #0
 800a704:	e000      	b.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a706:	2301      	movs	r3, #1
}
 800a708:	4618      	mov	r0, r3
 800a70a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800a70e:	46bd      	mov	sp, r7
 800a710:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a714:	58024400 	.word	0x58024400

0800a718 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b090      	sub	sp, #64	@ 0x40
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a722:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a726:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a72a:	430b      	orrs	r3, r1
 800a72c:	f040 8094 	bne.w	800a858 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a730:	4b9e      	ldr	r3, [pc, #632]	@ (800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a734:	f003 0307 	and.w	r3, r3, #7
 800a738:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a73c:	2b04      	cmp	r3, #4
 800a73e:	f200 8087 	bhi.w	800a850 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a742:	a201      	add	r2, pc, #4	@ (adr r2, 800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a748:	0800a75d 	.word	0x0800a75d
 800a74c:	0800a785 	.word	0x0800a785
 800a750:	0800a7ad 	.word	0x0800a7ad
 800a754:	0800a849 	.word	0x0800a849
 800a758:	0800a7d5 	.word	0x0800a7d5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a75c:	4b93      	ldr	r3, [pc, #588]	@ (800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a764:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a768:	d108      	bne.n	800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a76a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a76e:	4618      	mov	r0, r3
 800a770:	f001 f810 	bl	800b794 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a778:	f000 bd45 	b.w	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a77c:	2300      	movs	r3, #0
 800a77e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a780:	f000 bd41 	b.w	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a784:	4b89      	ldr	r3, [pc, #548]	@ (800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a78c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a790:	d108      	bne.n	800a7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a792:	f107 0318 	add.w	r3, r7, #24
 800a796:	4618      	mov	r0, r3
 800a798:	f000 fd54 	bl	800b244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a79c:	69bb      	ldr	r3, [r7, #24]
 800a79e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7a0:	f000 bd31 	b.w	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7a8:	f000 bd2d 	b.w	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7ac:	4b7f      	ldr	r3, [pc, #508]	@ (800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a7b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7b8:	d108      	bne.n	800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7ba:	f107 030c 	add.w	r3, r7, #12
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f000 fe94 	bl	800b4ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7c8:	f000 bd1d 	b.w	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7d0:	f000 bd19 	b.w	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a7d4:	4b75      	ldr	r3, [pc, #468]	@ (800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a7dc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a7de:	4b73      	ldr	r3, [pc, #460]	@ (800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f003 0304 	and.w	r3, r3, #4
 800a7e6:	2b04      	cmp	r3, #4
 800a7e8:	d10c      	bne.n	800a804 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a7ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d109      	bne.n	800a804 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7f0:	4b6e      	ldr	r3, [pc, #440]	@ (800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	08db      	lsrs	r3, r3, #3
 800a7f6:	f003 0303 	and.w	r3, r3, #3
 800a7fa:	4a6d      	ldr	r2, [pc, #436]	@ (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a7fc:	fa22 f303 	lsr.w	r3, r2, r3
 800a800:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a802:	e01f      	b.n	800a844 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a804:	4b69      	ldr	r3, [pc, #420]	@ (800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a80c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a810:	d106      	bne.n	800a820 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a812:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a814:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a818:	d102      	bne.n	800a820 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a81a:	4b66      	ldr	r3, [pc, #408]	@ (800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a81c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a81e:	e011      	b.n	800a844 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a820:	4b62      	ldr	r3, [pc, #392]	@ (800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a828:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a82c:	d106      	bne.n	800a83c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a82e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a830:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a834:	d102      	bne.n	800a83c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a836:	4b60      	ldr	r3, [pc, #384]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a838:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a83a:	e003      	b.n	800a844 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a83c:	2300      	movs	r3, #0
 800a83e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a840:	f000 bce1 	b.w	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a844:	f000 bcdf 	b.w	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a848:	4b5c      	ldr	r3, [pc, #368]	@ (800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a84a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a84c:	f000 bcdb 	b.w	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a850:	2300      	movs	r3, #0
 800a852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a854:	f000 bcd7 	b.w	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a858:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a85c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a860:	430b      	orrs	r3, r1
 800a862:	f040 80ad 	bne.w	800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a866:	4b51      	ldr	r3, [pc, #324]	@ (800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a868:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a86a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a86e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a872:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a876:	d056      	beq.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a87a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a87e:	f200 8090 	bhi.w	800a9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a884:	2bc0      	cmp	r3, #192	@ 0xc0
 800a886:	f000 8088 	beq.w	800a99a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a88a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a88c:	2bc0      	cmp	r3, #192	@ 0xc0
 800a88e:	f200 8088 	bhi.w	800a9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a894:	2b80      	cmp	r3, #128	@ 0x80
 800a896:	d032      	beq.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a89a:	2b80      	cmp	r3, #128	@ 0x80
 800a89c:	f200 8081 	bhi.w	800a9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a8a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d003      	beq.n	800a8ae <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a8a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a8:	2b40      	cmp	r3, #64	@ 0x40
 800a8aa:	d014      	beq.n	800a8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a8ac:	e079      	b.n	800a9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a8ae:	4b3f      	ldr	r3, [pc, #252]	@ (800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a8ba:	d108      	bne.n	800a8ce <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f000 ff67 	bl	800b794 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8ca:	f000 bc9c 	b.w	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8d2:	f000 bc98 	b.w	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8d6:	4b35      	ldr	r3, [pc, #212]	@ (800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a8e2:	d108      	bne.n	800a8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8e4:	f107 0318 	add.w	r3, r7, #24
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f000 fcab 	bl	800b244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a8ee:	69bb      	ldr	r3, [r7, #24]
 800a8f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8f2:	f000 bc88 	b.w	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8fa:	f000 bc84 	b.w	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a8fe:	4b2b      	ldr	r3, [pc, #172]	@ (800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a906:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a90a:	d108      	bne.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a90c:	f107 030c 	add.w	r3, r7, #12
 800a910:	4618      	mov	r0, r3
 800a912:	f000 fdeb 	bl	800b4ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a91a:	f000 bc74 	b.w	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a91e:	2300      	movs	r3, #0
 800a920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a922:	f000 bc70 	b.w	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a926:	4b21      	ldr	r3, [pc, #132]	@ (800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a92a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a92e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a930:	4b1e      	ldr	r3, [pc, #120]	@ (800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f003 0304 	and.w	r3, r3, #4
 800a938:	2b04      	cmp	r3, #4
 800a93a:	d10c      	bne.n	800a956 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a93c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d109      	bne.n	800a956 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a942:	4b1a      	ldr	r3, [pc, #104]	@ (800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	08db      	lsrs	r3, r3, #3
 800a948:	f003 0303 	and.w	r3, r3, #3
 800a94c:	4a18      	ldr	r2, [pc, #96]	@ (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a94e:	fa22 f303 	lsr.w	r3, r2, r3
 800a952:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a954:	e01f      	b.n	800a996 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a956:	4b15      	ldr	r3, [pc, #84]	@ (800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a95e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a962:	d106      	bne.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a966:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a96a:	d102      	bne.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a96c:	4b11      	ldr	r3, [pc, #68]	@ (800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a96e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a970:	e011      	b.n	800a996 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a972:	4b0e      	ldr	r3, [pc, #56]	@ (800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a97a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a97e:	d106      	bne.n	800a98e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a982:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a986:	d102      	bne.n	800a98e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a988:	4b0b      	ldr	r3, [pc, #44]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a98a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a98c:	e003      	b.n	800a996 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a98e:	2300      	movs	r3, #0
 800a990:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a992:	f000 bc38 	b.w	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a996:	f000 bc36 	b.w	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a99a:	4b08      	ldr	r3, [pc, #32]	@ (800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a99c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a99e:	f000 bc32 	b.w	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9a6:	f000 bc2e 	b.w	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a9aa:	bf00      	nop
 800a9ac:	58024400 	.word	0x58024400
 800a9b0:	03d09000 	.word	0x03d09000
 800a9b4:	003d0900 	.word	0x003d0900
 800a9b8:	017d7840 	.word	0x017d7840
 800a9bc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a9c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9c4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a9c8:	430b      	orrs	r3, r1
 800a9ca:	f040 809c 	bne.w	800ab06 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a9ce:	4b9e      	ldr	r3, [pc, #632]	@ (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a9d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9d2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a9d6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a9d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a9de:	d054      	beq.n	800aa8a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a9e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a9e6:	f200 808b 	bhi.w	800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a9ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ec:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a9f0:	f000 8083 	beq.w	800aafa <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a9f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9f6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a9fa:	f200 8081 	bhi.w	800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a9fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aa04:	d02f      	beq.n	800aa66 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800aa06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aa0c:	d878      	bhi.n	800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800aa0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d004      	beq.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800aa14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aa1a:	d012      	beq.n	800aa42 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800aa1c:	e070      	b.n	800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aa1e:	4b8a      	ldr	r3, [pc, #552]	@ (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aa2a:	d107      	bne.n	800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa30:	4618      	mov	r0, r3
 800aa32:	f000 feaf 	bl	800b794 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa3a:	e3e4      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa40:	e3e1      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa42:	4b81      	ldr	r3, [pc, #516]	@ (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa4e:	d107      	bne.n	800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa50:	f107 0318 	add.w	r3, r7, #24
 800aa54:	4618      	mov	r0, r3
 800aa56:	f000 fbf5 	bl	800b244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa5a:	69bb      	ldr	r3, [r7, #24]
 800aa5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa5e:	e3d2      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa60:	2300      	movs	r3, #0
 800aa62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa64:	e3cf      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa66:	4b78      	ldr	r3, [pc, #480]	@ (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa72:	d107      	bne.n	800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa74:	f107 030c 	add.w	r3, r7, #12
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f000 fd37 	bl	800b4ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa82:	e3c0      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa84:	2300      	movs	r3, #0
 800aa86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa88:	e3bd      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aa8a:	4b6f      	ldr	r3, [pc, #444]	@ (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa8e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aa92:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa94:	4b6c      	ldr	r3, [pc, #432]	@ (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f003 0304 	and.w	r3, r3, #4
 800aa9c:	2b04      	cmp	r3, #4
 800aa9e:	d10c      	bne.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800aaa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d109      	bne.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aaa6:	4b68      	ldr	r3, [pc, #416]	@ (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	08db      	lsrs	r3, r3, #3
 800aaac:	f003 0303 	and.w	r3, r3, #3
 800aab0:	4a66      	ldr	r2, [pc, #408]	@ (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800aab2:	fa22 f303 	lsr.w	r3, r2, r3
 800aab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aab8:	e01e      	b.n	800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aaba:	4b63      	ldr	r3, [pc, #396]	@ (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aac2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aac6:	d106      	bne.n	800aad6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800aac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aace:	d102      	bne.n	800aad6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aad0:	4b5f      	ldr	r3, [pc, #380]	@ (800ac50 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800aad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aad4:	e010      	b.n	800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aad6:	4b5c      	ldr	r3, [pc, #368]	@ (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aade:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aae2:	d106      	bne.n	800aaf2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800aae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aae6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aaea:	d102      	bne.n	800aaf2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aaec:	4b59      	ldr	r3, [pc, #356]	@ (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800aaee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aaf0:	e002      	b.n	800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800aaf6:	e386      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aaf8:	e385      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aafa:	4b57      	ldr	r3, [pc, #348]	@ (800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800aafc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aafe:	e382      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ab00:	2300      	movs	r3, #0
 800ab02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab04:	e37f      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ab06:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab0a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800ab0e:	430b      	orrs	r3, r1
 800ab10:	f040 80a7 	bne.w	800ac62 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ab14:	4b4c      	ldr	r3, [pc, #304]	@ (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab18:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800ab1c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ab1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ab24:	d055      	beq.n	800abd2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800ab26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ab2c:	f200 8096 	bhi.w	800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ab30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab32:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ab36:	f000 8084 	beq.w	800ac42 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800ab3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab3c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ab40:	f200 808c 	bhi.w	800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ab44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab4a:	d030      	beq.n	800abae <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800ab4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab52:	f200 8083 	bhi.w	800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ab56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d004      	beq.n	800ab66 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800ab5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ab62:	d012      	beq.n	800ab8a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800ab64:	e07a      	b.n	800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab66:	4b38      	ldr	r3, [pc, #224]	@ (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab72:	d107      	bne.n	800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f000 fe0b 	bl	800b794 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab82:	e340      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab84:	2300      	movs	r3, #0
 800ab86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab88:	e33d      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab8a:	4b2f      	ldr	r3, [pc, #188]	@ (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab96:	d107      	bne.n	800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab98:	f107 0318 	add.w	r3, r7, #24
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f000 fb51 	bl	800b244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aba2:	69bb      	ldr	r3, [r7, #24]
 800aba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aba6:	e32e      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aba8:	2300      	movs	r3, #0
 800abaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abac:	e32b      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800abae:	4b26      	ldr	r3, [pc, #152]	@ (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800abb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800abba:	d107      	bne.n	800abcc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abbc:	f107 030c 	add.w	r3, r7, #12
 800abc0:	4618      	mov	r0, r3
 800abc2:	f000 fc93 	bl	800b4ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abca:	e31c      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abcc:	2300      	movs	r3, #0
 800abce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abd0:	e319      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800abd2:	4b1d      	ldr	r3, [pc, #116]	@ (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800abd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abd6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800abda:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800abdc:	4b1a      	ldr	r3, [pc, #104]	@ (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f003 0304 	and.w	r3, r3, #4
 800abe4:	2b04      	cmp	r3, #4
 800abe6:	d10c      	bne.n	800ac02 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800abe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abea:	2b00      	cmp	r3, #0
 800abec:	d109      	bne.n	800ac02 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abee:	4b16      	ldr	r3, [pc, #88]	@ (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	08db      	lsrs	r3, r3, #3
 800abf4:	f003 0303 	and.w	r3, r3, #3
 800abf8:	4a14      	ldr	r2, [pc, #80]	@ (800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800abfa:	fa22 f303 	lsr.w	r3, r2, r3
 800abfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac00:	e01e      	b.n	800ac40 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac02:	4b11      	ldr	r3, [pc, #68]	@ (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac0e:	d106      	bne.n	800ac1e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800ac10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac16:	d102      	bne.n	800ac1e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ac18:	4b0d      	ldr	r3, [pc, #52]	@ (800ac50 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800ac1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac1c:	e010      	b.n	800ac40 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac1e:	4b0a      	ldr	r3, [pc, #40]	@ (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac2a:	d106      	bne.n	800ac3a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800ac2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac32:	d102      	bne.n	800ac3a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ac34:	4b07      	ldr	r3, [pc, #28]	@ (800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800ac36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac38:	e002      	b.n	800ac40 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ac3e:	e2e2      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ac40:	e2e1      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ac42:	4b05      	ldr	r3, [pc, #20]	@ (800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ac44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac46:	e2de      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ac48:	58024400 	.word	0x58024400
 800ac4c:	03d09000 	.word	0x03d09000
 800ac50:	003d0900 	.word	0x003d0900
 800ac54:	017d7840 	.word	0x017d7840
 800ac58:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac60:	e2d1      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ac62:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac66:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800ac6a:	430b      	orrs	r3, r1
 800ac6c:	f040 809c 	bne.w	800ada8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ac70:	4b93      	ldr	r3, [pc, #588]	@ (800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ac72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac74:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800ac78:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ac7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ac80:	d054      	beq.n	800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800ac82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ac88:	f200 808b 	bhi.w	800ada2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ac8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac8e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ac92:	f000 8083 	beq.w	800ad9c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800ac96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac98:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ac9c:	f200 8081 	bhi.w	800ada2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800aca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aca2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aca6:	d02f      	beq.n	800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800aca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800acae:	d878      	bhi.n	800ada2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800acb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d004      	beq.n	800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800acb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800acbc:	d012      	beq.n	800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800acbe:	e070      	b.n	800ada2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800acc0:	4b7f      	ldr	r3, [pc, #508]	@ (800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800acc8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800accc:	d107      	bne.n	800acde <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800acce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800acd2:	4618      	mov	r0, r3
 800acd4:	f000 fd5e 	bl	800b794 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800acd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acdc:	e293      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acde:	2300      	movs	r3, #0
 800ace0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ace2:	e290      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ace4:	4b76      	ldr	r3, [pc, #472]	@ (800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800acec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800acf0:	d107      	bne.n	800ad02 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acf2:	f107 0318 	add.w	r3, r7, #24
 800acf6:	4618      	mov	r0, r3
 800acf8:	f000 faa4 	bl	800b244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800acfc:	69bb      	ldr	r3, [r7, #24]
 800acfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad00:	e281      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad02:	2300      	movs	r3, #0
 800ad04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad06:	e27e      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad08:	4b6d      	ldr	r3, [pc, #436]	@ (800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ad10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad14:	d107      	bne.n	800ad26 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad16:	f107 030c 	add.w	r3, r7, #12
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f000 fbe6 	bl	800b4ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad24:	e26f      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad26:	2300      	movs	r3, #0
 800ad28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad2a:	e26c      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ad2c:	4b64      	ldr	r3, [pc, #400]	@ (800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad30:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ad34:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad36:	4b62      	ldr	r3, [pc, #392]	@ (800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f003 0304 	and.w	r3, r3, #4
 800ad3e:	2b04      	cmp	r3, #4
 800ad40:	d10c      	bne.n	800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800ad42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d109      	bne.n	800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad48:	4b5d      	ldr	r3, [pc, #372]	@ (800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	08db      	lsrs	r3, r3, #3
 800ad4e:	f003 0303 	and.w	r3, r3, #3
 800ad52:	4a5c      	ldr	r2, [pc, #368]	@ (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ad54:	fa22 f303 	lsr.w	r3, r2, r3
 800ad58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad5a:	e01e      	b.n	800ad9a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ad5c:	4b58      	ldr	r3, [pc, #352]	@ (800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad68:	d106      	bne.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800ad6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad70:	d102      	bne.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ad72:	4b55      	ldr	r3, [pc, #340]	@ (800aec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ad74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad76:	e010      	b.n	800ad9a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad78:	4b51      	ldr	r3, [pc, #324]	@ (800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad84:	d106      	bne.n	800ad94 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800ad86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad8c:	d102      	bne.n	800ad94 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ad8e:	4b4f      	ldr	r3, [pc, #316]	@ (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ad90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad92:	e002      	b.n	800ad9a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ad94:	2300      	movs	r3, #0
 800ad96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ad98:	e235      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ad9a:	e234      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ad9c:	4b4c      	ldr	r3, [pc, #304]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800ad9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ada0:	e231      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ada2:	2300      	movs	r3, #0
 800ada4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ada6:	e22e      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ada8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adac:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800adb0:	430b      	orrs	r3, r1
 800adb2:	f040 808f 	bne.w	800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800adb6:	4b42      	ldr	r3, [pc, #264]	@ (800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800adb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800adba:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800adbe:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800adc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adc2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800adc6:	d06b      	beq.n	800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800adc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800adce:	d874      	bhi.n	800aeba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800add0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800add2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800add6:	d056      	beq.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800add8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adda:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800adde:	d86c      	bhi.n	800aeba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ade0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ade2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ade6:	d03b      	beq.n	800ae60 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800ade8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800adee:	d864      	bhi.n	800aeba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800adf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adf2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800adf6:	d021      	beq.n	800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800adf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adfa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800adfe:	d85c      	bhi.n	800aeba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ae00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d004      	beq.n	800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800ae06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae0c:	d004      	beq.n	800ae18 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800ae0e:	e054      	b.n	800aeba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800ae10:	f7fe fa4c 	bl	80092ac <HAL_RCC_GetPCLK1Freq>
 800ae14:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ae16:	e1f6      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae18:	4b29      	ldr	r3, [pc, #164]	@ (800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ae24:	d107      	bne.n	800ae36 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae26:	f107 0318 	add.w	r3, r7, #24
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f000 fa0a 	bl	800b244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ae30:	69fb      	ldr	r3, [r7, #28]
 800ae32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae34:	e1e7      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae36:	2300      	movs	r3, #0
 800ae38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae3a:	e1e4      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae3c:	4b20      	ldr	r3, [pc, #128]	@ (800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ae44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae48:	d107      	bne.n	800ae5a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae4a:	f107 030c 	add.w	r3, r7, #12
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f000 fb4c 	bl	800b4ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae58:	e1d5      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae5e:	e1d2      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ae60:	4b17      	ldr	r3, [pc, #92]	@ (800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f003 0304 	and.w	r3, r3, #4
 800ae68:	2b04      	cmp	r3, #4
 800ae6a:	d109      	bne.n	800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae6c:	4b14      	ldr	r3, [pc, #80]	@ (800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	08db      	lsrs	r3, r3, #3
 800ae72:	f003 0303 	and.w	r3, r3, #3
 800ae76:	4a13      	ldr	r2, [pc, #76]	@ (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ae78:	fa22 f303 	lsr.w	r3, r2, r3
 800ae7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae7e:	e1c2      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae80:	2300      	movs	r3, #0
 800ae82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae84:	e1bf      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ae86:	4b0e      	ldr	r3, [pc, #56]	@ (800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae92:	d102      	bne.n	800ae9a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800ae94:	4b0c      	ldr	r3, [pc, #48]	@ (800aec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ae96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae98:	e1b5      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae9e:	e1b2      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aea0:	4b07      	ldr	r3, [pc, #28]	@ (800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aea8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aeac:	d102      	bne.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800aeae:	4b07      	ldr	r3, [pc, #28]	@ (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800aeb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aeb2:	e1a8      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aeb8:	e1a5      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800aeba:	2300      	movs	r3, #0
 800aebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aebe:	e1a2      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aec0:	58024400 	.word	0x58024400
 800aec4:	03d09000 	.word	0x03d09000
 800aec8:	003d0900 	.word	0x003d0900
 800aecc:	017d7840 	.word	0x017d7840
 800aed0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800aed4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aed8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800aedc:	430b      	orrs	r3, r1
 800aede:	d173      	bne.n	800afc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800aee0:	4b9c      	ldr	r3, [pc, #624]	@ (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aee4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800aee8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aeea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aef0:	d02f      	beq.n	800af52 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800aef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aef4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aef8:	d863      	bhi.n	800afc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800aefa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d004      	beq.n	800af0a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800af00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af06:	d012      	beq.n	800af2e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800af08:	e05b      	b.n	800afc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af0a:	4b92      	ldr	r3, [pc, #584]	@ (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af16:	d107      	bne.n	800af28 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af18:	f107 0318 	add.w	r3, r7, #24
 800af1c:	4618      	mov	r0, r3
 800af1e:	f000 f991 	bl	800b244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800af22:	69bb      	ldr	r3, [r7, #24]
 800af24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af26:	e16e      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af28:	2300      	movs	r3, #0
 800af2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af2c:	e16b      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af2e:	4b89      	ldr	r3, [pc, #548]	@ (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800af36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af3a:	d107      	bne.n	800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af3c:	f107 030c 	add.w	r3, r7, #12
 800af40:	4618      	mov	r0, r3
 800af42:	f000 fad3 	bl	800b4ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af4a:	e15c      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af4c:	2300      	movs	r3, #0
 800af4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af50:	e159      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800af52:	4b80      	ldr	r3, [pc, #512]	@ (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af56:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800af5a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800af5c:	4b7d      	ldr	r3, [pc, #500]	@ (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f003 0304 	and.w	r3, r3, #4
 800af64:	2b04      	cmp	r3, #4
 800af66:	d10c      	bne.n	800af82 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800af68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d109      	bne.n	800af82 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af6e:	4b79      	ldr	r3, [pc, #484]	@ (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	08db      	lsrs	r3, r3, #3
 800af74:	f003 0303 	and.w	r3, r3, #3
 800af78:	4a77      	ldr	r2, [pc, #476]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800af7a:	fa22 f303 	lsr.w	r3, r2, r3
 800af7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af80:	e01e      	b.n	800afc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800af82:	4b74      	ldr	r3, [pc, #464]	@ (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af8e:	d106      	bne.n	800af9e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800af90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af96:	d102      	bne.n	800af9e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800af98:	4b70      	ldr	r3, [pc, #448]	@ (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800af9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af9c:	e010      	b.n	800afc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800af9e:	4b6d      	ldr	r3, [pc, #436]	@ (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800afa6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800afaa:	d106      	bne.n	800afba <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800afac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800afb2:	d102      	bne.n	800afba <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800afb4:	4b6a      	ldr	r3, [pc, #424]	@ (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800afb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800afb8:	e002      	b.n	800afc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800afba:	2300      	movs	r3, #0
 800afbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800afbe:	e122      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800afc0:	e121      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800afc2:	2300      	movs	r3, #0
 800afc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afc6:	e11e      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800afc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afcc:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800afd0:	430b      	orrs	r3, r1
 800afd2:	d133      	bne.n	800b03c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800afd4:	4b5f      	ldr	r3, [pc, #380]	@ (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800afd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800afd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800afdc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800afde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d004      	beq.n	800afee <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800afe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afe6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800afea:	d012      	beq.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800afec:	e023      	b.n	800b036 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800afee:	4b59      	ldr	r3, [pc, #356]	@ (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aff6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800affa:	d107      	bne.n	800b00c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800affc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b000:	4618      	mov	r0, r3
 800b002:	f000 fbc7 	bl	800b794 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b008:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b00a:	e0fc      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b00c:	2300      	movs	r3, #0
 800b00e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b010:	e0f9      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b012:	4b50      	ldr	r3, [pc, #320]	@ (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b01a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b01e:	d107      	bne.n	800b030 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b020:	f107 0318 	add.w	r3, r7, #24
 800b024:	4618      	mov	r0, r3
 800b026:	f000 f90d 	bl	800b244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b02a:	6a3b      	ldr	r3, [r7, #32]
 800b02c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b02e:	e0ea      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b030:	2300      	movs	r3, #0
 800b032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b034:	e0e7      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b036:	2300      	movs	r3, #0
 800b038:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b03a:	e0e4      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b03c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b040:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800b044:	430b      	orrs	r3, r1
 800b046:	f040 808d 	bne.w	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b04a:	4b42      	ldr	r3, [pc, #264]	@ (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b04c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b04e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b052:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b056:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b05a:	d06b      	beq.n	800b134 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b05c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b05e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b062:	d874      	bhi.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b06a:	d056      	beq.n	800b11a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b06c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b06e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b072:	d86c      	bhi.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b076:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b07a:	d03b      	beq.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b07c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b07e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b082:	d864      	bhi.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b086:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b08a:	d021      	beq.n	800b0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b08c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b08e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b092:	d85c      	bhi.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b096:	2b00      	cmp	r3, #0
 800b098:	d004      	beq.n	800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b09a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b09c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b0a0:	d004      	beq.n	800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b0a2:	e054      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b0a4:	f000 f8b8 	bl	800b218 <HAL_RCCEx_GetD3PCLK1Freq>
 800b0a8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b0aa:	e0ac      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b0ac:	4b29      	ldr	r3, [pc, #164]	@ (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b0b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b0b8:	d107      	bne.n	800b0ca <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0ba:	f107 0318 	add.w	r3, r7, #24
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f000 f8c0 	bl	800b244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b0c4:	69fb      	ldr	r3, [r7, #28]
 800b0c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0c8:	e09d      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0ce:	e09a      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b0d0:	4b20      	ldr	r3, [pc, #128]	@ (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b0d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b0dc:	d107      	bne.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0de:	f107 030c 	add.w	r3, r7, #12
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f000 fa02 	bl	800b4ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0ec:	e08b      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0f2:	e088      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b0f4:	4b17      	ldr	r3, [pc, #92]	@ (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f003 0304 	and.w	r3, r3, #4
 800b0fc:	2b04      	cmp	r3, #4
 800b0fe:	d109      	bne.n	800b114 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b100:	4b14      	ldr	r3, [pc, #80]	@ (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	08db      	lsrs	r3, r3, #3
 800b106:	f003 0303 	and.w	r3, r3, #3
 800b10a:	4a13      	ldr	r2, [pc, #76]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b10c:	fa22 f303 	lsr.w	r3, r2, r3
 800b110:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b112:	e078      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b114:	2300      	movs	r3, #0
 800b116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b118:	e075      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b11a:	4b0e      	ldr	r3, [pc, #56]	@ (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b122:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b126:	d102      	bne.n	800b12e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b128:	4b0c      	ldr	r3, [pc, #48]	@ (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b12a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b12c:	e06b      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b12e:	2300      	movs	r3, #0
 800b130:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b132:	e068      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b134:	4b07      	ldr	r3, [pc, #28]	@ (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b13c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b140:	d102      	bne.n	800b148 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b142:	4b07      	ldr	r3, [pc, #28]	@ (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b144:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b146:	e05e      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b148:	2300      	movs	r3, #0
 800b14a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b14c:	e05b      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b14e:	2300      	movs	r3, #0
 800b150:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b152:	e058      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b154:	58024400 	.word	0x58024400
 800b158:	03d09000 	.word	0x03d09000
 800b15c:	003d0900 	.word	0x003d0900
 800b160:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b164:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b168:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b16c:	430b      	orrs	r3, r1
 800b16e:	d148      	bne.n	800b202 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b170:	4b27      	ldr	r3, [pc, #156]	@ (800b210 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b172:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b174:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b178:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b17a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b17c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b180:	d02a      	beq.n	800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b184:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b188:	d838      	bhi.n	800b1fc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b18a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d004      	beq.n	800b19a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b192:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b196:	d00d      	beq.n	800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b198:	e030      	b.n	800b1fc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b19a:	4b1d      	ldr	r3, [pc, #116]	@ (800b210 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b1a6:	d102      	bne.n	800b1ae <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800b1a8:	4b1a      	ldr	r3, [pc, #104]	@ (800b214 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800b1aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1ac:	e02b      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1b2:	e028      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b1b4:	4b16      	ldr	r3, [pc, #88]	@ (800b210 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b1bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b1c0:	d107      	bne.n	800b1d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b1c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f000 fae4 	bl	800b794 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b1cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1d0:	e019      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1d6:	e016      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b1d8:	4b0d      	ldr	r3, [pc, #52]	@ (800b210 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b1e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b1e4:	d107      	bne.n	800b1f6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1e6:	f107 0318 	add.w	r3, r7, #24
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f000 f82a 	bl	800b244 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b1f0:	69fb      	ldr	r3, [r7, #28]
 800b1f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1f4:	e007      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1fa:	e004      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b200:	e001      	b.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800b202:	2300      	movs	r3, #0
 800b204:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800b206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3740      	adds	r7, #64	@ 0x40
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}
 800b210:	58024400 	.word	0x58024400
 800b214:	017d7840 	.word	0x017d7840

0800b218 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b21c:	f7fe f816 	bl	800924c <HAL_RCC_GetHCLKFreq>
 800b220:	4602      	mov	r2, r0
 800b222:	4b06      	ldr	r3, [pc, #24]	@ (800b23c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b224:	6a1b      	ldr	r3, [r3, #32]
 800b226:	091b      	lsrs	r3, r3, #4
 800b228:	f003 0307 	and.w	r3, r3, #7
 800b22c:	4904      	ldr	r1, [pc, #16]	@ (800b240 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b22e:	5ccb      	ldrb	r3, [r1, r3]
 800b230:	f003 031f 	and.w	r3, r3, #31
 800b234:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b238:	4618      	mov	r0, r3
 800b23a:	bd80      	pop	{r7, pc}
 800b23c:	58024400 	.word	0x58024400
 800b240:	08012780 	.word	0x08012780

0800b244 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b244:	b480      	push	{r7}
 800b246:	b089      	sub	sp, #36	@ 0x24
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b24c:	4ba1      	ldr	r3, [pc, #644]	@ (800b4d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b24e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b250:	f003 0303 	and.w	r3, r3, #3
 800b254:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b256:	4b9f      	ldr	r3, [pc, #636]	@ (800b4d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b25a:	0b1b      	lsrs	r3, r3, #12
 800b25c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b260:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b262:	4b9c      	ldr	r3, [pc, #624]	@ (800b4d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b266:	091b      	lsrs	r3, r3, #4
 800b268:	f003 0301 	and.w	r3, r3, #1
 800b26c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b26e:	4b99      	ldr	r3, [pc, #612]	@ (800b4d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b272:	08db      	lsrs	r3, r3, #3
 800b274:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b278:	693a      	ldr	r2, [r7, #16]
 800b27a:	fb02 f303 	mul.w	r3, r2, r3
 800b27e:	ee07 3a90 	vmov	s15, r3
 800b282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b286:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	f000 8111 	beq.w	800b4b4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b292:	69bb      	ldr	r3, [r7, #24]
 800b294:	2b02      	cmp	r3, #2
 800b296:	f000 8083 	beq.w	800b3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b29a:	69bb      	ldr	r3, [r7, #24]
 800b29c:	2b02      	cmp	r3, #2
 800b29e:	f200 80a1 	bhi.w	800b3e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b2a2:	69bb      	ldr	r3, [r7, #24]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d003      	beq.n	800b2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b2a8:	69bb      	ldr	r3, [r7, #24]
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	d056      	beq.n	800b35c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b2ae:	e099      	b.n	800b3e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2b0:	4b88      	ldr	r3, [pc, #544]	@ (800b4d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f003 0320 	and.w	r3, r3, #32
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d02d      	beq.n	800b318 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2bc:	4b85      	ldr	r3, [pc, #532]	@ (800b4d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	08db      	lsrs	r3, r3, #3
 800b2c2:	f003 0303 	and.w	r3, r3, #3
 800b2c6:	4a84      	ldr	r2, [pc, #528]	@ (800b4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b2c8:	fa22 f303 	lsr.w	r3, r2, r3
 800b2cc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	ee07 3a90 	vmov	s15, r3
 800b2d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	ee07 3a90 	vmov	s15, r3
 800b2de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2e6:	4b7b      	ldr	r3, [pc, #492]	@ (800b4d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2ee:	ee07 3a90 	vmov	s15, r3
 800b2f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2fa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b4dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b2fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b306:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b30a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b30e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b312:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b316:	e087      	b.n	800b428 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	ee07 3a90 	vmov	s15, r3
 800b31e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b322:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b4e0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b32a:	4b6a      	ldr	r3, [pc, #424]	@ (800b4d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b32c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b32e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b332:	ee07 3a90 	vmov	s15, r3
 800b336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b33a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b33e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b4dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b34a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b34e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b352:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b356:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b35a:	e065      	b.n	800b428 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	ee07 3a90 	vmov	s15, r3
 800b362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b366:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b4e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b36a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b36e:	4b59      	ldr	r3, [pc, #356]	@ (800b4d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b376:	ee07 3a90 	vmov	s15, r3
 800b37a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b37e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b382:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b4dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b38a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b38e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b39a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b39e:	e043      	b.n	800b428 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	ee07 3a90 	vmov	s15, r3
 800b3a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3aa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b3ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3b2:	4b48      	ldr	r3, [pc, #288]	@ (800b4d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3ba:	ee07 3a90 	vmov	s15, r3
 800b3be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3c6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b4dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b3ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3e2:	e021      	b.n	800b428 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	ee07 3a90 	vmov	s15, r3
 800b3ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3ee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b4e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b3f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3f6:	4b37      	ldr	r3, [pc, #220]	@ (800b4d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3fe:	ee07 3a90 	vmov	s15, r3
 800b402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b406:	ed97 6a03 	vldr	s12, [r7, #12]
 800b40a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b4dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b40e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b416:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b41a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b41e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b422:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b426:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b428:	4b2a      	ldr	r3, [pc, #168]	@ (800b4d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b42a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b42c:	0a5b      	lsrs	r3, r3, #9
 800b42e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b432:	ee07 3a90 	vmov	s15, r3
 800b436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b43a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b43e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b442:	edd7 6a07 	vldr	s13, [r7, #28]
 800b446:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b44a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b44e:	ee17 2a90 	vmov	r2, s15
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b456:	4b1f      	ldr	r3, [pc, #124]	@ (800b4d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b45a:	0c1b      	lsrs	r3, r3, #16
 800b45c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b460:	ee07 3a90 	vmov	s15, r3
 800b464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b468:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b46c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b470:	edd7 6a07 	vldr	s13, [r7, #28]
 800b474:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b478:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b47c:	ee17 2a90 	vmov	r2, s15
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b484:	4b13      	ldr	r3, [pc, #76]	@ (800b4d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b488:	0e1b      	lsrs	r3, r3, #24
 800b48a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b48e:	ee07 3a90 	vmov	s15, r3
 800b492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b496:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b49a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b49e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4aa:	ee17 2a90 	vmov	r2, s15
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b4b2:	e008      	b.n	800b4c6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	609a      	str	r2, [r3, #8]
}
 800b4c6:	bf00      	nop
 800b4c8:	3724      	adds	r7, #36	@ 0x24
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d0:	4770      	bx	lr
 800b4d2:	bf00      	nop
 800b4d4:	58024400 	.word	0x58024400
 800b4d8:	03d09000 	.word	0x03d09000
 800b4dc:	46000000 	.word	0x46000000
 800b4e0:	4c742400 	.word	0x4c742400
 800b4e4:	4a742400 	.word	0x4a742400
 800b4e8:	4bbebc20 	.word	0x4bbebc20

0800b4ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b089      	sub	sp, #36	@ 0x24
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b4f4:	4ba1      	ldr	r3, [pc, #644]	@ (800b77c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4f8:	f003 0303 	and.w	r3, r3, #3
 800b4fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b4fe:	4b9f      	ldr	r3, [pc, #636]	@ (800b77c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b502:	0d1b      	lsrs	r3, r3, #20
 800b504:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b508:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b50a:	4b9c      	ldr	r3, [pc, #624]	@ (800b77c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b50c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b50e:	0a1b      	lsrs	r3, r3, #8
 800b510:	f003 0301 	and.w	r3, r3, #1
 800b514:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b516:	4b99      	ldr	r3, [pc, #612]	@ (800b77c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b51a:	08db      	lsrs	r3, r3, #3
 800b51c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b520:	693a      	ldr	r2, [r7, #16]
 800b522:	fb02 f303 	mul.w	r3, r2, r3
 800b526:	ee07 3a90 	vmov	s15, r3
 800b52a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b52e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	2b00      	cmp	r3, #0
 800b536:	f000 8111 	beq.w	800b75c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b53a:	69bb      	ldr	r3, [r7, #24]
 800b53c:	2b02      	cmp	r3, #2
 800b53e:	f000 8083 	beq.w	800b648 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b542:	69bb      	ldr	r3, [r7, #24]
 800b544:	2b02      	cmp	r3, #2
 800b546:	f200 80a1 	bhi.w	800b68c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b54a:	69bb      	ldr	r3, [r7, #24]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d003      	beq.n	800b558 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b550:	69bb      	ldr	r3, [r7, #24]
 800b552:	2b01      	cmp	r3, #1
 800b554:	d056      	beq.n	800b604 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b556:	e099      	b.n	800b68c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b558:	4b88      	ldr	r3, [pc, #544]	@ (800b77c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f003 0320 	and.w	r3, r3, #32
 800b560:	2b00      	cmp	r3, #0
 800b562:	d02d      	beq.n	800b5c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b564:	4b85      	ldr	r3, [pc, #532]	@ (800b77c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	08db      	lsrs	r3, r3, #3
 800b56a:	f003 0303 	and.w	r3, r3, #3
 800b56e:	4a84      	ldr	r2, [pc, #528]	@ (800b780 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b570:	fa22 f303 	lsr.w	r3, r2, r3
 800b574:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	ee07 3a90 	vmov	s15, r3
 800b57c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	ee07 3a90 	vmov	s15, r3
 800b586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b58a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b58e:	4b7b      	ldr	r3, [pc, #492]	@ (800b77c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b596:	ee07 3a90 	vmov	s15, r3
 800b59a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b59e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5a2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b784 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b5a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b5be:	e087      	b.n	800b6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	ee07 3a90 	vmov	s15, r3
 800b5c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5ca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b788 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b5ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5d2:	4b6a      	ldr	r3, [pc, #424]	@ (800b77c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5da:	ee07 3a90 	vmov	s15, r3
 800b5de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5e6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b784 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b5ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b602:	e065      	b.n	800b6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	ee07 3a90 	vmov	s15, r3
 800b60a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b60e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b78c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b616:	4b59      	ldr	r3, [pc, #356]	@ (800b77c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b61a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b61e:	ee07 3a90 	vmov	s15, r3
 800b622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b626:	ed97 6a03 	vldr	s12, [r7, #12]
 800b62a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b784 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b62e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b636:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b63a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b63e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b642:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b646:	e043      	b.n	800b6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	ee07 3a90 	vmov	s15, r3
 800b64e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b652:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b790 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b65a:	4b48      	ldr	r3, [pc, #288]	@ (800b77c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b65c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b65e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b662:	ee07 3a90 	vmov	s15, r3
 800b666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b66a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b66e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b784 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b67a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b67e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b682:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b686:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b68a:	e021      	b.n	800b6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b68c:	697b      	ldr	r3, [r7, #20]
 800b68e:	ee07 3a90 	vmov	s15, r3
 800b692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b696:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b78c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b69a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b69e:	4b37      	ldr	r3, [pc, #220]	@ (800b77c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b6a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6a6:	ee07 3a90 	vmov	s15, r3
 800b6aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6b2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b784 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b6b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b6c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6ce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b6d0:	4b2a      	ldr	r3, [pc, #168]	@ (800b77c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b6d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6d4:	0a5b      	lsrs	r3, r3, #9
 800b6d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6da:	ee07 3a90 	vmov	s15, r3
 800b6de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b6e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6f6:	ee17 2a90 	vmov	r2, s15
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b6fe:	4b1f      	ldr	r3, [pc, #124]	@ (800b77c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b702:	0c1b      	lsrs	r3, r3, #16
 800b704:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b708:	ee07 3a90 	vmov	s15, r3
 800b70c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b710:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b714:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b718:	edd7 6a07 	vldr	s13, [r7, #28]
 800b71c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b720:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b724:	ee17 2a90 	vmov	r2, s15
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b72c:	4b13      	ldr	r3, [pc, #76]	@ (800b77c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b72e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b730:	0e1b      	lsrs	r3, r3, #24
 800b732:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b736:	ee07 3a90 	vmov	s15, r3
 800b73a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b73e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b742:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b746:	edd7 6a07 	vldr	s13, [r7, #28]
 800b74a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b74e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b752:	ee17 2a90 	vmov	r2, s15
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b75a:	e008      	b.n	800b76e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2200      	movs	r2, #0
 800b760:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2200      	movs	r2, #0
 800b766:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2200      	movs	r2, #0
 800b76c:	609a      	str	r2, [r3, #8]
}
 800b76e:	bf00      	nop
 800b770:	3724      	adds	r7, #36	@ 0x24
 800b772:	46bd      	mov	sp, r7
 800b774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b778:	4770      	bx	lr
 800b77a:	bf00      	nop
 800b77c:	58024400 	.word	0x58024400
 800b780:	03d09000 	.word	0x03d09000
 800b784:	46000000 	.word	0x46000000
 800b788:	4c742400 	.word	0x4c742400
 800b78c:	4a742400 	.word	0x4a742400
 800b790:	4bbebc20 	.word	0x4bbebc20

0800b794 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b794:	b480      	push	{r7}
 800b796:	b089      	sub	sp, #36	@ 0x24
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b79c:	4ba0      	ldr	r3, [pc, #640]	@ (800ba20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b79e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7a0:	f003 0303 	and.w	r3, r3, #3
 800b7a4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b7a6:	4b9e      	ldr	r3, [pc, #632]	@ (800ba20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7aa:	091b      	lsrs	r3, r3, #4
 800b7ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b7b0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b7b2:	4b9b      	ldr	r3, [pc, #620]	@ (800ba20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7b6:	f003 0301 	and.w	r3, r3, #1
 800b7ba:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b7bc:	4b98      	ldr	r3, [pc, #608]	@ (800ba20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7c0:	08db      	lsrs	r3, r3, #3
 800b7c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b7c6:	693a      	ldr	r2, [r7, #16]
 800b7c8:	fb02 f303 	mul.w	r3, r2, r3
 800b7cc:	ee07 3a90 	vmov	s15, r3
 800b7d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7d4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	f000 8111 	beq.w	800ba02 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b7e0:	69bb      	ldr	r3, [r7, #24]
 800b7e2:	2b02      	cmp	r3, #2
 800b7e4:	f000 8083 	beq.w	800b8ee <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b7e8:	69bb      	ldr	r3, [r7, #24]
 800b7ea:	2b02      	cmp	r3, #2
 800b7ec:	f200 80a1 	bhi.w	800b932 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b7f0:	69bb      	ldr	r3, [r7, #24]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d003      	beq.n	800b7fe <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b7f6:	69bb      	ldr	r3, [r7, #24]
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	d056      	beq.n	800b8aa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b7fc:	e099      	b.n	800b932 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7fe:	4b88      	ldr	r3, [pc, #544]	@ (800ba20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	f003 0320 	and.w	r3, r3, #32
 800b806:	2b00      	cmp	r3, #0
 800b808:	d02d      	beq.n	800b866 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b80a:	4b85      	ldr	r3, [pc, #532]	@ (800ba20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	08db      	lsrs	r3, r3, #3
 800b810:	f003 0303 	and.w	r3, r3, #3
 800b814:	4a83      	ldr	r2, [pc, #524]	@ (800ba24 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b816:	fa22 f303 	lsr.w	r3, r2, r3
 800b81a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	ee07 3a90 	vmov	s15, r3
 800b822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	ee07 3a90 	vmov	s15, r3
 800b82c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b830:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b834:	4b7a      	ldr	r3, [pc, #488]	@ (800ba20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b83c:	ee07 3a90 	vmov	s15, r3
 800b840:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b844:	ed97 6a03 	vldr	s12, [r7, #12]
 800b848:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800ba28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b84c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b850:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b854:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b858:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b85c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b860:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b864:	e087      	b.n	800b976 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	ee07 3a90 	vmov	s15, r3
 800b86c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b870:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800ba2c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b874:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b878:	4b69      	ldr	r3, [pc, #420]	@ (800ba20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b87a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b87c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b880:	ee07 3a90 	vmov	s15, r3
 800b884:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b888:	ed97 6a03 	vldr	s12, [r7, #12]
 800b88c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800ba28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b890:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b894:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b898:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b89c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b8a8:	e065      	b.n	800b976 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	ee07 3a90 	vmov	s15, r3
 800b8b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8b4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800ba30 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b8b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8bc:	4b58      	ldr	r3, [pc, #352]	@ (800ba20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8c4:	ee07 3a90 	vmov	s15, r3
 800b8c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8d0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800ba28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b8d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b8e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b8ec:	e043      	b.n	800b976 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	ee07 3a90 	vmov	s15, r3
 800b8f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8f8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800ba34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b8fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b900:	4b47      	ldr	r3, [pc, #284]	@ (800ba20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b908:	ee07 3a90 	vmov	s15, r3
 800b90c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b910:	ed97 6a03 	vldr	s12, [r7, #12]
 800b914:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800ba28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b918:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b91c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b920:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b924:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b92c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b930:	e021      	b.n	800b976 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	ee07 3a90 	vmov	s15, r3
 800b938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b93c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800ba2c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b940:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b944:	4b36      	ldr	r3, [pc, #216]	@ (800ba20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b94c:	ee07 3a90 	vmov	s15, r3
 800b950:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b954:	ed97 6a03 	vldr	s12, [r7, #12]
 800b958:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800ba28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b95c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b960:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b964:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b968:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b96c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b970:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b974:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b976:	4b2a      	ldr	r3, [pc, #168]	@ (800ba20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b97a:	0a5b      	lsrs	r3, r3, #9
 800b97c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b980:	ee07 3a90 	vmov	s15, r3
 800b984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b988:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b98c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b990:	edd7 6a07 	vldr	s13, [r7, #28]
 800b994:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b998:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b99c:	ee17 2a90 	vmov	r2, s15
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b9a4:	4b1e      	ldr	r3, [pc, #120]	@ (800ba20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9a8:	0c1b      	lsrs	r3, r3, #16
 800b9aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b9ae:	ee07 3a90 	vmov	s15, r3
 800b9b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b9ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b9be:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9ca:	ee17 2a90 	vmov	r2, s15
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b9d2:	4b13      	ldr	r3, [pc, #76]	@ (800ba20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9d6:	0e1b      	lsrs	r3, r3, #24
 800b9d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b9dc:	ee07 3a90 	vmov	s15, r3
 800b9e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b9e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b9ec:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9f8:	ee17 2a90 	vmov	r2, s15
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ba00:	e008      	b.n	800ba14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2200      	movs	r2, #0
 800ba06:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2200      	movs	r2, #0
 800ba12:	609a      	str	r2, [r3, #8]
}
 800ba14:	bf00      	nop
 800ba16:	3724      	adds	r7, #36	@ 0x24
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr
 800ba20:	58024400 	.word	0x58024400
 800ba24:	03d09000 	.word	0x03d09000
 800ba28:	46000000 	.word	0x46000000
 800ba2c:	4c742400 	.word	0x4c742400
 800ba30:	4a742400 	.word	0x4a742400
 800ba34:	4bbebc20 	.word	0x4bbebc20

0800ba38 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ba42:	2300      	movs	r3, #0
 800ba44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ba46:	4b53      	ldr	r3, [pc, #332]	@ (800bb94 <RCCEx_PLL2_Config+0x15c>)
 800ba48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba4a:	f003 0303 	and.w	r3, r3, #3
 800ba4e:	2b03      	cmp	r3, #3
 800ba50:	d101      	bne.n	800ba56 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ba52:	2301      	movs	r3, #1
 800ba54:	e099      	b.n	800bb8a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ba56:	4b4f      	ldr	r3, [pc, #316]	@ (800bb94 <RCCEx_PLL2_Config+0x15c>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4a4e      	ldr	r2, [pc, #312]	@ (800bb94 <RCCEx_PLL2_Config+0x15c>)
 800ba5c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ba60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba62:	f7f7 fc89 	bl	8003378 <HAL_GetTick>
 800ba66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ba68:	e008      	b.n	800ba7c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ba6a:	f7f7 fc85 	bl	8003378 <HAL_GetTick>
 800ba6e:	4602      	mov	r2, r0
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	1ad3      	subs	r3, r2, r3
 800ba74:	2b02      	cmp	r3, #2
 800ba76:	d901      	bls.n	800ba7c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ba78:	2303      	movs	r3, #3
 800ba7a:	e086      	b.n	800bb8a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ba7c:	4b45      	ldr	r3, [pc, #276]	@ (800bb94 <RCCEx_PLL2_Config+0x15c>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d1f0      	bne.n	800ba6a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ba88:	4b42      	ldr	r3, [pc, #264]	@ (800bb94 <RCCEx_PLL2_Config+0x15c>)
 800ba8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba8c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	031b      	lsls	r3, r3, #12
 800ba96:	493f      	ldr	r1, [pc, #252]	@ (800bb94 <RCCEx_PLL2_Config+0x15c>)
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	628b      	str	r3, [r1, #40]	@ 0x28
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	3b01      	subs	r3, #1
 800baa2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	689b      	ldr	r3, [r3, #8]
 800baaa:	3b01      	subs	r3, #1
 800baac:	025b      	lsls	r3, r3, #9
 800baae:	b29b      	uxth	r3, r3
 800bab0:	431a      	orrs	r2, r3
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	68db      	ldr	r3, [r3, #12]
 800bab6:	3b01      	subs	r3, #1
 800bab8:	041b      	lsls	r3, r3, #16
 800baba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800babe:	431a      	orrs	r2, r3
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	691b      	ldr	r3, [r3, #16]
 800bac4:	3b01      	subs	r3, #1
 800bac6:	061b      	lsls	r3, r3, #24
 800bac8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bacc:	4931      	ldr	r1, [pc, #196]	@ (800bb94 <RCCEx_PLL2_Config+0x15c>)
 800bace:	4313      	orrs	r3, r2
 800bad0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bad2:	4b30      	ldr	r3, [pc, #192]	@ (800bb94 <RCCEx_PLL2_Config+0x15c>)
 800bad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bad6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	695b      	ldr	r3, [r3, #20]
 800bade:	492d      	ldr	r1, [pc, #180]	@ (800bb94 <RCCEx_PLL2_Config+0x15c>)
 800bae0:	4313      	orrs	r3, r2
 800bae2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bae4:	4b2b      	ldr	r3, [pc, #172]	@ (800bb94 <RCCEx_PLL2_Config+0x15c>)
 800bae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bae8:	f023 0220 	bic.w	r2, r3, #32
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	699b      	ldr	r3, [r3, #24]
 800baf0:	4928      	ldr	r1, [pc, #160]	@ (800bb94 <RCCEx_PLL2_Config+0x15c>)
 800baf2:	4313      	orrs	r3, r2
 800baf4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800baf6:	4b27      	ldr	r3, [pc, #156]	@ (800bb94 <RCCEx_PLL2_Config+0x15c>)
 800baf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bafa:	4a26      	ldr	r2, [pc, #152]	@ (800bb94 <RCCEx_PLL2_Config+0x15c>)
 800bafc:	f023 0310 	bic.w	r3, r3, #16
 800bb00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bb02:	4b24      	ldr	r3, [pc, #144]	@ (800bb94 <RCCEx_PLL2_Config+0x15c>)
 800bb04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bb06:	4b24      	ldr	r3, [pc, #144]	@ (800bb98 <RCCEx_PLL2_Config+0x160>)
 800bb08:	4013      	ands	r3, r2
 800bb0a:	687a      	ldr	r2, [r7, #4]
 800bb0c:	69d2      	ldr	r2, [r2, #28]
 800bb0e:	00d2      	lsls	r2, r2, #3
 800bb10:	4920      	ldr	r1, [pc, #128]	@ (800bb94 <RCCEx_PLL2_Config+0x15c>)
 800bb12:	4313      	orrs	r3, r2
 800bb14:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bb16:	4b1f      	ldr	r3, [pc, #124]	@ (800bb94 <RCCEx_PLL2_Config+0x15c>)
 800bb18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb1a:	4a1e      	ldr	r2, [pc, #120]	@ (800bb94 <RCCEx_PLL2_Config+0x15c>)
 800bb1c:	f043 0310 	orr.w	r3, r3, #16
 800bb20:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d106      	bne.n	800bb36 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bb28:	4b1a      	ldr	r3, [pc, #104]	@ (800bb94 <RCCEx_PLL2_Config+0x15c>)
 800bb2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb2c:	4a19      	ldr	r2, [pc, #100]	@ (800bb94 <RCCEx_PLL2_Config+0x15c>)
 800bb2e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bb32:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bb34:	e00f      	b.n	800bb56 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	2b01      	cmp	r3, #1
 800bb3a:	d106      	bne.n	800bb4a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bb3c:	4b15      	ldr	r3, [pc, #84]	@ (800bb94 <RCCEx_PLL2_Config+0x15c>)
 800bb3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb40:	4a14      	ldr	r2, [pc, #80]	@ (800bb94 <RCCEx_PLL2_Config+0x15c>)
 800bb42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bb46:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bb48:	e005      	b.n	800bb56 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bb4a:	4b12      	ldr	r3, [pc, #72]	@ (800bb94 <RCCEx_PLL2_Config+0x15c>)
 800bb4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb4e:	4a11      	ldr	r2, [pc, #68]	@ (800bb94 <RCCEx_PLL2_Config+0x15c>)
 800bb50:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bb54:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bb56:	4b0f      	ldr	r3, [pc, #60]	@ (800bb94 <RCCEx_PLL2_Config+0x15c>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	4a0e      	ldr	r2, [pc, #56]	@ (800bb94 <RCCEx_PLL2_Config+0x15c>)
 800bb5c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bb60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb62:	f7f7 fc09 	bl	8003378 <HAL_GetTick>
 800bb66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bb68:	e008      	b.n	800bb7c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bb6a:	f7f7 fc05 	bl	8003378 <HAL_GetTick>
 800bb6e:	4602      	mov	r2, r0
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	1ad3      	subs	r3, r2, r3
 800bb74:	2b02      	cmp	r3, #2
 800bb76:	d901      	bls.n	800bb7c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bb78:	2303      	movs	r3, #3
 800bb7a:	e006      	b.n	800bb8a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bb7c:	4b05      	ldr	r3, [pc, #20]	@ (800bb94 <RCCEx_PLL2_Config+0x15c>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d0f0      	beq.n	800bb6a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bb88:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3710      	adds	r7, #16
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}
 800bb92:	bf00      	nop
 800bb94:	58024400 	.word	0x58024400
 800bb98:	ffff0007 	.word	0xffff0007

0800bb9c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b084      	sub	sp, #16
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bba6:	2300      	movs	r3, #0
 800bba8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bbaa:	4b53      	ldr	r3, [pc, #332]	@ (800bcf8 <RCCEx_PLL3_Config+0x15c>)
 800bbac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbae:	f003 0303 	and.w	r3, r3, #3
 800bbb2:	2b03      	cmp	r3, #3
 800bbb4:	d101      	bne.n	800bbba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	e099      	b.n	800bcee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bbba:	4b4f      	ldr	r3, [pc, #316]	@ (800bcf8 <RCCEx_PLL3_Config+0x15c>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	4a4e      	ldr	r2, [pc, #312]	@ (800bcf8 <RCCEx_PLL3_Config+0x15c>)
 800bbc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bbc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bbc6:	f7f7 fbd7 	bl	8003378 <HAL_GetTick>
 800bbca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bbcc:	e008      	b.n	800bbe0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bbce:	f7f7 fbd3 	bl	8003378 <HAL_GetTick>
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	1ad3      	subs	r3, r2, r3
 800bbd8:	2b02      	cmp	r3, #2
 800bbda:	d901      	bls.n	800bbe0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bbdc:	2303      	movs	r3, #3
 800bbde:	e086      	b.n	800bcee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bbe0:	4b45      	ldr	r3, [pc, #276]	@ (800bcf8 <RCCEx_PLL3_Config+0x15c>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d1f0      	bne.n	800bbce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bbec:	4b42      	ldr	r3, [pc, #264]	@ (800bcf8 <RCCEx_PLL3_Config+0x15c>)
 800bbee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbf0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	051b      	lsls	r3, r3, #20
 800bbfa:	493f      	ldr	r1, [pc, #252]	@ (800bcf8 <RCCEx_PLL3_Config+0x15c>)
 800bbfc:	4313      	orrs	r3, r2
 800bbfe:	628b      	str	r3, [r1, #40]	@ 0x28
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	685b      	ldr	r3, [r3, #4]
 800bc04:	3b01      	subs	r3, #1
 800bc06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	689b      	ldr	r3, [r3, #8]
 800bc0e:	3b01      	subs	r3, #1
 800bc10:	025b      	lsls	r3, r3, #9
 800bc12:	b29b      	uxth	r3, r3
 800bc14:	431a      	orrs	r2, r3
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	3b01      	subs	r3, #1
 800bc1c:	041b      	lsls	r3, r3, #16
 800bc1e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bc22:	431a      	orrs	r2, r3
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	691b      	ldr	r3, [r3, #16]
 800bc28:	3b01      	subs	r3, #1
 800bc2a:	061b      	lsls	r3, r3, #24
 800bc2c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bc30:	4931      	ldr	r1, [pc, #196]	@ (800bcf8 <RCCEx_PLL3_Config+0x15c>)
 800bc32:	4313      	orrs	r3, r2
 800bc34:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bc36:	4b30      	ldr	r3, [pc, #192]	@ (800bcf8 <RCCEx_PLL3_Config+0x15c>)
 800bc38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc3a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	695b      	ldr	r3, [r3, #20]
 800bc42:	492d      	ldr	r1, [pc, #180]	@ (800bcf8 <RCCEx_PLL3_Config+0x15c>)
 800bc44:	4313      	orrs	r3, r2
 800bc46:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bc48:	4b2b      	ldr	r3, [pc, #172]	@ (800bcf8 <RCCEx_PLL3_Config+0x15c>)
 800bc4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc4c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	699b      	ldr	r3, [r3, #24]
 800bc54:	4928      	ldr	r1, [pc, #160]	@ (800bcf8 <RCCEx_PLL3_Config+0x15c>)
 800bc56:	4313      	orrs	r3, r2
 800bc58:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bc5a:	4b27      	ldr	r3, [pc, #156]	@ (800bcf8 <RCCEx_PLL3_Config+0x15c>)
 800bc5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc5e:	4a26      	ldr	r2, [pc, #152]	@ (800bcf8 <RCCEx_PLL3_Config+0x15c>)
 800bc60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bc64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bc66:	4b24      	ldr	r3, [pc, #144]	@ (800bcf8 <RCCEx_PLL3_Config+0x15c>)
 800bc68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bc6a:	4b24      	ldr	r3, [pc, #144]	@ (800bcfc <RCCEx_PLL3_Config+0x160>)
 800bc6c:	4013      	ands	r3, r2
 800bc6e:	687a      	ldr	r2, [r7, #4]
 800bc70:	69d2      	ldr	r2, [r2, #28]
 800bc72:	00d2      	lsls	r2, r2, #3
 800bc74:	4920      	ldr	r1, [pc, #128]	@ (800bcf8 <RCCEx_PLL3_Config+0x15c>)
 800bc76:	4313      	orrs	r3, r2
 800bc78:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bc7a:	4b1f      	ldr	r3, [pc, #124]	@ (800bcf8 <RCCEx_PLL3_Config+0x15c>)
 800bc7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc7e:	4a1e      	ldr	r2, [pc, #120]	@ (800bcf8 <RCCEx_PLL3_Config+0x15c>)
 800bc80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bc84:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d106      	bne.n	800bc9a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bc8c:	4b1a      	ldr	r3, [pc, #104]	@ (800bcf8 <RCCEx_PLL3_Config+0x15c>)
 800bc8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc90:	4a19      	ldr	r2, [pc, #100]	@ (800bcf8 <RCCEx_PLL3_Config+0x15c>)
 800bc92:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800bc96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bc98:	e00f      	b.n	800bcba <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d106      	bne.n	800bcae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bca0:	4b15      	ldr	r3, [pc, #84]	@ (800bcf8 <RCCEx_PLL3_Config+0x15c>)
 800bca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bca4:	4a14      	ldr	r2, [pc, #80]	@ (800bcf8 <RCCEx_PLL3_Config+0x15c>)
 800bca6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bcaa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bcac:	e005      	b.n	800bcba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bcae:	4b12      	ldr	r3, [pc, #72]	@ (800bcf8 <RCCEx_PLL3_Config+0x15c>)
 800bcb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcb2:	4a11      	ldr	r2, [pc, #68]	@ (800bcf8 <RCCEx_PLL3_Config+0x15c>)
 800bcb4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bcb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bcba:	4b0f      	ldr	r3, [pc, #60]	@ (800bcf8 <RCCEx_PLL3_Config+0x15c>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	4a0e      	ldr	r2, [pc, #56]	@ (800bcf8 <RCCEx_PLL3_Config+0x15c>)
 800bcc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bcc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bcc6:	f7f7 fb57 	bl	8003378 <HAL_GetTick>
 800bcca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bccc:	e008      	b.n	800bce0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bcce:	f7f7 fb53 	bl	8003378 <HAL_GetTick>
 800bcd2:	4602      	mov	r2, r0
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	1ad3      	subs	r3, r2, r3
 800bcd8:	2b02      	cmp	r3, #2
 800bcda:	d901      	bls.n	800bce0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bcdc:	2303      	movs	r3, #3
 800bcde:	e006      	b.n	800bcee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bce0:	4b05      	ldr	r3, [pc, #20]	@ (800bcf8 <RCCEx_PLL3_Config+0x15c>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d0f0      	beq.n	800bcce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bcec:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3710      	adds	r7, #16
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}
 800bcf6:	bf00      	nop
 800bcf8:	58024400 	.word	0x58024400
 800bcfc:	ffff0007 	.word	0xffff0007

0800bd00 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b084      	sub	sp, #16
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d101      	bne.n	800bd12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bd0e:	2301      	movs	r3, #1
 800bd10:	e10f      	b.n	800bf32 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2200      	movs	r2, #0
 800bd16:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	4a87      	ldr	r2, [pc, #540]	@ (800bf3c <HAL_SPI_Init+0x23c>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d00f      	beq.n	800bd42 <HAL_SPI_Init+0x42>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	4a86      	ldr	r2, [pc, #536]	@ (800bf40 <HAL_SPI_Init+0x240>)
 800bd28:	4293      	cmp	r3, r2
 800bd2a:	d00a      	beq.n	800bd42 <HAL_SPI_Init+0x42>
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	4a84      	ldr	r2, [pc, #528]	@ (800bf44 <HAL_SPI_Init+0x244>)
 800bd32:	4293      	cmp	r3, r2
 800bd34:	d005      	beq.n	800bd42 <HAL_SPI_Init+0x42>
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	68db      	ldr	r3, [r3, #12]
 800bd3a:	2b0f      	cmp	r3, #15
 800bd3c:	d901      	bls.n	800bd42 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800bd3e:	2301      	movs	r3, #1
 800bd40:	e0f7      	b.n	800bf32 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f000 fce6 	bl	800c714 <SPI_GetPacketSize>
 800bd48:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	4a7b      	ldr	r2, [pc, #492]	@ (800bf3c <HAL_SPI_Init+0x23c>)
 800bd50:	4293      	cmp	r3, r2
 800bd52:	d00c      	beq.n	800bd6e <HAL_SPI_Init+0x6e>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	4a79      	ldr	r2, [pc, #484]	@ (800bf40 <HAL_SPI_Init+0x240>)
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d007      	beq.n	800bd6e <HAL_SPI_Init+0x6e>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	4a78      	ldr	r2, [pc, #480]	@ (800bf44 <HAL_SPI_Init+0x244>)
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d002      	beq.n	800bd6e <HAL_SPI_Init+0x6e>
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2b08      	cmp	r3, #8
 800bd6c:	d811      	bhi.n	800bd92 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bd72:	4a72      	ldr	r2, [pc, #456]	@ (800bf3c <HAL_SPI_Init+0x23c>)
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d009      	beq.n	800bd8c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	4a70      	ldr	r2, [pc, #448]	@ (800bf40 <HAL_SPI_Init+0x240>)
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	d004      	beq.n	800bd8c <HAL_SPI_Init+0x8c>
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	4a6f      	ldr	r2, [pc, #444]	@ (800bf44 <HAL_SPI_Init+0x244>)
 800bd88:	4293      	cmp	r3, r2
 800bd8a:	d104      	bne.n	800bd96 <HAL_SPI_Init+0x96>
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	2b10      	cmp	r3, #16
 800bd90:	d901      	bls.n	800bd96 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800bd92:	2301      	movs	r3, #1
 800bd94:	e0cd      	b.n	800bf32 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bd9c:	b2db      	uxtb	r3, r3
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d106      	bne.n	800bdb0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2200      	movs	r2, #0
 800bda6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f7f5 fd7c 	bl	80018a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2202      	movs	r2, #2
 800bdb4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	681a      	ldr	r2, [r3, #0]
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f022 0201 	bic.w	r2, r2, #1
 800bdc6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	689b      	ldr	r3, [r3, #8]
 800bdce:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800bdd2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	699b      	ldr	r3, [r3, #24]
 800bdd8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bddc:	d119      	bne.n	800be12 <HAL_SPI_Init+0x112>
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	685b      	ldr	r3, [r3, #4]
 800bde2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bde6:	d103      	bne.n	800bdf0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d008      	beq.n	800be02 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d10c      	bne.n	800be12 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bdfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800be00:	d107      	bne.n	800be12 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	681a      	ldr	r2, [r3, #0]
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800be10:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	685b      	ldr	r3, [r3, #4]
 800be16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d00f      	beq.n	800be3e <HAL_SPI_Init+0x13e>
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	68db      	ldr	r3, [r3, #12]
 800be22:	2b06      	cmp	r3, #6
 800be24:	d90b      	bls.n	800be3e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	430a      	orrs	r2, r1
 800be3a:	601a      	str	r2, [r3, #0]
 800be3c:	e007      	b.n	800be4e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	681a      	ldr	r2, [r3, #0]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800be4c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	69da      	ldr	r2, [r3, #28]
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be56:	431a      	orrs	r2, r3
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	431a      	orrs	r2, r3
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be60:	ea42 0103 	orr.w	r1, r2, r3
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	68da      	ldr	r2, [r3, #12]
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	430a      	orrs	r2, r1
 800be6e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be78:	431a      	orrs	r2, r3
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be7e:	431a      	orrs	r2, r3
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	699b      	ldr	r3, [r3, #24]
 800be84:	431a      	orrs	r2, r3
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	691b      	ldr	r3, [r3, #16]
 800be8a:	431a      	orrs	r2, r3
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	695b      	ldr	r3, [r3, #20]
 800be90:	431a      	orrs	r2, r3
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6a1b      	ldr	r3, [r3, #32]
 800be96:	431a      	orrs	r2, r3
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	685b      	ldr	r3, [r3, #4]
 800be9c:	431a      	orrs	r2, r3
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bea2:	431a      	orrs	r2, r3
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	689b      	ldr	r3, [r3, #8]
 800bea8:	431a      	orrs	r2, r3
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800beae:	ea42 0103 	orr.w	r1, r2, r3
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	430a      	orrs	r2, r1
 800bebc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	685b      	ldr	r3, [r3, #4]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d113      	bne.n	800beee <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	689b      	ldr	r3, [r3, #8]
 800becc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bed8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	689b      	ldr	r3, [r3, #8]
 800bee0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800beec:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f022 0201 	bic.w	r2, r2, #1
 800befc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	685b      	ldr	r3, [r3, #4]
 800bf02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d00a      	beq.n	800bf20 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	68db      	ldr	r3, [r3, #12]
 800bf10:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	430a      	orrs	r2, r1
 800bf1e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2200      	movs	r2, #0
 800bf24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800bf30:	2300      	movs	r3, #0
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3710      	adds	r7, #16
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
 800bf3a:	bf00      	nop
 800bf3c:	40013000 	.word	0x40013000
 800bf40:	40003800 	.word	0x40003800
 800bf44:	40003c00 	.word	0x40003c00

0800bf48 <HAL_SPI_Receive_IT>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b085      	sub	sp, #20
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	60f8      	str	r0, [r7, #12]
 800bf50:	60b9      	str	r1, [r7, #8]
 800bf52:	4613      	mov	r3, r2
 800bf54:	80fb      	strh	r3, [r7, #6]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bf5c:	b2db      	uxtb	r3, r3
 800bf5e:	2b01      	cmp	r3, #1
 800bf60:	d001      	beq.n	800bf66 <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 800bf62:	2302      	movs	r3, #2
 800bf64:	e08b      	b.n	800c07e <HAL_SPI_Receive_IT+0x136>
  }

  if ((pData == NULL) || (Size == 0UL))
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d002      	beq.n	800bf72 <HAL_SPI_Receive_IT+0x2a>
 800bf6c:	88fb      	ldrh	r3, [r7, #6]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d101      	bne.n	800bf76 <HAL_SPI_Receive_IT+0x2e>
  {
    return HAL_ERROR;
 800bf72:	2301      	movs	r3, #1
 800bf74:	e083      	b.n	800c07e <HAL_SPI_Receive_IT+0x136>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800bf7c:	2b01      	cmp	r3, #1
 800bf7e:	d101      	bne.n	800bf84 <HAL_SPI_Receive_IT+0x3c>
 800bf80:	2302      	movs	r3, #2
 800bf82:	e07c      	b.n	800c07e <HAL_SPI_Receive_IT+0x136>
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	2201      	movs	r2, #1
 800bf88:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2204      	movs	r2, #4
 800bf90:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2200      	movs	r2, #0
 800bf98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	68ba      	ldr	r2, [r7, #8]
 800bfa0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	88fa      	ldrh	r2, [r7, #6]
 800bfa6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	88fa      	ldrh	r2, [r7, #6]
 800bfae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxISR       = NULL;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->Reload.pRxBuffPtr  = NULL;
  hspi->Reload.RxXferSize  = NULL;
#endif /* USE_SPI_RELOAD_TRANSFER */

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	68db      	ldr	r3, [r3, #12]
 800bfd2:	2b0f      	cmp	r3, #15
 800bfd4:	d903      	bls.n	800bfde <HAL_SPI_Receive_IT+0x96>
  {
    hspi->RxISR = SPI_RxISR_32BIT;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	4a2c      	ldr	r2, [pc, #176]	@ (800c08c <HAL_SPI_Receive_IT+0x144>)
 800bfda:	671a      	str	r2, [r3, #112]	@ 0x70
 800bfdc:	e00a      	b.n	800bff4 <HAL_SPI_Receive_IT+0xac>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	68db      	ldr	r3, [r3, #12]
 800bfe2:	2b07      	cmp	r3, #7
 800bfe4:	d903      	bls.n	800bfee <HAL_SPI_Receive_IT+0xa6>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	4a29      	ldr	r2, [pc, #164]	@ (800c090 <HAL_SPI_Receive_IT+0x148>)
 800bfea:	671a      	str	r2, [r3, #112]	@ 0x70
 800bfec:	e002      	b.n	800bff4 <HAL_SPI_Receive_IT+0xac>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	4a28      	ldr	r2, [pc, #160]	@ (800c094 <HAL_SPI_Receive_IT+0x14c>)
 800bff2:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	689b      	ldr	r3, [r3, #8]
 800bff8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800bffc:	d108      	bne.n	800c010 <HAL_SPI_Receive_IT+0xc8>
  {
    SPI_1LINE_RX(hspi);
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	681a      	ldr	r2, [r3, #0]
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c00c:	601a      	str	r2, [r3, #0]
 800c00e:	e009      	b.n	800c024 <HAL_SPI_Receive_IT+0xdc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	68db      	ldr	r3, [r3, #12]
 800c016:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800c022:	60da      	str	r2, [r3, #12]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	685a      	ldr	r2, [r3, #4]
 800c02a:	4b1b      	ldr	r3, [pc, #108]	@ (800c098 <HAL_SPI_Receive_IT+0x150>)
 800c02c:	4013      	ands	r3, r2
 800c02e:	88f9      	ldrh	r1, [r7, #6]
 800c030:	68fa      	ldr	r2, [r7, #12]
 800c032:	6812      	ldr	r2, [r2, #0]
 800c034:	430b      	orrs	r3, r1
 800c036:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	681a      	ldr	r2, [r3, #0]
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f042 0201 	orr.w	r2, r2, #1
 800c046:	601a      	str	r2, [r3, #0]

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	2200      	movs	r2, #0
 800c04c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Enable EOT, RXP, OVR, FRE, MODF and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	6919      	ldr	r1, [r3, #16]
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681a      	ldr	r2, [r3, #0]
 800c05a:	f240 7349 	movw	r3, #1865	@ 0x749
 800c05e:	430b      	orrs	r3, r1
 800c060:	6113      	str	r3, [r2, #16]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	685b      	ldr	r3, [r3, #4]
 800c066:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c06a:	d107      	bne.n	800c07c <HAL_SPI_Receive_IT+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	681a      	ldr	r2, [r3, #0]
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c07a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800c07c:	2300      	movs	r3, #0
}
 800c07e:	4618      	mov	r0, r3
 800c080:	3714      	adds	r7, #20
 800c082:	46bd      	mov	sp, r7
 800c084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c088:	4770      	bx	lr
 800c08a:	bf00      	nop
 800c08c:	0800c57b 	.word	0x0800c57b
 800c090:	0800c51b 	.word	0x0800c51b
 800c094:	0800c4bd 	.word	0x0800c4bd
 800c098:	ffff0000 	.word	0xffff0000

0800c09c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b08a      	sub	sp, #40	@ 0x28
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	691b      	ldr	r3, [r3, #16]
 800c0aa:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	695b      	ldr	r3, [r3, #20]
 800c0b2:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800c0b4:	6a3a      	ldr	r2, [r7, #32]
 800c0b6:	69fb      	ldr	r3, [r7, #28]
 800c0b8:	4013      	ands	r3, r2
 800c0ba:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	689b      	ldr	r3, [r3, #8]
 800c0c2:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c0ce:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	3330      	adds	r3, #48	@ 0x30
 800c0d6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800c0d8:	69fb      	ldr	r3, [r7, #28]
 800c0da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d010      	beq.n	800c104 <HAL_SPI_IRQHandler+0x68>
 800c0e2:	6a3b      	ldr	r3, [r7, #32]
 800c0e4:	f003 0308 	and.w	r3, r3, #8
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d00b      	beq.n	800c104 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	699a      	ldr	r2, [r3, #24]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c0fa:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f000 f9b9 	bl	800c474 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800c102:	e192      	b.n	800c42a <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800c104:	69bb      	ldr	r3, [r7, #24]
 800c106:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d113      	bne.n	800c136 <HAL_SPI_IRQHandler+0x9a>
 800c10e:	69bb      	ldr	r3, [r7, #24]
 800c110:	f003 0320 	and.w	r3, r3, #32
 800c114:	2b00      	cmp	r3, #0
 800c116:	d10e      	bne.n	800c136 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800c118:	69bb      	ldr	r3, [r7, #24]
 800c11a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d009      	beq.n	800c136 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	4798      	blx	r3
    hspi->RxISR(hspi);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	4798      	blx	r3
    handled = 1UL;
 800c132:	2301      	movs	r3, #1
 800c134:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800c136:	69bb      	ldr	r3, [r7, #24]
 800c138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d10f      	bne.n	800c160 <HAL_SPI_IRQHandler+0xc4>
 800c140:	69bb      	ldr	r3, [r7, #24]
 800c142:	f003 0301 	and.w	r3, r3, #1
 800c146:	2b00      	cmp	r3, #0
 800c148:	d00a      	beq.n	800c160 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800c14a:	69bb      	ldr	r3, [r7, #24]
 800c14c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800c150:	2b00      	cmp	r3, #0
 800c152:	d105      	bne.n	800c160 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	4798      	blx	r3
    handled = 1UL;
 800c15c:	2301      	movs	r3, #1
 800c15e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800c160:	69bb      	ldr	r3, [r7, #24]
 800c162:	f003 0320 	and.w	r3, r3, #32
 800c166:	2b00      	cmp	r3, #0
 800c168:	d10f      	bne.n	800c18a <HAL_SPI_IRQHandler+0xee>
 800c16a:	69bb      	ldr	r3, [r7, #24]
 800c16c:	f003 0302 	and.w	r3, r3, #2
 800c170:	2b00      	cmp	r3, #0
 800c172:	d00a      	beq.n	800c18a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800c174:	69bb      	ldr	r3, [r7, #24]
 800c176:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d105      	bne.n	800c18a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	4798      	blx	r3
    handled = 1UL;
 800c186:	2301      	movs	r3, #1
 800c188:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800c18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	f040 8147 	bne.w	800c420 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800c192:	69bb      	ldr	r3, [r7, #24]
 800c194:	f003 0308 	and.w	r3, r3, #8
 800c198:	2b00      	cmp	r3, #0
 800c19a:	f000 808b 	beq.w	800c2b4 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	699a      	ldr	r2, [r3, #24]
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f042 0208 	orr.w	r2, r2, #8
 800c1ac:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	699a      	ldr	r2, [r3, #24]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	f042 0210 	orr.w	r2, r2, #16
 800c1bc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	699a      	ldr	r2, [r3, #24]
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c1cc:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	691a      	ldr	r2, [r3, #16]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f022 0208 	bic.w	r2, r2, #8
 800c1dc:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	689b      	ldr	r3, [r3, #8]
 800c1e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d13d      	bne.n	800c268 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800c1ec:	e036      	b.n	800c25c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	68db      	ldr	r3, [r3, #12]
 800c1f2:	2b0f      	cmp	r3, #15
 800c1f4:	d90b      	bls.n	800c20e <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681a      	ldr	r2, [r3, #0]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c1fe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c200:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c206:	1d1a      	adds	r2, r3, #4
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	665a      	str	r2, [r3, #100]	@ 0x64
 800c20c:	e01d      	b.n	800c24a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	68db      	ldr	r3, [r3, #12]
 800c212:	2b07      	cmp	r3, #7
 800c214:	d90b      	bls.n	800c22e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c21a:	68fa      	ldr	r2, [r7, #12]
 800c21c:	8812      	ldrh	r2, [r2, #0]
 800c21e:	b292      	uxth	r2, r2
 800c220:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c226:	1c9a      	adds	r2, r3, #2
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	665a      	str	r2, [r3, #100]	@ 0x64
 800c22c:	e00d      	b.n	800c24a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c23a:	7812      	ldrb	r2, [r2, #0]
 800c23c:	b2d2      	uxtb	r2, r2
 800c23e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c244:	1c5a      	adds	r2, r3, #1
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c250:	b29b      	uxth	r3, r3
 800c252:	3b01      	subs	r3, #1
 800c254:	b29a      	uxth	r2, r3
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c262:	b29b      	uxth	r3, r3
 800c264:	2b00      	cmp	r3, #0
 800c266:	d1c2      	bne.n	800c1ee <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f000 f9b3 	bl	800c5d4 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2201      	movs	r2, #1
 800c272:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d003      	beq.n	800c288 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f000 f8ed 	bl	800c460 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c286:	e0d0      	b.n	800c42a <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800c288:	7cfb      	ldrb	r3, [r7, #19]
 800c28a:	2b05      	cmp	r3, #5
 800c28c:	d103      	bne.n	800c296 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f000 f8dc 	bl	800c44c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800c294:	e0c6      	b.n	800c424 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800c296:	7cfb      	ldrb	r3, [r7, #19]
 800c298:	2b04      	cmp	r3, #4
 800c29a:	d103      	bne.n	800c2a4 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f7f6 fc03 	bl	8002aa8 <HAL_SPI_RxCpltCallback>
    return;
 800c2a2:	e0bf      	b.n	800c424 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800c2a4:	7cfb      	ldrb	r3, [r7, #19]
 800c2a6:	2b03      	cmp	r3, #3
 800c2a8:	f040 80bc 	bne.w	800c424 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f000 f8c3 	bl	800c438 <HAL_SPI_TxCpltCallback>
    return;
 800c2b2:	e0b7      	b.n	800c424 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800c2b4:	69bb      	ldr	r3, [r7, #24]
 800c2b6:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	f000 80b5 	beq.w	800c42a <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800c2c0:	69bb      	ldr	r3, [r7, #24]
 800c2c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d00f      	beq.n	800c2ea <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c2d0:	f043 0204 	orr.w	r2, r3, #4
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	699a      	ldr	r2, [r3, #24]
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c2e8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800c2ea:	69bb      	ldr	r3, [r7, #24]
 800c2ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d00f      	beq.n	800c314 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c2fa:	f043 0201 	orr.w	r2, r3, #1
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	699a      	ldr	r2, [r3, #24]
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c312:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800c314:	69bb      	ldr	r3, [r7, #24]
 800c316:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d00f      	beq.n	800c33e <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c324:	f043 0208 	orr.w	r2, r3, #8
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	699a      	ldr	r2, [r3, #24]
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c33c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800c33e:	69bb      	ldr	r3, [r7, #24]
 800c340:	f003 0320 	and.w	r3, r3, #32
 800c344:	2b00      	cmp	r3, #0
 800c346:	d00f      	beq.n	800c368 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c34e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	699a      	ldr	r2, [r3, #24]
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f042 0220 	orr.w	r2, r2, #32
 800c366:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d05a      	beq.n	800c428 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	681a      	ldr	r2, [r3, #0]
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f022 0201 	bic.w	r2, r2, #1
 800c380:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	6919      	ldr	r1, [r3, #16]
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681a      	ldr	r2, [r3, #0]
 800c38c:	4b28      	ldr	r3, [pc, #160]	@ (800c430 <HAL_SPI_IRQHandler+0x394>)
 800c38e:	400b      	ands	r3, r1
 800c390:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800c398:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800c39c:	d138      	bne.n	800c410 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	689a      	ldr	r2, [r3, #8]
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800c3ac:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d013      	beq.n	800c3de <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c3ba:	4a1e      	ldr	r2, [pc, #120]	@ (800c434 <HAL_SPI_IRQHandler+0x398>)
 800c3bc:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f7f9 ff84 	bl	80062d0 <HAL_DMA_Abort_IT>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d007      	beq.n	800c3de <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c3d4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d020      	beq.n	800c428 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c3ea:	4a12      	ldr	r2, [pc, #72]	@ (800c434 <HAL_SPI_IRQHandler+0x398>)
 800c3ec:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f7f9 ff6c 	bl	80062d0 <HAL_DMA_Abort_IT>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d014      	beq.n	800c428 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c404:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c40e:	e00b      	b.n	800c428 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2201      	movs	r2, #1
 800c414:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f000 f821 	bl	800c460 <HAL_SPI_ErrorCallback>
    return;
 800c41e:	e003      	b.n	800c428 <HAL_SPI_IRQHandler+0x38c>
    return;
 800c420:	bf00      	nop
 800c422:	e002      	b.n	800c42a <HAL_SPI_IRQHandler+0x38e>
    return;
 800c424:	bf00      	nop
 800c426:	e000      	b.n	800c42a <HAL_SPI_IRQHandler+0x38e>
    return;
 800c428:	bf00      	nop
  }
}
 800c42a:	3728      	adds	r7, #40	@ 0x28
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}
 800c430:	fffffc94 	.word	0xfffffc94
 800c434:	0800c489 	.word	0x0800c489

0800c438 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800c438:	b480      	push	{r7}
 800c43a:	b083      	sub	sp, #12
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800c440:	bf00      	nop
 800c442:	370c      	adds	r7, #12
 800c444:	46bd      	mov	sp, r7
 800c446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44a:	4770      	bx	lr

0800c44c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800c44c:	b480      	push	{r7}
 800c44e:	b083      	sub	sp, #12
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800c454:	bf00      	nop
 800c456:	370c      	adds	r7, #12
 800c458:	46bd      	mov	sp, r7
 800c45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45e:	4770      	bx	lr

0800c460 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800c460:	b480      	push	{r7}
 800c462:	b083      	sub	sp, #12
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c468:	bf00      	nop
 800c46a:	370c      	adds	r7, #12
 800c46c:	46bd      	mov	sp, r7
 800c46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c472:	4770      	bx	lr

0800c474 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800c474:	b480      	push	{r7}
 800c476:	b083      	sub	sp, #12
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800c47c:	bf00      	nop
 800c47e:	370c      	adds	r7, #12
 800c480:	46bd      	mov	sp, r7
 800c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c486:	4770      	bx	lr

0800c488 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b084      	sub	sp, #16
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c494:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	2200      	movs	r2, #0
 800c49a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	2201      	movs	r2, #1
 800c4aa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c4ae:	68f8      	ldr	r0, [r7, #12]
 800c4b0:	f7ff ffd6 	bl	800c460 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c4b4:	bf00      	nop
 800c4b6:	3710      	adds	r7, #16
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}

0800c4bc <SPI_RxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b083      	sub	sp, #12
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  /* Receive data in 8 Bit mode */
  *((uint8_t *)hspi->pRxBuffPtr) = (*(__IO uint8_t *)&hspi->Instance->RXDR);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4d0:	7812      	ldrb	r2, [r2, #0]
 800c4d2:	b2d2      	uxtb	r2, r2
 800c4d4:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint8_t);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4da:	1c5a      	adds	r2, r3, #1
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c4e6:	b29b      	uxth	r3, r3
 800c4e8:	3b01      	subs	r3, #1
 800c4ea:	b29a      	uxth	r2, r3
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c4f8:	b29b      	uxth	r3, r3
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d107      	bne.n	800c50e <SPI_RxISR_8BIT+0x52>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	691a      	ldr	r2, [r3, #16]
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f022 0201 	bic.w	r2, r2, #1
 800c50c:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800c50e:	bf00      	nop
 800c510:	370c      	adds	r7, #12
 800c512:	46bd      	mov	sp, r7
 800c514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c518:	4770      	bx	lr

0800c51a <SPI_RxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 800c51a:	b480      	push	{r7}
 800c51c:	b085      	sub	sp, #20
 800c51e:	af00      	add	r7, sp, #0
 800c520:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	3330      	adds	r3, #48	@ 0x30
 800c528:	60fb      	str	r3, [r7, #12]

  *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c52e:	68fa      	ldr	r2, [r7, #12]
 800c530:	8812      	ldrh	r2, [r2, #0]
 800c532:	b292      	uxth	r2, r2
 800c534:	801a      	strh	r2, [r3, #0]
#else
  *((uint16_t *)hspi->pRxBuffPtr) = (*(__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c53a:	1c9a      	adds	r2, r3, #2
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c546:	b29b      	uxth	r3, r3
 800c548:	3b01      	subs	r3, #1
 800c54a:	b29a      	uxth	r2, r3
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c558:	b29b      	uxth	r3, r3
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d107      	bne.n	800c56e <SPI_RxISR_16BIT+0x54>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	691a      	ldr	r2, [r3, #16]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	f022 0201 	bic.w	r2, r2, #1
 800c56c:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800c56e:	bf00      	nop
 800c570:	3714      	adds	r7, #20
 800c572:	46bd      	mov	sp, r7
 800c574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c578:	4770      	bx	lr

0800c57a <SPI_RxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 800c57a:	b480      	push	{r7}
 800c57c:	b083      	sub	sp, #12
 800c57e:	af00      	add	r7, sp, #0
 800c580:	6078      	str	r0, [r7, #4]
  /* Receive data in 32 Bit mode */
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681a      	ldr	r2, [r3, #0]
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c58a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c58c:	601a      	str	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint32_t);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c592:	1d1a      	adds	r2, r3, #4
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c59e:	b29b      	uxth	r3, r3
 800c5a0:	3b01      	subs	r3, #1
 800c5a2:	b29a      	uxth	r2, r3
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c5b0:	b29b      	uxth	r3, r3
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d107      	bne.n	800c5c6 <SPI_RxISR_32BIT+0x4c>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	691a      	ldr	r2, [r3, #16]
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f022 0201 	bic.w	r2, r2, #1
 800c5c4:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800c5c6:	bf00      	nop
 800c5c8:	370c      	adds	r7, #12
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d0:	4770      	bx	lr
	...

0800c5d4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b085      	sub	sp, #20
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	695b      	ldr	r3, [r3, #20]
 800c5e2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	699a      	ldr	r2, [r3, #24]
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f042 0208 	orr.w	r2, r2, #8
 800c5f2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	699a      	ldr	r2, [r3, #24]
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f042 0210 	orr.w	r2, r2, #16
 800c602:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	681a      	ldr	r2, [r3, #0]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f022 0201 	bic.w	r2, r2, #1
 800c612:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	6919      	ldr	r1, [r3, #16]
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681a      	ldr	r2, [r3, #0]
 800c61e:	4b3c      	ldr	r3, [pc, #240]	@ (800c710 <SPI_CloseTransfer+0x13c>)
 800c620:	400b      	ands	r3, r1
 800c622:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	689a      	ldr	r2, [r3, #8]
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800c632:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c63a:	b2db      	uxtb	r3, r3
 800c63c:	2b04      	cmp	r3, #4
 800c63e:	d014      	beq.n	800c66a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	f003 0320 	and.w	r3, r3, #32
 800c646:	2b00      	cmp	r3, #0
 800c648:	d00f      	beq.n	800c66a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c650:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	699a      	ldr	r2, [r3, #24]
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	f042 0220 	orr.w	r2, r2, #32
 800c668:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c670:	b2db      	uxtb	r3, r3
 800c672:	2b03      	cmp	r3, #3
 800c674:	d014      	beq.n	800c6a0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d00f      	beq.n	800c6a0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c686:	f043 0204 	orr.w	r2, r3, #4
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	699a      	ldr	r2, [r3, #24]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c69e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d00f      	beq.n	800c6ca <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c6b0:	f043 0201 	orr.w	r2, r3, #1
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	699a      	ldr	r2, [r3, #24]
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c6c8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d00f      	beq.n	800c6f4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c6da:	f043 0208 	orr.w	r2, r3, #8
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	699a      	ldr	r2, [r3, #24]
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c6f2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2200      	movs	r2, #0
 800c700:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800c704:	bf00      	nop
 800c706:	3714      	adds	r7, #20
 800c708:	46bd      	mov	sp, r7
 800c70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70e:	4770      	bx	lr
 800c710:	fffffc90 	.word	0xfffffc90

0800c714 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c714:	b480      	push	{r7}
 800c716:	b085      	sub	sp, #20
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c720:	095b      	lsrs	r3, r3, #5
 800c722:	3301      	adds	r3, #1
 800c724:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	68db      	ldr	r3, [r3, #12]
 800c72a:	3301      	adds	r3, #1
 800c72c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	3307      	adds	r3, #7
 800c732:	08db      	lsrs	r3, r3, #3
 800c734:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	68fa      	ldr	r2, [r7, #12]
 800c73a:	fb02 f303 	mul.w	r3, r2, r3
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3714      	adds	r7, #20
 800c742:	46bd      	mov	sp, r7
 800c744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c748:	4770      	bx	lr

0800c74a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c74a:	b580      	push	{r7, lr}
 800c74c:	b082      	sub	sp, #8
 800c74e:	af00      	add	r7, sp, #0
 800c750:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d101      	bne.n	800c75c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c758:	2301      	movs	r3, #1
 800c75a:	e049      	b.n	800c7f0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c762:	b2db      	uxtb	r3, r3
 800c764:	2b00      	cmp	r3, #0
 800c766:	d106      	bne.n	800c776 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2200      	movs	r2, #0
 800c76c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f7f5 f92f 	bl	80019d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2202      	movs	r2, #2
 800c77a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681a      	ldr	r2, [r3, #0]
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	3304      	adds	r3, #4
 800c786:	4619      	mov	r1, r3
 800c788:	4610      	mov	r0, r2
 800c78a:	f000 fad5 	bl	800cd38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2201      	movs	r2, #1
 800c792:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2201      	movs	r2, #1
 800c79a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2201      	movs	r2, #1
 800c7a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2201      	movs	r2, #1
 800c7aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2201      	movs	r2, #1
 800c7b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2201      	movs	r2, #1
 800c7ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2201      	movs	r2, #1
 800c7c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2201      	movs	r2, #1
 800c7ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2201      	movs	r2, #1
 800c7d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2201      	movs	r2, #1
 800c7da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2201      	movs	r2, #1
 800c7e2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2201      	movs	r2, #1
 800c7ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c7ee:	2300      	movs	r3, #0
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	3708      	adds	r7, #8
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}

0800c7f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	b085      	sub	sp, #20
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c806:	b2db      	uxtb	r3, r3
 800c808:	2b01      	cmp	r3, #1
 800c80a:	d001      	beq.n	800c810 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c80c:	2301      	movs	r3, #1
 800c80e:	e054      	b.n	800c8ba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2202      	movs	r2, #2
 800c814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	68da      	ldr	r2, [r3, #12]
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	f042 0201 	orr.w	r2, r2, #1
 800c826:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	4a26      	ldr	r2, [pc, #152]	@ (800c8c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800c82e:	4293      	cmp	r3, r2
 800c830:	d022      	beq.n	800c878 <HAL_TIM_Base_Start_IT+0x80>
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c83a:	d01d      	beq.n	800c878 <HAL_TIM_Base_Start_IT+0x80>
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	4a22      	ldr	r2, [pc, #136]	@ (800c8cc <HAL_TIM_Base_Start_IT+0xd4>)
 800c842:	4293      	cmp	r3, r2
 800c844:	d018      	beq.n	800c878 <HAL_TIM_Base_Start_IT+0x80>
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	4a21      	ldr	r2, [pc, #132]	@ (800c8d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800c84c:	4293      	cmp	r3, r2
 800c84e:	d013      	beq.n	800c878 <HAL_TIM_Base_Start_IT+0x80>
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	4a1f      	ldr	r2, [pc, #124]	@ (800c8d4 <HAL_TIM_Base_Start_IT+0xdc>)
 800c856:	4293      	cmp	r3, r2
 800c858:	d00e      	beq.n	800c878 <HAL_TIM_Base_Start_IT+0x80>
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	4a1e      	ldr	r2, [pc, #120]	@ (800c8d8 <HAL_TIM_Base_Start_IT+0xe0>)
 800c860:	4293      	cmp	r3, r2
 800c862:	d009      	beq.n	800c878 <HAL_TIM_Base_Start_IT+0x80>
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	4a1c      	ldr	r2, [pc, #112]	@ (800c8dc <HAL_TIM_Base_Start_IT+0xe4>)
 800c86a:	4293      	cmp	r3, r2
 800c86c:	d004      	beq.n	800c878 <HAL_TIM_Base_Start_IT+0x80>
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	4a1b      	ldr	r2, [pc, #108]	@ (800c8e0 <HAL_TIM_Base_Start_IT+0xe8>)
 800c874:	4293      	cmp	r3, r2
 800c876:	d115      	bne.n	800c8a4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	689a      	ldr	r2, [r3, #8]
 800c87e:	4b19      	ldr	r3, [pc, #100]	@ (800c8e4 <HAL_TIM_Base_Start_IT+0xec>)
 800c880:	4013      	ands	r3, r2
 800c882:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	2b06      	cmp	r3, #6
 800c888:	d015      	beq.n	800c8b6 <HAL_TIM_Base_Start_IT+0xbe>
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c890:	d011      	beq.n	800c8b6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	681a      	ldr	r2, [r3, #0]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f042 0201 	orr.w	r2, r2, #1
 800c8a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c8a2:	e008      	b.n	800c8b6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	681a      	ldr	r2, [r3, #0]
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f042 0201 	orr.w	r2, r2, #1
 800c8b2:	601a      	str	r2, [r3, #0]
 800c8b4:	e000      	b.n	800c8b8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c8b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c8b8:	2300      	movs	r3, #0
}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	3714      	adds	r7, #20
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c4:	4770      	bx	lr
 800c8c6:	bf00      	nop
 800c8c8:	40010000 	.word	0x40010000
 800c8cc:	40000400 	.word	0x40000400
 800c8d0:	40000800 	.word	0x40000800
 800c8d4:	40000c00 	.word	0x40000c00
 800c8d8:	40010400 	.word	0x40010400
 800c8dc:	40001800 	.word	0x40001800
 800c8e0:	40014000 	.word	0x40014000
 800c8e4:	00010007 	.word	0x00010007

0800c8e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b084      	sub	sp, #16
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	68db      	ldr	r3, [r3, #12]
 800c8f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	691b      	ldr	r3, [r3, #16]
 800c8fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	f003 0302 	and.w	r3, r3, #2
 800c906:	2b00      	cmp	r3, #0
 800c908:	d020      	beq.n	800c94c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	f003 0302 	and.w	r3, r3, #2
 800c910:	2b00      	cmp	r3, #0
 800c912:	d01b      	beq.n	800c94c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f06f 0202 	mvn.w	r2, #2
 800c91c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2201      	movs	r2, #1
 800c922:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	699b      	ldr	r3, [r3, #24]
 800c92a:	f003 0303 	and.w	r3, r3, #3
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d003      	beq.n	800c93a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f000 f9e2 	bl	800ccfc <HAL_TIM_IC_CaptureCallback>
 800c938:	e005      	b.n	800c946 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f000 f9d4 	bl	800cce8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f000 f9e5 	bl	800cd10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2200      	movs	r2, #0
 800c94a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	f003 0304 	and.w	r3, r3, #4
 800c952:	2b00      	cmp	r3, #0
 800c954:	d020      	beq.n	800c998 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	f003 0304 	and.w	r3, r3, #4
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d01b      	beq.n	800c998 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	f06f 0204 	mvn.w	r2, #4
 800c968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2202      	movs	r2, #2
 800c96e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	699b      	ldr	r3, [r3, #24]
 800c976:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d003      	beq.n	800c986 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f000 f9bc 	bl	800ccfc <HAL_TIM_IC_CaptureCallback>
 800c984:	e005      	b.n	800c992 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f000 f9ae 	bl	800cce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f000 f9bf 	bl	800cd10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2200      	movs	r2, #0
 800c996:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	f003 0308 	and.w	r3, r3, #8
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d020      	beq.n	800c9e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	f003 0308 	and.w	r3, r3, #8
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d01b      	beq.n	800c9e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	f06f 0208 	mvn.w	r2, #8
 800c9b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2204      	movs	r2, #4
 800c9ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	69db      	ldr	r3, [r3, #28]
 800c9c2:	f003 0303 	and.w	r3, r3, #3
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d003      	beq.n	800c9d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f000 f996 	bl	800ccfc <HAL_TIM_IC_CaptureCallback>
 800c9d0:	e005      	b.n	800c9de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f000 f988 	bl	800cce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f000 f999 	bl	800cd10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	f003 0310 	and.w	r3, r3, #16
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d020      	beq.n	800ca30 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	f003 0310 	and.w	r3, r3, #16
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d01b      	beq.n	800ca30 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	f06f 0210 	mvn.w	r2, #16
 800ca00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2208      	movs	r2, #8
 800ca06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	69db      	ldr	r3, [r3, #28]
 800ca0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d003      	beq.n	800ca1e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f000 f970 	bl	800ccfc <HAL_TIM_IC_CaptureCallback>
 800ca1c:	e005      	b.n	800ca2a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f000 f962 	bl	800cce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f000 f973 	bl	800cd10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	f003 0301 	and.w	r3, r3, #1
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d00c      	beq.n	800ca54 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	f003 0301 	and.w	r3, r3, #1
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d007      	beq.n	800ca54 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	f06f 0201 	mvn.w	r2, #1
 800ca4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f7f3 ff0a 	bl	8000868 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d104      	bne.n	800ca68 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d00c      	beq.n	800ca82 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d007      	beq.n	800ca82 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ca7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f000 fb31 	bl	800d0e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d00c      	beq.n	800caa6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d007      	beq.n	800caa6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ca9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f000 fb29 	bl	800d0f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800caac:	2b00      	cmp	r3, #0
 800caae:	d00c      	beq.n	800caca <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d007      	beq.n	800caca <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800cac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f000 f92d 	bl	800cd24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	f003 0320 	and.w	r3, r3, #32
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d00c      	beq.n	800caee <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	f003 0320 	and.w	r3, r3, #32
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d007      	beq.n	800caee <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f06f 0220 	mvn.w	r2, #32
 800cae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f000 faf1 	bl	800d0d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800caee:	bf00      	nop
 800caf0:	3710      	adds	r7, #16
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}
	...

0800caf8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b084      	sub	sp, #16
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
 800cb00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cb02:	2300      	movs	r3, #0
 800cb04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cb0c:	2b01      	cmp	r3, #1
 800cb0e:	d101      	bne.n	800cb14 <HAL_TIM_ConfigClockSource+0x1c>
 800cb10:	2302      	movs	r3, #2
 800cb12:	e0dc      	b.n	800ccce <HAL_TIM_ConfigClockSource+0x1d6>
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2201      	movs	r2, #1
 800cb18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2202      	movs	r2, #2
 800cb20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	689b      	ldr	r3, [r3, #8]
 800cb2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cb2c:	68ba      	ldr	r2, [r7, #8]
 800cb2e:	4b6a      	ldr	r3, [pc, #424]	@ (800ccd8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800cb30:	4013      	ands	r3, r2
 800cb32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cb3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	68ba      	ldr	r2, [r7, #8]
 800cb42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	4a64      	ldr	r2, [pc, #400]	@ (800ccdc <HAL_TIM_ConfigClockSource+0x1e4>)
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	f000 80a9 	beq.w	800cca2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cb50:	4a62      	ldr	r2, [pc, #392]	@ (800ccdc <HAL_TIM_ConfigClockSource+0x1e4>)
 800cb52:	4293      	cmp	r3, r2
 800cb54:	f200 80ae 	bhi.w	800ccb4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb58:	4a61      	ldr	r2, [pc, #388]	@ (800cce0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	f000 80a1 	beq.w	800cca2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cb60:	4a5f      	ldr	r2, [pc, #380]	@ (800cce0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cb62:	4293      	cmp	r3, r2
 800cb64:	f200 80a6 	bhi.w	800ccb4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb68:	4a5e      	ldr	r2, [pc, #376]	@ (800cce4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	f000 8099 	beq.w	800cca2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cb70:	4a5c      	ldr	r2, [pc, #368]	@ (800cce4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cb72:	4293      	cmp	r3, r2
 800cb74:	f200 809e 	bhi.w	800ccb4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb78:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800cb7c:	f000 8091 	beq.w	800cca2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cb80:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800cb84:	f200 8096 	bhi.w	800ccb4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cb8c:	f000 8089 	beq.w	800cca2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cb90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cb94:	f200 808e 	bhi.w	800ccb4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cb9c:	d03e      	beq.n	800cc1c <HAL_TIM_ConfigClockSource+0x124>
 800cb9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cba2:	f200 8087 	bhi.w	800ccb4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cba6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cbaa:	f000 8086 	beq.w	800ccba <HAL_TIM_ConfigClockSource+0x1c2>
 800cbae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cbb2:	d87f      	bhi.n	800ccb4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbb4:	2b70      	cmp	r3, #112	@ 0x70
 800cbb6:	d01a      	beq.n	800cbee <HAL_TIM_ConfigClockSource+0xf6>
 800cbb8:	2b70      	cmp	r3, #112	@ 0x70
 800cbba:	d87b      	bhi.n	800ccb4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbbc:	2b60      	cmp	r3, #96	@ 0x60
 800cbbe:	d050      	beq.n	800cc62 <HAL_TIM_ConfigClockSource+0x16a>
 800cbc0:	2b60      	cmp	r3, #96	@ 0x60
 800cbc2:	d877      	bhi.n	800ccb4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbc4:	2b50      	cmp	r3, #80	@ 0x50
 800cbc6:	d03c      	beq.n	800cc42 <HAL_TIM_ConfigClockSource+0x14a>
 800cbc8:	2b50      	cmp	r3, #80	@ 0x50
 800cbca:	d873      	bhi.n	800ccb4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbcc:	2b40      	cmp	r3, #64	@ 0x40
 800cbce:	d058      	beq.n	800cc82 <HAL_TIM_ConfigClockSource+0x18a>
 800cbd0:	2b40      	cmp	r3, #64	@ 0x40
 800cbd2:	d86f      	bhi.n	800ccb4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbd4:	2b30      	cmp	r3, #48	@ 0x30
 800cbd6:	d064      	beq.n	800cca2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cbd8:	2b30      	cmp	r3, #48	@ 0x30
 800cbda:	d86b      	bhi.n	800ccb4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbdc:	2b20      	cmp	r3, #32
 800cbde:	d060      	beq.n	800cca2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cbe0:	2b20      	cmp	r3, #32
 800cbe2:	d867      	bhi.n	800ccb4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d05c      	beq.n	800cca2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cbe8:	2b10      	cmp	r3, #16
 800cbea:	d05a      	beq.n	800cca2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cbec:	e062      	b.n	800ccb4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cbfe:	f000 f9b9 	bl	800cf74 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	689b      	ldr	r3, [r3, #8]
 800cc08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800cc10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	68ba      	ldr	r2, [r7, #8]
 800cc18:	609a      	str	r2, [r3, #8]
      break;
 800cc1a:	e04f      	b.n	800ccbc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cc2c:	f000 f9a2 	bl	800cf74 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	689a      	ldr	r2, [r3, #8]
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cc3e:	609a      	str	r2, [r3, #8]
      break;
 800cc40:	e03c      	b.n	800ccbc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc4e:	461a      	mov	r2, r3
 800cc50:	f000 f912 	bl	800ce78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	2150      	movs	r1, #80	@ 0x50
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f000 f96c 	bl	800cf38 <TIM_ITRx_SetConfig>
      break;
 800cc60:	e02c      	b.n	800ccbc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cc6e:	461a      	mov	r2, r3
 800cc70:	f000 f931 	bl	800ced6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	2160      	movs	r1, #96	@ 0x60
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f000 f95c 	bl	800cf38 <TIM_ITRx_SetConfig>
      break;
 800cc80:	e01c      	b.n	800ccbc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc8e:	461a      	mov	r2, r3
 800cc90:	f000 f8f2 	bl	800ce78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	2140      	movs	r1, #64	@ 0x40
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f000 f94c 	bl	800cf38 <TIM_ITRx_SetConfig>
      break;
 800cca0:	e00c      	b.n	800ccbc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681a      	ldr	r2, [r3, #0]
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	4619      	mov	r1, r3
 800ccac:	4610      	mov	r0, r2
 800ccae:	f000 f943 	bl	800cf38 <TIM_ITRx_SetConfig>
      break;
 800ccb2:	e003      	b.n	800ccbc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	73fb      	strb	r3, [r7, #15]
      break;
 800ccb8:	e000      	b.n	800ccbc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ccba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2201      	movs	r2, #1
 800ccc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cccc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3710      	adds	r7, #16
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}
 800ccd6:	bf00      	nop
 800ccd8:	ffceff88 	.word	0xffceff88
 800ccdc:	00100040 	.word	0x00100040
 800cce0:	00100030 	.word	0x00100030
 800cce4:	00100020 	.word	0x00100020

0800cce8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cce8:	b480      	push	{r7}
 800ccea:	b083      	sub	sp, #12
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ccf0:	bf00      	nop
 800ccf2:	370c      	adds	r7, #12
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfa:	4770      	bx	lr

0800ccfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b083      	sub	sp, #12
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cd04:	bf00      	nop
 800cd06:	370c      	adds	r7, #12
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0e:	4770      	bx	lr

0800cd10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cd10:	b480      	push	{r7}
 800cd12:	b083      	sub	sp, #12
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cd18:	bf00      	nop
 800cd1a:	370c      	adds	r7, #12
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd22:	4770      	bx	lr

0800cd24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cd24:	b480      	push	{r7}
 800cd26:	b083      	sub	sp, #12
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cd2c:	bf00      	nop
 800cd2e:	370c      	adds	r7, #12
 800cd30:	46bd      	mov	sp, r7
 800cd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd36:	4770      	bx	lr

0800cd38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b085      	sub	sp, #20
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	4a43      	ldr	r2, [pc, #268]	@ (800ce58 <TIM_Base_SetConfig+0x120>)
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	d013      	beq.n	800cd78 <TIM_Base_SetConfig+0x40>
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd56:	d00f      	beq.n	800cd78 <TIM_Base_SetConfig+0x40>
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	4a40      	ldr	r2, [pc, #256]	@ (800ce5c <TIM_Base_SetConfig+0x124>)
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	d00b      	beq.n	800cd78 <TIM_Base_SetConfig+0x40>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	4a3f      	ldr	r2, [pc, #252]	@ (800ce60 <TIM_Base_SetConfig+0x128>)
 800cd64:	4293      	cmp	r3, r2
 800cd66:	d007      	beq.n	800cd78 <TIM_Base_SetConfig+0x40>
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	4a3e      	ldr	r2, [pc, #248]	@ (800ce64 <TIM_Base_SetConfig+0x12c>)
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	d003      	beq.n	800cd78 <TIM_Base_SetConfig+0x40>
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	4a3d      	ldr	r2, [pc, #244]	@ (800ce68 <TIM_Base_SetConfig+0x130>)
 800cd74:	4293      	cmp	r3, r2
 800cd76:	d108      	bne.n	800cd8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	685b      	ldr	r3, [r3, #4]
 800cd84:	68fa      	ldr	r2, [r7, #12]
 800cd86:	4313      	orrs	r3, r2
 800cd88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	4a32      	ldr	r2, [pc, #200]	@ (800ce58 <TIM_Base_SetConfig+0x120>)
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	d01f      	beq.n	800cdd2 <TIM_Base_SetConfig+0x9a>
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd98:	d01b      	beq.n	800cdd2 <TIM_Base_SetConfig+0x9a>
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	4a2f      	ldr	r2, [pc, #188]	@ (800ce5c <TIM_Base_SetConfig+0x124>)
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d017      	beq.n	800cdd2 <TIM_Base_SetConfig+0x9a>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	4a2e      	ldr	r2, [pc, #184]	@ (800ce60 <TIM_Base_SetConfig+0x128>)
 800cda6:	4293      	cmp	r3, r2
 800cda8:	d013      	beq.n	800cdd2 <TIM_Base_SetConfig+0x9a>
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	4a2d      	ldr	r2, [pc, #180]	@ (800ce64 <TIM_Base_SetConfig+0x12c>)
 800cdae:	4293      	cmp	r3, r2
 800cdb0:	d00f      	beq.n	800cdd2 <TIM_Base_SetConfig+0x9a>
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	4a2c      	ldr	r2, [pc, #176]	@ (800ce68 <TIM_Base_SetConfig+0x130>)
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	d00b      	beq.n	800cdd2 <TIM_Base_SetConfig+0x9a>
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	4a2b      	ldr	r2, [pc, #172]	@ (800ce6c <TIM_Base_SetConfig+0x134>)
 800cdbe:	4293      	cmp	r3, r2
 800cdc0:	d007      	beq.n	800cdd2 <TIM_Base_SetConfig+0x9a>
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	4a2a      	ldr	r2, [pc, #168]	@ (800ce70 <TIM_Base_SetConfig+0x138>)
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d003      	beq.n	800cdd2 <TIM_Base_SetConfig+0x9a>
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	4a29      	ldr	r2, [pc, #164]	@ (800ce74 <TIM_Base_SetConfig+0x13c>)
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	d108      	bne.n	800cde4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cdd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	68db      	ldr	r3, [r3, #12]
 800cdde:	68fa      	ldr	r2, [r7, #12]
 800cde0:	4313      	orrs	r3, r2
 800cde2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	695b      	ldr	r3, [r3, #20]
 800cdee:	4313      	orrs	r3, r2
 800cdf0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	689a      	ldr	r2, [r3, #8]
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	681a      	ldr	r2, [r3, #0]
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	4a14      	ldr	r2, [pc, #80]	@ (800ce58 <TIM_Base_SetConfig+0x120>)
 800ce06:	4293      	cmp	r3, r2
 800ce08:	d00f      	beq.n	800ce2a <TIM_Base_SetConfig+0xf2>
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	4a16      	ldr	r2, [pc, #88]	@ (800ce68 <TIM_Base_SetConfig+0x130>)
 800ce0e:	4293      	cmp	r3, r2
 800ce10:	d00b      	beq.n	800ce2a <TIM_Base_SetConfig+0xf2>
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	4a15      	ldr	r2, [pc, #84]	@ (800ce6c <TIM_Base_SetConfig+0x134>)
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d007      	beq.n	800ce2a <TIM_Base_SetConfig+0xf2>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	4a14      	ldr	r2, [pc, #80]	@ (800ce70 <TIM_Base_SetConfig+0x138>)
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d003      	beq.n	800ce2a <TIM_Base_SetConfig+0xf2>
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	4a13      	ldr	r2, [pc, #76]	@ (800ce74 <TIM_Base_SetConfig+0x13c>)
 800ce26:	4293      	cmp	r3, r2
 800ce28:	d103      	bne.n	800ce32 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	691a      	ldr	r2, [r3, #16]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f043 0204 	orr.w	r2, r3, #4
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2201      	movs	r2, #1
 800ce42:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	68fa      	ldr	r2, [r7, #12]
 800ce48:	601a      	str	r2, [r3, #0]
}
 800ce4a:	bf00      	nop
 800ce4c:	3714      	adds	r7, #20
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce54:	4770      	bx	lr
 800ce56:	bf00      	nop
 800ce58:	40010000 	.word	0x40010000
 800ce5c:	40000400 	.word	0x40000400
 800ce60:	40000800 	.word	0x40000800
 800ce64:	40000c00 	.word	0x40000c00
 800ce68:	40010400 	.word	0x40010400
 800ce6c:	40014000 	.word	0x40014000
 800ce70:	40014400 	.word	0x40014400
 800ce74:	40014800 	.word	0x40014800

0800ce78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b087      	sub	sp, #28
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	60f8      	str	r0, [r7, #12]
 800ce80:	60b9      	str	r1, [r7, #8]
 800ce82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	6a1b      	ldr	r3, [r3, #32]
 800ce88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	6a1b      	ldr	r3, [r3, #32]
 800ce8e:	f023 0201 	bic.w	r2, r3, #1
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	699b      	ldr	r3, [r3, #24]
 800ce9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cea2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	011b      	lsls	r3, r3, #4
 800cea8:	693a      	ldr	r2, [r7, #16]
 800ceaa:	4313      	orrs	r3, r2
 800ceac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	f023 030a 	bic.w	r3, r3, #10
 800ceb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ceb6:	697a      	ldr	r2, [r7, #20]
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	4313      	orrs	r3, r2
 800cebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	693a      	ldr	r2, [r7, #16]
 800cec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	697a      	ldr	r2, [r7, #20]
 800cec8:	621a      	str	r2, [r3, #32]
}
 800ceca:	bf00      	nop
 800cecc:	371c      	adds	r7, #28
 800cece:	46bd      	mov	sp, r7
 800ced0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced4:	4770      	bx	lr

0800ced6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ced6:	b480      	push	{r7}
 800ced8:	b087      	sub	sp, #28
 800ceda:	af00      	add	r7, sp, #0
 800cedc:	60f8      	str	r0, [r7, #12]
 800cede:	60b9      	str	r1, [r7, #8]
 800cee0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	6a1b      	ldr	r3, [r3, #32]
 800cee6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	6a1b      	ldr	r3, [r3, #32]
 800ceec:	f023 0210 	bic.w	r2, r3, #16
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	699b      	ldr	r3, [r3, #24]
 800cef8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cefa:	693b      	ldr	r3, [r7, #16]
 800cefc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800cf00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	031b      	lsls	r3, r3, #12
 800cf06:	693a      	ldr	r2, [r7, #16]
 800cf08:	4313      	orrs	r3, r2
 800cf0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800cf12:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	011b      	lsls	r3, r3, #4
 800cf18:	697a      	ldr	r2, [r7, #20]
 800cf1a:	4313      	orrs	r3, r2
 800cf1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	693a      	ldr	r2, [r7, #16]
 800cf22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	697a      	ldr	r2, [r7, #20]
 800cf28:	621a      	str	r2, [r3, #32]
}
 800cf2a:	bf00      	nop
 800cf2c:	371c      	adds	r7, #28
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf34:	4770      	bx	lr
	...

0800cf38 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b085      	sub	sp, #20
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	689b      	ldr	r3, [r3, #8]
 800cf46:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cf48:	68fa      	ldr	r2, [r7, #12]
 800cf4a:	4b09      	ldr	r3, [pc, #36]	@ (800cf70 <TIM_ITRx_SetConfig+0x38>)
 800cf4c:	4013      	ands	r3, r2
 800cf4e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cf50:	683a      	ldr	r2, [r7, #0]
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	4313      	orrs	r3, r2
 800cf56:	f043 0307 	orr.w	r3, r3, #7
 800cf5a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	68fa      	ldr	r2, [r7, #12]
 800cf60:	609a      	str	r2, [r3, #8]
}
 800cf62:	bf00      	nop
 800cf64:	3714      	adds	r7, #20
 800cf66:	46bd      	mov	sp, r7
 800cf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6c:	4770      	bx	lr
 800cf6e:	bf00      	nop
 800cf70:	ffcfff8f 	.word	0xffcfff8f

0800cf74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cf74:	b480      	push	{r7}
 800cf76:	b087      	sub	sp, #28
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	60f8      	str	r0, [r7, #12]
 800cf7c:	60b9      	str	r1, [r7, #8]
 800cf7e:	607a      	str	r2, [r7, #4]
 800cf80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	689b      	ldr	r3, [r3, #8]
 800cf86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cf8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	021a      	lsls	r2, r3, #8
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	431a      	orrs	r2, r3
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	4313      	orrs	r3, r2
 800cf9c:	697a      	ldr	r2, [r7, #20]
 800cf9e:	4313      	orrs	r3, r2
 800cfa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	697a      	ldr	r2, [r7, #20]
 800cfa6:	609a      	str	r2, [r3, #8]
}
 800cfa8:	bf00      	nop
 800cfaa:	371c      	adds	r7, #28
 800cfac:	46bd      	mov	sp, r7
 800cfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb2:	4770      	bx	lr

0800cfb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b085      	sub	sp, #20
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
 800cfbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cfc4:	2b01      	cmp	r3, #1
 800cfc6:	d101      	bne.n	800cfcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cfc8:	2302      	movs	r3, #2
 800cfca:	e06d      	b.n	800d0a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2201      	movs	r2, #1
 800cfd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2202      	movs	r2, #2
 800cfd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	685b      	ldr	r3, [r3, #4]
 800cfe2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	689b      	ldr	r3, [r3, #8]
 800cfea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	4a30      	ldr	r2, [pc, #192]	@ (800d0b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cff2:	4293      	cmp	r3, r2
 800cff4:	d004      	beq.n	800d000 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	4a2f      	ldr	r2, [pc, #188]	@ (800d0b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cffc:	4293      	cmp	r3, r2
 800cffe:	d108      	bne.n	800d012 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d006:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	685b      	ldr	r3, [r3, #4]
 800d00c:	68fa      	ldr	r2, [r7, #12]
 800d00e:	4313      	orrs	r3, r2
 800d010:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d018:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	68fa      	ldr	r2, [r7, #12]
 800d020:	4313      	orrs	r3, r2
 800d022:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	68fa      	ldr	r2, [r7, #12]
 800d02a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	4a20      	ldr	r2, [pc, #128]	@ (800d0b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d032:	4293      	cmp	r3, r2
 800d034:	d022      	beq.n	800d07c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d03e:	d01d      	beq.n	800d07c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	4a1d      	ldr	r2, [pc, #116]	@ (800d0bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d046:	4293      	cmp	r3, r2
 800d048:	d018      	beq.n	800d07c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	4a1c      	ldr	r2, [pc, #112]	@ (800d0c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d050:	4293      	cmp	r3, r2
 800d052:	d013      	beq.n	800d07c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	4a1a      	ldr	r2, [pc, #104]	@ (800d0c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d05a:	4293      	cmp	r3, r2
 800d05c:	d00e      	beq.n	800d07c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	4a15      	ldr	r2, [pc, #84]	@ (800d0b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d064:	4293      	cmp	r3, r2
 800d066:	d009      	beq.n	800d07c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	4a16      	ldr	r2, [pc, #88]	@ (800d0c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d06e:	4293      	cmp	r3, r2
 800d070:	d004      	beq.n	800d07c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	4a15      	ldr	r2, [pc, #84]	@ (800d0cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d078:	4293      	cmp	r3, r2
 800d07a:	d10c      	bne.n	800d096 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d082:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	689b      	ldr	r3, [r3, #8]
 800d088:	68ba      	ldr	r2, [r7, #8]
 800d08a:	4313      	orrs	r3, r2
 800d08c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	68ba      	ldr	r2, [r7, #8]
 800d094:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2201      	movs	r2, #1
 800d09a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d0a6:	2300      	movs	r3, #0
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3714      	adds	r7, #20
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b2:	4770      	bx	lr
 800d0b4:	40010000 	.word	0x40010000
 800d0b8:	40010400 	.word	0x40010400
 800d0bc:	40000400 	.word	0x40000400
 800d0c0:	40000800 	.word	0x40000800
 800d0c4:	40000c00 	.word	0x40000c00
 800d0c8:	40001800 	.word	0x40001800
 800d0cc:	40014000 	.word	0x40014000

0800d0d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b083      	sub	sp, #12
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d0d8:	bf00      	nop
 800d0da:	370c      	adds	r7, #12
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e2:	4770      	bx	lr

0800d0e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	b083      	sub	sp, #12
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d0ec:	bf00      	nop
 800d0ee:	370c      	adds	r7, #12
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f6:	4770      	bx	lr

0800d0f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b083      	sub	sp, #12
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d100:	bf00      	nop
 800d102:	370c      	adds	r7, #12
 800d104:	46bd      	mov	sp, r7
 800d106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10a:	4770      	bx	lr

0800d10c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b082      	sub	sp, #8
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d101      	bne.n	800d11e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d11a:	2301      	movs	r3, #1
 800d11c:	e042      	b.n	800d1a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d124:	2b00      	cmp	r3, #0
 800d126:	d106      	bne.n	800d136 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2200      	movs	r2, #0
 800d12c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f7f4 fc75 	bl	8001a20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2224      	movs	r2, #36	@ 0x24
 800d13a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	681a      	ldr	r2, [r3, #0]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	f022 0201 	bic.w	r2, r2, #1
 800d14c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d152:	2b00      	cmp	r3, #0
 800d154:	d002      	beq.n	800d15c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f001 fa60 	bl	800e61c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d15c:	6878      	ldr	r0, [r7, #4]
 800d15e:	f000 fcf5 	bl	800db4c <UART_SetConfig>
 800d162:	4603      	mov	r3, r0
 800d164:	2b01      	cmp	r3, #1
 800d166:	d101      	bne.n	800d16c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d168:	2301      	movs	r3, #1
 800d16a:	e01b      	b.n	800d1a4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	685a      	ldr	r2, [r3, #4]
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d17a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	689a      	ldr	r2, [r3, #8]
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d18a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	681a      	ldr	r2, [r3, #0]
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	f042 0201 	orr.w	r2, r2, #1
 800d19a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f001 fadf 	bl	800e760 <UART_CheckIdleState>
 800d1a2:	4603      	mov	r3, r0
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3708      	adds	r7, #8
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}

0800d1ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b08a      	sub	sp, #40	@ 0x28
 800d1b0:	af02      	add	r7, sp, #8
 800d1b2:	60f8      	str	r0, [r7, #12]
 800d1b4:	60b9      	str	r1, [r7, #8]
 800d1b6:	603b      	str	r3, [r7, #0]
 800d1b8:	4613      	mov	r3, r2
 800d1ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d1c2:	2b20      	cmp	r3, #32
 800d1c4:	d17b      	bne.n	800d2be <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d1c6:	68bb      	ldr	r3, [r7, #8]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d002      	beq.n	800d1d2 <HAL_UART_Transmit+0x26>
 800d1cc:	88fb      	ldrh	r3, [r7, #6]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d101      	bne.n	800d1d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d1d2:	2301      	movs	r3, #1
 800d1d4:	e074      	b.n	800d2c0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	2200      	movs	r2, #0
 800d1da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	2221      	movs	r2, #33	@ 0x21
 800d1e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d1e6:	f7f6 f8c7 	bl	8003378 <HAL_GetTick>
 800d1ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	88fa      	ldrh	r2, [r7, #6]
 800d1f0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	88fa      	ldrh	r2, [r7, #6]
 800d1f8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	689b      	ldr	r3, [r3, #8]
 800d200:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d204:	d108      	bne.n	800d218 <HAL_UART_Transmit+0x6c>
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	691b      	ldr	r3, [r3, #16]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d104      	bne.n	800d218 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d20e:	2300      	movs	r3, #0
 800d210:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d212:	68bb      	ldr	r3, [r7, #8]
 800d214:	61bb      	str	r3, [r7, #24]
 800d216:	e003      	b.n	800d220 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d21c:	2300      	movs	r3, #0
 800d21e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d220:	e030      	b.n	800d284 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	9300      	str	r3, [sp, #0]
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	2200      	movs	r2, #0
 800d22a:	2180      	movs	r1, #128	@ 0x80
 800d22c:	68f8      	ldr	r0, [r7, #12]
 800d22e:	f001 fb41 	bl	800e8b4 <UART_WaitOnFlagUntilTimeout>
 800d232:	4603      	mov	r3, r0
 800d234:	2b00      	cmp	r3, #0
 800d236:	d005      	beq.n	800d244 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	2220      	movs	r2, #32
 800d23c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800d240:	2303      	movs	r3, #3
 800d242:	e03d      	b.n	800d2c0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d244:	69fb      	ldr	r3, [r7, #28]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d10b      	bne.n	800d262 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d24a:	69bb      	ldr	r3, [r7, #24]
 800d24c:	881b      	ldrh	r3, [r3, #0]
 800d24e:	461a      	mov	r2, r3
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d258:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800d25a:	69bb      	ldr	r3, [r7, #24]
 800d25c:	3302      	adds	r3, #2
 800d25e:	61bb      	str	r3, [r7, #24]
 800d260:	e007      	b.n	800d272 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d262:	69fb      	ldr	r3, [r7, #28]
 800d264:	781a      	ldrb	r2, [r3, #0]
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800d26c:	69fb      	ldr	r3, [r7, #28]
 800d26e:	3301      	adds	r3, #1
 800d270:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d278:	b29b      	uxth	r3, r3
 800d27a:	3b01      	subs	r3, #1
 800d27c:	b29a      	uxth	r2, r3
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d28a:	b29b      	uxth	r3, r3
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d1c8      	bne.n	800d222 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	9300      	str	r3, [sp, #0]
 800d294:	697b      	ldr	r3, [r7, #20]
 800d296:	2200      	movs	r2, #0
 800d298:	2140      	movs	r1, #64	@ 0x40
 800d29a:	68f8      	ldr	r0, [r7, #12]
 800d29c:	f001 fb0a 	bl	800e8b4 <UART_WaitOnFlagUntilTimeout>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d005      	beq.n	800d2b2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	2220      	movs	r2, #32
 800d2aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800d2ae:	2303      	movs	r3, #3
 800d2b0:	e006      	b.n	800d2c0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	2220      	movs	r2, #32
 800d2b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	e000      	b.n	800d2c0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d2be:	2302      	movs	r3, #2
  }
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	3720      	adds	r7, #32
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}

0800d2c8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b08a      	sub	sp, #40	@ 0x28
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	60f8      	str	r0, [r7, #12]
 800d2d0:	60b9      	str	r1, [r7, #8]
 800d2d2:	4613      	mov	r3, r2
 800d2d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d2dc:	2b20      	cmp	r3, #32
 800d2de:	d137      	bne.n	800d350 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d002      	beq.n	800d2ec <HAL_UART_Receive_IT+0x24>
 800d2e6:	88fb      	ldrh	r3, [r7, #6]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d101      	bne.n	800d2f0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800d2ec:	2301      	movs	r3, #1
 800d2ee:	e030      	b.n	800d352 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	4a18      	ldr	r2, [pc, #96]	@ (800d35c <HAL_UART_Receive_IT+0x94>)
 800d2fc:	4293      	cmp	r3, r2
 800d2fe:	d01f      	beq.n	800d340 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	685b      	ldr	r3, [r3, #4]
 800d306:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d018      	beq.n	800d340 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	e853 3f00 	ldrex	r3, [r3]
 800d31a:	613b      	str	r3, [r7, #16]
   return(result);
 800d31c:	693b      	ldr	r3, [r7, #16]
 800d31e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d322:	627b      	str	r3, [r7, #36]	@ 0x24
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	461a      	mov	r2, r3
 800d32a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d32c:	623b      	str	r3, [r7, #32]
 800d32e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d330:	69f9      	ldr	r1, [r7, #28]
 800d332:	6a3a      	ldr	r2, [r7, #32]
 800d334:	e841 2300 	strex	r3, r2, [r1]
 800d338:	61bb      	str	r3, [r7, #24]
   return(result);
 800d33a:	69bb      	ldr	r3, [r7, #24]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d1e6      	bne.n	800d30e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d340:	88fb      	ldrh	r3, [r7, #6]
 800d342:	461a      	mov	r2, r3
 800d344:	68b9      	ldr	r1, [r7, #8]
 800d346:	68f8      	ldr	r0, [r7, #12]
 800d348:	f001 fb22 	bl	800e990 <UART_Start_Receive_IT>
 800d34c:	4603      	mov	r3, r0
 800d34e:	e000      	b.n	800d352 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d350:	2302      	movs	r3, #2
  }
}
 800d352:	4618      	mov	r0, r3
 800d354:	3728      	adds	r7, #40	@ 0x28
 800d356:	46bd      	mov	sp, r7
 800d358:	bd80      	pop	{r7, pc}
 800d35a:	bf00      	nop
 800d35c:	58000c00 	.word	0x58000c00

0800d360 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b0ba      	sub	sp, #232	@ 0xe8
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	69db      	ldr	r3, [r3, #28]
 800d36e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	689b      	ldr	r3, [r3, #8]
 800d382:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d386:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800d38a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800d38e:	4013      	ands	r3, r2
 800d390:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800d394:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d11b      	bne.n	800d3d4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d39c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d3a0:	f003 0320 	and.w	r3, r3, #32
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d015      	beq.n	800d3d4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d3a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d3ac:	f003 0320 	and.w	r3, r3, #32
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d105      	bne.n	800d3c0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d3b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d3b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d009      	beq.n	800d3d4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	f000 8393 	beq.w	800daf0 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d3ce:	6878      	ldr	r0, [r7, #4]
 800d3d0:	4798      	blx	r3
      }
      return;
 800d3d2:	e38d      	b.n	800daf0 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d3d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	f000 8123 	beq.w	800d624 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d3de:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d3e2:	4b8d      	ldr	r3, [pc, #564]	@ (800d618 <HAL_UART_IRQHandler+0x2b8>)
 800d3e4:	4013      	ands	r3, r2
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d106      	bne.n	800d3f8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d3ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800d3ee:	4b8b      	ldr	r3, [pc, #556]	@ (800d61c <HAL_UART_IRQHandler+0x2bc>)
 800d3f0:	4013      	ands	r3, r2
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	f000 8116 	beq.w	800d624 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d3f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d3fc:	f003 0301 	and.w	r3, r3, #1
 800d400:	2b00      	cmp	r3, #0
 800d402:	d011      	beq.n	800d428 <HAL_UART_IRQHandler+0xc8>
 800d404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d00b      	beq.n	800d428 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	2201      	movs	r2, #1
 800d416:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d41e:	f043 0201 	orr.w	r2, r3, #1
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d42c:	f003 0302 	and.w	r3, r3, #2
 800d430:	2b00      	cmp	r3, #0
 800d432:	d011      	beq.n	800d458 <HAL_UART_IRQHandler+0xf8>
 800d434:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d438:	f003 0301 	and.w	r3, r3, #1
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d00b      	beq.n	800d458 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	2202      	movs	r2, #2
 800d446:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d44e:	f043 0204 	orr.w	r2, r3, #4
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d45c:	f003 0304 	and.w	r3, r3, #4
 800d460:	2b00      	cmp	r3, #0
 800d462:	d011      	beq.n	800d488 <HAL_UART_IRQHandler+0x128>
 800d464:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d468:	f003 0301 	and.w	r3, r3, #1
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d00b      	beq.n	800d488 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	2204      	movs	r2, #4
 800d476:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d47e:	f043 0202 	orr.w	r2, r3, #2
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d48c:	f003 0308 	and.w	r3, r3, #8
 800d490:	2b00      	cmp	r3, #0
 800d492:	d017      	beq.n	800d4c4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d498:	f003 0320 	and.w	r3, r3, #32
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d105      	bne.n	800d4ac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d4a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d4a4:	4b5c      	ldr	r3, [pc, #368]	@ (800d618 <HAL_UART_IRQHandler+0x2b8>)
 800d4a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d00b      	beq.n	800d4c4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	2208      	movs	r2, #8
 800d4b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d4ba:	f043 0208 	orr.w	r2, r3, #8
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d4c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d4c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d012      	beq.n	800d4f6 <HAL_UART_IRQHandler+0x196>
 800d4d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d4d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d00c      	beq.n	800d4f6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d4e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d4ec:	f043 0220 	orr.w	r2, r3, #32
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	f000 82f9 	beq.w	800daf4 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d506:	f003 0320 	and.w	r3, r3, #32
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d013      	beq.n	800d536 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d50e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d512:	f003 0320 	and.w	r3, r3, #32
 800d516:	2b00      	cmp	r3, #0
 800d518:	d105      	bne.n	800d526 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d51a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d51e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d522:	2b00      	cmp	r3, #0
 800d524:	d007      	beq.n	800d536 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d003      	beq.n	800d536 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d53c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	689b      	ldr	r3, [r3, #8]
 800d546:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d54a:	2b40      	cmp	r3, #64	@ 0x40
 800d54c:	d005      	beq.n	800d55a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d54e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d552:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d556:	2b00      	cmp	r3, #0
 800d558:	d054      	beq.n	800d604 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d55a:	6878      	ldr	r0, [r7, #4]
 800d55c:	f001 fb3a 	bl	800ebd4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	689b      	ldr	r3, [r3, #8]
 800d566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d56a:	2b40      	cmp	r3, #64	@ 0x40
 800d56c:	d146      	bne.n	800d5fc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	3308      	adds	r3, #8
 800d574:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d578:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d57c:	e853 3f00 	ldrex	r3, [r3]
 800d580:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d584:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d588:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d58c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	3308      	adds	r3, #8
 800d596:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d59a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d59e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d5a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d5aa:	e841 2300 	strex	r3, r2, [r1]
 800d5ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d5b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d1d9      	bne.n	800d56e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d017      	beq.n	800d5f4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5ca:	4a15      	ldr	r2, [pc, #84]	@ (800d620 <HAL_UART_IRQHandler+0x2c0>)
 800d5cc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f7f8 fe7b 	bl	80062d0 <HAL_DMA_Abort_IT>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d019      	beq.n	800d614 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d5e8:	687a      	ldr	r2, [r7, #4]
 800d5ea:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800d5ee:	4610      	mov	r0, r2
 800d5f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5f2:	e00f      	b.n	800d614 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d5f4:	6878      	ldr	r0, [r7, #4]
 800d5f6:	f000 fa93 	bl	800db20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5fa:	e00b      	b.n	800d614 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d5fc:	6878      	ldr	r0, [r7, #4]
 800d5fe:	f000 fa8f 	bl	800db20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d602:	e007      	b.n	800d614 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f000 fa8b 	bl	800db20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2200      	movs	r2, #0
 800d60e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800d612:	e26f      	b.n	800daf4 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d614:	bf00      	nop
    return;
 800d616:	e26d      	b.n	800daf4 <HAL_UART_IRQHandler+0x794>
 800d618:	10000001 	.word	0x10000001
 800d61c:	04000120 	.word	0x04000120
 800d620:	0800eca1 	.word	0x0800eca1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d628:	2b01      	cmp	r3, #1
 800d62a:	f040 8203 	bne.w	800da34 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d62e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d632:	f003 0310 	and.w	r3, r3, #16
 800d636:	2b00      	cmp	r3, #0
 800d638:	f000 81fc 	beq.w	800da34 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d63c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d640:	f003 0310 	and.w	r3, r3, #16
 800d644:	2b00      	cmp	r3, #0
 800d646:	f000 81f5 	beq.w	800da34 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	2210      	movs	r2, #16
 800d650:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	689b      	ldr	r3, [r3, #8]
 800d658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d65c:	2b40      	cmp	r3, #64	@ 0x40
 800d65e:	f040 816d 	bne.w	800d93c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	4aa4      	ldr	r2, [pc, #656]	@ (800d8fc <HAL_UART_IRQHandler+0x59c>)
 800d66c:	4293      	cmp	r3, r2
 800d66e:	d068      	beq.n	800d742 <HAL_UART_IRQHandler+0x3e2>
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	4aa1      	ldr	r2, [pc, #644]	@ (800d900 <HAL_UART_IRQHandler+0x5a0>)
 800d67a:	4293      	cmp	r3, r2
 800d67c:	d061      	beq.n	800d742 <HAL_UART_IRQHandler+0x3e2>
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	4a9f      	ldr	r2, [pc, #636]	@ (800d904 <HAL_UART_IRQHandler+0x5a4>)
 800d688:	4293      	cmp	r3, r2
 800d68a:	d05a      	beq.n	800d742 <HAL_UART_IRQHandler+0x3e2>
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	4a9c      	ldr	r2, [pc, #624]	@ (800d908 <HAL_UART_IRQHandler+0x5a8>)
 800d696:	4293      	cmp	r3, r2
 800d698:	d053      	beq.n	800d742 <HAL_UART_IRQHandler+0x3e2>
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	4a9a      	ldr	r2, [pc, #616]	@ (800d90c <HAL_UART_IRQHandler+0x5ac>)
 800d6a4:	4293      	cmp	r3, r2
 800d6a6:	d04c      	beq.n	800d742 <HAL_UART_IRQHandler+0x3e2>
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	4a97      	ldr	r2, [pc, #604]	@ (800d910 <HAL_UART_IRQHandler+0x5b0>)
 800d6b2:	4293      	cmp	r3, r2
 800d6b4:	d045      	beq.n	800d742 <HAL_UART_IRQHandler+0x3e2>
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	4a95      	ldr	r2, [pc, #596]	@ (800d914 <HAL_UART_IRQHandler+0x5b4>)
 800d6c0:	4293      	cmp	r3, r2
 800d6c2:	d03e      	beq.n	800d742 <HAL_UART_IRQHandler+0x3e2>
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	4a92      	ldr	r2, [pc, #584]	@ (800d918 <HAL_UART_IRQHandler+0x5b8>)
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	d037      	beq.n	800d742 <HAL_UART_IRQHandler+0x3e2>
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	4a90      	ldr	r2, [pc, #576]	@ (800d91c <HAL_UART_IRQHandler+0x5bc>)
 800d6dc:	4293      	cmp	r3, r2
 800d6de:	d030      	beq.n	800d742 <HAL_UART_IRQHandler+0x3e2>
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	4a8d      	ldr	r2, [pc, #564]	@ (800d920 <HAL_UART_IRQHandler+0x5c0>)
 800d6ea:	4293      	cmp	r3, r2
 800d6ec:	d029      	beq.n	800d742 <HAL_UART_IRQHandler+0x3e2>
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	4a8b      	ldr	r2, [pc, #556]	@ (800d924 <HAL_UART_IRQHandler+0x5c4>)
 800d6f8:	4293      	cmp	r3, r2
 800d6fa:	d022      	beq.n	800d742 <HAL_UART_IRQHandler+0x3e2>
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	4a88      	ldr	r2, [pc, #544]	@ (800d928 <HAL_UART_IRQHandler+0x5c8>)
 800d706:	4293      	cmp	r3, r2
 800d708:	d01b      	beq.n	800d742 <HAL_UART_IRQHandler+0x3e2>
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	4a86      	ldr	r2, [pc, #536]	@ (800d92c <HAL_UART_IRQHandler+0x5cc>)
 800d714:	4293      	cmp	r3, r2
 800d716:	d014      	beq.n	800d742 <HAL_UART_IRQHandler+0x3e2>
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	4a83      	ldr	r2, [pc, #524]	@ (800d930 <HAL_UART_IRQHandler+0x5d0>)
 800d722:	4293      	cmp	r3, r2
 800d724:	d00d      	beq.n	800d742 <HAL_UART_IRQHandler+0x3e2>
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	4a81      	ldr	r2, [pc, #516]	@ (800d934 <HAL_UART_IRQHandler+0x5d4>)
 800d730:	4293      	cmp	r3, r2
 800d732:	d006      	beq.n	800d742 <HAL_UART_IRQHandler+0x3e2>
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	4a7e      	ldr	r2, [pc, #504]	@ (800d938 <HAL_UART_IRQHandler+0x5d8>)
 800d73e:	4293      	cmp	r3, r2
 800d740:	d106      	bne.n	800d750 <HAL_UART_IRQHandler+0x3f0>
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	685b      	ldr	r3, [r3, #4]
 800d74c:	b29b      	uxth	r3, r3
 800d74e:	e005      	b.n	800d75c <HAL_UART_IRQHandler+0x3fc>
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	685b      	ldr	r3, [r3, #4]
 800d75a:	b29b      	uxth	r3, r3
 800d75c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d760:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d764:	2b00      	cmp	r3, #0
 800d766:	f000 80ad 	beq.w	800d8c4 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d770:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d774:	429a      	cmp	r2, r3
 800d776:	f080 80a5 	bcs.w	800d8c4 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d780:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d78a:	69db      	ldr	r3, [r3, #28]
 800d78c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d790:	f000 8087 	beq.w	800d8a2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d79c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d7a0:	e853 3f00 	ldrex	r3, [r3]
 800d7a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d7a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d7ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d7b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	461a      	mov	r2, r3
 800d7ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d7be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d7c2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d7ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d7ce:	e841 2300 	strex	r3, r2, [r1]
 800d7d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d7d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d1da      	bne.n	800d794 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	3308      	adds	r3, #8
 800d7e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d7e8:	e853 3f00 	ldrex	r3, [r3]
 800d7ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d7ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d7f0:	f023 0301 	bic.w	r3, r3, #1
 800d7f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	3308      	adds	r3, #8
 800d7fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d802:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d806:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d808:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d80a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d80e:	e841 2300 	strex	r3, r2, [r1]
 800d812:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d814:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d816:	2b00      	cmp	r3, #0
 800d818:	d1e1      	bne.n	800d7de <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	3308      	adds	r3, #8
 800d820:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d822:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d824:	e853 3f00 	ldrex	r3, [r3]
 800d828:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d82a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d82c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d830:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	3308      	adds	r3, #8
 800d83a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d83e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d840:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d842:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d844:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d846:	e841 2300 	strex	r3, r2, [r1]
 800d84a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d84c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d1e3      	bne.n	800d81a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2220      	movs	r2, #32
 800d856:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2200      	movs	r2, #0
 800d85e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d866:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d868:	e853 3f00 	ldrex	r3, [r3]
 800d86c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d86e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d870:	f023 0310 	bic.w	r3, r3, #16
 800d874:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	461a      	mov	r2, r3
 800d87e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d882:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d884:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d886:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d888:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d88a:	e841 2300 	strex	r3, r2, [r1]
 800d88e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d890:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d892:	2b00      	cmp	r3, #0
 800d894:	d1e4      	bne.n	800d860 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d89c:	4618      	mov	r0, r3
 800d89e:	f7f8 f9f9 	bl	8005c94 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	2202      	movs	r2, #2
 800d8a6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d8b4:	b29b      	uxth	r3, r3
 800d8b6:	1ad3      	subs	r3, r2, r3
 800d8b8:	b29b      	uxth	r3, r3
 800d8ba:	4619      	mov	r1, r3
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f000 f939 	bl	800db34 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800d8c2:	e119      	b.n	800daf8 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d8ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d8ce:	429a      	cmp	r2, r3
 800d8d0:	f040 8112 	bne.w	800daf8 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d8da:	69db      	ldr	r3, [r3, #28]
 800d8dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d8e0:	f040 810a 	bne.w	800daf8 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2202      	movs	r2, #2
 800d8e8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d8f0:	4619      	mov	r1, r3
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f000 f91e 	bl	800db34 <HAL_UARTEx_RxEventCallback>
      return;
 800d8f8:	e0fe      	b.n	800daf8 <HAL_UART_IRQHandler+0x798>
 800d8fa:	bf00      	nop
 800d8fc:	40020010 	.word	0x40020010
 800d900:	40020028 	.word	0x40020028
 800d904:	40020040 	.word	0x40020040
 800d908:	40020058 	.word	0x40020058
 800d90c:	40020070 	.word	0x40020070
 800d910:	40020088 	.word	0x40020088
 800d914:	400200a0 	.word	0x400200a0
 800d918:	400200b8 	.word	0x400200b8
 800d91c:	40020410 	.word	0x40020410
 800d920:	40020428 	.word	0x40020428
 800d924:	40020440 	.word	0x40020440
 800d928:	40020458 	.word	0x40020458
 800d92c:	40020470 	.word	0x40020470
 800d930:	40020488 	.word	0x40020488
 800d934:	400204a0 	.word	0x400204a0
 800d938:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d948:	b29b      	uxth	r3, r3
 800d94a:	1ad3      	subs	r3, r2, r3
 800d94c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d956:	b29b      	uxth	r3, r3
 800d958:	2b00      	cmp	r3, #0
 800d95a:	f000 80cf 	beq.w	800dafc <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800d95e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d962:	2b00      	cmp	r3, #0
 800d964:	f000 80ca 	beq.w	800dafc <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d96e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d970:	e853 3f00 	ldrex	r3, [r3]
 800d974:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d978:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d97c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	461a      	mov	r2, r3
 800d986:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d98a:	647b      	str	r3, [r7, #68]	@ 0x44
 800d98c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d98e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d990:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d992:	e841 2300 	strex	r3, r2, [r1]
 800d996:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d998:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d1e4      	bne.n	800d968 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	3308      	adds	r3, #8
 800d9a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9a8:	e853 3f00 	ldrex	r3, [r3]
 800d9ac:	623b      	str	r3, [r7, #32]
   return(result);
 800d9ae:	6a3a      	ldr	r2, [r7, #32]
 800d9b0:	4b55      	ldr	r3, [pc, #340]	@ (800db08 <HAL_UART_IRQHandler+0x7a8>)
 800d9b2:	4013      	ands	r3, r2
 800d9b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	3308      	adds	r3, #8
 800d9be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d9c2:	633a      	str	r2, [r7, #48]	@ 0x30
 800d9c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d9c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d9ca:	e841 2300 	strex	r3, r2, [r1]
 800d9ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d9d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d1e3      	bne.n	800d99e <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2220      	movs	r2, #32
 800d9da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9f0:	693b      	ldr	r3, [r7, #16]
 800d9f2:	e853 3f00 	ldrex	r3, [r3]
 800d9f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	f023 0310 	bic.w	r3, r3, #16
 800d9fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	461a      	mov	r2, r3
 800da08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800da0c:	61fb      	str	r3, [r7, #28]
 800da0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da10:	69b9      	ldr	r1, [r7, #24]
 800da12:	69fa      	ldr	r2, [r7, #28]
 800da14:	e841 2300 	strex	r3, r2, [r1]
 800da18:	617b      	str	r3, [r7, #20]
   return(result);
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d1e4      	bne.n	800d9ea <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2202      	movs	r2, #2
 800da24:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800da26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800da2a:	4619      	mov	r1, r3
 800da2c:	6878      	ldr	r0, [r7, #4]
 800da2e:	f000 f881 	bl	800db34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800da32:	e063      	b.n	800dafc <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800da34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d00e      	beq.n	800da5e <HAL_UART_IRQHandler+0x6fe>
 800da40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800da44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d008      	beq.n	800da5e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800da54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800da56:	6878      	ldr	r0, [r7, #4]
 800da58:	f001 fe80 	bl	800f75c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800da5c:	e051      	b.n	800db02 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800da5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da66:	2b00      	cmp	r3, #0
 800da68:	d014      	beq.n	800da94 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800da6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800da6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da72:	2b00      	cmp	r3, #0
 800da74:	d105      	bne.n	800da82 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800da76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800da7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d008      	beq.n	800da94 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800da86:	2b00      	cmp	r3, #0
 800da88:	d03a      	beq.n	800db00 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800da8e:	6878      	ldr	r0, [r7, #4]
 800da90:	4798      	blx	r3
    }
    return;
 800da92:	e035      	b.n	800db00 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800da94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d009      	beq.n	800dab4 <HAL_UART_IRQHandler+0x754>
 800daa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800daa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d003      	beq.n	800dab4 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800daac:	6878      	ldr	r0, [r7, #4]
 800daae:	f001 f909 	bl	800ecc4 <UART_EndTransmit_IT>
    return;
 800dab2:	e026      	b.n	800db02 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800dab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dab8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d009      	beq.n	800dad4 <HAL_UART_IRQHandler+0x774>
 800dac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dac4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d003      	beq.n	800dad4 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	f001 fe59 	bl	800f784 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dad2:	e016      	b.n	800db02 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800dad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dad8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d010      	beq.n	800db02 <HAL_UART_IRQHandler+0x7a2>
 800dae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	da0c      	bge.n	800db02 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f001 fe41 	bl	800f770 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800daee:	e008      	b.n	800db02 <HAL_UART_IRQHandler+0x7a2>
      return;
 800daf0:	bf00      	nop
 800daf2:	e006      	b.n	800db02 <HAL_UART_IRQHandler+0x7a2>
    return;
 800daf4:	bf00      	nop
 800daf6:	e004      	b.n	800db02 <HAL_UART_IRQHandler+0x7a2>
      return;
 800daf8:	bf00      	nop
 800dafa:	e002      	b.n	800db02 <HAL_UART_IRQHandler+0x7a2>
      return;
 800dafc:	bf00      	nop
 800dafe:	e000      	b.n	800db02 <HAL_UART_IRQHandler+0x7a2>
    return;
 800db00:	bf00      	nop
  }
}
 800db02:	37e8      	adds	r7, #232	@ 0xe8
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}
 800db08:	effffffe 	.word	0xeffffffe

0800db0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800db0c:	b480      	push	{r7}
 800db0e:	b083      	sub	sp, #12
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800db14:	bf00      	nop
 800db16:	370c      	adds	r7, #12
 800db18:	46bd      	mov	sp, r7
 800db1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1e:	4770      	bx	lr

0800db20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800db20:	b480      	push	{r7}
 800db22:	b083      	sub	sp, #12
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800db28:	bf00      	nop
 800db2a:	370c      	adds	r7, #12
 800db2c:	46bd      	mov	sp, r7
 800db2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db32:	4770      	bx	lr

0800db34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800db34:	b480      	push	{r7}
 800db36:	b083      	sub	sp, #12
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
 800db3c:	460b      	mov	r3, r1
 800db3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800db40:	bf00      	nop
 800db42:	370c      	adds	r7, #12
 800db44:	46bd      	mov	sp, r7
 800db46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4a:	4770      	bx	lr

0800db4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800db4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800db50:	b092      	sub	sp, #72	@ 0x48
 800db52:	af00      	add	r7, sp, #0
 800db54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800db56:	2300      	movs	r3, #0
 800db58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	689a      	ldr	r2, [r3, #8]
 800db60:	697b      	ldr	r3, [r7, #20]
 800db62:	691b      	ldr	r3, [r3, #16]
 800db64:	431a      	orrs	r2, r3
 800db66:	697b      	ldr	r3, [r7, #20]
 800db68:	695b      	ldr	r3, [r3, #20]
 800db6a:	431a      	orrs	r2, r3
 800db6c:	697b      	ldr	r3, [r7, #20]
 800db6e:	69db      	ldr	r3, [r3, #28]
 800db70:	4313      	orrs	r3, r2
 800db72:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800db74:	697b      	ldr	r3, [r7, #20]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	681a      	ldr	r2, [r3, #0]
 800db7a:	4bbe      	ldr	r3, [pc, #760]	@ (800de74 <UART_SetConfig+0x328>)
 800db7c:	4013      	ands	r3, r2
 800db7e:	697a      	ldr	r2, [r7, #20]
 800db80:	6812      	ldr	r2, [r2, #0]
 800db82:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800db84:	430b      	orrs	r3, r1
 800db86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800db88:	697b      	ldr	r3, [r7, #20]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	685b      	ldr	r3, [r3, #4]
 800db8e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800db92:	697b      	ldr	r3, [r7, #20]
 800db94:	68da      	ldr	r2, [r3, #12]
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	430a      	orrs	r2, r1
 800db9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	699b      	ldr	r3, [r3, #24]
 800dba2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dba4:	697b      	ldr	r3, [r7, #20]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	4ab3      	ldr	r2, [pc, #716]	@ (800de78 <UART_SetConfig+0x32c>)
 800dbaa:	4293      	cmp	r3, r2
 800dbac:	d004      	beq.n	800dbb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800dbae:	697b      	ldr	r3, [r7, #20]
 800dbb0:	6a1b      	ldr	r3, [r3, #32]
 800dbb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dbb4:	4313      	orrs	r3, r2
 800dbb6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	689a      	ldr	r2, [r3, #8]
 800dbbe:	4baf      	ldr	r3, [pc, #700]	@ (800de7c <UART_SetConfig+0x330>)
 800dbc0:	4013      	ands	r3, r2
 800dbc2:	697a      	ldr	r2, [r7, #20]
 800dbc4:	6812      	ldr	r2, [r2, #0]
 800dbc6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800dbc8:	430b      	orrs	r3, r1
 800dbca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800dbcc:	697b      	ldr	r3, [r7, #20]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbd2:	f023 010f 	bic.w	r1, r3, #15
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	430a      	orrs	r2, r1
 800dbe0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dbe2:	697b      	ldr	r3, [r7, #20]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	4aa6      	ldr	r2, [pc, #664]	@ (800de80 <UART_SetConfig+0x334>)
 800dbe8:	4293      	cmp	r3, r2
 800dbea:	d177      	bne.n	800dcdc <UART_SetConfig+0x190>
 800dbec:	4ba5      	ldr	r3, [pc, #660]	@ (800de84 <UART_SetConfig+0x338>)
 800dbee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dbf0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dbf4:	2b28      	cmp	r3, #40	@ 0x28
 800dbf6:	d86d      	bhi.n	800dcd4 <UART_SetConfig+0x188>
 800dbf8:	a201      	add	r2, pc, #4	@ (adr r2, 800dc00 <UART_SetConfig+0xb4>)
 800dbfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbfe:	bf00      	nop
 800dc00:	0800dca5 	.word	0x0800dca5
 800dc04:	0800dcd5 	.word	0x0800dcd5
 800dc08:	0800dcd5 	.word	0x0800dcd5
 800dc0c:	0800dcd5 	.word	0x0800dcd5
 800dc10:	0800dcd5 	.word	0x0800dcd5
 800dc14:	0800dcd5 	.word	0x0800dcd5
 800dc18:	0800dcd5 	.word	0x0800dcd5
 800dc1c:	0800dcd5 	.word	0x0800dcd5
 800dc20:	0800dcad 	.word	0x0800dcad
 800dc24:	0800dcd5 	.word	0x0800dcd5
 800dc28:	0800dcd5 	.word	0x0800dcd5
 800dc2c:	0800dcd5 	.word	0x0800dcd5
 800dc30:	0800dcd5 	.word	0x0800dcd5
 800dc34:	0800dcd5 	.word	0x0800dcd5
 800dc38:	0800dcd5 	.word	0x0800dcd5
 800dc3c:	0800dcd5 	.word	0x0800dcd5
 800dc40:	0800dcb5 	.word	0x0800dcb5
 800dc44:	0800dcd5 	.word	0x0800dcd5
 800dc48:	0800dcd5 	.word	0x0800dcd5
 800dc4c:	0800dcd5 	.word	0x0800dcd5
 800dc50:	0800dcd5 	.word	0x0800dcd5
 800dc54:	0800dcd5 	.word	0x0800dcd5
 800dc58:	0800dcd5 	.word	0x0800dcd5
 800dc5c:	0800dcd5 	.word	0x0800dcd5
 800dc60:	0800dcbd 	.word	0x0800dcbd
 800dc64:	0800dcd5 	.word	0x0800dcd5
 800dc68:	0800dcd5 	.word	0x0800dcd5
 800dc6c:	0800dcd5 	.word	0x0800dcd5
 800dc70:	0800dcd5 	.word	0x0800dcd5
 800dc74:	0800dcd5 	.word	0x0800dcd5
 800dc78:	0800dcd5 	.word	0x0800dcd5
 800dc7c:	0800dcd5 	.word	0x0800dcd5
 800dc80:	0800dcc5 	.word	0x0800dcc5
 800dc84:	0800dcd5 	.word	0x0800dcd5
 800dc88:	0800dcd5 	.word	0x0800dcd5
 800dc8c:	0800dcd5 	.word	0x0800dcd5
 800dc90:	0800dcd5 	.word	0x0800dcd5
 800dc94:	0800dcd5 	.word	0x0800dcd5
 800dc98:	0800dcd5 	.word	0x0800dcd5
 800dc9c:	0800dcd5 	.word	0x0800dcd5
 800dca0:	0800dccd 	.word	0x0800dccd
 800dca4:	2301      	movs	r3, #1
 800dca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcaa:	e222      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800dcac:	2304      	movs	r3, #4
 800dcae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcb2:	e21e      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800dcb4:	2308      	movs	r3, #8
 800dcb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcba:	e21a      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800dcbc:	2310      	movs	r3, #16
 800dcbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcc2:	e216      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800dcc4:	2320      	movs	r3, #32
 800dcc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcca:	e212      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800dccc:	2340      	movs	r3, #64	@ 0x40
 800dcce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcd2:	e20e      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800dcd4:	2380      	movs	r3, #128	@ 0x80
 800dcd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcda:	e20a      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800dcdc:	697b      	ldr	r3, [r7, #20]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	4a69      	ldr	r2, [pc, #420]	@ (800de88 <UART_SetConfig+0x33c>)
 800dce2:	4293      	cmp	r3, r2
 800dce4:	d130      	bne.n	800dd48 <UART_SetConfig+0x1fc>
 800dce6:	4b67      	ldr	r3, [pc, #412]	@ (800de84 <UART_SetConfig+0x338>)
 800dce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dcea:	f003 0307 	and.w	r3, r3, #7
 800dcee:	2b05      	cmp	r3, #5
 800dcf0:	d826      	bhi.n	800dd40 <UART_SetConfig+0x1f4>
 800dcf2:	a201      	add	r2, pc, #4	@ (adr r2, 800dcf8 <UART_SetConfig+0x1ac>)
 800dcf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcf8:	0800dd11 	.word	0x0800dd11
 800dcfc:	0800dd19 	.word	0x0800dd19
 800dd00:	0800dd21 	.word	0x0800dd21
 800dd04:	0800dd29 	.word	0x0800dd29
 800dd08:	0800dd31 	.word	0x0800dd31
 800dd0c:	0800dd39 	.word	0x0800dd39
 800dd10:	2300      	movs	r3, #0
 800dd12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd16:	e1ec      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800dd18:	2304      	movs	r3, #4
 800dd1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd1e:	e1e8      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800dd20:	2308      	movs	r3, #8
 800dd22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd26:	e1e4      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800dd28:	2310      	movs	r3, #16
 800dd2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd2e:	e1e0      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800dd30:	2320      	movs	r3, #32
 800dd32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd36:	e1dc      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800dd38:	2340      	movs	r3, #64	@ 0x40
 800dd3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd3e:	e1d8      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800dd40:	2380      	movs	r3, #128	@ 0x80
 800dd42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd46:	e1d4      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800dd48:	697b      	ldr	r3, [r7, #20]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	4a4f      	ldr	r2, [pc, #316]	@ (800de8c <UART_SetConfig+0x340>)
 800dd4e:	4293      	cmp	r3, r2
 800dd50:	d130      	bne.n	800ddb4 <UART_SetConfig+0x268>
 800dd52:	4b4c      	ldr	r3, [pc, #304]	@ (800de84 <UART_SetConfig+0x338>)
 800dd54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd56:	f003 0307 	and.w	r3, r3, #7
 800dd5a:	2b05      	cmp	r3, #5
 800dd5c:	d826      	bhi.n	800ddac <UART_SetConfig+0x260>
 800dd5e:	a201      	add	r2, pc, #4	@ (adr r2, 800dd64 <UART_SetConfig+0x218>)
 800dd60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd64:	0800dd7d 	.word	0x0800dd7d
 800dd68:	0800dd85 	.word	0x0800dd85
 800dd6c:	0800dd8d 	.word	0x0800dd8d
 800dd70:	0800dd95 	.word	0x0800dd95
 800dd74:	0800dd9d 	.word	0x0800dd9d
 800dd78:	0800dda5 	.word	0x0800dda5
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd82:	e1b6      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800dd84:	2304      	movs	r3, #4
 800dd86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd8a:	e1b2      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800dd8c:	2308      	movs	r3, #8
 800dd8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd92:	e1ae      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800dd94:	2310      	movs	r3, #16
 800dd96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd9a:	e1aa      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800dd9c:	2320      	movs	r3, #32
 800dd9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dda2:	e1a6      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800dda4:	2340      	movs	r3, #64	@ 0x40
 800dda6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddaa:	e1a2      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800ddac:	2380      	movs	r3, #128	@ 0x80
 800ddae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddb2:	e19e      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800ddb4:	697b      	ldr	r3, [r7, #20]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	4a35      	ldr	r2, [pc, #212]	@ (800de90 <UART_SetConfig+0x344>)
 800ddba:	4293      	cmp	r3, r2
 800ddbc:	d130      	bne.n	800de20 <UART_SetConfig+0x2d4>
 800ddbe:	4b31      	ldr	r3, [pc, #196]	@ (800de84 <UART_SetConfig+0x338>)
 800ddc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ddc2:	f003 0307 	and.w	r3, r3, #7
 800ddc6:	2b05      	cmp	r3, #5
 800ddc8:	d826      	bhi.n	800de18 <UART_SetConfig+0x2cc>
 800ddca:	a201      	add	r2, pc, #4	@ (adr r2, 800ddd0 <UART_SetConfig+0x284>)
 800ddcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddd0:	0800dde9 	.word	0x0800dde9
 800ddd4:	0800ddf1 	.word	0x0800ddf1
 800ddd8:	0800ddf9 	.word	0x0800ddf9
 800dddc:	0800de01 	.word	0x0800de01
 800dde0:	0800de09 	.word	0x0800de09
 800dde4:	0800de11 	.word	0x0800de11
 800dde8:	2300      	movs	r3, #0
 800ddea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddee:	e180      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800ddf0:	2304      	movs	r3, #4
 800ddf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddf6:	e17c      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800ddf8:	2308      	movs	r3, #8
 800ddfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddfe:	e178      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800de00:	2310      	movs	r3, #16
 800de02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de06:	e174      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800de08:	2320      	movs	r3, #32
 800de0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de0e:	e170      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800de10:	2340      	movs	r3, #64	@ 0x40
 800de12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de16:	e16c      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800de18:	2380      	movs	r3, #128	@ 0x80
 800de1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de1e:	e168      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800de20:	697b      	ldr	r3, [r7, #20]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	4a1b      	ldr	r2, [pc, #108]	@ (800de94 <UART_SetConfig+0x348>)
 800de26:	4293      	cmp	r3, r2
 800de28:	d142      	bne.n	800deb0 <UART_SetConfig+0x364>
 800de2a:	4b16      	ldr	r3, [pc, #88]	@ (800de84 <UART_SetConfig+0x338>)
 800de2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800de2e:	f003 0307 	and.w	r3, r3, #7
 800de32:	2b05      	cmp	r3, #5
 800de34:	d838      	bhi.n	800dea8 <UART_SetConfig+0x35c>
 800de36:	a201      	add	r2, pc, #4	@ (adr r2, 800de3c <UART_SetConfig+0x2f0>)
 800de38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de3c:	0800de55 	.word	0x0800de55
 800de40:	0800de5d 	.word	0x0800de5d
 800de44:	0800de65 	.word	0x0800de65
 800de48:	0800de6d 	.word	0x0800de6d
 800de4c:	0800de99 	.word	0x0800de99
 800de50:	0800dea1 	.word	0x0800dea1
 800de54:	2300      	movs	r3, #0
 800de56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de5a:	e14a      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800de5c:	2304      	movs	r3, #4
 800de5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de62:	e146      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800de64:	2308      	movs	r3, #8
 800de66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de6a:	e142      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800de6c:	2310      	movs	r3, #16
 800de6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de72:	e13e      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800de74:	cfff69f3 	.word	0xcfff69f3
 800de78:	58000c00 	.word	0x58000c00
 800de7c:	11fff4ff 	.word	0x11fff4ff
 800de80:	40011000 	.word	0x40011000
 800de84:	58024400 	.word	0x58024400
 800de88:	40004400 	.word	0x40004400
 800de8c:	40004800 	.word	0x40004800
 800de90:	40004c00 	.word	0x40004c00
 800de94:	40005000 	.word	0x40005000
 800de98:	2320      	movs	r3, #32
 800de9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de9e:	e128      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800dea0:	2340      	movs	r3, #64	@ 0x40
 800dea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dea6:	e124      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800dea8:	2380      	movs	r3, #128	@ 0x80
 800deaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800deae:	e120      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800deb0:	697b      	ldr	r3, [r7, #20]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	4acb      	ldr	r2, [pc, #812]	@ (800e1e4 <UART_SetConfig+0x698>)
 800deb6:	4293      	cmp	r3, r2
 800deb8:	d176      	bne.n	800dfa8 <UART_SetConfig+0x45c>
 800deba:	4bcb      	ldr	r3, [pc, #812]	@ (800e1e8 <UART_SetConfig+0x69c>)
 800debc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800debe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dec2:	2b28      	cmp	r3, #40	@ 0x28
 800dec4:	d86c      	bhi.n	800dfa0 <UART_SetConfig+0x454>
 800dec6:	a201      	add	r2, pc, #4	@ (adr r2, 800decc <UART_SetConfig+0x380>)
 800dec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800decc:	0800df71 	.word	0x0800df71
 800ded0:	0800dfa1 	.word	0x0800dfa1
 800ded4:	0800dfa1 	.word	0x0800dfa1
 800ded8:	0800dfa1 	.word	0x0800dfa1
 800dedc:	0800dfa1 	.word	0x0800dfa1
 800dee0:	0800dfa1 	.word	0x0800dfa1
 800dee4:	0800dfa1 	.word	0x0800dfa1
 800dee8:	0800dfa1 	.word	0x0800dfa1
 800deec:	0800df79 	.word	0x0800df79
 800def0:	0800dfa1 	.word	0x0800dfa1
 800def4:	0800dfa1 	.word	0x0800dfa1
 800def8:	0800dfa1 	.word	0x0800dfa1
 800defc:	0800dfa1 	.word	0x0800dfa1
 800df00:	0800dfa1 	.word	0x0800dfa1
 800df04:	0800dfa1 	.word	0x0800dfa1
 800df08:	0800dfa1 	.word	0x0800dfa1
 800df0c:	0800df81 	.word	0x0800df81
 800df10:	0800dfa1 	.word	0x0800dfa1
 800df14:	0800dfa1 	.word	0x0800dfa1
 800df18:	0800dfa1 	.word	0x0800dfa1
 800df1c:	0800dfa1 	.word	0x0800dfa1
 800df20:	0800dfa1 	.word	0x0800dfa1
 800df24:	0800dfa1 	.word	0x0800dfa1
 800df28:	0800dfa1 	.word	0x0800dfa1
 800df2c:	0800df89 	.word	0x0800df89
 800df30:	0800dfa1 	.word	0x0800dfa1
 800df34:	0800dfa1 	.word	0x0800dfa1
 800df38:	0800dfa1 	.word	0x0800dfa1
 800df3c:	0800dfa1 	.word	0x0800dfa1
 800df40:	0800dfa1 	.word	0x0800dfa1
 800df44:	0800dfa1 	.word	0x0800dfa1
 800df48:	0800dfa1 	.word	0x0800dfa1
 800df4c:	0800df91 	.word	0x0800df91
 800df50:	0800dfa1 	.word	0x0800dfa1
 800df54:	0800dfa1 	.word	0x0800dfa1
 800df58:	0800dfa1 	.word	0x0800dfa1
 800df5c:	0800dfa1 	.word	0x0800dfa1
 800df60:	0800dfa1 	.word	0x0800dfa1
 800df64:	0800dfa1 	.word	0x0800dfa1
 800df68:	0800dfa1 	.word	0x0800dfa1
 800df6c:	0800df99 	.word	0x0800df99
 800df70:	2301      	movs	r3, #1
 800df72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df76:	e0bc      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800df78:	2304      	movs	r3, #4
 800df7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df7e:	e0b8      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800df80:	2308      	movs	r3, #8
 800df82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df86:	e0b4      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800df88:	2310      	movs	r3, #16
 800df8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df8e:	e0b0      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800df90:	2320      	movs	r3, #32
 800df92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df96:	e0ac      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800df98:	2340      	movs	r3, #64	@ 0x40
 800df9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df9e:	e0a8      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800dfa0:	2380      	movs	r3, #128	@ 0x80
 800dfa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfa6:	e0a4      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800dfa8:	697b      	ldr	r3, [r7, #20]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	4a8f      	ldr	r2, [pc, #572]	@ (800e1ec <UART_SetConfig+0x6a0>)
 800dfae:	4293      	cmp	r3, r2
 800dfb0:	d130      	bne.n	800e014 <UART_SetConfig+0x4c8>
 800dfb2:	4b8d      	ldr	r3, [pc, #564]	@ (800e1e8 <UART_SetConfig+0x69c>)
 800dfb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dfb6:	f003 0307 	and.w	r3, r3, #7
 800dfba:	2b05      	cmp	r3, #5
 800dfbc:	d826      	bhi.n	800e00c <UART_SetConfig+0x4c0>
 800dfbe:	a201      	add	r2, pc, #4	@ (adr r2, 800dfc4 <UART_SetConfig+0x478>)
 800dfc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfc4:	0800dfdd 	.word	0x0800dfdd
 800dfc8:	0800dfe5 	.word	0x0800dfe5
 800dfcc:	0800dfed 	.word	0x0800dfed
 800dfd0:	0800dff5 	.word	0x0800dff5
 800dfd4:	0800dffd 	.word	0x0800dffd
 800dfd8:	0800e005 	.word	0x0800e005
 800dfdc:	2300      	movs	r3, #0
 800dfde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfe2:	e086      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800dfe4:	2304      	movs	r3, #4
 800dfe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfea:	e082      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800dfec:	2308      	movs	r3, #8
 800dfee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dff2:	e07e      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800dff4:	2310      	movs	r3, #16
 800dff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dffa:	e07a      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800dffc:	2320      	movs	r3, #32
 800dffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e002:	e076      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800e004:	2340      	movs	r3, #64	@ 0x40
 800e006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e00a:	e072      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800e00c:	2380      	movs	r3, #128	@ 0x80
 800e00e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e012:	e06e      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800e014:	697b      	ldr	r3, [r7, #20]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	4a75      	ldr	r2, [pc, #468]	@ (800e1f0 <UART_SetConfig+0x6a4>)
 800e01a:	4293      	cmp	r3, r2
 800e01c:	d130      	bne.n	800e080 <UART_SetConfig+0x534>
 800e01e:	4b72      	ldr	r3, [pc, #456]	@ (800e1e8 <UART_SetConfig+0x69c>)
 800e020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e022:	f003 0307 	and.w	r3, r3, #7
 800e026:	2b05      	cmp	r3, #5
 800e028:	d826      	bhi.n	800e078 <UART_SetConfig+0x52c>
 800e02a:	a201      	add	r2, pc, #4	@ (adr r2, 800e030 <UART_SetConfig+0x4e4>)
 800e02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e030:	0800e049 	.word	0x0800e049
 800e034:	0800e051 	.word	0x0800e051
 800e038:	0800e059 	.word	0x0800e059
 800e03c:	0800e061 	.word	0x0800e061
 800e040:	0800e069 	.word	0x0800e069
 800e044:	0800e071 	.word	0x0800e071
 800e048:	2300      	movs	r3, #0
 800e04a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e04e:	e050      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800e050:	2304      	movs	r3, #4
 800e052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e056:	e04c      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800e058:	2308      	movs	r3, #8
 800e05a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e05e:	e048      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800e060:	2310      	movs	r3, #16
 800e062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e066:	e044      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800e068:	2320      	movs	r3, #32
 800e06a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e06e:	e040      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800e070:	2340      	movs	r3, #64	@ 0x40
 800e072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e076:	e03c      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800e078:	2380      	movs	r3, #128	@ 0x80
 800e07a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e07e:	e038      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800e080:	697b      	ldr	r3, [r7, #20]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	4a5b      	ldr	r2, [pc, #364]	@ (800e1f4 <UART_SetConfig+0x6a8>)
 800e086:	4293      	cmp	r3, r2
 800e088:	d130      	bne.n	800e0ec <UART_SetConfig+0x5a0>
 800e08a:	4b57      	ldr	r3, [pc, #348]	@ (800e1e8 <UART_SetConfig+0x69c>)
 800e08c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e08e:	f003 0307 	and.w	r3, r3, #7
 800e092:	2b05      	cmp	r3, #5
 800e094:	d826      	bhi.n	800e0e4 <UART_SetConfig+0x598>
 800e096:	a201      	add	r2, pc, #4	@ (adr r2, 800e09c <UART_SetConfig+0x550>)
 800e098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e09c:	0800e0b5 	.word	0x0800e0b5
 800e0a0:	0800e0bd 	.word	0x0800e0bd
 800e0a4:	0800e0c5 	.word	0x0800e0c5
 800e0a8:	0800e0cd 	.word	0x0800e0cd
 800e0ac:	0800e0d5 	.word	0x0800e0d5
 800e0b0:	0800e0dd 	.word	0x0800e0dd
 800e0b4:	2302      	movs	r3, #2
 800e0b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0ba:	e01a      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800e0bc:	2304      	movs	r3, #4
 800e0be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0c2:	e016      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800e0c4:	2308      	movs	r3, #8
 800e0c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0ca:	e012      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800e0cc:	2310      	movs	r3, #16
 800e0ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0d2:	e00e      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800e0d4:	2320      	movs	r3, #32
 800e0d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0da:	e00a      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800e0dc:	2340      	movs	r3, #64	@ 0x40
 800e0de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0e2:	e006      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800e0e4:	2380      	movs	r3, #128	@ 0x80
 800e0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0ea:	e002      	b.n	800e0f2 <UART_SetConfig+0x5a6>
 800e0ec:	2380      	movs	r3, #128	@ 0x80
 800e0ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e0f2:	697b      	ldr	r3, [r7, #20]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	4a3f      	ldr	r2, [pc, #252]	@ (800e1f4 <UART_SetConfig+0x6a8>)
 800e0f8:	4293      	cmp	r3, r2
 800e0fa:	f040 80f8 	bne.w	800e2ee <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e0fe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e102:	2b20      	cmp	r3, #32
 800e104:	dc46      	bgt.n	800e194 <UART_SetConfig+0x648>
 800e106:	2b02      	cmp	r3, #2
 800e108:	f2c0 8082 	blt.w	800e210 <UART_SetConfig+0x6c4>
 800e10c:	3b02      	subs	r3, #2
 800e10e:	2b1e      	cmp	r3, #30
 800e110:	d87e      	bhi.n	800e210 <UART_SetConfig+0x6c4>
 800e112:	a201      	add	r2, pc, #4	@ (adr r2, 800e118 <UART_SetConfig+0x5cc>)
 800e114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e118:	0800e19b 	.word	0x0800e19b
 800e11c:	0800e211 	.word	0x0800e211
 800e120:	0800e1a3 	.word	0x0800e1a3
 800e124:	0800e211 	.word	0x0800e211
 800e128:	0800e211 	.word	0x0800e211
 800e12c:	0800e211 	.word	0x0800e211
 800e130:	0800e1b3 	.word	0x0800e1b3
 800e134:	0800e211 	.word	0x0800e211
 800e138:	0800e211 	.word	0x0800e211
 800e13c:	0800e211 	.word	0x0800e211
 800e140:	0800e211 	.word	0x0800e211
 800e144:	0800e211 	.word	0x0800e211
 800e148:	0800e211 	.word	0x0800e211
 800e14c:	0800e211 	.word	0x0800e211
 800e150:	0800e1c3 	.word	0x0800e1c3
 800e154:	0800e211 	.word	0x0800e211
 800e158:	0800e211 	.word	0x0800e211
 800e15c:	0800e211 	.word	0x0800e211
 800e160:	0800e211 	.word	0x0800e211
 800e164:	0800e211 	.word	0x0800e211
 800e168:	0800e211 	.word	0x0800e211
 800e16c:	0800e211 	.word	0x0800e211
 800e170:	0800e211 	.word	0x0800e211
 800e174:	0800e211 	.word	0x0800e211
 800e178:	0800e211 	.word	0x0800e211
 800e17c:	0800e211 	.word	0x0800e211
 800e180:	0800e211 	.word	0x0800e211
 800e184:	0800e211 	.word	0x0800e211
 800e188:	0800e211 	.word	0x0800e211
 800e18c:	0800e211 	.word	0x0800e211
 800e190:	0800e203 	.word	0x0800e203
 800e194:	2b40      	cmp	r3, #64	@ 0x40
 800e196:	d037      	beq.n	800e208 <UART_SetConfig+0x6bc>
 800e198:	e03a      	b.n	800e210 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e19a:	f7fd f83d 	bl	800b218 <HAL_RCCEx_GetD3PCLK1Freq>
 800e19e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e1a0:	e03c      	b.n	800e21c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e1a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	f7fd f84c 	bl	800b244 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e1ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e1b0:	e034      	b.n	800e21c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e1b2:	f107 0318 	add.w	r3, r7, #24
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f7fd f998 	bl	800b4ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e1bc:	69fb      	ldr	r3, [r7, #28]
 800e1be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e1c0:	e02c      	b.n	800e21c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e1c2:	4b09      	ldr	r3, [pc, #36]	@ (800e1e8 <UART_SetConfig+0x69c>)
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	f003 0320 	and.w	r3, r3, #32
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d016      	beq.n	800e1fc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e1ce:	4b06      	ldr	r3, [pc, #24]	@ (800e1e8 <UART_SetConfig+0x69c>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	08db      	lsrs	r3, r3, #3
 800e1d4:	f003 0303 	and.w	r3, r3, #3
 800e1d8:	4a07      	ldr	r2, [pc, #28]	@ (800e1f8 <UART_SetConfig+0x6ac>)
 800e1da:	fa22 f303 	lsr.w	r3, r2, r3
 800e1de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e1e0:	e01c      	b.n	800e21c <UART_SetConfig+0x6d0>
 800e1e2:	bf00      	nop
 800e1e4:	40011400 	.word	0x40011400
 800e1e8:	58024400 	.word	0x58024400
 800e1ec:	40007800 	.word	0x40007800
 800e1f0:	40007c00 	.word	0x40007c00
 800e1f4:	58000c00 	.word	0x58000c00
 800e1f8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e1fc:	4b9d      	ldr	r3, [pc, #628]	@ (800e474 <UART_SetConfig+0x928>)
 800e1fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e200:	e00c      	b.n	800e21c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e202:	4b9d      	ldr	r3, [pc, #628]	@ (800e478 <UART_SetConfig+0x92c>)
 800e204:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e206:	e009      	b.n	800e21c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e208:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e20c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e20e:	e005      	b.n	800e21c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e210:	2300      	movs	r3, #0
 800e212:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e214:	2301      	movs	r3, #1
 800e216:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e21a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e21c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e21e:	2b00      	cmp	r3, #0
 800e220:	f000 81de 	beq.w	800e5e0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e224:	697b      	ldr	r3, [r7, #20]
 800e226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e228:	4a94      	ldr	r2, [pc, #592]	@ (800e47c <UART_SetConfig+0x930>)
 800e22a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e22e:	461a      	mov	r2, r3
 800e230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e232:	fbb3 f3f2 	udiv	r3, r3, r2
 800e236:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e238:	697b      	ldr	r3, [r7, #20]
 800e23a:	685a      	ldr	r2, [r3, #4]
 800e23c:	4613      	mov	r3, r2
 800e23e:	005b      	lsls	r3, r3, #1
 800e240:	4413      	add	r3, r2
 800e242:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e244:	429a      	cmp	r2, r3
 800e246:	d305      	bcc.n	800e254 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	685b      	ldr	r3, [r3, #4]
 800e24c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e24e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e250:	429a      	cmp	r2, r3
 800e252:	d903      	bls.n	800e25c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e254:	2301      	movs	r3, #1
 800e256:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e25a:	e1c1      	b.n	800e5e0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e25c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e25e:	2200      	movs	r2, #0
 800e260:	60bb      	str	r3, [r7, #8]
 800e262:	60fa      	str	r2, [r7, #12]
 800e264:	697b      	ldr	r3, [r7, #20]
 800e266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e268:	4a84      	ldr	r2, [pc, #528]	@ (800e47c <UART_SetConfig+0x930>)
 800e26a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e26e:	b29b      	uxth	r3, r3
 800e270:	2200      	movs	r2, #0
 800e272:	603b      	str	r3, [r7, #0]
 800e274:	607a      	str	r2, [r7, #4]
 800e276:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e27a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e27e:	f7f2 f897 	bl	80003b0 <__aeabi_uldivmod>
 800e282:	4602      	mov	r2, r0
 800e284:	460b      	mov	r3, r1
 800e286:	4610      	mov	r0, r2
 800e288:	4619      	mov	r1, r3
 800e28a:	f04f 0200 	mov.w	r2, #0
 800e28e:	f04f 0300 	mov.w	r3, #0
 800e292:	020b      	lsls	r3, r1, #8
 800e294:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e298:	0202      	lsls	r2, r0, #8
 800e29a:	6979      	ldr	r1, [r7, #20]
 800e29c:	6849      	ldr	r1, [r1, #4]
 800e29e:	0849      	lsrs	r1, r1, #1
 800e2a0:	2000      	movs	r0, #0
 800e2a2:	460c      	mov	r4, r1
 800e2a4:	4605      	mov	r5, r0
 800e2a6:	eb12 0804 	adds.w	r8, r2, r4
 800e2aa:	eb43 0905 	adc.w	r9, r3, r5
 800e2ae:	697b      	ldr	r3, [r7, #20]
 800e2b0:	685b      	ldr	r3, [r3, #4]
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	469a      	mov	sl, r3
 800e2b6:	4693      	mov	fp, r2
 800e2b8:	4652      	mov	r2, sl
 800e2ba:	465b      	mov	r3, fp
 800e2bc:	4640      	mov	r0, r8
 800e2be:	4649      	mov	r1, r9
 800e2c0:	f7f2 f876 	bl	80003b0 <__aeabi_uldivmod>
 800e2c4:	4602      	mov	r2, r0
 800e2c6:	460b      	mov	r3, r1
 800e2c8:	4613      	mov	r3, r2
 800e2ca:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e2cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e2d2:	d308      	bcc.n	800e2e6 <UART_SetConfig+0x79a>
 800e2d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e2da:	d204      	bcs.n	800e2e6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e2dc:	697b      	ldr	r3, [r7, #20]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e2e2:	60da      	str	r2, [r3, #12]
 800e2e4:	e17c      	b.n	800e5e0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e2ec:	e178      	b.n	800e5e0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e2ee:	697b      	ldr	r3, [r7, #20]
 800e2f0:	69db      	ldr	r3, [r3, #28]
 800e2f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e2f6:	f040 80c5 	bne.w	800e484 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e2fa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e2fe:	2b20      	cmp	r3, #32
 800e300:	dc48      	bgt.n	800e394 <UART_SetConfig+0x848>
 800e302:	2b00      	cmp	r3, #0
 800e304:	db7b      	blt.n	800e3fe <UART_SetConfig+0x8b2>
 800e306:	2b20      	cmp	r3, #32
 800e308:	d879      	bhi.n	800e3fe <UART_SetConfig+0x8b2>
 800e30a:	a201      	add	r2, pc, #4	@ (adr r2, 800e310 <UART_SetConfig+0x7c4>)
 800e30c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e310:	0800e39b 	.word	0x0800e39b
 800e314:	0800e3a3 	.word	0x0800e3a3
 800e318:	0800e3ff 	.word	0x0800e3ff
 800e31c:	0800e3ff 	.word	0x0800e3ff
 800e320:	0800e3ab 	.word	0x0800e3ab
 800e324:	0800e3ff 	.word	0x0800e3ff
 800e328:	0800e3ff 	.word	0x0800e3ff
 800e32c:	0800e3ff 	.word	0x0800e3ff
 800e330:	0800e3bb 	.word	0x0800e3bb
 800e334:	0800e3ff 	.word	0x0800e3ff
 800e338:	0800e3ff 	.word	0x0800e3ff
 800e33c:	0800e3ff 	.word	0x0800e3ff
 800e340:	0800e3ff 	.word	0x0800e3ff
 800e344:	0800e3ff 	.word	0x0800e3ff
 800e348:	0800e3ff 	.word	0x0800e3ff
 800e34c:	0800e3ff 	.word	0x0800e3ff
 800e350:	0800e3cb 	.word	0x0800e3cb
 800e354:	0800e3ff 	.word	0x0800e3ff
 800e358:	0800e3ff 	.word	0x0800e3ff
 800e35c:	0800e3ff 	.word	0x0800e3ff
 800e360:	0800e3ff 	.word	0x0800e3ff
 800e364:	0800e3ff 	.word	0x0800e3ff
 800e368:	0800e3ff 	.word	0x0800e3ff
 800e36c:	0800e3ff 	.word	0x0800e3ff
 800e370:	0800e3ff 	.word	0x0800e3ff
 800e374:	0800e3ff 	.word	0x0800e3ff
 800e378:	0800e3ff 	.word	0x0800e3ff
 800e37c:	0800e3ff 	.word	0x0800e3ff
 800e380:	0800e3ff 	.word	0x0800e3ff
 800e384:	0800e3ff 	.word	0x0800e3ff
 800e388:	0800e3ff 	.word	0x0800e3ff
 800e38c:	0800e3ff 	.word	0x0800e3ff
 800e390:	0800e3f1 	.word	0x0800e3f1
 800e394:	2b40      	cmp	r3, #64	@ 0x40
 800e396:	d02e      	beq.n	800e3f6 <UART_SetConfig+0x8aa>
 800e398:	e031      	b.n	800e3fe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e39a:	f7fa ff87 	bl	80092ac <HAL_RCC_GetPCLK1Freq>
 800e39e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e3a0:	e033      	b.n	800e40a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e3a2:	f7fa ff99 	bl	80092d8 <HAL_RCC_GetPCLK2Freq>
 800e3a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e3a8:	e02f      	b.n	800e40a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e3aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f7fc ff48 	bl	800b244 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e3b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e3b8:	e027      	b.n	800e40a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e3ba:	f107 0318 	add.w	r3, r7, #24
 800e3be:	4618      	mov	r0, r3
 800e3c0:	f7fd f894 	bl	800b4ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e3c4:	69fb      	ldr	r3, [r7, #28]
 800e3c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e3c8:	e01f      	b.n	800e40a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e3ca:	4b2d      	ldr	r3, [pc, #180]	@ (800e480 <UART_SetConfig+0x934>)
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	f003 0320 	and.w	r3, r3, #32
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d009      	beq.n	800e3ea <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e3d6:	4b2a      	ldr	r3, [pc, #168]	@ (800e480 <UART_SetConfig+0x934>)
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	08db      	lsrs	r3, r3, #3
 800e3dc:	f003 0303 	and.w	r3, r3, #3
 800e3e0:	4a24      	ldr	r2, [pc, #144]	@ (800e474 <UART_SetConfig+0x928>)
 800e3e2:	fa22 f303 	lsr.w	r3, r2, r3
 800e3e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e3e8:	e00f      	b.n	800e40a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e3ea:	4b22      	ldr	r3, [pc, #136]	@ (800e474 <UART_SetConfig+0x928>)
 800e3ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e3ee:	e00c      	b.n	800e40a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e3f0:	4b21      	ldr	r3, [pc, #132]	@ (800e478 <UART_SetConfig+0x92c>)
 800e3f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e3f4:	e009      	b.n	800e40a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e3f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e3fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e3fc:	e005      	b.n	800e40a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e3fe:	2300      	movs	r3, #0
 800e400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e402:	2301      	movs	r3, #1
 800e404:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e408:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e40a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	f000 80e7 	beq.w	800e5e0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e412:	697b      	ldr	r3, [r7, #20]
 800e414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e416:	4a19      	ldr	r2, [pc, #100]	@ (800e47c <UART_SetConfig+0x930>)
 800e418:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e41c:	461a      	mov	r2, r3
 800e41e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e420:	fbb3 f3f2 	udiv	r3, r3, r2
 800e424:	005a      	lsls	r2, r3, #1
 800e426:	697b      	ldr	r3, [r7, #20]
 800e428:	685b      	ldr	r3, [r3, #4]
 800e42a:	085b      	lsrs	r3, r3, #1
 800e42c:	441a      	add	r2, r3
 800e42e:	697b      	ldr	r3, [r7, #20]
 800e430:	685b      	ldr	r3, [r3, #4]
 800e432:	fbb2 f3f3 	udiv	r3, r2, r3
 800e436:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e43a:	2b0f      	cmp	r3, #15
 800e43c:	d916      	bls.n	800e46c <UART_SetConfig+0x920>
 800e43e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e444:	d212      	bcs.n	800e46c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e448:	b29b      	uxth	r3, r3
 800e44a:	f023 030f 	bic.w	r3, r3, #15
 800e44e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e452:	085b      	lsrs	r3, r3, #1
 800e454:	b29b      	uxth	r3, r3
 800e456:	f003 0307 	and.w	r3, r3, #7
 800e45a:	b29a      	uxth	r2, r3
 800e45c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e45e:	4313      	orrs	r3, r2
 800e460:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800e462:	697b      	ldr	r3, [r7, #20]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800e468:	60da      	str	r2, [r3, #12]
 800e46a:	e0b9      	b.n	800e5e0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e46c:	2301      	movs	r3, #1
 800e46e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e472:	e0b5      	b.n	800e5e0 <UART_SetConfig+0xa94>
 800e474:	03d09000 	.word	0x03d09000
 800e478:	003d0900 	.word	0x003d0900
 800e47c:	080127a4 	.word	0x080127a4
 800e480:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e484:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e488:	2b20      	cmp	r3, #32
 800e48a:	dc49      	bgt.n	800e520 <UART_SetConfig+0x9d4>
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	db7c      	blt.n	800e58a <UART_SetConfig+0xa3e>
 800e490:	2b20      	cmp	r3, #32
 800e492:	d87a      	bhi.n	800e58a <UART_SetConfig+0xa3e>
 800e494:	a201      	add	r2, pc, #4	@ (adr r2, 800e49c <UART_SetConfig+0x950>)
 800e496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e49a:	bf00      	nop
 800e49c:	0800e527 	.word	0x0800e527
 800e4a0:	0800e52f 	.word	0x0800e52f
 800e4a4:	0800e58b 	.word	0x0800e58b
 800e4a8:	0800e58b 	.word	0x0800e58b
 800e4ac:	0800e537 	.word	0x0800e537
 800e4b0:	0800e58b 	.word	0x0800e58b
 800e4b4:	0800e58b 	.word	0x0800e58b
 800e4b8:	0800e58b 	.word	0x0800e58b
 800e4bc:	0800e547 	.word	0x0800e547
 800e4c0:	0800e58b 	.word	0x0800e58b
 800e4c4:	0800e58b 	.word	0x0800e58b
 800e4c8:	0800e58b 	.word	0x0800e58b
 800e4cc:	0800e58b 	.word	0x0800e58b
 800e4d0:	0800e58b 	.word	0x0800e58b
 800e4d4:	0800e58b 	.word	0x0800e58b
 800e4d8:	0800e58b 	.word	0x0800e58b
 800e4dc:	0800e557 	.word	0x0800e557
 800e4e0:	0800e58b 	.word	0x0800e58b
 800e4e4:	0800e58b 	.word	0x0800e58b
 800e4e8:	0800e58b 	.word	0x0800e58b
 800e4ec:	0800e58b 	.word	0x0800e58b
 800e4f0:	0800e58b 	.word	0x0800e58b
 800e4f4:	0800e58b 	.word	0x0800e58b
 800e4f8:	0800e58b 	.word	0x0800e58b
 800e4fc:	0800e58b 	.word	0x0800e58b
 800e500:	0800e58b 	.word	0x0800e58b
 800e504:	0800e58b 	.word	0x0800e58b
 800e508:	0800e58b 	.word	0x0800e58b
 800e50c:	0800e58b 	.word	0x0800e58b
 800e510:	0800e58b 	.word	0x0800e58b
 800e514:	0800e58b 	.word	0x0800e58b
 800e518:	0800e58b 	.word	0x0800e58b
 800e51c:	0800e57d 	.word	0x0800e57d
 800e520:	2b40      	cmp	r3, #64	@ 0x40
 800e522:	d02e      	beq.n	800e582 <UART_SetConfig+0xa36>
 800e524:	e031      	b.n	800e58a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e526:	f7fa fec1 	bl	80092ac <HAL_RCC_GetPCLK1Freq>
 800e52a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e52c:	e033      	b.n	800e596 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e52e:	f7fa fed3 	bl	80092d8 <HAL_RCC_GetPCLK2Freq>
 800e532:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e534:	e02f      	b.n	800e596 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e536:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e53a:	4618      	mov	r0, r3
 800e53c:	f7fc fe82 	bl	800b244 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e544:	e027      	b.n	800e596 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e546:	f107 0318 	add.w	r3, r7, #24
 800e54a:	4618      	mov	r0, r3
 800e54c:	f7fc ffce 	bl	800b4ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e550:	69fb      	ldr	r3, [r7, #28]
 800e552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e554:	e01f      	b.n	800e596 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e556:	4b2d      	ldr	r3, [pc, #180]	@ (800e60c <UART_SetConfig+0xac0>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	f003 0320 	and.w	r3, r3, #32
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d009      	beq.n	800e576 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e562:	4b2a      	ldr	r3, [pc, #168]	@ (800e60c <UART_SetConfig+0xac0>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	08db      	lsrs	r3, r3, #3
 800e568:	f003 0303 	and.w	r3, r3, #3
 800e56c:	4a28      	ldr	r2, [pc, #160]	@ (800e610 <UART_SetConfig+0xac4>)
 800e56e:	fa22 f303 	lsr.w	r3, r2, r3
 800e572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e574:	e00f      	b.n	800e596 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e576:	4b26      	ldr	r3, [pc, #152]	@ (800e610 <UART_SetConfig+0xac4>)
 800e578:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e57a:	e00c      	b.n	800e596 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e57c:	4b25      	ldr	r3, [pc, #148]	@ (800e614 <UART_SetConfig+0xac8>)
 800e57e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e580:	e009      	b.n	800e596 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e582:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e588:	e005      	b.n	800e596 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e58a:	2300      	movs	r3, #0
 800e58c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e58e:	2301      	movs	r3, #1
 800e590:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e594:	bf00      	nop
    }

    if (pclk != 0U)
 800e596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d021      	beq.n	800e5e0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e59c:	697b      	ldr	r3, [r7, #20]
 800e59e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5a0:	4a1d      	ldr	r2, [pc, #116]	@ (800e618 <UART_SetConfig+0xacc>)
 800e5a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e5a6:	461a      	mov	r2, r3
 800e5a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5aa:	fbb3 f2f2 	udiv	r2, r3, r2
 800e5ae:	697b      	ldr	r3, [r7, #20]
 800e5b0:	685b      	ldr	r3, [r3, #4]
 800e5b2:	085b      	lsrs	r3, r3, #1
 800e5b4:	441a      	add	r2, r3
 800e5b6:	697b      	ldr	r3, [r7, #20]
 800e5b8:	685b      	ldr	r3, [r3, #4]
 800e5ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5be:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e5c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5c2:	2b0f      	cmp	r3, #15
 800e5c4:	d909      	bls.n	800e5da <UART_SetConfig+0xa8e>
 800e5c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e5cc:	d205      	bcs.n	800e5da <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e5ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5d0:	b29a      	uxth	r2, r3
 800e5d2:	697b      	ldr	r3, [r7, #20]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	60da      	str	r2, [r3, #12]
 800e5d8:	e002      	b.n	800e5e0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e5da:	2301      	movs	r3, #1
 800e5dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e5e0:	697b      	ldr	r3, [r7, #20]
 800e5e2:	2201      	movs	r2, #1
 800e5e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e5e8:	697b      	ldr	r3, [r7, #20]
 800e5ea:	2201      	movs	r2, #1
 800e5ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e5f6:	697b      	ldr	r3, [r7, #20]
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e5fc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800e600:	4618      	mov	r0, r3
 800e602:	3748      	adds	r7, #72	@ 0x48
 800e604:	46bd      	mov	sp, r7
 800e606:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e60a:	bf00      	nop
 800e60c:	58024400 	.word	0x58024400
 800e610:	03d09000 	.word	0x03d09000
 800e614:	003d0900 	.word	0x003d0900
 800e618:	080127a4 	.word	0x080127a4

0800e61c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e61c:	b480      	push	{r7}
 800e61e:	b083      	sub	sp, #12
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e628:	f003 0308 	and.w	r3, r3, #8
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d00a      	beq.n	800e646 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	685b      	ldr	r3, [r3, #4]
 800e636:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	430a      	orrs	r2, r1
 800e644:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e64a:	f003 0301 	and.w	r3, r3, #1
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d00a      	beq.n	800e668 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	685b      	ldr	r3, [r3, #4]
 800e658:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	430a      	orrs	r2, r1
 800e666:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e66c:	f003 0302 	and.w	r3, r3, #2
 800e670:	2b00      	cmp	r3, #0
 800e672:	d00a      	beq.n	800e68a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	685b      	ldr	r3, [r3, #4]
 800e67a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	430a      	orrs	r2, r1
 800e688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e68e:	f003 0304 	and.w	r3, r3, #4
 800e692:	2b00      	cmp	r3, #0
 800e694:	d00a      	beq.n	800e6ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	685b      	ldr	r3, [r3, #4]
 800e69c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	430a      	orrs	r2, r1
 800e6aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6b0:	f003 0310 	and.w	r3, r3, #16
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d00a      	beq.n	800e6ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	689b      	ldr	r3, [r3, #8]
 800e6be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	430a      	orrs	r2, r1
 800e6cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6d2:	f003 0320 	and.w	r3, r3, #32
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d00a      	beq.n	800e6f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	689b      	ldr	r3, [r3, #8]
 800e6e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	430a      	orrs	r2, r1
 800e6ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d01a      	beq.n	800e732 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	685b      	ldr	r3, [r3, #4]
 800e702:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	430a      	orrs	r2, r1
 800e710:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e716:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e71a:	d10a      	bne.n	800e732 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	685b      	ldr	r3, [r3, #4]
 800e722:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	430a      	orrs	r2, r1
 800e730:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d00a      	beq.n	800e754 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	685b      	ldr	r3, [r3, #4]
 800e744:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	430a      	orrs	r2, r1
 800e752:	605a      	str	r2, [r3, #4]
  }
}
 800e754:	bf00      	nop
 800e756:	370c      	adds	r7, #12
 800e758:	46bd      	mov	sp, r7
 800e75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75e:	4770      	bx	lr

0800e760 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b098      	sub	sp, #96	@ 0x60
 800e764:	af02      	add	r7, sp, #8
 800e766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2200      	movs	r2, #0
 800e76c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e770:	f7f4 fe02 	bl	8003378 <HAL_GetTick>
 800e774:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	f003 0308 	and.w	r3, r3, #8
 800e780:	2b08      	cmp	r3, #8
 800e782:	d12f      	bne.n	800e7e4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e784:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e788:	9300      	str	r3, [sp, #0]
 800e78a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e78c:	2200      	movs	r2, #0
 800e78e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f000 f88e 	bl	800e8b4 <UART_WaitOnFlagUntilTimeout>
 800e798:	4603      	mov	r3, r0
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d022      	beq.n	800e7e4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7a6:	e853 3f00 	ldrex	r3, [r3]
 800e7aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e7ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e7ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e7b2:	653b      	str	r3, [r7, #80]	@ 0x50
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	461a      	mov	r2, r3
 800e7ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e7bc:	647b      	str	r3, [r7, #68]	@ 0x44
 800e7be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e7c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e7c4:	e841 2300 	strex	r3, r2, [r1]
 800e7c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e7ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d1e6      	bne.n	800e79e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2220      	movs	r2, #32
 800e7d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2200      	movs	r2, #0
 800e7dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e7e0:	2303      	movs	r3, #3
 800e7e2:	e063      	b.n	800e8ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	f003 0304 	and.w	r3, r3, #4
 800e7ee:	2b04      	cmp	r3, #4
 800e7f0:	d149      	bne.n	800e886 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e7f2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e7f6:	9300      	str	r3, [sp, #0]
 800e7f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f000 f857 	bl	800e8b4 <UART_WaitOnFlagUntilTimeout>
 800e806:	4603      	mov	r3, r0
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d03c      	beq.n	800e886 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e814:	e853 3f00 	ldrex	r3, [r3]
 800e818:	623b      	str	r3, [r7, #32]
   return(result);
 800e81a:	6a3b      	ldr	r3, [r7, #32]
 800e81c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e820:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	461a      	mov	r2, r3
 800e828:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e82a:	633b      	str	r3, [r7, #48]	@ 0x30
 800e82c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e82e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e830:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e832:	e841 2300 	strex	r3, r2, [r1]
 800e836:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d1e6      	bne.n	800e80c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	3308      	adds	r3, #8
 800e844:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e846:	693b      	ldr	r3, [r7, #16]
 800e848:	e853 3f00 	ldrex	r3, [r3]
 800e84c:	60fb      	str	r3, [r7, #12]
   return(result);
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	f023 0301 	bic.w	r3, r3, #1
 800e854:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	3308      	adds	r3, #8
 800e85c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e85e:	61fa      	str	r2, [r7, #28]
 800e860:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e862:	69b9      	ldr	r1, [r7, #24]
 800e864:	69fa      	ldr	r2, [r7, #28]
 800e866:	e841 2300 	strex	r3, r2, [r1]
 800e86a:	617b      	str	r3, [r7, #20]
   return(result);
 800e86c:	697b      	ldr	r3, [r7, #20]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d1e5      	bne.n	800e83e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	2220      	movs	r2, #32
 800e876:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	2200      	movs	r2, #0
 800e87e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e882:	2303      	movs	r3, #3
 800e884:	e012      	b.n	800e8ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	2220      	movs	r2, #32
 800e88a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	2220      	movs	r2, #32
 800e892:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	2200      	movs	r2, #0
 800e89a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2200      	movs	r2, #0
 800e8a0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e8aa:	2300      	movs	r3, #0
}
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	3758      	adds	r7, #88	@ 0x58
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	bd80      	pop	{r7, pc}

0800e8b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b084      	sub	sp, #16
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	60f8      	str	r0, [r7, #12]
 800e8bc:	60b9      	str	r1, [r7, #8]
 800e8be:	603b      	str	r3, [r7, #0]
 800e8c0:	4613      	mov	r3, r2
 800e8c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e8c4:	e04f      	b.n	800e966 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e8c6:	69bb      	ldr	r3, [r7, #24]
 800e8c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8cc:	d04b      	beq.n	800e966 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e8ce:	f7f4 fd53 	bl	8003378 <HAL_GetTick>
 800e8d2:	4602      	mov	r2, r0
 800e8d4:	683b      	ldr	r3, [r7, #0]
 800e8d6:	1ad3      	subs	r3, r2, r3
 800e8d8:	69ba      	ldr	r2, [r7, #24]
 800e8da:	429a      	cmp	r2, r3
 800e8dc:	d302      	bcc.n	800e8e4 <UART_WaitOnFlagUntilTimeout+0x30>
 800e8de:	69bb      	ldr	r3, [r7, #24]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d101      	bne.n	800e8e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e8e4:	2303      	movs	r3, #3
 800e8e6:	e04e      	b.n	800e986 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	f003 0304 	and.w	r3, r3, #4
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d037      	beq.n	800e966 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	2b80      	cmp	r3, #128	@ 0x80
 800e8fa:	d034      	beq.n	800e966 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	2b40      	cmp	r3, #64	@ 0x40
 800e900:	d031      	beq.n	800e966 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	69db      	ldr	r3, [r3, #28]
 800e908:	f003 0308 	and.w	r3, r3, #8
 800e90c:	2b08      	cmp	r3, #8
 800e90e:	d110      	bne.n	800e932 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	2208      	movs	r2, #8
 800e916:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e918:	68f8      	ldr	r0, [r7, #12]
 800e91a:	f000 f95b 	bl	800ebd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	2208      	movs	r2, #8
 800e922:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	2200      	movs	r2, #0
 800e92a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e92e:	2301      	movs	r3, #1
 800e930:	e029      	b.n	800e986 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	69db      	ldr	r3, [r3, #28]
 800e938:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e93c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e940:	d111      	bne.n	800e966 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e94a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e94c:	68f8      	ldr	r0, [r7, #12]
 800e94e:	f000 f941 	bl	800ebd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	2220      	movs	r2, #32
 800e956:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	2200      	movs	r2, #0
 800e95e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e962:	2303      	movs	r3, #3
 800e964:	e00f      	b.n	800e986 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	69da      	ldr	r2, [r3, #28]
 800e96c:	68bb      	ldr	r3, [r7, #8]
 800e96e:	4013      	ands	r3, r2
 800e970:	68ba      	ldr	r2, [r7, #8]
 800e972:	429a      	cmp	r2, r3
 800e974:	bf0c      	ite	eq
 800e976:	2301      	moveq	r3, #1
 800e978:	2300      	movne	r3, #0
 800e97a:	b2db      	uxtb	r3, r3
 800e97c:	461a      	mov	r2, r3
 800e97e:	79fb      	ldrb	r3, [r7, #7]
 800e980:	429a      	cmp	r2, r3
 800e982:	d0a0      	beq.n	800e8c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e984:	2300      	movs	r3, #0
}
 800e986:	4618      	mov	r0, r3
 800e988:	3710      	adds	r7, #16
 800e98a:	46bd      	mov	sp, r7
 800e98c:	bd80      	pop	{r7, pc}
	...

0800e990 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e990:	b480      	push	{r7}
 800e992:	b0a3      	sub	sp, #140	@ 0x8c
 800e994:	af00      	add	r7, sp, #0
 800e996:	60f8      	str	r0, [r7, #12]
 800e998:	60b9      	str	r1, [r7, #8]
 800e99a:	4613      	mov	r3, r2
 800e99c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	68ba      	ldr	r2, [r7, #8]
 800e9a2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	88fa      	ldrh	r2, [r7, #6]
 800e9a8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	88fa      	ldrh	r2, [r7, #6]
 800e9b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	689b      	ldr	r3, [r3, #8]
 800e9be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e9c2:	d10e      	bne.n	800e9e2 <UART_Start_Receive_IT+0x52>
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	691b      	ldr	r3, [r3, #16]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d105      	bne.n	800e9d8 <UART_Start_Receive_IT+0x48>
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800e9d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e9d6:	e02d      	b.n	800ea34 <UART_Start_Receive_IT+0xa4>
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	22ff      	movs	r2, #255	@ 0xff
 800e9dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e9e0:	e028      	b.n	800ea34 <UART_Start_Receive_IT+0xa4>
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	689b      	ldr	r3, [r3, #8]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d10d      	bne.n	800ea06 <UART_Start_Receive_IT+0x76>
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	691b      	ldr	r3, [r3, #16]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d104      	bne.n	800e9fc <UART_Start_Receive_IT+0x6c>
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	22ff      	movs	r2, #255	@ 0xff
 800e9f6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e9fa:	e01b      	b.n	800ea34 <UART_Start_Receive_IT+0xa4>
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	227f      	movs	r2, #127	@ 0x7f
 800ea00:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ea04:	e016      	b.n	800ea34 <UART_Start_Receive_IT+0xa4>
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	689b      	ldr	r3, [r3, #8]
 800ea0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ea0e:	d10d      	bne.n	800ea2c <UART_Start_Receive_IT+0x9c>
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	691b      	ldr	r3, [r3, #16]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d104      	bne.n	800ea22 <UART_Start_Receive_IT+0x92>
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	227f      	movs	r2, #127	@ 0x7f
 800ea1c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ea20:	e008      	b.n	800ea34 <UART_Start_Receive_IT+0xa4>
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	223f      	movs	r2, #63	@ 0x3f
 800ea26:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ea2a:	e003      	b.n	800ea34 <UART_Start_Receive_IT+0xa4>
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	2200      	movs	r2, #0
 800ea30:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	2200      	movs	r2, #0
 800ea38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	2222      	movs	r2, #34	@ 0x22
 800ea40:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	3308      	adds	r3, #8
 800ea4a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ea4e:	e853 3f00 	ldrex	r3, [r3]
 800ea52:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ea54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ea56:	f043 0301 	orr.w	r3, r3, #1
 800ea5a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	3308      	adds	r3, #8
 800ea64:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ea68:	673a      	str	r2, [r7, #112]	@ 0x70
 800ea6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea6c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ea6e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ea70:	e841 2300 	strex	r3, r2, [r1]
 800ea74:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800ea76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d1e3      	bne.n	800ea44 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ea80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ea84:	d14f      	bne.n	800eb26 <UART_Start_Receive_IT+0x196>
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ea8c:	88fa      	ldrh	r2, [r7, #6]
 800ea8e:	429a      	cmp	r2, r3
 800ea90:	d349      	bcc.n	800eb26 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	689b      	ldr	r3, [r3, #8]
 800ea96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ea9a:	d107      	bne.n	800eaac <UART_Start_Receive_IT+0x11c>
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	691b      	ldr	r3, [r3, #16]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d103      	bne.n	800eaac <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	4a47      	ldr	r2, [pc, #284]	@ (800ebc4 <UART_Start_Receive_IT+0x234>)
 800eaa8:	675a      	str	r2, [r3, #116]	@ 0x74
 800eaaa:	e002      	b.n	800eab2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	4a46      	ldr	r2, [pc, #280]	@ (800ebc8 <UART_Start_Receive_IT+0x238>)
 800eab0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	691b      	ldr	r3, [r3, #16]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d01a      	beq.n	800eaf0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eac0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eac2:	e853 3f00 	ldrex	r3, [r3]
 800eac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800eac8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eaca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800eace:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	461a      	mov	r2, r3
 800ead8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800eadc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800eade:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eae0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800eae2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800eae4:	e841 2300 	strex	r3, r2, [r1]
 800eae8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800eaea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d1e4      	bne.n	800eaba <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	3308      	adds	r3, #8
 800eaf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eafa:	e853 3f00 	ldrex	r3, [r3]
 800eafe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800eb00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eb06:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	3308      	adds	r3, #8
 800eb0e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800eb10:	64ba      	str	r2, [r7, #72]	@ 0x48
 800eb12:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb14:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800eb16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800eb18:	e841 2300 	strex	r3, r2, [r1]
 800eb1c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800eb1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d1e5      	bne.n	800eaf0 <UART_Start_Receive_IT+0x160>
 800eb24:	e046      	b.n	800ebb4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	689b      	ldr	r3, [r3, #8]
 800eb2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eb2e:	d107      	bne.n	800eb40 <UART_Start_Receive_IT+0x1b0>
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	691b      	ldr	r3, [r3, #16]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d103      	bne.n	800eb40 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	4a24      	ldr	r2, [pc, #144]	@ (800ebcc <UART_Start_Receive_IT+0x23c>)
 800eb3c:	675a      	str	r2, [r3, #116]	@ 0x74
 800eb3e:	e002      	b.n	800eb46 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	4a23      	ldr	r2, [pc, #140]	@ (800ebd0 <UART_Start_Receive_IT+0x240>)
 800eb44:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	691b      	ldr	r3, [r3, #16]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d019      	beq.n	800eb82 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb56:	e853 3f00 	ldrex	r3, [r3]
 800eb5a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800eb5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb5e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800eb62:	677b      	str	r3, [r7, #116]	@ 0x74
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	461a      	mov	r2, r3
 800eb6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800eb6c:	637b      	str	r3, [r7, #52]	@ 0x34
 800eb6e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb70:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800eb72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eb74:	e841 2300 	strex	r3, r2, [r1]
 800eb78:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800eb7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d1e6      	bne.n	800eb4e <UART_Start_Receive_IT+0x1be>
 800eb80:	e018      	b.n	800ebb4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb88:	697b      	ldr	r3, [r7, #20]
 800eb8a:	e853 3f00 	ldrex	r3, [r3]
 800eb8e:	613b      	str	r3, [r7, #16]
   return(result);
 800eb90:	693b      	ldr	r3, [r7, #16]
 800eb92:	f043 0320 	orr.w	r3, r3, #32
 800eb96:	67bb      	str	r3, [r7, #120]	@ 0x78
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	461a      	mov	r2, r3
 800eb9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800eba0:	623b      	str	r3, [r7, #32]
 800eba2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eba4:	69f9      	ldr	r1, [r7, #28]
 800eba6:	6a3a      	ldr	r2, [r7, #32]
 800eba8:	e841 2300 	strex	r3, r2, [r1]
 800ebac:	61bb      	str	r3, [r7, #24]
   return(result);
 800ebae:	69bb      	ldr	r3, [r7, #24]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d1e6      	bne.n	800eb82 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800ebb4:	2300      	movs	r3, #0
}
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	378c      	adds	r7, #140	@ 0x8c
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc0:	4770      	bx	lr
 800ebc2:	bf00      	nop
 800ebc4:	0800f3f1 	.word	0x0800f3f1
 800ebc8:	0800f08d 	.word	0x0800f08d
 800ebcc:	0800eed5 	.word	0x0800eed5
 800ebd0:	0800ed1d 	.word	0x0800ed1d

0800ebd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ebd4:	b480      	push	{r7}
 800ebd6:	b095      	sub	sp, #84	@ 0x54
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ebe4:	e853 3f00 	ldrex	r3, [r3]
 800ebe8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ebea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ebf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	461a      	mov	r2, r3
 800ebf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ebfa:	643b      	str	r3, [r7, #64]	@ 0x40
 800ebfc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebfe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ec00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ec02:	e841 2300 	strex	r3, r2, [r1]
 800ec06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ec08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d1e6      	bne.n	800ebdc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	3308      	adds	r3, #8
 800ec14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec16:	6a3b      	ldr	r3, [r7, #32]
 800ec18:	e853 3f00 	ldrex	r3, [r3]
 800ec1c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ec1e:	69fa      	ldr	r2, [r7, #28]
 800ec20:	4b1e      	ldr	r3, [pc, #120]	@ (800ec9c <UART_EndRxTransfer+0xc8>)
 800ec22:	4013      	ands	r3, r2
 800ec24:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	3308      	adds	r3, #8
 800ec2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ec2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ec30:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ec34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ec36:	e841 2300 	strex	r3, r2, [r1]
 800ec3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ec3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d1e5      	bne.n	800ec0e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ec46:	2b01      	cmp	r3, #1
 800ec48:	d118      	bne.n	800ec7c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	e853 3f00 	ldrex	r3, [r3]
 800ec56:	60bb      	str	r3, [r7, #8]
   return(result);
 800ec58:	68bb      	ldr	r3, [r7, #8]
 800ec5a:	f023 0310 	bic.w	r3, r3, #16
 800ec5e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	461a      	mov	r2, r3
 800ec66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec68:	61bb      	str	r3, [r7, #24]
 800ec6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec6c:	6979      	ldr	r1, [r7, #20]
 800ec6e:	69ba      	ldr	r2, [r7, #24]
 800ec70:	e841 2300 	strex	r3, r2, [r1]
 800ec74:	613b      	str	r3, [r7, #16]
   return(result);
 800ec76:	693b      	ldr	r3, [r7, #16]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d1e6      	bne.n	800ec4a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2220      	movs	r2, #32
 800ec80:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2200      	movs	r2, #0
 800ec88:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ec90:	bf00      	nop
 800ec92:	3754      	adds	r7, #84	@ 0x54
 800ec94:	46bd      	mov	sp, r7
 800ec96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9a:	4770      	bx	lr
 800ec9c:	effffffe 	.word	0xeffffffe

0800eca0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b084      	sub	sp, #16
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ecac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ecb6:	68f8      	ldr	r0, [r7, #12]
 800ecb8:	f7fe ff32 	bl	800db20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ecbc:	bf00      	nop
 800ecbe:	3710      	adds	r7, #16
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}

0800ecc4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b088      	sub	sp, #32
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	e853 3f00 	ldrex	r3, [r3]
 800ecd8:	60bb      	str	r3, [r7, #8]
   return(result);
 800ecda:	68bb      	ldr	r3, [r7, #8]
 800ecdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ece0:	61fb      	str	r3, [r7, #28]
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	461a      	mov	r2, r3
 800ece8:	69fb      	ldr	r3, [r7, #28]
 800ecea:	61bb      	str	r3, [r7, #24]
 800ecec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecee:	6979      	ldr	r1, [r7, #20]
 800ecf0:	69ba      	ldr	r2, [r7, #24]
 800ecf2:	e841 2300 	strex	r3, r2, [r1]
 800ecf6:	613b      	str	r3, [r7, #16]
   return(result);
 800ecf8:	693b      	ldr	r3, [r7, #16]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d1e6      	bne.n	800eccc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	2220      	movs	r2, #32
 800ed02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	2200      	movs	r2, #0
 800ed0a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ed0c:	6878      	ldr	r0, [r7, #4]
 800ed0e:	f7fe fefd 	bl	800db0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ed12:	bf00      	nop
 800ed14:	3720      	adds	r7, #32
 800ed16:	46bd      	mov	sp, r7
 800ed18:	bd80      	pop	{r7, pc}
	...

0800ed1c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b09c      	sub	sp, #112	@ 0x70
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ed2a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ed34:	2b22      	cmp	r3, #34	@ 0x22
 800ed36:	f040 80be 	bne.w	800eeb6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed40:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ed44:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800ed48:	b2d9      	uxtb	r1, r3
 800ed4a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ed4e:	b2da      	uxtb	r2, r3
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed54:	400a      	ands	r2, r1
 800ed56:	b2d2      	uxtb	r2, r2
 800ed58:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed5e:	1c5a      	adds	r2, r3, #1
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ed6a:	b29b      	uxth	r3, r3
 800ed6c:	3b01      	subs	r3, #1
 800ed6e:	b29a      	uxth	r2, r3
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ed7c:	b29b      	uxth	r3, r3
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	f040 80a1 	bne.w	800eec6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ed8c:	e853 3f00 	ldrex	r3, [r3]
 800ed90:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ed92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ed94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ed98:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	461a      	mov	r2, r3
 800eda0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800eda2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800eda4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eda6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800eda8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800edaa:	e841 2300 	strex	r3, r2, [r1]
 800edae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800edb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d1e6      	bne.n	800ed84 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	3308      	adds	r3, #8
 800edbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edc0:	e853 3f00 	ldrex	r3, [r3]
 800edc4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800edc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800edc8:	f023 0301 	bic.w	r3, r3, #1
 800edcc:	667b      	str	r3, [r7, #100]	@ 0x64
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	3308      	adds	r3, #8
 800edd4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800edd6:	647a      	str	r2, [r7, #68]	@ 0x44
 800edd8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edda:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800eddc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800edde:	e841 2300 	strex	r3, r2, [r1]
 800ede2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ede4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d1e5      	bne.n	800edb6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	2220      	movs	r2, #32
 800edee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	2200      	movs	r2, #0
 800edf6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	2200      	movs	r2, #0
 800edfc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	4a33      	ldr	r2, [pc, #204]	@ (800eed0 <UART_RxISR_8BIT+0x1b4>)
 800ee04:	4293      	cmp	r3, r2
 800ee06:	d01f      	beq.n	800ee48 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	685b      	ldr	r3, [r3, #4]
 800ee0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d018      	beq.n	800ee48 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee1e:	e853 3f00 	ldrex	r3, [r3]
 800ee22:	623b      	str	r3, [r7, #32]
   return(result);
 800ee24:	6a3b      	ldr	r3, [r7, #32]
 800ee26:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ee2a:	663b      	str	r3, [r7, #96]	@ 0x60
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	461a      	mov	r2, r3
 800ee32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ee34:	633b      	str	r3, [r7, #48]	@ 0x30
 800ee36:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ee3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ee3c:	e841 2300 	strex	r3, r2, [r1]
 800ee40:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ee42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d1e6      	bne.n	800ee16 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ee4c:	2b01      	cmp	r3, #1
 800ee4e:	d12e      	bne.n	800eeae <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2200      	movs	r2, #0
 800ee54:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee5c:	693b      	ldr	r3, [r7, #16]
 800ee5e:	e853 3f00 	ldrex	r3, [r3]
 800ee62:	60fb      	str	r3, [r7, #12]
   return(result);
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	f023 0310 	bic.w	r3, r3, #16
 800ee6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	461a      	mov	r2, r3
 800ee72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ee74:	61fb      	str	r3, [r7, #28]
 800ee76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee78:	69b9      	ldr	r1, [r7, #24]
 800ee7a:	69fa      	ldr	r2, [r7, #28]
 800ee7c:	e841 2300 	strex	r3, r2, [r1]
 800ee80:	617b      	str	r3, [r7, #20]
   return(result);
 800ee82:	697b      	ldr	r3, [r7, #20]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d1e6      	bne.n	800ee56 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	69db      	ldr	r3, [r3, #28]
 800ee8e:	f003 0310 	and.w	r3, r3, #16
 800ee92:	2b10      	cmp	r3, #16
 800ee94:	d103      	bne.n	800ee9e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	2210      	movs	r2, #16
 800ee9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800eea4:	4619      	mov	r1, r3
 800eea6:	6878      	ldr	r0, [r7, #4]
 800eea8:	f7fe fe44 	bl	800db34 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800eeac:	e00b      	b.n	800eec6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800eeae:	6878      	ldr	r0, [r7, #4]
 800eeb0:	f7f3 fe7c 	bl	8002bac <HAL_UART_RxCpltCallback>
}
 800eeb4:	e007      	b.n	800eec6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	699a      	ldr	r2, [r3, #24]
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	f042 0208 	orr.w	r2, r2, #8
 800eec4:	619a      	str	r2, [r3, #24]
}
 800eec6:	bf00      	nop
 800eec8:	3770      	adds	r7, #112	@ 0x70
 800eeca:	46bd      	mov	sp, r7
 800eecc:	bd80      	pop	{r7, pc}
 800eece:	bf00      	nop
 800eed0:	58000c00 	.word	0x58000c00

0800eed4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b09c      	sub	sp, #112	@ 0x70
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800eee2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800eeec:	2b22      	cmp	r3, #34	@ 0x22
 800eeee:	f040 80be 	bne.w	800f06e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eef8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef00:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ef02:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800ef06:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ef0a:	4013      	ands	r3, r2
 800ef0c:	b29a      	uxth	r2, r3
 800ef0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ef10:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef16:	1c9a      	adds	r2, r3, #2
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ef22:	b29b      	uxth	r3, r3
 800ef24:	3b01      	subs	r3, #1
 800ef26:	b29a      	uxth	r2, r3
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ef34:	b29b      	uxth	r3, r3
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	f040 80a1 	bne.w	800f07e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ef44:	e853 3f00 	ldrex	r3, [r3]
 800ef48:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ef4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ef50:	667b      	str	r3, [r7, #100]	@ 0x64
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	461a      	mov	r2, r3
 800ef58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ef5a:	657b      	str	r3, [r7, #84]	@ 0x54
 800ef5c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef5e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ef60:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ef62:	e841 2300 	strex	r3, r2, [r1]
 800ef66:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ef68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d1e6      	bne.n	800ef3c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	3308      	adds	r3, #8
 800ef74:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef78:	e853 3f00 	ldrex	r3, [r3]
 800ef7c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ef7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef80:	f023 0301 	bic.w	r3, r3, #1
 800ef84:	663b      	str	r3, [r7, #96]	@ 0x60
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	3308      	adds	r3, #8
 800ef8c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ef8e:	643a      	str	r2, [r7, #64]	@ 0x40
 800ef90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ef94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ef96:	e841 2300 	strex	r3, r2, [r1]
 800ef9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ef9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d1e5      	bne.n	800ef6e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	2220      	movs	r2, #32
 800efa6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2200      	movs	r2, #0
 800efae:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	2200      	movs	r2, #0
 800efb4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	4a33      	ldr	r2, [pc, #204]	@ (800f088 <UART_RxISR_16BIT+0x1b4>)
 800efbc:	4293      	cmp	r3, r2
 800efbe:	d01f      	beq.n	800f000 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	685b      	ldr	r3, [r3, #4]
 800efc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d018      	beq.n	800f000 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efd4:	6a3b      	ldr	r3, [r7, #32]
 800efd6:	e853 3f00 	ldrex	r3, [r3]
 800efda:	61fb      	str	r3, [r7, #28]
   return(result);
 800efdc:	69fb      	ldr	r3, [r7, #28]
 800efde:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800efe2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	461a      	mov	r2, r3
 800efea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800efec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800efee:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eff0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eff2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eff4:	e841 2300 	strex	r3, r2, [r1]
 800eff8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800effa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800effc:	2b00      	cmp	r3, #0
 800effe:	d1e6      	bne.n	800efce <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f004:	2b01      	cmp	r3, #1
 800f006:	d12e      	bne.n	800f066 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	2200      	movs	r2, #0
 800f00c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	e853 3f00 	ldrex	r3, [r3]
 800f01a:	60bb      	str	r3, [r7, #8]
   return(result);
 800f01c:	68bb      	ldr	r3, [r7, #8]
 800f01e:	f023 0310 	bic.w	r3, r3, #16
 800f022:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	461a      	mov	r2, r3
 800f02a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f02c:	61bb      	str	r3, [r7, #24]
 800f02e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f030:	6979      	ldr	r1, [r7, #20]
 800f032:	69ba      	ldr	r2, [r7, #24]
 800f034:	e841 2300 	strex	r3, r2, [r1]
 800f038:	613b      	str	r3, [r7, #16]
   return(result);
 800f03a:	693b      	ldr	r3, [r7, #16]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d1e6      	bne.n	800f00e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	69db      	ldr	r3, [r3, #28]
 800f046:	f003 0310 	and.w	r3, r3, #16
 800f04a:	2b10      	cmp	r3, #16
 800f04c:	d103      	bne.n	800f056 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	2210      	movs	r2, #16
 800f054:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f05c:	4619      	mov	r1, r3
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	f7fe fd68 	bl	800db34 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f064:	e00b      	b.n	800f07e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800f066:	6878      	ldr	r0, [r7, #4]
 800f068:	f7f3 fda0 	bl	8002bac <HAL_UART_RxCpltCallback>
}
 800f06c:	e007      	b.n	800f07e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	699a      	ldr	r2, [r3, #24]
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	f042 0208 	orr.w	r2, r2, #8
 800f07c:	619a      	str	r2, [r3, #24]
}
 800f07e:	bf00      	nop
 800f080:	3770      	adds	r7, #112	@ 0x70
 800f082:	46bd      	mov	sp, r7
 800f084:	bd80      	pop	{r7, pc}
 800f086:	bf00      	nop
 800f088:	58000c00 	.word	0x58000c00

0800f08c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b0ac      	sub	sp, #176	@ 0xb0
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f09a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	69db      	ldr	r3, [r3, #28]
 800f0a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	689b      	ldr	r3, [r3, #8]
 800f0b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f0c2:	2b22      	cmp	r3, #34	@ 0x22
 800f0c4:	f040 8181 	bne.w	800f3ca <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f0ce:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f0d2:	e124      	b.n	800f31e <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0da:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f0de:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800f0e2:	b2d9      	uxtb	r1, r3
 800f0e4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800f0e8:	b2da      	uxtb	r2, r3
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f0ee:	400a      	ands	r2, r1
 800f0f0:	b2d2      	uxtb	r2, r2
 800f0f2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f0f8:	1c5a      	adds	r2, r3, #1
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f104:	b29b      	uxth	r3, r3
 800f106:	3b01      	subs	r3, #1
 800f108:	b29a      	uxth	r2, r3
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	69db      	ldr	r3, [r3, #28]
 800f116:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f11a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f11e:	f003 0307 	and.w	r3, r3, #7
 800f122:	2b00      	cmp	r3, #0
 800f124:	d053      	beq.n	800f1ce <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f126:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f12a:	f003 0301 	and.w	r3, r3, #1
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d011      	beq.n	800f156 <UART_RxISR_8BIT_FIFOEN+0xca>
 800f132:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d00b      	beq.n	800f156 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	2201      	movs	r2, #1
 800f144:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f14c:	f043 0201 	orr.w	r2, r3, #1
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f156:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f15a:	f003 0302 	and.w	r3, r3, #2
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d011      	beq.n	800f186 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f162:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f166:	f003 0301 	and.w	r3, r3, #1
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d00b      	beq.n	800f186 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	2202      	movs	r2, #2
 800f174:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f17c:	f043 0204 	orr.w	r2, r3, #4
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f186:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f18a:	f003 0304 	and.w	r3, r3, #4
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d011      	beq.n	800f1b6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f192:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f196:	f003 0301 	and.w	r3, r3, #1
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d00b      	beq.n	800f1b6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	2204      	movs	r2, #4
 800f1a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f1ac:	f043 0202 	orr.w	r2, r3, #2
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d006      	beq.n	800f1ce <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f1c0:	6878      	ldr	r0, [r7, #4]
 800f1c2:	f7fe fcad 	bl	800db20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f1d4:	b29b      	uxth	r3, r3
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	f040 80a1 	bne.w	800f31e <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f1e4:	e853 3f00 	ldrex	r3, [r3]
 800f1e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800f1ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f1ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f1f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	461a      	mov	r2, r3
 800f1fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f1fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f200:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f202:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800f204:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800f206:	e841 2300 	strex	r3, r2, [r1]
 800f20a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800f20c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d1e4      	bne.n	800f1dc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	3308      	adds	r3, #8
 800f218:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f21a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f21c:	e853 3f00 	ldrex	r3, [r3]
 800f220:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800f222:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f224:	4b6f      	ldr	r3, [pc, #444]	@ (800f3e4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800f226:	4013      	ands	r3, r2
 800f228:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	3308      	adds	r3, #8
 800f232:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f236:	66ba      	str	r2, [r7, #104]	@ 0x68
 800f238:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f23a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800f23c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f23e:	e841 2300 	strex	r3, r2, [r1]
 800f242:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800f244:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f246:	2b00      	cmp	r3, #0
 800f248:	d1e3      	bne.n	800f212 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	2220      	movs	r2, #32
 800f24e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	2200      	movs	r2, #0
 800f256:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	2200      	movs	r2, #0
 800f25c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	4a61      	ldr	r2, [pc, #388]	@ (800f3e8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800f264:	4293      	cmp	r3, r2
 800f266:	d021      	beq.n	800f2ac <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	685b      	ldr	r3, [r3, #4]
 800f26e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f272:	2b00      	cmp	r3, #0
 800f274:	d01a      	beq.n	800f2ac <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f27c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f27e:	e853 3f00 	ldrex	r3, [r3]
 800f282:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f284:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f286:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f28a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	461a      	mov	r2, r3
 800f294:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f298:	657b      	str	r3, [r7, #84]	@ 0x54
 800f29a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f29c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f29e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f2a0:	e841 2300 	strex	r3, r2, [r1]
 800f2a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f2a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d1e4      	bne.n	800f276 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f2b0:	2b01      	cmp	r3, #1
 800f2b2:	d130      	bne.n	800f316 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f2c2:	e853 3f00 	ldrex	r3, [r3]
 800f2c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f2c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2ca:	f023 0310 	bic.w	r3, r3, #16
 800f2ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	461a      	mov	r2, r3
 800f2d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f2dc:	643b      	str	r3, [r7, #64]	@ 0x40
 800f2de:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f2e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f2e4:	e841 2300 	strex	r3, r2, [r1]
 800f2e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f2ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d1e4      	bne.n	800f2ba <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	69db      	ldr	r3, [r3, #28]
 800f2f6:	f003 0310 	and.w	r3, r3, #16
 800f2fa:	2b10      	cmp	r3, #16
 800f2fc:	d103      	bne.n	800f306 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	2210      	movs	r2, #16
 800f304:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f30c:	4619      	mov	r1, r3
 800f30e:	6878      	ldr	r0, [r7, #4]
 800f310:	f7fe fc10 	bl	800db34 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800f314:	e00e      	b.n	800f334 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 800f316:	6878      	ldr	r0, [r7, #4]
 800f318:	f7f3 fc48 	bl	8002bac <HAL_UART_RxCpltCallback>
        break;
 800f31c:	e00a      	b.n	800f334 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f31e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800f322:	2b00      	cmp	r3, #0
 800f324:	d006      	beq.n	800f334 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 800f326:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f32a:	f003 0320 	and.w	r3, r3, #32
 800f32e:	2b00      	cmp	r3, #0
 800f330:	f47f aed0 	bne.w	800f0d4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f33a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f33e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f342:	2b00      	cmp	r3, #0
 800f344:	d049      	beq.n	800f3da <UART_RxISR_8BIT_FIFOEN+0x34e>
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f34c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800f350:	429a      	cmp	r2, r3
 800f352:	d242      	bcs.n	800f3da <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	3308      	adds	r3, #8
 800f35a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f35c:	6a3b      	ldr	r3, [r7, #32]
 800f35e:	e853 3f00 	ldrex	r3, [r3]
 800f362:	61fb      	str	r3, [r7, #28]
   return(result);
 800f364:	69fb      	ldr	r3, [r7, #28]
 800f366:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f36a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	3308      	adds	r3, #8
 800f374:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800f378:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f37a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f37c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f37e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f380:	e841 2300 	strex	r3, r2, [r1]
 800f384:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d1e3      	bne.n	800f354 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	4a17      	ldr	r2, [pc, #92]	@ (800f3ec <UART_RxISR_8BIT_FIFOEN+0x360>)
 800f390:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	e853 3f00 	ldrex	r3, [r3]
 800f39e:	60bb      	str	r3, [r7, #8]
   return(result);
 800f3a0:	68bb      	ldr	r3, [r7, #8]
 800f3a2:	f043 0320 	orr.w	r3, r3, #32
 800f3a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	461a      	mov	r2, r3
 800f3b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f3b4:	61bb      	str	r3, [r7, #24]
 800f3b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3b8:	6979      	ldr	r1, [r7, #20]
 800f3ba:	69ba      	ldr	r2, [r7, #24]
 800f3bc:	e841 2300 	strex	r3, r2, [r1]
 800f3c0:	613b      	str	r3, [r7, #16]
   return(result);
 800f3c2:	693b      	ldr	r3, [r7, #16]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d1e4      	bne.n	800f392 <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f3c8:	e007      	b.n	800f3da <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	699a      	ldr	r2, [r3, #24]
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	f042 0208 	orr.w	r2, r2, #8
 800f3d8:	619a      	str	r2, [r3, #24]
}
 800f3da:	bf00      	nop
 800f3dc:	37b0      	adds	r7, #176	@ 0xb0
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	bd80      	pop	{r7, pc}
 800f3e2:	bf00      	nop
 800f3e4:	effffffe 	.word	0xeffffffe
 800f3e8:	58000c00 	.word	0x58000c00
 800f3ec:	0800ed1d 	.word	0x0800ed1d

0800f3f0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b0ae      	sub	sp, #184	@ 0xb8
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f3fe:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	69db      	ldr	r3, [r3, #28]
 800f408:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	689b      	ldr	r3, [r3, #8]
 800f41c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f426:	2b22      	cmp	r3, #34	@ 0x22
 800f428:	f040 8185 	bne.w	800f736 <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f432:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f436:	e128      	b.n	800f68a <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f43e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f446:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800f44a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800f44e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800f452:	4013      	ands	r3, r2
 800f454:	b29a      	uxth	r2, r3
 800f456:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f45a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f460:	1c9a      	adds	r2, r3, #2
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f46c:	b29b      	uxth	r3, r3
 800f46e:	3b01      	subs	r3, #1
 800f470:	b29a      	uxth	r2, r3
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	69db      	ldr	r3, [r3, #28]
 800f47e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f482:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f486:	f003 0307 	and.w	r3, r3, #7
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d053      	beq.n	800f536 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f48e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f492:	f003 0301 	and.w	r3, r3, #1
 800f496:	2b00      	cmp	r3, #0
 800f498:	d011      	beq.n	800f4be <UART_RxISR_16BIT_FIFOEN+0xce>
 800f49a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f49e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d00b      	beq.n	800f4be <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	2201      	movs	r2, #1
 800f4ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f4b4:	f043 0201 	orr.w	r2, r3, #1
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f4be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f4c2:	f003 0302 	and.w	r3, r3, #2
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d011      	beq.n	800f4ee <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f4ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f4ce:	f003 0301 	and.w	r3, r3, #1
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d00b      	beq.n	800f4ee <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	2202      	movs	r2, #2
 800f4dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f4e4:	f043 0204 	orr.w	r2, r3, #4
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f4ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f4f2:	f003 0304 	and.w	r3, r3, #4
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d011      	beq.n	800f51e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f4fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f4fe:	f003 0301 	and.w	r3, r3, #1
 800f502:	2b00      	cmp	r3, #0
 800f504:	d00b      	beq.n	800f51e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	2204      	movs	r2, #4
 800f50c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f514:	f043 0202 	orr.w	r2, r3, #2
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f524:	2b00      	cmp	r3, #0
 800f526:	d006      	beq.n	800f536 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f528:	6878      	ldr	r0, [r7, #4]
 800f52a:	f7fe faf9 	bl	800db20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	2200      	movs	r2, #0
 800f532:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f53c:	b29b      	uxth	r3, r3
 800f53e:	2b00      	cmp	r3, #0
 800f540:	f040 80a3 	bne.w	800f68a <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f54a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f54c:	e853 3f00 	ldrex	r3, [r3]
 800f550:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f552:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f554:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f558:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	461a      	mov	r2, r3
 800f562:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f566:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f56a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f56c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f56e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f572:	e841 2300 	strex	r3, r2, [r1]
 800f576:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f578:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d1e2      	bne.n	800f544 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	3308      	adds	r3, #8
 800f584:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f586:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f588:	e853 3f00 	ldrex	r3, [r3]
 800f58c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f58e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f590:	4b6f      	ldr	r3, [pc, #444]	@ (800f750 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800f592:	4013      	ands	r3, r2
 800f594:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	3308      	adds	r3, #8
 800f59e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800f5a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f5a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f5a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f5aa:	e841 2300 	strex	r3, r2, [r1]
 800f5ae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f5b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d1e3      	bne.n	800f57e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	2220      	movs	r2, #32
 800f5ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	4a61      	ldr	r2, [pc, #388]	@ (800f754 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800f5d0:	4293      	cmp	r3, r2
 800f5d2:	d021      	beq.n	800f618 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	685b      	ldr	r3, [r3, #4]
 800f5da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d01a      	beq.n	800f618 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f5ea:	e853 3f00 	ldrex	r3, [r3]
 800f5ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f5f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f5f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f5f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	461a      	mov	r2, r3
 800f600:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f604:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f606:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f608:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f60a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f60c:	e841 2300 	strex	r3, r2, [r1]
 800f610:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f612:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f614:	2b00      	cmp	r3, #0
 800f616:	d1e4      	bne.n	800f5e2 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f61c:	2b01      	cmp	r3, #1
 800f61e:	d130      	bne.n	800f682 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	2200      	movs	r2, #0
 800f624:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f62c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f62e:	e853 3f00 	ldrex	r3, [r3]
 800f632:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f636:	f023 0310 	bic.w	r3, r3, #16
 800f63a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	461a      	mov	r2, r3
 800f644:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f648:	647b      	str	r3, [r7, #68]	@ 0x44
 800f64a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f64c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f64e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f650:	e841 2300 	strex	r3, r2, [r1]
 800f654:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d1e4      	bne.n	800f626 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	69db      	ldr	r3, [r3, #28]
 800f662:	f003 0310 	and.w	r3, r3, #16
 800f666:	2b10      	cmp	r3, #16
 800f668:	d103      	bne.n	800f672 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	2210      	movs	r2, #16
 800f670:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f678:	4619      	mov	r1, r3
 800f67a:	6878      	ldr	r0, [r7, #4]
 800f67c:	f7fe fa5a 	bl	800db34 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800f680:	e00e      	b.n	800f6a0 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 800f682:	6878      	ldr	r0, [r7, #4]
 800f684:	f7f3 fa92 	bl	8002bac <HAL_UART_RxCpltCallback>
        break;
 800f688:	e00a      	b.n	800f6a0 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f68a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d006      	beq.n	800f6a0 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 800f692:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f696:	f003 0320 	and.w	r3, r3, #32
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	f47f aecc 	bne.w	800f438 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f6a6:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f6aa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d049      	beq.n	800f746 <UART_RxISR_16BIT_FIFOEN+0x356>
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f6b8:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800f6bc:	429a      	cmp	r2, r3
 800f6be:	d242      	bcs.n	800f746 <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	3308      	adds	r3, #8
 800f6c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6ca:	e853 3f00 	ldrex	r3, [r3]
 800f6ce:	623b      	str	r3, [r7, #32]
   return(result);
 800f6d0:	6a3b      	ldr	r3, [r7, #32]
 800f6d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f6d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	3308      	adds	r3, #8
 800f6e0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800f6e4:	633a      	str	r2, [r7, #48]	@ 0x30
 800f6e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f6ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f6ec:	e841 2300 	strex	r3, r2, [r1]
 800f6f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f6f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d1e3      	bne.n	800f6c0 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	4a17      	ldr	r2, [pc, #92]	@ (800f758 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800f6fc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f704:	693b      	ldr	r3, [r7, #16]
 800f706:	e853 3f00 	ldrex	r3, [r3]
 800f70a:	60fb      	str	r3, [r7, #12]
   return(result);
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	f043 0320 	orr.w	r3, r3, #32
 800f712:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	461a      	mov	r2, r3
 800f71c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f720:	61fb      	str	r3, [r7, #28]
 800f722:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f724:	69b9      	ldr	r1, [r7, #24]
 800f726:	69fa      	ldr	r2, [r7, #28]
 800f728:	e841 2300 	strex	r3, r2, [r1]
 800f72c:	617b      	str	r3, [r7, #20]
   return(result);
 800f72e:	697b      	ldr	r3, [r7, #20]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d1e4      	bne.n	800f6fe <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f734:	e007      	b.n	800f746 <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	699a      	ldr	r2, [r3, #24]
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	f042 0208 	orr.w	r2, r2, #8
 800f744:	619a      	str	r2, [r3, #24]
}
 800f746:	bf00      	nop
 800f748:	37b8      	adds	r7, #184	@ 0xb8
 800f74a:	46bd      	mov	sp, r7
 800f74c:	bd80      	pop	{r7, pc}
 800f74e:	bf00      	nop
 800f750:	effffffe 	.word	0xeffffffe
 800f754:	58000c00 	.word	0x58000c00
 800f758:	0800eed5 	.word	0x0800eed5

0800f75c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f75c:	b480      	push	{r7}
 800f75e:	b083      	sub	sp, #12
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f764:	bf00      	nop
 800f766:	370c      	adds	r7, #12
 800f768:	46bd      	mov	sp, r7
 800f76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76e:	4770      	bx	lr

0800f770 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f770:	b480      	push	{r7}
 800f772:	b083      	sub	sp, #12
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f778:	bf00      	nop
 800f77a:	370c      	adds	r7, #12
 800f77c:	46bd      	mov	sp, r7
 800f77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f782:	4770      	bx	lr

0800f784 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f784:	b480      	push	{r7}
 800f786:	b083      	sub	sp, #12
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f78c:	bf00      	nop
 800f78e:	370c      	adds	r7, #12
 800f790:	46bd      	mov	sp, r7
 800f792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f796:	4770      	bx	lr

0800f798 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b084      	sub	sp, #16
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f7a6:	2b01      	cmp	r3, #1
 800f7a8:	d101      	bne.n	800f7ae <HAL_UARTEx_EnableFifoMode+0x16>
 800f7aa:	2302      	movs	r3, #2
 800f7ac:	e02b      	b.n	800f806 <HAL_UARTEx_EnableFifoMode+0x6e>
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	2201      	movs	r2, #1
 800f7b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	2224      	movs	r2, #36	@ 0x24
 800f7ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	681a      	ldr	r2, [r3, #0]
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	f022 0201 	bic.w	r2, r2, #1
 800f7d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f7dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800f7e4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	68fa      	ldr	r2, [r7, #12]
 800f7ec:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f7ee:	6878      	ldr	r0, [r7, #4]
 800f7f0:	f000 f88a 	bl	800f908 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2220      	movs	r2, #32
 800f7f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	2200      	movs	r2, #0
 800f800:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f804:	2300      	movs	r3, #0
}
 800f806:	4618      	mov	r0, r3
 800f808:	3710      	adds	r7, #16
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}

0800f80e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f80e:	b580      	push	{r7, lr}
 800f810:	b084      	sub	sp, #16
 800f812:	af00      	add	r7, sp, #0
 800f814:	6078      	str	r0, [r7, #4]
 800f816:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f81e:	2b01      	cmp	r3, #1
 800f820:	d101      	bne.n	800f826 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f822:	2302      	movs	r3, #2
 800f824:	e02d      	b.n	800f882 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	2201      	movs	r2, #1
 800f82a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	2224      	movs	r2, #36	@ 0x24
 800f832:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	681a      	ldr	r2, [r3, #0]
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	f022 0201 	bic.w	r2, r2, #1
 800f84c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	689b      	ldr	r3, [r3, #8]
 800f854:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	683a      	ldr	r2, [r7, #0]
 800f85e:	430a      	orrs	r2, r1
 800f860:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f862:	6878      	ldr	r0, [r7, #4]
 800f864:	f000 f850 	bl	800f908 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	68fa      	ldr	r2, [r7, #12]
 800f86e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	2220      	movs	r2, #32
 800f874:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2200      	movs	r2, #0
 800f87c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f880:	2300      	movs	r3, #0
}
 800f882:	4618      	mov	r0, r3
 800f884:	3710      	adds	r7, #16
 800f886:	46bd      	mov	sp, r7
 800f888:	bd80      	pop	{r7, pc}

0800f88a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f88a:	b580      	push	{r7, lr}
 800f88c:	b084      	sub	sp, #16
 800f88e:	af00      	add	r7, sp, #0
 800f890:	6078      	str	r0, [r7, #4]
 800f892:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f89a:	2b01      	cmp	r3, #1
 800f89c:	d101      	bne.n	800f8a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f89e:	2302      	movs	r3, #2
 800f8a0:	e02d      	b.n	800f8fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	2201      	movs	r2, #1
 800f8a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	2224      	movs	r2, #36	@ 0x24
 800f8ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	681a      	ldr	r2, [r3, #0]
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	f022 0201 	bic.w	r2, r2, #1
 800f8c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	689b      	ldr	r3, [r3, #8]
 800f8d0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	683a      	ldr	r2, [r7, #0]
 800f8da:	430a      	orrs	r2, r1
 800f8dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f8de:	6878      	ldr	r0, [r7, #4]
 800f8e0:	f000 f812 	bl	800f908 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	68fa      	ldr	r2, [r7, #12]
 800f8ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	2220      	movs	r2, #32
 800f8f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f8fc:	2300      	movs	r3, #0
}
 800f8fe:	4618      	mov	r0, r3
 800f900:	3710      	adds	r7, #16
 800f902:	46bd      	mov	sp, r7
 800f904:	bd80      	pop	{r7, pc}
	...

0800f908 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f908:	b480      	push	{r7}
 800f90a:	b085      	sub	sp, #20
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f914:	2b00      	cmp	r3, #0
 800f916:	d108      	bne.n	800f92a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	2201      	movs	r2, #1
 800f91c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	2201      	movs	r2, #1
 800f924:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f928:	e031      	b.n	800f98e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f92a:	2310      	movs	r3, #16
 800f92c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f92e:	2310      	movs	r3, #16
 800f930:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	689b      	ldr	r3, [r3, #8]
 800f938:	0e5b      	lsrs	r3, r3, #25
 800f93a:	b2db      	uxtb	r3, r3
 800f93c:	f003 0307 	and.w	r3, r3, #7
 800f940:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	689b      	ldr	r3, [r3, #8]
 800f948:	0f5b      	lsrs	r3, r3, #29
 800f94a:	b2db      	uxtb	r3, r3
 800f94c:	f003 0307 	and.w	r3, r3, #7
 800f950:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f952:	7bbb      	ldrb	r3, [r7, #14]
 800f954:	7b3a      	ldrb	r2, [r7, #12]
 800f956:	4911      	ldr	r1, [pc, #68]	@ (800f99c <UARTEx_SetNbDataToProcess+0x94>)
 800f958:	5c8a      	ldrb	r2, [r1, r2]
 800f95a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f95e:	7b3a      	ldrb	r2, [r7, #12]
 800f960:	490f      	ldr	r1, [pc, #60]	@ (800f9a0 <UARTEx_SetNbDataToProcess+0x98>)
 800f962:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f964:	fb93 f3f2 	sdiv	r3, r3, r2
 800f968:	b29a      	uxth	r2, r3
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f970:	7bfb      	ldrb	r3, [r7, #15]
 800f972:	7b7a      	ldrb	r2, [r7, #13]
 800f974:	4909      	ldr	r1, [pc, #36]	@ (800f99c <UARTEx_SetNbDataToProcess+0x94>)
 800f976:	5c8a      	ldrb	r2, [r1, r2]
 800f978:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f97c:	7b7a      	ldrb	r2, [r7, #13]
 800f97e:	4908      	ldr	r1, [pc, #32]	@ (800f9a0 <UARTEx_SetNbDataToProcess+0x98>)
 800f980:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f982:	fb93 f3f2 	sdiv	r3, r3, r2
 800f986:	b29a      	uxth	r2, r3
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f98e:	bf00      	nop
 800f990:	3714      	adds	r7, #20
 800f992:	46bd      	mov	sp, r7
 800f994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f998:	4770      	bx	lr
 800f99a:	bf00      	nop
 800f99c:	080127bc 	.word	0x080127bc
 800f9a0:	080127c4 	.word	0x080127c4

0800f9a4 <atoi>:
 800f9a4:	220a      	movs	r2, #10
 800f9a6:	2100      	movs	r1, #0
 800f9a8:	f000 b87a 	b.w	800faa0 <strtol>

0800f9ac <_strtol_l.isra.0>:
 800f9ac:	2b24      	cmp	r3, #36	@ 0x24
 800f9ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9b2:	4686      	mov	lr, r0
 800f9b4:	4690      	mov	r8, r2
 800f9b6:	d801      	bhi.n	800f9bc <_strtol_l.isra.0+0x10>
 800f9b8:	2b01      	cmp	r3, #1
 800f9ba:	d106      	bne.n	800f9ca <_strtol_l.isra.0+0x1e>
 800f9bc:	f000 ff3a 	bl	8010834 <__errno>
 800f9c0:	2316      	movs	r3, #22
 800f9c2:	6003      	str	r3, [r0, #0]
 800f9c4:	2000      	movs	r0, #0
 800f9c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9ca:	4834      	ldr	r0, [pc, #208]	@ (800fa9c <_strtol_l.isra.0+0xf0>)
 800f9cc:	460d      	mov	r5, r1
 800f9ce:	462a      	mov	r2, r5
 800f9d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f9d4:	5d06      	ldrb	r6, [r0, r4]
 800f9d6:	f016 0608 	ands.w	r6, r6, #8
 800f9da:	d1f8      	bne.n	800f9ce <_strtol_l.isra.0+0x22>
 800f9dc:	2c2d      	cmp	r4, #45	@ 0x2d
 800f9de:	d110      	bne.n	800fa02 <_strtol_l.isra.0+0x56>
 800f9e0:	782c      	ldrb	r4, [r5, #0]
 800f9e2:	2601      	movs	r6, #1
 800f9e4:	1c95      	adds	r5, r2, #2
 800f9e6:	f033 0210 	bics.w	r2, r3, #16
 800f9ea:	d115      	bne.n	800fa18 <_strtol_l.isra.0+0x6c>
 800f9ec:	2c30      	cmp	r4, #48	@ 0x30
 800f9ee:	d10d      	bne.n	800fa0c <_strtol_l.isra.0+0x60>
 800f9f0:	782a      	ldrb	r2, [r5, #0]
 800f9f2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f9f6:	2a58      	cmp	r2, #88	@ 0x58
 800f9f8:	d108      	bne.n	800fa0c <_strtol_l.isra.0+0x60>
 800f9fa:	786c      	ldrb	r4, [r5, #1]
 800f9fc:	3502      	adds	r5, #2
 800f9fe:	2310      	movs	r3, #16
 800fa00:	e00a      	b.n	800fa18 <_strtol_l.isra.0+0x6c>
 800fa02:	2c2b      	cmp	r4, #43	@ 0x2b
 800fa04:	bf04      	itt	eq
 800fa06:	782c      	ldrbeq	r4, [r5, #0]
 800fa08:	1c95      	addeq	r5, r2, #2
 800fa0a:	e7ec      	b.n	800f9e6 <_strtol_l.isra.0+0x3a>
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d1f6      	bne.n	800f9fe <_strtol_l.isra.0+0x52>
 800fa10:	2c30      	cmp	r4, #48	@ 0x30
 800fa12:	bf14      	ite	ne
 800fa14:	230a      	movne	r3, #10
 800fa16:	2308      	moveq	r3, #8
 800fa18:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800fa1c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800fa20:	2200      	movs	r2, #0
 800fa22:	fbbc f9f3 	udiv	r9, ip, r3
 800fa26:	4610      	mov	r0, r2
 800fa28:	fb03 ca19 	mls	sl, r3, r9, ip
 800fa2c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800fa30:	2f09      	cmp	r7, #9
 800fa32:	d80f      	bhi.n	800fa54 <_strtol_l.isra.0+0xa8>
 800fa34:	463c      	mov	r4, r7
 800fa36:	42a3      	cmp	r3, r4
 800fa38:	dd1b      	ble.n	800fa72 <_strtol_l.isra.0+0xc6>
 800fa3a:	1c57      	adds	r7, r2, #1
 800fa3c:	d007      	beq.n	800fa4e <_strtol_l.isra.0+0xa2>
 800fa3e:	4581      	cmp	r9, r0
 800fa40:	d314      	bcc.n	800fa6c <_strtol_l.isra.0+0xc0>
 800fa42:	d101      	bne.n	800fa48 <_strtol_l.isra.0+0x9c>
 800fa44:	45a2      	cmp	sl, r4
 800fa46:	db11      	blt.n	800fa6c <_strtol_l.isra.0+0xc0>
 800fa48:	fb00 4003 	mla	r0, r0, r3, r4
 800fa4c:	2201      	movs	r2, #1
 800fa4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fa52:	e7eb      	b.n	800fa2c <_strtol_l.isra.0+0x80>
 800fa54:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800fa58:	2f19      	cmp	r7, #25
 800fa5a:	d801      	bhi.n	800fa60 <_strtol_l.isra.0+0xb4>
 800fa5c:	3c37      	subs	r4, #55	@ 0x37
 800fa5e:	e7ea      	b.n	800fa36 <_strtol_l.isra.0+0x8a>
 800fa60:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800fa64:	2f19      	cmp	r7, #25
 800fa66:	d804      	bhi.n	800fa72 <_strtol_l.isra.0+0xc6>
 800fa68:	3c57      	subs	r4, #87	@ 0x57
 800fa6a:	e7e4      	b.n	800fa36 <_strtol_l.isra.0+0x8a>
 800fa6c:	f04f 32ff 	mov.w	r2, #4294967295
 800fa70:	e7ed      	b.n	800fa4e <_strtol_l.isra.0+0xa2>
 800fa72:	1c53      	adds	r3, r2, #1
 800fa74:	d108      	bne.n	800fa88 <_strtol_l.isra.0+0xdc>
 800fa76:	2322      	movs	r3, #34	@ 0x22
 800fa78:	f8ce 3000 	str.w	r3, [lr]
 800fa7c:	4660      	mov	r0, ip
 800fa7e:	f1b8 0f00 	cmp.w	r8, #0
 800fa82:	d0a0      	beq.n	800f9c6 <_strtol_l.isra.0+0x1a>
 800fa84:	1e69      	subs	r1, r5, #1
 800fa86:	e006      	b.n	800fa96 <_strtol_l.isra.0+0xea>
 800fa88:	b106      	cbz	r6, 800fa8c <_strtol_l.isra.0+0xe0>
 800fa8a:	4240      	negs	r0, r0
 800fa8c:	f1b8 0f00 	cmp.w	r8, #0
 800fa90:	d099      	beq.n	800f9c6 <_strtol_l.isra.0+0x1a>
 800fa92:	2a00      	cmp	r2, #0
 800fa94:	d1f6      	bne.n	800fa84 <_strtol_l.isra.0+0xd8>
 800fa96:	f8c8 1000 	str.w	r1, [r8]
 800fa9a:	e794      	b.n	800f9c6 <_strtol_l.isra.0+0x1a>
 800fa9c:	080127cd 	.word	0x080127cd

0800faa0 <strtol>:
 800faa0:	4613      	mov	r3, r2
 800faa2:	460a      	mov	r2, r1
 800faa4:	4601      	mov	r1, r0
 800faa6:	4802      	ldr	r0, [pc, #8]	@ (800fab0 <strtol+0x10>)
 800faa8:	6800      	ldr	r0, [r0, #0]
 800faaa:	f7ff bf7f 	b.w	800f9ac <_strtol_l.isra.0>
 800faae:	bf00      	nop
 800fab0:	24000038 	.word	0x24000038

0800fab4 <__cvt>:
 800fab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fab6:	ed2d 8b02 	vpush	{d8}
 800faba:	eeb0 8b40 	vmov.f64	d8, d0
 800fabe:	b085      	sub	sp, #20
 800fac0:	4617      	mov	r7, r2
 800fac2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800fac4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fac6:	ee18 2a90 	vmov	r2, s17
 800faca:	f025 0520 	bic.w	r5, r5, #32
 800face:	2a00      	cmp	r2, #0
 800fad0:	bfb6      	itet	lt
 800fad2:	222d      	movlt	r2, #45	@ 0x2d
 800fad4:	2200      	movge	r2, #0
 800fad6:	eeb1 8b40 	vneglt.f64	d8, d0
 800fada:	2d46      	cmp	r5, #70	@ 0x46
 800fadc:	460c      	mov	r4, r1
 800fade:	701a      	strb	r2, [r3, #0]
 800fae0:	d004      	beq.n	800faec <__cvt+0x38>
 800fae2:	2d45      	cmp	r5, #69	@ 0x45
 800fae4:	d100      	bne.n	800fae8 <__cvt+0x34>
 800fae6:	3401      	adds	r4, #1
 800fae8:	2102      	movs	r1, #2
 800faea:	e000      	b.n	800faee <__cvt+0x3a>
 800faec:	2103      	movs	r1, #3
 800faee:	ab03      	add	r3, sp, #12
 800faf0:	9301      	str	r3, [sp, #4]
 800faf2:	ab02      	add	r3, sp, #8
 800faf4:	9300      	str	r3, [sp, #0]
 800faf6:	4622      	mov	r2, r4
 800faf8:	4633      	mov	r3, r6
 800fafa:	eeb0 0b48 	vmov.f64	d0, d8
 800fafe:	f000 ff7b 	bl	80109f8 <_dtoa_r>
 800fb02:	2d47      	cmp	r5, #71	@ 0x47
 800fb04:	d114      	bne.n	800fb30 <__cvt+0x7c>
 800fb06:	07fb      	lsls	r3, r7, #31
 800fb08:	d50a      	bpl.n	800fb20 <__cvt+0x6c>
 800fb0a:	1902      	adds	r2, r0, r4
 800fb0c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fb10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb14:	bf08      	it	eq
 800fb16:	9203      	streq	r2, [sp, #12]
 800fb18:	2130      	movs	r1, #48	@ 0x30
 800fb1a:	9b03      	ldr	r3, [sp, #12]
 800fb1c:	4293      	cmp	r3, r2
 800fb1e:	d319      	bcc.n	800fb54 <__cvt+0xa0>
 800fb20:	9b03      	ldr	r3, [sp, #12]
 800fb22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fb24:	1a1b      	subs	r3, r3, r0
 800fb26:	6013      	str	r3, [r2, #0]
 800fb28:	b005      	add	sp, #20
 800fb2a:	ecbd 8b02 	vpop	{d8}
 800fb2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb30:	2d46      	cmp	r5, #70	@ 0x46
 800fb32:	eb00 0204 	add.w	r2, r0, r4
 800fb36:	d1e9      	bne.n	800fb0c <__cvt+0x58>
 800fb38:	7803      	ldrb	r3, [r0, #0]
 800fb3a:	2b30      	cmp	r3, #48	@ 0x30
 800fb3c:	d107      	bne.n	800fb4e <__cvt+0x9a>
 800fb3e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fb42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb46:	bf1c      	itt	ne
 800fb48:	f1c4 0401 	rsbne	r4, r4, #1
 800fb4c:	6034      	strne	r4, [r6, #0]
 800fb4e:	6833      	ldr	r3, [r6, #0]
 800fb50:	441a      	add	r2, r3
 800fb52:	e7db      	b.n	800fb0c <__cvt+0x58>
 800fb54:	1c5c      	adds	r4, r3, #1
 800fb56:	9403      	str	r4, [sp, #12]
 800fb58:	7019      	strb	r1, [r3, #0]
 800fb5a:	e7de      	b.n	800fb1a <__cvt+0x66>

0800fb5c <__exponent>:
 800fb5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb5e:	2900      	cmp	r1, #0
 800fb60:	bfba      	itte	lt
 800fb62:	4249      	neglt	r1, r1
 800fb64:	232d      	movlt	r3, #45	@ 0x2d
 800fb66:	232b      	movge	r3, #43	@ 0x2b
 800fb68:	2909      	cmp	r1, #9
 800fb6a:	7002      	strb	r2, [r0, #0]
 800fb6c:	7043      	strb	r3, [r0, #1]
 800fb6e:	dd29      	ble.n	800fbc4 <__exponent+0x68>
 800fb70:	f10d 0307 	add.w	r3, sp, #7
 800fb74:	461d      	mov	r5, r3
 800fb76:	270a      	movs	r7, #10
 800fb78:	461a      	mov	r2, r3
 800fb7a:	fbb1 f6f7 	udiv	r6, r1, r7
 800fb7e:	fb07 1416 	mls	r4, r7, r6, r1
 800fb82:	3430      	adds	r4, #48	@ 0x30
 800fb84:	f802 4c01 	strb.w	r4, [r2, #-1]
 800fb88:	460c      	mov	r4, r1
 800fb8a:	2c63      	cmp	r4, #99	@ 0x63
 800fb8c:	f103 33ff 	add.w	r3, r3, #4294967295
 800fb90:	4631      	mov	r1, r6
 800fb92:	dcf1      	bgt.n	800fb78 <__exponent+0x1c>
 800fb94:	3130      	adds	r1, #48	@ 0x30
 800fb96:	1e94      	subs	r4, r2, #2
 800fb98:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fb9c:	1c41      	adds	r1, r0, #1
 800fb9e:	4623      	mov	r3, r4
 800fba0:	42ab      	cmp	r3, r5
 800fba2:	d30a      	bcc.n	800fbba <__exponent+0x5e>
 800fba4:	f10d 0309 	add.w	r3, sp, #9
 800fba8:	1a9b      	subs	r3, r3, r2
 800fbaa:	42ac      	cmp	r4, r5
 800fbac:	bf88      	it	hi
 800fbae:	2300      	movhi	r3, #0
 800fbb0:	3302      	adds	r3, #2
 800fbb2:	4403      	add	r3, r0
 800fbb4:	1a18      	subs	r0, r3, r0
 800fbb6:	b003      	add	sp, #12
 800fbb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbba:	f813 6b01 	ldrb.w	r6, [r3], #1
 800fbbe:	f801 6f01 	strb.w	r6, [r1, #1]!
 800fbc2:	e7ed      	b.n	800fba0 <__exponent+0x44>
 800fbc4:	2330      	movs	r3, #48	@ 0x30
 800fbc6:	3130      	adds	r1, #48	@ 0x30
 800fbc8:	7083      	strb	r3, [r0, #2]
 800fbca:	70c1      	strb	r1, [r0, #3]
 800fbcc:	1d03      	adds	r3, r0, #4
 800fbce:	e7f1      	b.n	800fbb4 <__exponent+0x58>

0800fbd0 <_printf_float>:
 800fbd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbd4:	b08d      	sub	sp, #52	@ 0x34
 800fbd6:	460c      	mov	r4, r1
 800fbd8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800fbdc:	4616      	mov	r6, r2
 800fbde:	461f      	mov	r7, r3
 800fbe0:	4605      	mov	r5, r0
 800fbe2:	f000 fddd 	bl	80107a0 <_localeconv_r>
 800fbe6:	f8d0 b000 	ldr.w	fp, [r0]
 800fbea:	4658      	mov	r0, fp
 800fbec:	f7f0 fbd8 	bl	80003a0 <strlen>
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	930a      	str	r3, [sp, #40]	@ 0x28
 800fbf4:	f8d8 3000 	ldr.w	r3, [r8]
 800fbf8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800fbfc:	6822      	ldr	r2, [r4, #0]
 800fbfe:	9005      	str	r0, [sp, #20]
 800fc00:	3307      	adds	r3, #7
 800fc02:	f023 0307 	bic.w	r3, r3, #7
 800fc06:	f103 0108 	add.w	r1, r3, #8
 800fc0a:	f8c8 1000 	str.w	r1, [r8]
 800fc0e:	ed93 0b00 	vldr	d0, [r3]
 800fc12:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800fe70 <_printf_float+0x2a0>
 800fc16:	eeb0 7bc0 	vabs.f64	d7, d0
 800fc1a:	eeb4 7b46 	vcmp.f64	d7, d6
 800fc1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc22:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800fc26:	dd24      	ble.n	800fc72 <_printf_float+0xa2>
 800fc28:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800fc2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc30:	d502      	bpl.n	800fc38 <_printf_float+0x68>
 800fc32:	232d      	movs	r3, #45	@ 0x2d
 800fc34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fc38:	498f      	ldr	r1, [pc, #572]	@ (800fe78 <_printf_float+0x2a8>)
 800fc3a:	4b90      	ldr	r3, [pc, #576]	@ (800fe7c <_printf_float+0x2ac>)
 800fc3c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800fc40:	bf8c      	ite	hi
 800fc42:	4688      	movhi	r8, r1
 800fc44:	4698      	movls	r8, r3
 800fc46:	f022 0204 	bic.w	r2, r2, #4
 800fc4a:	2303      	movs	r3, #3
 800fc4c:	6123      	str	r3, [r4, #16]
 800fc4e:	6022      	str	r2, [r4, #0]
 800fc50:	f04f 0a00 	mov.w	sl, #0
 800fc54:	9700      	str	r7, [sp, #0]
 800fc56:	4633      	mov	r3, r6
 800fc58:	aa0b      	add	r2, sp, #44	@ 0x2c
 800fc5a:	4621      	mov	r1, r4
 800fc5c:	4628      	mov	r0, r5
 800fc5e:	f000 f9d1 	bl	8010004 <_printf_common>
 800fc62:	3001      	adds	r0, #1
 800fc64:	f040 8089 	bne.w	800fd7a <_printf_float+0x1aa>
 800fc68:	f04f 30ff 	mov.w	r0, #4294967295
 800fc6c:	b00d      	add	sp, #52	@ 0x34
 800fc6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc72:	eeb4 0b40 	vcmp.f64	d0, d0
 800fc76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc7a:	d709      	bvc.n	800fc90 <_printf_float+0xc0>
 800fc7c:	ee10 3a90 	vmov	r3, s1
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	bfbc      	itt	lt
 800fc84:	232d      	movlt	r3, #45	@ 0x2d
 800fc86:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800fc8a:	497d      	ldr	r1, [pc, #500]	@ (800fe80 <_printf_float+0x2b0>)
 800fc8c:	4b7d      	ldr	r3, [pc, #500]	@ (800fe84 <_printf_float+0x2b4>)
 800fc8e:	e7d5      	b.n	800fc3c <_printf_float+0x6c>
 800fc90:	6863      	ldr	r3, [r4, #4]
 800fc92:	1c59      	adds	r1, r3, #1
 800fc94:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800fc98:	d139      	bne.n	800fd0e <_printf_float+0x13e>
 800fc9a:	2306      	movs	r3, #6
 800fc9c:	6063      	str	r3, [r4, #4]
 800fc9e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800fca2:	2300      	movs	r3, #0
 800fca4:	6022      	str	r2, [r4, #0]
 800fca6:	9303      	str	r3, [sp, #12]
 800fca8:	ab0a      	add	r3, sp, #40	@ 0x28
 800fcaa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800fcae:	ab09      	add	r3, sp, #36	@ 0x24
 800fcb0:	9300      	str	r3, [sp, #0]
 800fcb2:	6861      	ldr	r1, [r4, #4]
 800fcb4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800fcb8:	4628      	mov	r0, r5
 800fcba:	f7ff fefb 	bl	800fab4 <__cvt>
 800fcbe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fcc2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fcc4:	4680      	mov	r8, r0
 800fcc6:	d129      	bne.n	800fd1c <_printf_float+0x14c>
 800fcc8:	1cc8      	adds	r0, r1, #3
 800fcca:	db02      	blt.n	800fcd2 <_printf_float+0x102>
 800fccc:	6863      	ldr	r3, [r4, #4]
 800fcce:	4299      	cmp	r1, r3
 800fcd0:	dd41      	ble.n	800fd56 <_printf_float+0x186>
 800fcd2:	f1a9 0902 	sub.w	r9, r9, #2
 800fcd6:	fa5f f989 	uxtb.w	r9, r9
 800fcda:	3901      	subs	r1, #1
 800fcdc:	464a      	mov	r2, r9
 800fcde:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800fce2:	9109      	str	r1, [sp, #36]	@ 0x24
 800fce4:	f7ff ff3a 	bl	800fb5c <__exponent>
 800fce8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fcea:	1813      	adds	r3, r2, r0
 800fcec:	2a01      	cmp	r2, #1
 800fcee:	4682      	mov	sl, r0
 800fcf0:	6123      	str	r3, [r4, #16]
 800fcf2:	dc02      	bgt.n	800fcfa <_printf_float+0x12a>
 800fcf4:	6822      	ldr	r2, [r4, #0]
 800fcf6:	07d2      	lsls	r2, r2, #31
 800fcf8:	d501      	bpl.n	800fcfe <_printf_float+0x12e>
 800fcfa:	3301      	adds	r3, #1
 800fcfc:	6123      	str	r3, [r4, #16]
 800fcfe:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d0a6      	beq.n	800fc54 <_printf_float+0x84>
 800fd06:	232d      	movs	r3, #45	@ 0x2d
 800fd08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fd0c:	e7a2      	b.n	800fc54 <_printf_float+0x84>
 800fd0e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fd12:	d1c4      	bne.n	800fc9e <_printf_float+0xce>
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d1c2      	bne.n	800fc9e <_printf_float+0xce>
 800fd18:	2301      	movs	r3, #1
 800fd1a:	e7bf      	b.n	800fc9c <_printf_float+0xcc>
 800fd1c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800fd20:	d9db      	bls.n	800fcda <_printf_float+0x10a>
 800fd22:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800fd26:	d118      	bne.n	800fd5a <_printf_float+0x18a>
 800fd28:	2900      	cmp	r1, #0
 800fd2a:	6863      	ldr	r3, [r4, #4]
 800fd2c:	dd0b      	ble.n	800fd46 <_printf_float+0x176>
 800fd2e:	6121      	str	r1, [r4, #16]
 800fd30:	b913      	cbnz	r3, 800fd38 <_printf_float+0x168>
 800fd32:	6822      	ldr	r2, [r4, #0]
 800fd34:	07d0      	lsls	r0, r2, #31
 800fd36:	d502      	bpl.n	800fd3e <_printf_float+0x16e>
 800fd38:	3301      	adds	r3, #1
 800fd3a:	440b      	add	r3, r1
 800fd3c:	6123      	str	r3, [r4, #16]
 800fd3e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800fd40:	f04f 0a00 	mov.w	sl, #0
 800fd44:	e7db      	b.n	800fcfe <_printf_float+0x12e>
 800fd46:	b913      	cbnz	r3, 800fd4e <_printf_float+0x17e>
 800fd48:	6822      	ldr	r2, [r4, #0]
 800fd4a:	07d2      	lsls	r2, r2, #31
 800fd4c:	d501      	bpl.n	800fd52 <_printf_float+0x182>
 800fd4e:	3302      	adds	r3, #2
 800fd50:	e7f4      	b.n	800fd3c <_printf_float+0x16c>
 800fd52:	2301      	movs	r3, #1
 800fd54:	e7f2      	b.n	800fd3c <_printf_float+0x16c>
 800fd56:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800fd5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd5c:	4299      	cmp	r1, r3
 800fd5e:	db05      	blt.n	800fd6c <_printf_float+0x19c>
 800fd60:	6823      	ldr	r3, [r4, #0]
 800fd62:	6121      	str	r1, [r4, #16]
 800fd64:	07d8      	lsls	r0, r3, #31
 800fd66:	d5ea      	bpl.n	800fd3e <_printf_float+0x16e>
 800fd68:	1c4b      	adds	r3, r1, #1
 800fd6a:	e7e7      	b.n	800fd3c <_printf_float+0x16c>
 800fd6c:	2900      	cmp	r1, #0
 800fd6e:	bfd4      	ite	le
 800fd70:	f1c1 0202 	rsble	r2, r1, #2
 800fd74:	2201      	movgt	r2, #1
 800fd76:	4413      	add	r3, r2
 800fd78:	e7e0      	b.n	800fd3c <_printf_float+0x16c>
 800fd7a:	6823      	ldr	r3, [r4, #0]
 800fd7c:	055a      	lsls	r2, r3, #21
 800fd7e:	d407      	bmi.n	800fd90 <_printf_float+0x1c0>
 800fd80:	6923      	ldr	r3, [r4, #16]
 800fd82:	4642      	mov	r2, r8
 800fd84:	4631      	mov	r1, r6
 800fd86:	4628      	mov	r0, r5
 800fd88:	47b8      	blx	r7
 800fd8a:	3001      	adds	r0, #1
 800fd8c:	d12a      	bne.n	800fde4 <_printf_float+0x214>
 800fd8e:	e76b      	b.n	800fc68 <_printf_float+0x98>
 800fd90:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800fd94:	f240 80e0 	bls.w	800ff58 <_printf_float+0x388>
 800fd98:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800fd9c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fda0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fda4:	d133      	bne.n	800fe0e <_printf_float+0x23e>
 800fda6:	4a38      	ldr	r2, [pc, #224]	@ (800fe88 <_printf_float+0x2b8>)
 800fda8:	2301      	movs	r3, #1
 800fdaa:	4631      	mov	r1, r6
 800fdac:	4628      	mov	r0, r5
 800fdae:	47b8      	blx	r7
 800fdb0:	3001      	adds	r0, #1
 800fdb2:	f43f af59 	beq.w	800fc68 <_printf_float+0x98>
 800fdb6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800fdba:	4543      	cmp	r3, r8
 800fdbc:	db02      	blt.n	800fdc4 <_printf_float+0x1f4>
 800fdbe:	6823      	ldr	r3, [r4, #0]
 800fdc0:	07d8      	lsls	r0, r3, #31
 800fdc2:	d50f      	bpl.n	800fde4 <_printf_float+0x214>
 800fdc4:	9b05      	ldr	r3, [sp, #20]
 800fdc6:	465a      	mov	r2, fp
 800fdc8:	4631      	mov	r1, r6
 800fdca:	4628      	mov	r0, r5
 800fdcc:	47b8      	blx	r7
 800fdce:	3001      	adds	r0, #1
 800fdd0:	f43f af4a 	beq.w	800fc68 <_printf_float+0x98>
 800fdd4:	f04f 0900 	mov.w	r9, #0
 800fdd8:	f108 38ff 	add.w	r8, r8, #4294967295
 800fddc:	f104 0a1a 	add.w	sl, r4, #26
 800fde0:	45c8      	cmp	r8, r9
 800fde2:	dc09      	bgt.n	800fdf8 <_printf_float+0x228>
 800fde4:	6823      	ldr	r3, [r4, #0]
 800fde6:	079b      	lsls	r3, r3, #30
 800fde8:	f100 8107 	bmi.w	800fffa <_printf_float+0x42a>
 800fdec:	68e0      	ldr	r0, [r4, #12]
 800fdee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fdf0:	4298      	cmp	r0, r3
 800fdf2:	bfb8      	it	lt
 800fdf4:	4618      	movlt	r0, r3
 800fdf6:	e739      	b.n	800fc6c <_printf_float+0x9c>
 800fdf8:	2301      	movs	r3, #1
 800fdfa:	4652      	mov	r2, sl
 800fdfc:	4631      	mov	r1, r6
 800fdfe:	4628      	mov	r0, r5
 800fe00:	47b8      	blx	r7
 800fe02:	3001      	adds	r0, #1
 800fe04:	f43f af30 	beq.w	800fc68 <_printf_float+0x98>
 800fe08:	f109 0901 	add.w	r9, r9, #1
 800fe0c:	e7e8      	b.n	800fde0 <_printf_float+0x210>
 800fe0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	dc3b      	bgt.n	800fe8c <_printf_float+0x2bc>
 800fe14:	4a1c      	ldr	r2, [pc, #112]	@ (800fe88 <_printf_float+0x2b8>)
 800fe16:	2301      	movs	r3, #1
 800fe18:	4631      	mov	r1, r6
 800fe1a:	4628      	mov	r0, r5
 800fe1c:	47b8      	blx	r7
 800fe1e:	3001      	adds	r0, #1
 800fe20:	f43f af22 	beq.w	800fc68 <_printf_float+0x98>
 800fe24:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800fe28:	ea59 0303 	orrs.w	r3, r9, r3
 800fe2c:	d102      	bne.n	800fe34 <_printf_float+0x264>
 800fe2e:	6823      	ldr	r3, [r4, #0]
 800fe30:	07d9      	lsls	r1, r3, #31
 800fe32:	d5d7      	bpl.n	800fde4 <_printf_float+0x214>
 800fe34:	9b05      	ldr	r3, [sp, #20]
 800fe36:	465a      	mov	r2, fp
 800fe38:	4631      	mov	r1, r6
 800fe3a:	4628      	mov	r0, r5
 800fe3c:	47b8      	blx	r7
 800fe3e:	3001      	adds	r0, #1
 800fe40:	f43f af12 	beq.w	800fc68 <_printf_float+0x98>
 800fe44:	f04f 0a00 	mov.w	sl, #0
 800fe48:	f104 0b1a 	add.w	fp, r4, #26
 800fe4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe4e:	425b      	negs	r3, r3
 800fe50:	4553      	cmp	r3, sl
 800fe52:	dc01      	bgt.n	800fe58 <_printf_float+0x288>
 800fe54:	464b      	mov	r3, r9
 800fe56:	e794      	b.n	800fd82 <_printf_float+0x1b2>
 800fe58:	2301      	movs	r3, #1
 800fe5a:	465a      	mov	r2, fp
 800fe5c:	4631      	mov	r1, r6
 800fe5e:	4628      	mov	r0, r5
 800fe60:	47b8      	blx	r7
 800fe62:	3001      	adds	r0, #1
 800fe64:	f43f af00 	beq.w	800fc68 <_printf_float+0x98>
 800fe68:	f10a 0a01 	add.w	sl, sl, #1
 800fe6c:	e7ee      	b.n	800fe4c <_printf_float+0x27c>
 800fe6e:	bf00      	nop
 800fe70:	ffffffff 	.word	0xffffffff
 800fe74:	7fefffff 	.word	0x7fefffff
 800fe78:	080128d1 	.word	0x080128d1
 800fe7c:	080128cd 	.word	0x080128cd
 800fe80:	080128d9 	.word	0x080128d9
 800fe84:	080128d5 	.word	0x080128d5
 800fe88:	080128dd 	.word	0x080128dd
 800fe8c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fe8e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fe92:	4553      	cmp	r3, sl
 800fe94:	bfa8      	it	ge
 800fe96:	4653      	movge	r3, sl
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	4699      	mov	r9, r3
 800fe9c:	dc37      	bgt.n	800ff0e <_printf_float+0x33e>
 800fe9e:	2300      	movs	r3, #0
 800fea0:	9307      	str	r3, [sp, #28]
 800fea2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fea6:	f104 021a 	add.w	r2, r4, #26
 800feaa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800feac:	9907      	ldr	r1, [sp, #28]
 800feae:	9306      	str	r3, [sp, #24]
 800feb0:	eba3 0309 	sub.w	r3, r3, r9
 800feb4:	428b      	cmp	r3, r1
 800feb6:	dc31      	bgt.n	800ff1c <_printf_float+0x34c>
 800feb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800feba:	459a      	cmp	sl, r3
 800febc:	dc3b      	bgt.n	800ff36 <_printf_float+0x366>
 800febe:	6823      	ldr	r3, [r4, #0]
 800fec0:	07da      	lsls	r2, r3, #31
 800fec2:	d438      	bmi.n	800ff36 <_printf_float+0x366>
 800fec4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fec6:	ebaa 0903 	sub.w	r9, sl, r3
 800feca:	9b06      	ldr	r3, [sp, #24]
 800fecc:	ebaa 0303 	sub.w	r3, sl, r3
 800fed0:	4599      	cmp	r9, r3
 800fed2:	bfa8      	it	ge
 800fed4:	4699      	movge	r9, r3
 800fed6:	f1b9 0f00 	cmp.w	r9, #0
 800feda:	dc34      	bgt.n	800ff46 <_printf_float+0x376>
 800fedc:	f04f 0800 	mov.w	r8, #0
 800fee0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fee4:	f104 0b1a 	add.w	fp, r4, #26
 800fee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800feea:	ebaa 0303 	sub.w	r3, sl, r3
 800feee:	eba3 0309 	sub.w	r3, r3, r9
 800fef2:	4543      	cmp	r3, r8
 800fef4:	f77f af76 	ble.w	800fde4 <_printf_float+0x214>
 800fef8:	2301      	movs	r3, #1
 800fefa:	465a      	mov	r2, fp
 800fefc:	4631      	mov	r1, r6
 800fefe:	4628      	mov	r0, r5
 800ff00:	47b8      	blx	r7
 800ff02:	3001      	adds	r0, #1
 800ff04:	f43f aeb0 	beq.w	800fc68 <_printf_float+0x98>
 800ff08:	f108 0801 	add.w	r8, r8, #1
 800ff0c:	e7ec      	b.n	800fee8 <_printf_float+0x318>
 800ff0e:	4642      	mov	r2, r8
 800ff10:	4631      	mov	r1, r6
 800ff12:	4628      	mov	r0, r5
 800ff14:	47b8      	blx	r7
 800ff16:	3001      	adds	r0, #1
 800ff18:	d1c1      	bne.n	800fe9e <_printf_float+0x2ce>
 800ff1a:	e6a5      	b.n	800fc68 <_printf_float+0x98>
 800ff1c:	2301      	movs	r3, #1
 800ff1e:	4631      	mov	r1, r6
 800ff20:	4628      	mov	r0, r5
 800ff22:	9206      	str	r2, [sp, #24]
 800ff24:	47b8      	blx	r7
 800ff26:	3001      	adds	r0, #1
 800ff28:	f43f ae9e 	beq.w	800fc68 <_printf_float+0x98>
 800ff2c:	9b07      	ldr	r3, [sp, #28]
 800ff2e:	9a06      	ldr	r2, [sp, #24]
 800ff30:	3301      	adds	r3, #1
 800ff32:	9307      	str	r3, [sp, #28]
 800ff34:	e7b9      	b.n	800feaa <_printf_float+0x2da>
 800ff36:	9b05      	ldr	r3, [sp, #20]
 800ff38:	465a      	mov	r2, fp
 800ff3a:	4631      	mov	r1, r6
 800ff3c:	4628      	mov	r0, r5
 800ff3e:	47b8      	blx	r7
 800ff40:	3001      	adds	r0, #1
 800ff42:	d1bf      	bne.n	800fec4 <_printf_float+0x2f4>
 800ff44:	e690      	b.n	800fc68 <_printf_float+0x98>
 800ff46:	9a06      	ldr	r2, [sp, #24]
 800ff48:	464b      	mov	r3, r9
 800ff4a:	4442      	add	r2, r8
 800ff4c:	4631      	mov	r1, r6
 800ff4e:	4628      	mov	r0, r5
 800ff50:	47b8      	blx	r7
 800ff52:	3001      	adds	r0, #1
 800ff54:	d1c2      	bne.n	800fedc <_printf_float+0x30c>
 800ff56:	e687      	b.n	800fc68 <_printf_float+0x98>
 800ff58:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800ff5c:	f1b9 0f01 	cmp.w	r9, #1
 800ff60:	dc01      	bgt.n	800ff66 <_printf_float+0x396>
 800ff62:	07db      	lsls	r3, r3, #31
 800ff64:	d536      	bpl.n	800ffd4 <_printf_float+0x404>
 800ff66:	2301      	movs	r3, #1
 800ff68:	4642      	mov	r2, r8
 800ff6a:	4631      	mov	r1, r6
 800ff6c:	4628      	mov	r0, r5
 800ff6e:	47b8      	blx	r7
 800ff70:	3001      	adds	r0, #1
 800ff72:	f43f ae79 	beq.w	800fc68 <_printf_float+0x98>
 800ff76:	9b05      	ldr	r3, [sp, #20]
 800ff78:	465a      	mov	r2, fp
 800ff7a:	4631      	mov	r1, r6
 800ff7c:	4628      	mov	r0, r5
 800ff7e:	47b8      	blx	r7
 800ff80:	3001      	adds	r0, #1
 800ff82:	f43f ae71 	beq.w	800fc68 <_printf_float+0x98>
 800ff86:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800ff8a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ff8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff92:	f109 39ff 	add.w	r9, r9, #4294967295
 800ff96:	d018      	beq.n	800ffca <_printf_float+0x3fa>
 800ff98:	464b      	mov	r3, r9
 800ff9a:	f108 0201 	add.w	r2, r8, #1
 800ff9e:	4631      	mov	r1, r6
 800ffa0:	4628      	mov	r0, r5
 800ffa2:	47b8      	blx	r7
 800ffa4:	3001      	adds	r0, #1
 800ffa6:	d10c      	bne.n	800ffc2 <_printf_float+0x3f2>
 800ffa8:	e65e      	b.n	800fc68 <_printf_float+0x98>
 800ffaa:	2301      	movs	r3, #1
 800ffac:	465a      	mov	r2, fp
 800ffae:	4631      	mov	r1, r6
 800ffb0:	4628      	mov	r0, r5
 800ffb2:	47b8      	blx	r7
 800ffb4:	3001      	adds	r0, #1
 800ffb6:	f43f ae57 	beq.w	800fc68 <_printf_float+0x98>
 800ffba:	f108 0801 	add.w	r8, r8, #1
 800ffbe:	45c8      	cmp	r8, r9
 800ffc0:	dbf3      	blt.n	800ffaa <_printf_float+0x3da>
 800ffc2:	4653      	mov	r3, sl
 800ffc4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ffc8:	e6dc      	b.n	800fd84 <_printf_float+0x1b4>
 800ffca:	f04f 0800 	mov.w	r8, #0
 800ffce:	f104 0b1a 	add.w	fp, r4, #26
 800ffd2:	e7f4      	b.n	800ffbe <_printf_float+0x3ee>
 800ffd4:	2301      	movs	r3, #1
 800ffd6:	4642      	mov	r2, r8
 800ffd8:	e7e1      	b.n	800ff9e <_printf_float+0x3ce>
 800ffda:	2301      	movs	r3, #1
 800ffdc:	464a      	mov	r2, r9
 800ffde:	4631      	mov	r1, r6
 800ffe0:	4628      	mov	r0, r5
 800ffe2:	47b8      	blx	r7
 800ffe4:	3001      	adds	r0, #1
 800ffe6:	f43f ae3f 	beq.w	800fc68 <_printf_float+0x98>
 800ffea:	f108 0801 	add.w	r8, r8, #1
 800ffee:	68e3      	ldr	r3, [r4, #12]
 800fff0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fff2:	1a5b      	subs	r3, r3, r1
 800fff4:	4543      	cmp	r3, r8
 800fff6:	dcf0      	bgt.n	800ffda <_printf_float+0x40a>
 800fff8:	e6f8      	b.n	800fdec <_printf_float+0x21c>
 800fffa:	f04f 0800 	mov.w	r8, #0
 800fffe:	f104 0919 	add.w	r9, r4, #25
 8010002:	e7f4      	b.n	800ffee <_printf_float+0x41e>

08010004 <_printf_common>:
 8010004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010008:	4616      	mov	r6, r2
 801000a:	4698      	mov	r8, r3
 801000c:	688a      	ldr	r2, [r1, #8]
 801000e:	690b      	ldr	r3, [r1, #16]
 8010010:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010014:	4293      	cmp	r3, r2
 8010016:	bfb8      	it	lt
 8010018:	4613      	movlt	r3, r2
 801001a:	6033      	str	r3, [r6, #0]
 801001c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010020:	4607      	mov	r7, r0
 8010022:	460c      	mov	r4, r1
 8010024:	b10a      	cbz	r2, 801002a <_printf_common+0x26>
 8010026:	3301      	adds	r3, #1
 8010028:	6033      	str	r3, [r6, #0]
 801002a:	6823      	ldr	r3, [r4, #0]
 801002c:	0699      	lsls	r1, r3, #26
 801002e:	bf42      	ittt	mi
 8010030:	6833      	ldrmi	r3, [r6, #0]
 8010032:	3302      	addmi	r3, #2
 8010034:	6033      	strmi	r3, [r6, #0]
 8010036:	6825      	ldr	r5, [r4, #0]
 8010038:	f015 0506 	ands.w	r5, r5, #6
 801003c:	d106      	bne.n	801004c <_printf_common+0x48>
 801003e:	f104 0a19 	add.w	sl, r4, #25
 8010042:	68e3      	ldr	r3, [r4, #12]
 8010044:	6832      	ldr	r2, [r6, #0]
 8010046:	1a9b      	subs	r3, r3, r2
 8010048:	42ab      	cmp	r3, r5
 801004a:	dc26      	bgt.n	801009a <_printf_common+0x96>
 801004c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010050:	6822      	ldr	r2, [r4, #0]
 8010052:	3b00      	subs	r3, #0
 8010054:	bf18      	it	ne
 8010056:	2301      	movne	r3, #1
 8010058:	0692      	lsls	r2, r2, #26
 801005a:	d42b      	bmi.n	80100b4 <_printf_common+0xb0>
 801005c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010060:	4641      	mov	r1, r8
 8010062:	4638      	mov	r0, r7
 8010064:	47c8      	blx	r9
 8010066:	3001      	adds	r0, #1
 8010068:	d01e      	beq.n	80100a8 <_printf_common+0xa4>
 801006a:	6823      	ldr	r3, [r4, #0]
 801006c:	6922      	ldr	r2, [r4, #16]
 801006e:	f003 0306 	and.w	r3, r3, #6
 8010072:	2b04      	cmp	r3, #4
 8010074:	bf02      	ittt	eq
 8010076:	68e5      	ldreq	r5, [r4, #12]
 8010078:	6833      	ldreq	r3, [r6, #0]
 801007a:	1aed      	subeq	r5, r5, r3
 801007c:	68a3      	ldr	r3, [r4, #8]
 801007e:	bf0c      	ite	eq
 8010080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010084:	2500      	movne	r5, #0
 8010086:	4293      	cmp	r3, r2
 8010088:	bfc4      	itt	gt
 801008a:	1a9b      	subgt	r3, r3, r2
 801008c:	18ed      	addgt	r5, r5, r3
 801008e:	2600      	movs	r6, #0
 8010090:	341a      	adds	r4, #26
 8010092:	42b5      	cmp	r5, r6
 8010094:	d11a      	bne.n	80100cc <_printf_common+0xc8>
 8010096:	2000      	movs	r0, #0
 8010098:	e008      	b.n	80100ac <_printf_common+0xa8>
 801009a:	2301      	movs	r3, #1
 801009c:	4652      	mov	r2, sl
 801009e:	4641      	mov	r1, r8
 80100a0:	4638      	mov	r0, r7
 80100a2:	47c8      	blx	r9
 80100a4:	3001      	adds	r0, #1
 80100a6:	d103      	bne.n	80100b0 <_printf_common+0xac>
 80100a8:	f04f 30ff 	mov.w	r0, #4294967295
 80100ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100b0:	3501      	adds	r5, #1
 80100b2:	e7c6      	b.n	8010042 <_printf_common+0x3e>
 80100b4:	18e1      	adds	r1, r4, r3
 80100b6:	1c5a      	adds	r2, r3, #1
 80100b8:	2030      	movs	r0, #48	@ 0x30
 80100ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80100be:	4422      	add	r2, r4
 80100c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80100c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80100c8:	3302      	adds	r3, #2
 80100ca:	e7c7      	b.n	801005c <_printf_common+0x58>
 80100cc:	2301      	movs	r3, #1
 80100ce:	4622      	mov	r2, r4
 80100d0:	4641      	mov	r1, r8
 80100d2:	4638      	mov	r0, r7
 80100d4:	47c8      	blx	r9
 80100d6:	3001      	adds	r0, #1
 80100d8:	d0e6      	beq.n	80100a8 <_printf_common+0xa4>
 80100da:	3601      	adds	r6, #1
 80100dc:	e7d9      	b.n	8010092 <_printf_common+0x8e>
	...

080100e0 <_printf_i>:
 80100e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80100e4:	7e0f      	ldrb	r7, [r1, #24]
 80100e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80100e8:	2f78      	cmp	r7, #120	@ 0x78
 80100ea:	4691      	mov	r9, r2
 80100ec:	4680      	mov	r8, r0
 80100ee:	460c      	mov	r4, r1
 80100f0:	469a      	mov	sl, r3
 80100f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80100f6:	d807      	bhi.n	8010108 <_printf_i+0x28>
 80100f8:	2f62      	cmp	r7, #98	@ 0x62
 80100fa:	d80a      	bhi.n	8010112 <_printf_i+0x32>
 80100fc:	2f00      	cmp	r7, #0
 80100fe:	f000 80d1 	beq.w	80102a4 <_printf_i+0x1c4>
 8010102:	2f58      	cmp	r7, #88	@ 0x58
 8010104:	f000 80b8 	beq.w	8010278 <_printf_i+0x198>
 8010108:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801010c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010110:	e03a      	b.n	8010188 <_printf_i+0xa8>
 8010112:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010116:	2b15      	cmp	r3, #21
 8010118:	d8f6      	bhi.n	8010108 <_printf_i+0x28>
 801011a:	a101      	add	r1, pc, #4	@ (adr r1, 8010120 <_printf_i+0x40>)
 801011c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010120:	08010179 	.word	0x08010179
 8010124:	0801018d 	.word	0x0801018d
 8010128:	08010109 	.word	0x08010109
 801012c:	08010109 	.word	0x08010109
 8010130:	08010109 	.word	0x08010109
 8010134:	08010109 	.word	0x08010109
 8010138:	0801018d 	.word	0x0801018d
 801013c:	08010109 	.word	0x08010109
 8010140:	08010109 	.word	0x08010109
 8010144:	08010109 	.word	0x08010109
 8010148:	08010109 	.word	0x08010109
 801014c:	0801028b 	.word	0x0801028b
 8010150:	080101b7 	.word	0x080101b7
 8010154:	08010245 	.word	0x08010245
 8010158:	08010109 	.word	0x08010109
 801015c:	08010109 	.word	0x08010109
 8010160:	080102ad 	.word	0x080102ad
 8010164:	08010109 	.word	0x08010109
 8010168:	080101b7 	.word	0x080101b7
 801016c:	08010109 	.word	0x08010109
 8010170:	08010109 	.word	0x08010109
 8010174:	0801024d 	.word	0x0801024d
 8010178:	6833      	ldr	r3, [r6, #0]
 801017a:	1d1a      	adds	r2, r3, #4
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	6032      	str	r2, [r6, #0]
 8010180:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010184:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010188:	2301      	movs	r3, #1
 801018a:	e09c      	b.n	80102c6 <_printf_i+0x1e6>
 801018c:	6833      	ldr	r3, [r6, #0]
 801018e:	6820      	ldr	r0, [r4, #0]
 8010190:	1d19      	adds	r1, r3, #4
 8010192:	6031      	str	r1, [r6, #0]
 8010194:	0606      	lsls	r6, r0, #24
 8010196:	d501      	bpl.n	801019c <_printf_i+0xbc>
 8010198:	681d      	ldr	r5, [r3, #0]
 801019a:	e003      	b.n	80101a4 <_printf_i+0xc4>
 801019c:	0645      	lsls	r5, r0, #25
 801019e:	d5fb      	bpl.n	8010198 <_printf_i+0xb8>
 80101a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80101a4:	2d00      	cmp	r5, #0
 80101a6:	da03      	bge.n	80101b0 <_printf_i+0xd0>
 80101a8:	232d      	movs	r3, #45	@ 0x2d
 80101aa:	426d      	negs	r5, r5
 80101ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80101b0:	4858      	ldr	r0, [pc, #352]	@ (8010314 <_printf_i+0x234>)
 80101b2:	230a      	movs	r3, #10
 80101b4:	e011      	b.n	80101da <_printf_i+0xfa>
 80101b6:	6821      	ldr	r1, [r4, #0]
 80101b8:	6833      	ldr	r3, [r6, #0]
 80101ba:	0608      	lsls	r0, r1, #24
 80101bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80101c0:	d402      	bmi.n	80101c8 <_printf_i+0xe8>
 80101c2:	0649      	lsls	r1, r1, #25
 80101c4:	bf48      	it	mi
 80101c6:	b2ad      	uxthmi	r5, r5
 80101c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80101ca:	4852      	ldr	r0, [pc, #328]	@ (8010314 <_printf_i+0x234>)
 80101cc:	6033      	str	r3, [r6, #0]
 80101ce:	bf14      	ite	ne
 80101d0:	230a      	movne	r3, #10
 80101d2:	2308      	moveq	r3, #8
 80101d4:	2100      	movs	r1, #0
 80101d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80101da:	6866      	ldr	r6, [r4, #4]
 80101dc:	60a6      	str	r6, [r4, #8]
 80101de:	2e00      	cmp	r6, #0
 80101e0:	db05      	blt.n	80101ee <_printf_i+0x10e>
 80101e2:	6821      	ldr	r1, [r4, #0]
 80101e4:	432e      	orrs	r6, r5
 80101e6:	f021 0104 	bic.w	r1, r1, #4
 80101ea:	6021      	str	r1, [r4, #0]
 80101ec:	d04b      	beq.n	8010286 <_printf_i+0x1a6>
 80101ee:	4616      	mov	r6, r2
 80101f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80101f4:	fb03 5711 	mls	r7, r3, r1, r5
 80101f8:	5dc7      	ldrb	r7, [r0, r7]
 80101fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80101fe:	462f      	mov	r7, r5
 8010200:	42bb      	cmp	r3, r7
 8010202:	460d      	mov	r5, r1
 8010204:	d9f4      	bls.n	80101f0 <_printf_i+0x110>
 8010206:	2b08      	cmp	r3, #8
 8010208:	d10b      	bne.n	8010222 <_printf_i+0x142>
 801020a:	6823      	ldr	r3, [r4, #0]
 801020c:	07df      	lsls	r7, r3, #31
 801020e:	d508      	bpl.n	8010222 <_printf_i+0x142>
 8010210:	6923      	ldr	r3, [r4, #16]
 8010212:	6861      	ldr	r1, [r4, #4]
 8010214:	4299      	cmp	r1, r3
 8010216:	bfde      	ittt	le
 8010218:	2330      	movle	r3, #48	@ 0x30
 801021a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801021e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010222:	1b92      	subs	r2, r2, r6
 8010224:	6122      	str	r2, [r4, #16]
 8010226:	f8cd a000 	str.w	sl, [sp]
 801022a:	464b      	mov	r3, r9
 801022c:	aa03      	add	r2, sp, #12
 801022e:	4621      	mov	r1, r4
 8010230:	4640      	mov	r0, r8
 8010232:	f7ff fee7 	bl	8010004 <_printf_common>
 8010236:	3001      	adds	r0, #1
 8010238:	d14a      	bne.n	80102d0 <_printf_i+0x1f0>
 801023a:	f04f 30ff 	mov.w	r0, #4294967295
 801023e:	b004      	add	sp, #16
 8010240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010244:	6823      	ldr	r3, [r4, #0]
 8010246:	f043 0320 	orr.w	r3, r3, #32
 801024a:	6023      	str	r3, [r4, #0]
 801024c:	4832      	ldr	r0, [pc, #200]	@ (8010318 <_printf_i+0x238>)
 801024e:	2778      	movs	r7, #120	@ 0x78
 8010250:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010254:	6823      	ldr	r3, [r4, #0]
 8010256:	6831      	ldr	r1, [r6, #0]
 8010258:	061f      	lsls	r7, r3, #24
 801025a:	f851 5b04 	ldr.w	r5, [r1], #4
 801025e:	d402      	bmi.n	8010266 <_printf_i+0x186>
 8010260:	065f      	lsls	r7, r3, #25
 8010262:	bf48      	it	mi
 8010264:	b2ad      	uxthmi	r5, r5
 8010266:	6031      	str	r1, [r6, #0]
 8010268:	07d9      	lsls	r1, r3, #31
 801026a:	bf44      	itt	mi
 801026c:	f043 0320 	orrmi.w	r3, r3, #32
 8010270:	6023      	strmi	r3, [r4, #0]
 8010272:	b11d      	cbz	r5, 801027c <_printf_i+0x19c>
 8010274:	2310      	movs	r3, #16
 8010276:	e7ad      	b.n	80101d4 <_printf_i+0xf4>
 8010278:	4826      	ldr	r0, [pc, #152]	@ (8010314 <_printf_i+0x234>)
 801027a:	e7e9      	b.n	8010250 <_printf_i+0x170>
 801027c:	6823      	ldr	r3, [r4, #0]
 801027e:	f023 0320 	bic.w	r3, r3, #32
 8010282:	6023      	str	r3, [r4, #0]
 8010284:	e7f6      	b.n	8010274 <_printf_i+0x194>
 8010286:	4616      	mov	r6, r2
 8010288:	e7bd      	b.n	8010206 <_printf_i+0x126>
 801028a:	6833      	ldr	r3, [r6, #0]
 801028c:	6825      	ldr	r5, [r4, #0]
 801028e:	6961      	ldr	r1, [r4, #20]
 8010290:	1d18      	adds	r0, r3, #4
 8010292:	6030      	str	r0, [r6, #0]
 8010294:	062e      	lsls	r6, r5, #24
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	d501      	bpl.n	801029e <_printf_i+0x1be>
 801029a:	6019      	str	r1, [r3, #0]
 801029c:	e002      	b.n	80102a4 <_printf_i+0x1c4>
 801029e:	0668      	lsls	r0, r5, #25
 80102a0:	d5fb      	bpl.n	801029a <_printf_i+0x1ba>
 80102a2:	8019      	strh	r1, [r3, #0]
 80102a4:	2300      	movs	r3, #0
 80102a6:	6123      	str	r3, [r4, #16]
 80102a8:	4616      	mov	r6, r2
 80102aa:	e7bc      	b.n	8010226 <_printf_i+0x146>
 80102ac:	6833      	ldr	r3, [r6, #0]
 80102ae:	1d1a      	adds	r2, r3, #4
 80102b0:	6032      	str	r2, [r6, #0]
 80102b2:	681e      	ldr	r6, [r3, #0]
 80102b4:	6862      	ldr	r2, [r4, #4]
 80102b6:	2100      	movs	r1, #0
 80102b8:	4630      	mov	r0, r6
 80102ba:	f7f0 f821 	bl	8000300 <memchr>
 80102be:	b108      	cbz	r0, 80102c4 <_printf_i+0x1e4>
 80102c0:	1b80      	subs	r0, r0, r6
 80102c2:	6060      	str	r0, [r4, #4]
 80102c4:	6863      	ldr	r3, [r4, #4]
 80102c6:	6123      	str	r3, [r4, #16]
 80102c8:	2300      	movs	r3, #0
 80102ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80102ce:	e7aa      	b.n	8010226 <_printf_i+0x146>
 80102d0:	6923      	ldr	r3, [r4, #16]
 80102d2:	4632      	mov	r2, r6
 80102d4:	4649      	mov	r1, r9
 80102d6:	4640      	mov	r0, r8
 80102d8:	47d0      	blx	sl
 80102da:	3001      	adds	r0, #1
 80102dc:	d0ad      	beq.n	801023a <_printf_i+0x15a>
 80102de:	6823      	ldr	r3, [r4, #0]
 80102e0:	079b      	lsls	r3, r3, #30
 80102e2:	d413      	bmi.n	801030c <_printf_i+0x22c>
 80102e4:	68e0      	ldr	r0, [r4, #12]
 80102e6:	9b03      	ldr	r3, [sp, #12]
 80102e8:	4298      	cmp	r0, r3
 80102ea:	bfb8      	it	lt
 80102ec:	4618      	movlt	r0, r3
 80102ee:	e7a6      	b.n	801023e <_printf_i+0x15e>
 80102f0:	2301      	movs	r3, #1
 80102f2:	4632      	mov	r2, r6
 80102f4:	4649      	mov	r1, r9
 80102f6:	4640      	mov	r0, r8
 80102f8:	47d0      	blx	sl
 80102fa:	3001      	adds	r0, #1
 80102fc:	d09d      	beq.n	801023a <_printf_i+0x15a>
 80102fe:	3501      	adds	r5, #1
 8010300:	68e3      	ldr	r3, [r4, #12]
 8010302:	9903      	ldr	r1, [sp, #12]
 8010304:	1a5b      	subs	r3, r3, r1
 8010306:	42ab      	cmp	r3, r5
 8010308:	dcf2      	bgt.n	80102f0 <_printf_i+0x210>
 801030a:	e7eb      	b.n	80102e4 <_printf_i+0x204>
 801030c:	2500      	movs	r5, #0
 801030e:	f104 0619 	add.w	r6, r4, #25
 8010312:	e7f5      	b.n	8010300 <_printf_i+0x220>
 8010314:	080128df 	.word	0x080128df
 8010318:	080128f0 	.word	0x080128f0

0801031c <std>:
 801031c:	2300      	movs	r3, #0
 801031e:	b510      	push	{r4, lr}
 8010320:	4604      	mov	r4, r0
 8010322:	e9c0 3300 	strd	r3, r3, [r0]
 8010326:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801032a:	6083      	str	r3, [r0, #8]
 801032c:	8181      	strh	r1, [r0, #12]
 801032e:	6643      	str	r3, [r0, #100]	@ 0x64
 8010330:	81c2      	strh	r2, [r0, #14]
 8010332:	6183      	str	r3, [r0, #24]
 8010334:	4619      	mov	r1, r3
 8010336:	2208      	movs	r2, #8
 8010338:	305c      	adds	r0, #92	@ 0x5c
 801033a:	f000 f9bd 	bl	80106b8 <memset>
 801033e:	4b0d      	ldr	r3, [pc, #52]	@ (8010374 <std+0x58>)
 8010340:	6263      	str	r3, [r4, #36]	@ 0x24
 8010342:	4b0d      	ldr	r3, [pc, #52]	@ (8010378 <std+0x5c>)
 8010344:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010346:	4b0d      	ldr	r3, [pc, #52]	@ (801037c <std+0x60>)
 8010348:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801034a:	4b0d      	ldr	r3, [pc, #52]	@ (8010380 <std+0x64>)
 801034c:	6323      	str	r3, [r4, #48]	@ 0x30
 801034e:	4b0d      	ldr	r3, [pc, #52]	@ (8010384 <std+0x68>)
 8010350:	6224      	str	r4, [r4, #32]
 8010352:	429c      	cmp	r4, r3
 8010354:	d006      	beq.n	8010364 <std+0x48>
 8010356:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801035a:	4294      	cmp	r4, r2
 801035c:	d002      	beq.n	8010364 <std+0x48>
 801035e:	33d0      	adds	r3, #208	@ 0xd0
 8010360:	429c      	cmp	r4, r3
 8010362:	d105      	bne.n	8010370 <std+0x54>
 8010364:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801036c:	f000 ba8c 	b.w	8010888 <__retarget_lock_init_recursive>
 8010370:	bd10      	pop	{r4, pc}
 8010372:	bf00      	nop
 8010374:	08010509 	.word	0x08010509
 8010378:	0801052b 	.word	0x0801052b
 801037c:	08010563 	.word	0x08010563
 8010380:	08010587 	.word	0x08010587
 8010384:	240006b8 	.word	0x240006b8

08010388 <stdio_exit_handler>:
 8010388:	4a02      	ldr	r2, [pc, #8]	@ (8010394 <stdio_exit_handler+0xc>)
 801038a:	4903      	ldr	r1, [pc, #12]	@ (8010398 <stdio_exit_handler+0x10>)
 801038c:	4803      	ldr	r0, [pc, #12]	@ (801039c <stdio_exit_handler+0x14>)
 801038e:	f000 b869 	b.w	8010464 <_fwalk_sglue>
 8010392:	bf00      	nop
 8010394:	2400002c 	.word	0x2400002c
 8010398:	080123e5 	.word	0x080123e5
 801039c:	2400003c 	.word	0x2400003c

080103a0 <cleanup_stdio>:
 80103a0:	6841      	ldr	r1, [r0, #4]
 80103a2:	4b0c      	ldr	r3, [pc, #48]	@ (80103d4 <cleanup_stdio+0x34>)
 80103a4:	4299      	cmp	r1, r3
 80103a6:	b510      	push	{r4, lr}
 80103a8:	4604      	mov	r4, r0
 80103aa:	d001      	beq.n	80103b0 <cleanup_stdio+0x10>
 80103ac:	f002 f81a 	bl	80123e4 <_fflush_r>
 80103b0:	68a1      	ldr	r1, [r4, #8]
 80103b2:	4b09      	ldr	r3, [pc, #36]	@ (80103d8 <cleanup_stdio+0x38>)
 80103b4:	4299      	cmp	r1, r3
 80103b6:	d002      	beq.n	80103be <cleanup_stdio+0x1e>
 80103b8:	4620      	mov	r0, r4
 80103ba:	f002 f813 	bl	80123e4 <_fflush_r>
 80103be:	68e1      	ldr	r1, [r4, #12]
 80103c0:	4b06      	ldr	r3, [pc, #24]	@ (80103dc <cleanup_stdio+0x3c>)
 80103c2:	4299      	cmp	r1, r3
 80103c4:	d004      	beq.n	80103d0 <cleanup_stdio+0x30>
 80103c6:	4620      	mov	r0, r4
 80103c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103cc:	f002 b80a 	b.w	80123e4 <_fflush_r>
 80103d0:	bd10      	pop	{r4, pc}
 80103d2:	bf00      	nop
 80103d4:	240006b8 	.word	0x240006b8
 80103d8:	24000720 	.word	0x24000720
 80103dc:	24000788 	.word	0x24000788

080103e0 <global_stdio_init.part.0>:
 80103e0:	b510      	push	{r4, lr}
 80103e2:	4b0b      	ldr	r3, [pc, #44]	@ (8010410 <global_stdio_init.part.0+0x30>)
 80103e4:	4c0b      	ldr	r4, [pc, #44]	@ (8010414 <global_stdio_init.part.0+0x34>)
 80103e6:	4a0c      	ldr	r2, [pc, #48]	@ (8010418 <global_stdio_init.part.0+0x38>)
 80103e8:	601a      	str	r2, [r3, #0]
 80103ea:	4620      	mov	r0, r4
 80103ec:	2200      	movs	r2, #0
 80103ee:	2104      	movs	r1, #4
 80103f0:	f7ff ff94 	bl	801031c <std>
 80103f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80103f8:	2201      	movs	r2, #1
 80103fa:	2109      	movs	r1, #9
 80103fc:	f7ff ff8e 	bl	801031c <std>
 8010400:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010404:	2202      	movs	r2, #2
 8010406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801040a:	2112      	movs	r1, #18
 801040c:	f7ff bf86 	b.w	801031c <std>
 8010410:	240007f0 	.word	0x240007f0
 8010414:	240006b8 	.word	0x240006b8
 8010418:	08010389 	.word	0x08010389

0801041c <__sfp_lock_acquire>:
 801041c:	4801      	ldr	r0, [pc, #4]	@ (8010424 <__sfp_lock_acquire+0x8>)
 801041e:	f000 ba34 	b.w	801088a <__retarget_lock_acquire_recursive>
 8010422:	bf00      	nop
 8010424:	240007f9 	.word	0x240007f9

08010428 <__sfp_lock_release>:
 8010428:	4801      	ldr	r0, [pc, #4]	@ (8010430 <__sfp_lock_release+0x8>)
 801042a:	f000 ba2f 	b.w	801088c <__retarget_lock_release_recursive>
 801042e:	bf00      	nop
 8010430:	240007f9 	.word	0x240007f9

08010434 <__sinit>:
 8010434:	b510      	push	{r4, lr}
 8010436:	4604      	mov	r4, r0
 8010438:	f7ff fff0 	bl	801041c <__sfp_lock_acquire>
 801043c:	6a23      	ldr	r3, [r4, #32]
 801043e:	b11b      	cbz	r3, 8010448 <__sinit+0x14>
 8010440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010444:	f7ff bff0 	b.w	8010428 <__sfp_lock_release>
 8010448:	4b04      	ldr	r3, [pc, #16]	@ (801045c <__sinit+0x28>)
 801044a:	6223      	str	r3, [r4, #32]
 801044c:	4b04      	ldr	r3, [pc, #16]	@ (8010460 <__sinit+0x2c>)
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d1f5      	bne.n	8010440 <__sinit+0xc>
 8010454:	f7ff ffc4 	bl	80103e0 <global_stdio_init.part.0>
 8010458:	e7f2      	b.n	8010440 <__sinit+0xc>
 801045a:	bf00      	nop
 801045c:	080103a1 	.word	0x080103a1
 8010460:	240007f0 	.word	0x240007f0

08010464 <_fwalk_sglue>:
 8010464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010468:	4607      	mov	r7, r0
 801046a:	4688      	mov	r8, r1
 801046c:	4614      	mov	r4, r2
 801046e:	2600      	movs	r6, #0
 8010470:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010474:	f1b9 0901 	subs.w	r9, r9, #1
 8010478:	d505      	bpl.n	8010486 <_fwalk_sglue+0x22>
 801047a:	6824      	ldr	r4, [r4, #0]
 801047c:	2c00      	cmp	r4, #0
 801047e:	d1f7      	bne.n	8010470 <_fwalk_sglue+0xc>
 8010480:	4630      	mov	r0, r6
 8010482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010486:	89ab      	ldrh	r3, [r5, #12]
 8010488:	2b01      	cmp	r3, #1
 801048a:	d907      	bls.n	801049c <_fwalk_sglue+0x38>
 801048c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010490:	3301      	adds	r3, #1
 8010492:	d003      	beq.n	801049c <_fwalk_sglue+0x38>
 8010494:	4629      	mov	r1, r5
 8010496:	4638      	mov	r0, r7
 8010498:	47c0      	blx	r8
 801049a:	4306      	orrs	r6, r0
 801049c:	3568      	adds	r5, #104	@ 0x68
 801049e:	e7e9      	b.n	8010474 <_fwalk_sglue+0x10>

080104a0 <iprintf>:
 80104a0:	b40f      	push	{r0, r1, r2, r3}
 80104a2:	b507      	push	{r0, r1, r2, lr}
 80104a4:	4906      	ldr	r1, [pc, #24]	@ (80104c0 <iprintf+0x20>)
 80104a6:	ab04      	add	r3, sp, #16
 80104a8:	6808      	ldr	r0, [r1, #0]
 80104aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80104ae:	6881      	ldr	r1, [r0, #8]
 80104b0:	9301      	str	r3, [sp, #4]
 80104b2:	f001 fdfb 	bl	80120ac <_vfiprintf_r>
 80104b6:	b003      	add	sp, #12
 80104b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80104bc:	b004      	add	sp, #16
 80104be:	4770      	bx	lr
 80104c0:	24000038 	.word	0x24000038

080104c4 <siprintf>:
 80104c4:	b40e      	push	{r1, r2, r3}
 80104c6:	b510      	push	{r4, lr}
 80104c8:	b09d      	sub	sp, #116	@ 0x74
 80104ca:	ab1f      	add	r3, sp, #124	@ 0x7c
 80104cc:	9002      	str	r0, [sp, #8]
 80104ce:	9006      	str	r0, [sp, #24]
 80104d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80104d4:	480a      	ldr	r0, [pc, #40]	@ (8010500 <siprintf+0x3c>)
 80104d6:	9107      	str	r1, [sp, #28]
 80104d8:	9104      	str	r1, [sp, #16]
 80104da:	490a      	ldr	r1, [pc, #40]	@ (8010504 <siprintf+0x40>)
 80104dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80104e0:	9105      	str	r1, [sp, #20]
 80104e2:	2400      	movs	r4, #0
 80104e4:	a902      	add	r1, sp, #8
 80104e6:	6800      	ldr	r0, [r0, #0]
 80104e8:	9301      	str	r3, [sp, #4]
 80104ea:	941b      	str	r4, [sp, #108]	@ 0x6c
 80104ec:	f001 fcb8 	bl	8011e60 <_svfiprintf_r>
 80104f0:	9b02      	ldr	r3, [sp, #8]
 80104f2:	701c      	strb	r4, [r3, #0]
 80104f4:	b01d      	add	sp, #116	@ 0x74
 80104f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104fa:	b003      	add	sp, #12
 80104fc:	4770      	bx	lr
 80104fe:	bf00      	nop
 8010500:	24000038 	.word	0x24000038
 8010504:	ffff0208 	.word	0xffff0208

08010508 <__sread>:
 8010508:	b510      	push	{r4, lr}
 801050a:	460c      	mov	r4, r1
 801050c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010510:	f000 f96c 	bl	80107ec <_read_r>
 8010514:	2800      	cmp	r0, #0
 8010516:	bfab      	itete	ge
 8010518:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801051a:	89a3      	ldrhlt	r3, [r4, #12]
 801051c:	181b      	addge	r3, r3, r0
 801051e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010522:	bfac      	ite	ge
 8010524:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010526:	81a3      	strhlt	r3, [r4, #12]
 8010528:	bd10      	pop	{r4, pc}

0801052a <__swrite>:
 801052a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801052e:	461f      	mov	r7, r3
 8010530:	898b      	ldrh	r3, [r1, #12]
 8010532:	05db      	lsls	r3, r3, #23
 8010534:	4605      	mov	r5, r0
 8010536:	460c      	mov	r4, r1
 8010538:	4616      	mov	r6, r2
 801053a:	d505      	bpl.n	8010548 <__swrite+0x1e>
 801053c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010540:	2302      	movs	r3, #2
 8010542:	2200      	movs	r2, #0
 8010544:	f000 f940 	bl	80107c8 <_lseek_r>
 8010548:	89a3      	ldrh	r3, [r4, #12]
 801054a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801054e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010552:	81a3      	strh	r3, [r4, #12]
 8010554:	4632      	mov	r2, r6
 8010556:	463b      	mov	r3, r7
 8010558:	4628      	mov	r0, r5
 801055a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801055e:	f000 b957 	b.w	8010810 <_write_r>

08010562 <__sseek>:
 8010562:	b510      	push	{r4, lr}
 8010564:	460c      	mov	r4, r1
 8010566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801056a:	f000 f92d 	bl	80107c8 <_lseek_r>
 801056e:	1c43      	adds	r3, r0, #1
 8010570:	89a3      	ldrh	r3, [r4, #12]
 8010572:	bf15      	itete	ne
 8010574:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010576:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801057a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801057e:	81a3      	strheq	r3, [r4, #12]
 8010580:	bf18      	it	ne
 8010582:	81a3      	strhne	r3, [r4, #12]
 8010584:	bd10      	pop	{r4, pc}

08010586 <__sclose>:
 8010586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801058a:	f000 b90d 	b.w	80107a8 <_close_r>

0801058e <__swbuf_r>:
 801058e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010590:	460e      	mov	r6, r1
 8010592:	4614      	mov	r4, r2
 8010594:	4605      	mov	r5, r0
 8010596:	b118      	cbz	r0, 80105a0 <__swbuf_r+0x12>
 8010598:	6a03      	ldr	r3, [r0, #32]
 801059a:	b90b      	cbnz	r3, 80105a0 <__swbuf_r+0x12>
 801059c:	f7ff ff4a 	bl	8010434 <__sinit>
 80105a0:	69a3      	ldr	r3, [r4, #24]
 80105a2:	60a3      	str	r3, [r4, #8]
 80105a4:	89a3      	ldrh	r3, [r4, #12]
 80105a6:	071a      	lsls	r2, r3, #28
 80105a8:	d501      	bpl.n	80105ae <__swbuf_r+0x20>
 80105aa:	6923      	ldr	r3, [r4, #16]
 80105ac:	b943      	cbnz	r3, 80105c0 <__swbuf_r+0x32>
 80105ae:	4621      	mov	r1, r4
 80105b0:	4628      	mov	r0, r5
 80105b2:	f000 f82b 	bl	801060c <__swsetup_r>
 80105b6:	b118      	cbz	r0, 80105c0 <__swbuf_r+0x32>
 80105b8:	f04f 37ff 	mov.w	r7, #4294967295
 80105bc:	4638      	mov	r0, r7
 80105be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80105c0:	6823      	ldr	r3, [r4, #0]
 80105c2:	6922      	ldr	r2, [r4, #16]
 80105c4:	1a98      	subs	r0, r3, r2
 80105c6:	6963      	ldr	r3, [r4, #20]
 80105c8:	b2f6      	uxtb	r6, r6
 80105ca:	4283      	cmp	r3, r0
 80105cc:	4637      	mov	r7, r6
 80105ce:	dc05      	bgt.n	80105dc <__swbuf_r+0x4e>
 80105d0:	4621      	mov	r1, r4
 80105d2:	4628      	mov	r0, r5
 80105d4:	f001 ff06 	bl	80123e4 <_fflush_r>
 80105d8:	2800      	cmp	r0, #0
 80105da:	d1ed      	bne.n	80105b8 <__swbuf_r+0x2a>
 80105dc:	68a3      	ldr	r3, [r4, #8]
 80105de:	3b01      	subs	r3, #1
 80105e0:	60a3      	str	r3, [r4, #8]
 80105e2:	6823      	ldr	r3, [r4, #0]
 80105e4:	1c5a      	adds	r2, r3, #1
 80105e6:	6022      	str	r2, [r4, #0]
 80105e8:	701e      	strb	r6, [r3, #0]
 80105ea:	6962      	ldr	r2, [r4, #20]
 80105ec:	1c43      	adds	r3, r0, #1
 80105ee:	429a      	cmp	r2, r3
 80105f0:	d004      	beq.n	80105fc <__swbuf_r+0x6e>
 80105f2:	89a3      	ldrh	r3, [r4, #12]
 80105f4:	07db      	lsls	r3, r3, #31
 80105f6:	d5e1      	bpl.n	80105bc <__swbuf_r+0x2e>
 80105f8:	2e0a      	cmp	r6, #10
 80105fa:	d1df      	bne.n	80105bc <__swbuf_r+0x2e>
 80105fc:	4621      	mov	r1, r4
 80105fe:	4628      	mov	r0, r5
 8010600:	f001 fef0 	bl	80123e4 <_fflush_r>
 8010604:	2800      	cmp	r0, #0
 8010606:	d0d9      	beq.n	80105bc <__swbuf_r+0x2e>
 8010608:	e7d6      	b.n	80105b8 <__swbuf_r+0x2a>
	...

0801060c <__swsetup_r>:
 801060c:	b538      	push	{r3, r4, r5, lr}
 801060e:	4b29      	ldr	r3, [pc, #164]	@ (80106b4 <__swsetup_r+0xa8>)
 8010610:	4605      	mov	r5, r0
 8010612:	6818      	ldr	r0, [r3, #0]
 8010614:	460c      	mov	r4, r1
 8010616:	b118      	cbz	r0, 8010620 <__swsetup_r+0x14>
 8010618:	6a03      	ldr	r3, [r0, #32]
 801061a:	b90b      	cbnz	r3, 8010620 <__swsetup_r+0x14>
 801061c:	f7ff ff0a 	bl	8010434 <__sinit>
 8010620:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010624:	0719      	lsls	r1, r3, #28
 8010626:	d422      	bmi.n	801066e <__swsetup_r+0x62>
 8010628:	06da      	lsls	r2, r3, #27
 801062a:	d407      	bmi.n	801063c <__swsetup_r+0x30>
 801062c:	2209      	movs	r2, #9
 801062e:	602a      	str	r2, [r5, #0]
 8010630:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010634:	81a3      	strh	r3, [r4, #12]
 8010636:	f04f 30ff 	mov.w	r0, #4294967295
 801063a:	e033      	b.n	80106a4 <__swsetup_r+0x98>
 801063c:	0758      	lsls	r0, r3, #29
 801063e:	d512      	bpl.n	8010666 <__swsetup_r+0x5a>
 8010640:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010642:	b141      	cbz	r1, 8010656 <__swsetup_r+0x4a>
 8010644:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010648:	4299      	cmp	r1, r3
 801064a:	d002      	beq.n	8010652 <__swsetup_r+0x46>
 801064c:	4628      	mov	r0, r5
 801064e:	f000 ff31 	bl	80114b4 <_free_r>
 8010652:	2300      	movs	r3, #0
 8010654:	6363      	str	r3, [r4, #52]	@ 0x34
 8010656:	89a3      	ldrh	r3, [r4, #12]
 8010658:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801065c:	81a3      	strh	r3, [r4, #12]
 801065e:	2300      	movs	r3, #0
 8010660:	6063      	str	r3, [r4, #4]
 8010662:	6923      	ldr	r3, [r4, #16]
 8010664:	6023      	str	r3, [r4, #0]
 8010666:	89a3      	ldrh	r3, [r4, #12]
 8010668:	f043 0308 	orr.w	r3, r3, #8
 801066c:	81a3      	strh	r3, [r4, #12]
 801066e:	6923      	ldr	r3, [r4, #16]
 8010670:	b94b      	cbnz	r3, 8010686 <__swsetup_r+0x7a>
 8010672:	89a3      	ldrh	r3, [r4, #12]
 8010674:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010678:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801067c:	d003      	beq.n	8010686 <__swsetup_r+0x7a>
 801067e:	4621      	mov	r1, r4
 8010680:	4628      	mov	r0, r5
 8010682:	f001 ff0f 	bl	80124a4 <__smakebuf_r>
 8010686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801068a:	f013 0201 	ands.w	r2, r3, #1
 801068e:	d00a      	beq.n	80106a6 <__swsetup_r+0x9a>
 8010690:	2200      	movs	r2, #0
 8010692:	60a2      	str	r2, [r4, #8]
 8010694:	6962      	ldr	r2, [r4, #20]
 8010696:	4252      	negs	r2, r2
 8010698:	61a2      	str	r2, [r4, #24]
 801069a:	6922      	ldr	r2, [r4, #16]
 801069c:	b942      	cbnz	r2, 80106b0 <__swsetup_r+0xa4>
 801069e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80106a2:	d1c5      	bne.n	8010630 <__swsetup_r+0x24>
 80106a4:	bd38      	pop	{r3, r4, r5, pc}
 80106a6:	0799      	lsls	r1, r3, #30
 80106a8:	bf58      	it	pl
 80106aa:	6962      	ldrpl	r2, [r4, #20]
 80106ac:	60a2      	str	r2, [r4, #8]
 80106ae:	e7f4      	b.n	801069a <__swsetup_r+0x8e>
 80106b0:	2000      	movs	r0, #0
 80106b2:	e7f7      	b.n	80106a4 <__swsetup_r+0x98>
 80106b4:	24000038 	.word	0x24000038

080106b8 <memset>:
 80106b8:	4402      	add	r2, r0
 80106ba:	4603      	mov	r3, r0
 80106bc:	4293      	cmp	r3, r2
 80106be:	d100      	bne.n	80106c2 <memset+0xa>
 80106c0:	4770      	bx	lr
 80106c2:	f803 1b01 	strb.w	r1, [r3], #1
 80106c6:	e7f9      	b.n	80106bc <memset+0x4>

080106c8 <strcat>:
 80106c8:	b510      	push	{r4, lr}
 80106ca:	4602      	mov	r2, r0
 80106cc:	7814      	ldrb	r4, [r2, #0]
 80106ce:	4613      	mov	r3, r2
 80106d0:	3201      	adds	r2, #1
 80106d2:	2c00      	cmp	r4, #0
 80106d4:	d1fa      	bne.n	80106cc <strcat+0x4>
 80106d6:	3b01      	subs	r3, #1
 80106d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80106dc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80106e0:	2a00      	cmp	r2, #0
 80106e2:	d1f9      	bne.n	80106d8 <strcat+0x10>
 80106e4:	bd10      	pop	{r4, pc}
	...

080106e8 <strtok>:
 80106e8:	4b16      	ldr	r3, [pc, #88]	@ (8010744 <strtok+0x5c>)
 80106ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106ee:	681f      	ldr	r7, [r3, #0]
 80106f0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80106f2:	4605      	mov	r5, r0
 80106f4:	460e      	mov	r6, r1
 80106f6:	b9ec      	cbnz	r4, 8010734 <strtok+0x4c>
 80106f8:	2050      	movs	r0, #80	@ 0x50
 80106fa:	f000 ff25 	bl	8011548 <malloc>
 80106fe:	4602      	mov	r2, r0
 8010700:	6478      	str	r0, [r7, #68]	@ 0x44
 8010702:	b920      	cbnz	r0, 801070e <strtok+0x26>
 8010704:	4b10      	ldr	r3, [pc, #64]	@ (8010748 <strtok+0x60>)
 8010706:	4811      	ldr	r0, [pc, #68]	@ (801074c <strtok+0x64>)
 8010708:	215b      	movs	r1, #91	@ 0x5b
 801070a:	f000 f8cf 	bl	80108ac <__assert_func>
 801070e:	e9c0 4400 	strd	r4, r4, [r0]
 8010712:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8010716:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801071a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801071e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8010722:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8010726:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 801072a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801072e:	6184      	str	r4, [r0, #24]
 8010730:	7704      	strb	r4, [r0, #28]
 8010732:	6244      	str	r4, [r0, #36]	@ 0x24
 8010734:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010736:	4631      	mov	r1, r6
 8010738:	4628      	mov	r0, r5
 801073a:	2301      	movs	r3, #1
 801073c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010740:	f000 b806 	b.w	8010750 <__strtok_r>
 8010744:	24000038 	.word	0x24000038
 8010748:	08012901 	.word	0x08012901
 801074c:	08012918 	.word	0x08012918

08010750 <__strtok_r>:
 8010750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010752:	4604      	mov	r4, r0
 8010754:	b908      	cbnz	r0, 801075a <__strtok_r+0xa>
 8010756:	6814      	ldr	r4, [r2, #0]
 8010758:	b144      	cbz	r4, 801076c <__strtok_r+0x1c>
 801075a:	4620      	mov	r0, r4
 801075c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8010760:	460f      	mov	r7, r1
 8010762:	f817 6b01 	ldrb.w	r6, [r7], #1
 8010766:	b91e      	cbnz	r6, 8010770 <__strtok_r+0x20>
 8010768:	b965      	cbnz	r5, 8010784 <__strtok_r+0x34>
 801076a:	6015      	str	r5, [r2, #0]
 801076c:	2000      	movs	r0, #0
 801076e:	e005      	b.n	801077c <__strtok_r+0x2c>
 8010770:	42b5      	cmp	r5, r6
 8010772:	d1f6      	bne.n	8010762 <__strtok_r+0x12>
 8010774:	2b00      	cmp	r3, #0
 8010776:	d1f0      	bne.n	801075a <__strtok_r+0xa>
 8010778:	6014      	str	r4, [r2, #0]
 801077a:	7003      	strb	r3, [r0, #0]
 801077c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801077e:	461c      	mov	r4, r3
 8010780:	e00c      	b.n	801079c <__strtok_r+0x4c>
 8010782:	b91d      	cbnz	r5, 801078c <__strtok_r+0x3c>
 8010784:	4627      	mov	r7, r4
 8010786:	f814 3b01 	ldrb.w	r3, [r4], #1
 801078a:	460e      	mov	r6, r1
 801078c:	f816 5b01 	ldrb.w	r5, [r6], #1
 8010790:	42ab      	cmp	r3, r5
 8010792:	d1f6      	bne.n	8010782 <__strtok_r+0x32>
 8010794:	2b00      	cmp	r3, #0
 8010796:	d0f2      	beq.n	801077e <__strtok_r+0x2e>
 8010798:	2300      	movs	r3, #0
 801079a:	703b      	strb	r3, [r7, #0]
 801079c:	6014      	str	r4, [r2, #0]
 801079e:	e7ed      	b.n	801077c <__strtok_r+0x2c>

080107a0 <_localeconv_r>:
 80107a0:	4800      	ldr	r0, [pc, #0]	@ (80107a4 <_localeconv_r+0x4>)
 80107a2:	4770      	bx	lr
 80107a4:	24000178 	.word	0x24000178

080107a8 <_close_r>:
 80107a8:	b538      	push	{r3, r4, r5, lr}
 80107aa:	4d06      	ldr	r5, [pc, #24]	@ (80107c4 <_close_r+0x1c>)
 80107ac:	2300      	movs	r3, #0
 80107ae:	4604      	mov	r4, r0
 80107b0:	4608      	mov	r0, r1
 80107b2:	602b      	str	r3, [r5, #0]
 80107b4:	f7f1 fa6c 	bl	8001c90 <_close>
 80107b8:	1c43      	adds	r3, r0, #1
 80107ba:	d102      	bne.n	80107c2 <_close_r+0x1a>
 80107bc:	682b      	ldr	r3, [r5, #0]
 80107be:	b103      	cbz	r3, 80107c2 <_close_r+0x1a>
 80107c0:	6023      	str	r3, [r4, #0]
 80107c2:	bd38      	pop	{r3, r4, r5, pc}
 80107c4:	240007f4 	.word	0x240007f4

080107c8 <_lseek_r>:
 80107c8:	b538      	push	{r3, r4, r5, lr}
 80107ca:	4d07      	ldr	r5, [pc, #28]	@ (80107e8 <_lseek_r+0x20>)
 80107cc:	4604      	mov	r4, r0
 80107ce:	4608      	mov	r0, r1
 80107d0:	4611      	mov	r1, r2
 80107d2:	2200      	movs	r2, #0
 80107d4:	602a      	str	r2, [r5, #0]
 80107d6:	461a      	mov	r2, r3
 80107d8:	f7f1 fa81 	bl	8001cde <_lseek>
 80107dc:	1c43      	adds	r3, r0, #1
 80107de:	d102      	bne.n	80107e6 <_lseek_r+0x1e>
 80107e0:	682b      	ldr	r3, [r5, #0]
 80107e2:	b103      	cbz	r3, 80107e6 <_lseek_r+0x1e>
 80107e4:	6023      	str	r3, [r4, #0]
 80107e6:	bd38      	pop	{r3, r4, r5, pc}
 80107e8:	240007f4 	.word	0x240007f4

080107ec <_read_r>:
 80107ec:	b538      	push	{r3, r4, r5, lr}
 80107ee:	4d07      	ldr	r5, [pc, #28]	@ (801080c <_read_r+0x20>)
 80107f0:	4604      	mov	r4, r0
 80107f2:	4608      	mov	r0, r1
 80107f4:	4611      	mov	r1, r2
 80107f6:	2200      	movs	r2, #0
 80107f8:	602a      	str	r2, [r5, #0]
 80107fa:	461a      	mov	r2, r3
 80107fc:	f7f1 fa0f 	bl	8001c1e <_read>
 8010800:	1c43      	adds	r3, r0, #1
 8010802:	d102      	bne.n	801080a <_read_r+0x1e>
 8010804:	682b      	ldr	r3, [r5, #0]
 8010806:	b103      	cbz	r3, 801080a <_read_r+0x1e>
 8010808:	6023      	str	r3, [r4, #0]
 801080a:	bd38      	pop	{r3, r4, r5, pc}
 801080c:	240007f4 	.word	0x240007f4

08010810 <_write_r>:
 8010810:	b538      	push	{r3, r4, r5, lr}
 8010812:	4d07      	ldr	r5, [pc, #28]	@ (8010830 <_write_r+0x20>)
 8010814:	4604      	mov	r4, r0
 8010816:	4608      	mov	r0, r1
 8010818:	4611      	mov	r1, r2
 801081a:	2200      	movs	r2, #0
 801081c:	602a      	str	r2, [r5, #0]
 801081e:	461a      	mov	r2, r3
 8010820:	f7f1 fa1a 	bl	8001c58 <_write>
 8010824:	1c43      	adds	r3, r0, #1
 8010826:	d102      	bne.n	801082e <_write_r+0x1e>
 8010828:	682b      	ldr	r3, [r5, #0]
 801082a:	b103      	cbz	r3, 801082e <_write_r+0x1e>
 801082c:	6023      	str	r3, [r4, #0]
 801082e:	bd38      	pop	{r3, r4, r5, pc}
 8010830:	240007f4 	.word	0x240007f4

08010834 <__errno>:
 8010834:	4b01      	ldr	r3, [pc, #4]	@ (801083c <__errno+0x8>)
 8010836:	6818      	ldr	r0, [r3, #0]
 8010838:	4770      	bx	lr
 801083a:	bf00      	nop
 801083c:	24000038 	.word	0x24000038

08010840 <__libc_init_array>:
 8010840:	b570      	push	{r4, r5, r6, lr}
 8010842:	4d0d      	ldr	r5, [pc, #52]	@ (8010878 <__libc_init_array+0x38>)
 8010844:	4c0d      	ldr	r4, [pc, #52]	@ (801087c <__libc_init_array+0x3c>)
 8010846:	1b64      	subs	r4, r4, r5
 8010848:	10a4      	asrs	r4, r4, #2
 801084a:	2600      	movs	r6, #0
 801084c:	42a6      	cmp	r6, r4
 801084e:	d109      	bne.n	8010864 <__libc_init_array+0x24>
 8010850:	4d0b      	ldr	r5, [pc, #44]	@ (8010880 <__libc_init_array+0x40>)
 8010852:	4c0c      	ldr	r4, [pc, #48]	@ (8010884 <__libc_init_array+0x44>)
 8010854:	f001 ff62 	bl	801271c <_init>
 8010858:	1b64      	subs	r4, r4, r5
 801085a:	10a4      	asrs	r4, r4, #2
 801085c:	2600      	movs	r6, #0
 801085e:	42a6      	cmp	r6, r4
 8010860:	d105      	bne.n	801086e <__libc_init_array+0x2e>
 8010862:	bd70      	pop	{r4, r5, r6, pc}
 8010864:	f855 3b04 	ldr.w	r3, [r5], #4
 8010868:	4798      	blx	r3
 801086a:	3601      	adds	r6, #1
 801086c:	e7ee      	b.n	801084c <__libc_init_array+0xc>
 801086e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010872:	4798      	blx	r3
 8010874:	3601      	adds	r6, #1
 8010876:	e7f2      	b.n	801085e <__libc_init_array+0x1e>
 8010878:	08012ba0 	.word	0x08012ba0
 801087c:	08012ba0 	.word	0x08012ba0
 8010880:	08012ba0 	.word	0x08012ba0
 8010884:	08012ba4 	.word	0x08012ba4

08010888 <__retarget_lock_init_recursive>:
 8010888:	4770      	bx	lr

0801088a <__retarget_lock_acquire_recursive>:
 801088a:	4770      	bx	lr

0801088c <__retarget_lock_release_recursive>:
 801088c:	4770      	bx	lr

0801088e <memcpy>:
 801088e:	440a      	add	r2, r1
 8010890:	4291      	cmp	r1, r2
 8010892:	f100 33ff 	add.w	r3, r0, #4294967295
 8010896:	d100      	bne.n	801089a <memcpy+0xc>
 8010898:	4770      	bx	lr
 801089a:	b510      	push	{r4, lr}
 801089c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80108a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80108a4:	4291      	cmp	r1, r2
 80108a6:	d1f9      	bne.n	801089c <memcpy+0xe>
 80108a8:	bd10      	pop	{r4, pc}
	...

080108ac <__assert_func>:
 80108ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80108ae:	4614      	mov	r4, r2
 80108b0:	461a      	mov	r2, r3
 80108b2:	4b09      	ldr	r3, [pc, #36]	@ (80108d8 <__assert_func+0x2c>)
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	4605      	mov	r5, r0
 80108b8:	68d8      	ldr	r0, [r3, #12]
 80108ba:	b14c      	cbz	r4, 80108d0 <__assert_func+0x24>
 80108bc:	4b07      	ldr	r3, [pc, #28]	@ (80108dc <__assert_func+0x30>)
 80108be:	9100      	str	r1, [sp, #0]
 80108c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80108c4:	4906      	ldr	r1, [pc, #24]	@ (80108e0 <__assert_func+0x34>)
 80108c6:	462b      	mov	r3, r5
 80108c8:	f001 fdb4 	bl	8012434 <fiprintf>
 80108cc:	f001 fe72 	bl	80125b4 <abort>
 80108d0:	4b04      	ldr	r3, [pc, #16]	@ (80108e4 <__assert_func+0x38>)
 80108d2:	461c      	mov	r4, r3
 80108d4:	e7f3      	b.n	80108be <__assert_func+0x12>
 80108d6:	bf00      	nop
 80108d8:	24000038 	.word	0x24000038
 80108dc:	08012972 	.word	0x08012972
 80108e0:	0801297f 	.word	0x0801297f
 80108e4:	080129ad 	.word	0x080129ad

080108e8 <quorem>:
 80108e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108ec:	6903      	ldr	r3, [r0, #16]
 80108ee:	690c      	ldr	r4, [r1, #16]
 80108f0:	42a3      	cmp	r3, r4
 80108f2:	4607      	mov	r7, r0
 80108f4:	db7e      	blt.n	80109f4 <quorem+0x10c>
 80108f6:	3c01      	subs	r4, #1
 80108f8:	f101 0814 	add.w	r8, r1, #20
 80108fc:	00a3      	lsls	r3, r4, #2
 80108fe:	f100 0514 	add.w	r5, r0, #20
 8010902:	9300      	str	r3, [sp, #0]
 8010904:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010908:	9301      	str	r3, [sp, #4]
 801090a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801090e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010912:	3301      	adds	r3, #1
 8010914:	429a      	cmp	r2, r3
 8010916:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801091a:	fbb2 f6f3 	udiv	r6, r2, r3
 801091e:	d32e      	bcc.n	801097e <quorem+0x96>
 8010920:	f04f 0a00 	mov.w	sl, #0
 8010924:	46c4      	mov	ip, r8
 8010926:	46ae      	mov	lr, r5
 8010928:	46d3      	mov	fp, sl
 801092a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801092e:	b298      	uxth	r0, r3
 8010930:	fb06 a000 	mla	r0, r6, r0, sl
 8010934:	0c02      	lsrs	r2, r0, #16
 8010936:	0c1b      	lsrs	r3, r3, #16
 8010938:	fb06 2303 	mla	r3, r6, r3, r2
 801093c:	f8de 2000 	ldr.w	r2, [lr]
 8010940:	b280      	uxth	r0, r0
 8010942:	b292      	uxth	r2, r2
 8010944:	1a12      	subs	r2, r2, r0
 8010946:	445a      	add	r2, fp
 8010948:	f8de 0000 	ldr.w	r0, [lr]
 801094c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010950:	b29b      	uxth	r3, r3
 8010952:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010956:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801095a:	b292      	uxth	r2, r2
 801095c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010960:	45e1      	cmp	r9, ip
 8010962:	f84e 2b04 	str.w	r2, [lr], #4
 8010966:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801096a:	d2de      	bcs.n	801092a <quorem+0x42>
 801096c:	9b00      	ldr	r3, [sp, #0]
 801096e:	58eb      	ldr	r3, [r5, r3]
 8010970:	b92b      	cbnz	r3, 801097e <quorem+0x96>
 8010972:	9b01      	ldr	r3, [sp, #4]
 8010974:	3b04      	subs	r3, #4
 8010976:	429d      	cmp	r5, r3
 8010978:	461a      	mov	r2, r3
 801097a:	d32f      	bcc.n	80109dc <quorem+0xf4>
 801097c:	613c      	str	r4, [r7, #16]
 801097e:	4638      	mov	r0, r7
 8010980:	f001 f90a 	bl	8011b98 <__mcmp>
 8010984:	2800      	cmp	r0, #0
 8010986:	db25      	blt.n	80109d4 <quorem+0xec>
 8010988:	4629      	mov	r1, r5
 801098a:	2000      	movs	r0, #0
 801098c:	f858 2b04 	ldr.w	r2, [r8], #4
 8010990:	f8d1 c000 	ldr.w	ip, [r1]
 8010994:	fa1f fe82 	uxth.w	lr, r2
 8010998:	fa1f f38c 	uxth.w	r3, ip
 801099c:	eba3 030e 	sub.w	r3, r3, lr
 80109a0:	4403      	add	r3, r0
 80109a2:	0c12      	lsrs	r2, r2, #16
 80109a4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80109a8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80109ac:	b29b      	uxth	r3, r3
 80109ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80109b2:	45c1      	cmp	r9, r8
 80109b4:	f841 3b04 	str.w	r3, [r1], #4
 80109b8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80109bc:	d2e6      	bcs.n	801098c <quorem+0xa4>
 80109be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80109c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80109c6:	b922      	cbnz	r2, 80109d2 <quorem+0xea>
 80109c8:	3b04      	subs	r3, #4
 80109ca:	429d      	cmp	r5, r3
 80109cc:	461a      	mov	r2, r3
 80109ce:	d30b      	bcc.n	80109e8 <quorem+0x100>
 80109d0:	613c      	str	r4, [r7, #16]
 80109d2:	3601      	adds	r6, #1
 80109d4:	4630      	mov	r0, r6
 80109d6:	b003      	add	sp, #12
 80109d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109dc:	6812      	ldr	r2, [r2, #0]
 80109de:	3b04      	subs	r3, #4
 80109e0:	2a00      	cmp	r2, #0
 80109e2:	d1cb      	bne.n	801097c <quorem+0x94>
 80109e4:	3c01      	subs	r4, #1
 80109e6:	e7c6      	b.n	8010976 <quorem+0x8e>
 80109e8:	6812      	ldr	r2, [r2, #0]
 80109ea:	3b04      	subs	r3, #4
 80109ec:	2a00      	cmp	r2, #0
 80109ee:	d1ef      	bne.n	80109d0 <quorem+0xe8>
 80109f0:	3c01      	subs	r4, #1
 80109f2:	e7ea      	b.n	80109ca <quorem+0xe2>
 80109f4:	2000      	movs	r0, #0
 80109f6:	e7ee      	b.n	80109d6 <quorem+0xee>

080109f8 <_dtoa_r>:
 80109f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109fc:	ed2d 8b02 	vpush	{d8}
 8010a00:	69c7      	ldr	r7, [r0, #28]
 8010a02:	b091      	sub	sp, #68	@ 0x44
 8010a04:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010a08:	ec55 4b10 	vmov	r4, r5, d0
 8010a0c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8010a0e:	9107      	str	r1, [sp, #28]
 8010a10:	4681      	mov	r9, r0
 8010a12:	9209      	str	r2, [sp, #36]	@ 0x24
 8010a14:	930d      	str	r3, [sp, #52]	@ 0x34
 8010a16:	b97f      	cbnz	r7, 8010a38 <_dtoa_r+0x40>
 8010a18:	2010      	movs	r0, #16
 8010a1a:	f000 fd95 	bl	8011548 <malloc>
 8010a1e:	4602      	mov	r2, r0
 8010a20:	f8c9 001c 	str.w	r0, [r9, #28]
 8010a24:	b920      	cbnz	r0, 8010a30 <_dtoa_r+0x38>
 8010a26:	4ba0      	ldr	r3, [pc, #640]	@ (8010ca8 <_dtoa_r+0x2b0>)
 8010a28:	21ef      	movs	r1, #239	@ 0xef
 8010a2a:	48a0      	ldr	r0, [pc, #640]	@ (8010cac <_dtoa_r+0x2b4>)
 8010a2c:	f7ff ff3e 	bl	80108ac <__assert_func>
 8010a30:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010a34:	6007      	str	r7, [r0, #0]
 8010a36:	60c7      	str	r7, [r0, #12]
 8010a38:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010a3c:	6819      	ldr	r1, [r3, #0]
 8010a3e:	b159      	cbz	r1, 8010a58 <_dtoa_r+0x60>
 8010a40:	685a      	ldr	r2, [r3, #4]
 8010a42:	604a      	str	r2, [r1, #4]
 8010a44:	2301      	movs	r3, #1
 8010a46:	4093      	lsls	r3, r2
 8010a48:	608b      	str	r3, [r1, #8]
 8010a4a:	4648      	mov	r0, r9
 8010a4c:	f000 fe72 	bl	8011734 <_Bfree>
 8010a50:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010a54:	2200      	movs	r2, #0
 8010a56:	601a      	str	r2, [r3, #0]
 8010a58:	1e2b      	subs	r3, r5, #0
 8010a5a:	bfbb      	ittet	lt
 8010a5c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010a60:	9303      	strlt	r3, [sp, #12]
 8010a62:	2300      	movge	r3, #0
 8010a64:	2201      	movlt	r2, #1
 8010a66:	bfac      	ite	ge
 8010a68:	6033      	strge	r3, [r6, #0]
 8010a6a:	6032      	strlt	r2, [r6, #0]
 8010a6c:	4b90      	ldr	r3, [pc, #576]	@ (8010cb0 <_dtoa_r+0x2b8>)
 8010a6e:	9e03      	ldr	r6, [sp, #12]
 8010a70:	43b3      	bics	r3, r6
 8010a72:	d110      	bne.n	8010a96 <_dtoa_r+0x9e>
 8010a74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010a76:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010a7a:	6013      	str	r3, [r2, #0]
 8010a7c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8010a80:	4323      	orrs	r3, r4
 8010a82:	f000 84e6 	beq.w	8011452 <_dtoa_r+0xa5a>
 8010a86:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010a88:	4f8a      	ldr	r7, [pc, #552]	@ (8010cb4 <_dtoa_r+0x2bc>)
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	f000 84e8 	beq.w	8011460 <_dtoa_r+0xa68>
 8010a90:	1cfb      	adds	r3, r7, #3
 8010a92:	f000 bce3 	b.w	801145c <_dtoa_r+0xa64>
 8010a96:	ed9d 8b02 	vldr	d8, [sp, #8]
 8010a9a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010aa2:	d10a      	bne.n	8010aba <_dtoa_r+0xc2>
 8010aa4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010aa6:	2301      	movs	r3, #1
 8010aa8:	6013      	str	r3, [r2, #0]
 8010aaa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010aac:	b113      	cbz	r3, 8010ab4 <_dtoa_r+0xbc>
 8010aae:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8010ab0:	4b81      	ldr	r3, [pc, #516]	@ (8010cb8 <_dtoa_r+0x2c0>)
 8010ab2:	6013      	str	r3, [r2, #0]
 8010ab4:	4f81      	ldr	r7, [pc, #516]	@ (8010cbc <_dtoa_r+0x2c4>)
 8010ab6:	f000 bcd3 	b.w	8011460 <_dtoa_r+0xa68>
 8010aba:	aa0e      	add	r2, sp, #56	@ 0x38
 8010abc:	a90f      	add	r1, sp, #60	@ 0x3c
 8010abe:	4648      	mov	r0, r9
 8010ac0:	eeb0 0b48 	vmov.f64	d0, d8
 8010ac4:	f001 f918 	bl	8011cf8 <__d2b>
 8010ac8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8010acc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010ace:	9001      	str	r0, [sp, #4]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d045      	beq.n	8010b60 <_dtoa_r+0x168>
 8010ad4:	eeb0 7b48 	vmov.f64	d7, d8
 8010ad8:	ee18 1a90 	vmov	r1, s17
 8010adc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010ae0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8010ae4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8010ae8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8010aec:	2500      	movs	r5, #0
 8010aee:	ee07 1a90 	vmov	s15, r1
 8010af2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8010af6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8010c90 <_dtoa_r+0x298>
 8010afa:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010afe:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8010c98 <_dtoa_r+0x2a0>
 8010b02:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010b06:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8010ca0 <_dtoa_r+0x2a8>
 8010b0a:	ee07 3a90 	vmov	s15, r3
 8010b0e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8010b12:	eeb0 7b46 	vmov.f64	d7, d6
 8010b16:	eea4 7b05 	vfma.f64	d7, d4, d5
 8010b1a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8010b1e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b26:	ee16 8a90 	vmov	r8, s13
 8010b2a:	d508      	bpl.n	8010b3e <_dtoa_r+0x146>
 8010b2c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010b30:	eeb4 6b47 	vcmp.f64	d6, d7
 8010b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b38:	bf18      	it	ne
 8010b3a:	f108 38ff 	addne.w	r8, r8, #4294967295
 8010b3e:	f1b8 0f16 	cmp.w	r8, #22
 8010b42:	d82b      	bhi.n	8010b9c <_dtoa_r+0x1a4>
 8010b44:	495e      	ldr	r1, [pc, #376]	@ (8010cc0 <_dtoa_r+0x2c8>)
 8010b46:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8010b4a:	ed91 7b00 	vldr	d7, [r1]
 8010b4e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b56:	d501      	bpl.n	8010b5c <_dtoa_r+0x164>
 8010b58:	f108 38ff 	add.w	r8, r8, #4294967295
 8010b5c:	2100      	movs	r1, #0
 8010b5e:	e01e      	b.n	8010b9e <_dtoa_r+0x1a6>
 8010b60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b62:	4413      	add	r3, r2
 8010b64:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8010b68:	2920      	cmp	r1, #32
 8010b6a:	bfc1      	itttt	gt
 8010b6c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8010b70:	408e      	lslgt	r6, r1
 8010b72:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8010b76:	fa24 f101 	lsrgt.w	r1, r4, r1
 8010b7a:	bfd6      	itet	le
 8010b7c:	f1c1 0120 	rsble	r1, r1, #32
 8010b80:	4331      	orrgt	r1, r6
 8010b82:	fa04 f101 	lslle.w	r1, r4, r1
 8010b86:	ee07 1a90 	vmov	s15, r1
 8010b8a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010b8e:	3b01      	subs	r3, #1
 8010b90:	ee17 1a90 	vmov	r1, s15
 8010b94:	2501      	movs	r5, #1
 8010b96:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8010b9a:	e7a8      	b.n	8010aee <_dtoa_r+0xf6>
 8010b9c:	2101      	movs	r1, #1
 8010b9e:	1ad2      	subs	r2, r2, r3
 8010ba0:	1e53      	subs	r3, r2, #1
 8010ba2:	9306      	str	r3, [sp, #24]
 8010ba4:	bf45      	ittet	mi
 8010ba6:	f1c2 0301 	rsbmi	r3, r2, #1
 8010baa:	9304      	strmi	r3, [sp, #16]
 8010bac:	2300      	movpl	r3, #0
 8010bae:	2300      	movmi	r3, #0
 8010bb0:	bf4c      	ite	mi
 8010bb2:	9306      	strmi	r3, [sp, #24]
 8010bb4:	9304      	strpl	r3, [sp, #16]
 8010bb6:	f1b8 0f00 	cmp.w	r8, #0
 8010bba:	910c      	str	r1, [sp, #48]	@ 0x30
 8010bbc:	db18      	blt.n	8010bf0 <_dtoa_r+0x1f8>
 8010bbe:	9b06      	ldr	r3, [sp, #24]
 8010bc0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8010bc4:	4443      	add	r3, r8
 8010bc6:	9306      	str	r3, [sp, #24]
 8010bc8:	2300      	movs	r3, #0
 8010bca:	9a07      	ldr	r2, [sp, #28]
 8010bcc:	2a09      	cmp	r2, #9
 8010bce:	d845      	bhi.n	8010c5c <_dtoa_r+0x264>
 8010bd0:	2a05      	cmp	r2, #5
 8010bd2:	bfc4      	itt	gt
 8010bd4:	3a04      	subgt	r2, #4
 8010bd6:	9207      	strgt	r2, [sp, #28]
 8010bd8:	9a07      	ldr	r2, [sp, #28]
 8010bda:	f1a2 0202 	sub.w	r2, r2, #2
 8010bde:	bfcc      	ite	gt
 8010be0:	2400      	movgt	r4, #0
 8010be2:	2401      	movle	r4, #1
 8010be4:	2a03      	cmp	r2, #3
 8010be6:	d844      	bhi.n	8010c72 <_dtoa_r+0x27a>
 8010be8:	e8df f002 	tbb	[pc, r2]
 8010bec:	0b173634 	.word	0x0b173634
 8010bf0:	9b04      	ldr	r3, [sp, #16]
 8010bf2:	2200      	movs	r2, #0
 8010bf4:	eba3 0308 	sub.w	r3, r3, r8
 8010bf8:	9304      	str	r3, [sp, #16]
 8010bfa:	920a      	str	r2, [sp, #40]	@ 0x28
 8010bfc:	f1c8 0300 	rsb	r3, r8, #0
 8010c00:	e7e3      	b.n	8010bca <_dtoa_r+0x1d2>
 8010c02:	2201      	movs	r2, #1
 8010c04:	9208      	str	r2, [sp, #32]
 8010c06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010c08:	eb08 0b02 	add.w	fp, r8, r2
 8010c0c:	f10b 0a01 	add.w	sl, fp, #1
 8010c10:	4652      	mov	r2, sl
 8010c12:	2a01      	cmp	r2, #1
 8010c14:	bfb8      	it	lt
 8010c16:	2201      	movlt	r2, #1
 8010c18:	e006      	b.n	8010c28 <_dtoa_r+0x230>
 8010c1a:	2201      	movs	r2, #1
 8010c1c:	9208      	str	r2, [sp, #32]
 8010c1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010c20:	2a00      	cmp	r2, #0
 8010c22:	dd29      	ble.n	8010c78 <_dtoa_r+0x280>
 8010c24:	4693      	mov	fp, r2
 8010c26:	4692      	mov	sl, r2
 8010c28:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8010c2c:	2100      	movs	r1, #0
 8010c2e:	2004      	movs	r0, #4
 8010c30:	f100 0614 	add.w	r6, r0, #20
 8010c34:	4296      	cmp	r6, r2
 8010c36:	d926      	bls.n	8010c86 <_dtoa_r+0x28e>
 8010c38:	6079      	str	r1, [r7, #4]
 8010c3a:	4648      	mov	r0, r9
 8010c3c:	9305      	str	r3, [sp, #20]
 8010c3e:	f000 fd39 	bl	80116b4 <_Balloc>
 8010c42:	9b05      	ldr	r3, [sp, #20]
 8010c44:	4607      	mov	r7, r0
 8010c46:	2800      	cmp	r0, #0
 8010c48:	d13e      	bne.n	8010cc8 <_dtoa_r+0x2d0>
 8010c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8010cc4 <_dtoa_r+0x2cc>)
 8010c4c:	4602      	mov	r2, r0
 8010c4e:	f240 11af 	movw	r1, #431	@ 0x1af
 8010c52:	e6ea      	b.n	8010a2a <_dtoa_r+0x32>
 8010c54:	2200      	movs	r2, #0
 8010c56:	e7e1      	b.n	8010c1c <_dtoa_r+0x224>
 8010c58:	2200      	movs	r2, #0
 8010c5a:	e7d3      	b.n	8010c04 <_dtoa_r+0x20c>
 8010c5c:	2401      	movs	r4, #1
 8010c5e:	2200      	movs	r2, #0
 8010c60:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8010c64:	f04f 3bff 	mov.w	fp, #4294967295
 8010c68:	2100      	movs	r1, #0
 8010c6a:	46da      	mov	sl, fp
 8010c6c:	2212      	movs	r2, #18
 8010c6e:	9109      	str	r1, [sp, #36]	@ 0x24
 8010c70:	e7da      	b.n	8010c28 <_dtoa_r+0x230>
 8010c72:	2201      	movs	r2, #1
 8010c74:	9208      	str	r2, [sp, #32]
 8010c76:	e7f5      	b.n	8010c64 <_dtoa_r+0x26c>
 8010c78:	f04f 0b01 	mov.w	fp, #1
 8010c7c:	46da      	mov	sl, fp
 8010c7e:	465a      	mov	r2, fp
 8010c80:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8010c84:	e7d0      	b.n	8010c28 <_dtoa_r+0x230>
 8010c86:	3101      	adds	r1, #1
 8010c88:	0040      	lsls	r0, r0, #1
 8010c8a:	e7d1      	b.n	8010c30 <_dtoa_r+0x238>
 8010c8c:	f3af 8000 	nop.w
 8010c90:	636f4361 	.word	0x636f4361
 8010c94:	3fd287a7 	.word	0x3fd287a7
 8010c98:	8b60c8b3 	.word	0x8b60c8b3
 8010c9c:	3fc68a28 	.word	0x3fc68a28
 8010ca0:	509f79fb 	.word	0x509f79fb
 8010ca4:	3fd34413 	.word	0x3fd34413
 8010ca8:	08012901 	.word	0x08012901
 8010cac:	080129bb 	.word	0x080129bb
 8010cb0:	7ff00000 	.word	0x7ff00000
 8010cb4:	080129b7 	.word	0x080129b7
 8010cb8:	080128de 	.word	0x080128de
 8010cbc:	080128dd 	.word	0x080128dd
 8010cc0:	08012ad0 	.word	0x08012ad0
 8010cc4:	08012a13 	.word	0x08012a13
 8010cc8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8010ccc:	f1ba 0f0e 	cmp.w	sl, #14
 8010cd0:	6010      	str	r0, [r2, #0]
 8010cd2:	d86e      	bhi.n	8010db2 <_dtoa_r+0x3ba>
 8010cd4:	2c00      	cmp	r4, #0
 8010cd6:	d06c      	beq.n	8010db2 <_dtoa_r+0x3ba>
 8010cd8:	f1b8 0f00 	cmp.w	r8, #0
 8010cdc:	f340 80b4 	ble.w	8010e48 <_dtoa_r+0x450>
 8010ce0:	4ac8      	ldr	r2, [pc, #800]	@ (8011004 <_dtoa_r+0x60c>)
 8010ce2:	f008 010f 	and.w	r1, r8, #15
 8010ce6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8010cea:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8010cee:	ed92 7b00 	vldr	d7, [r2]
 8010cf2:	ea4f 1128 	mov.w	r1, r8, asr #4
 8010cf6:	f000 809b 	beq.w	8010e30 <_dtoa_r+0x438>
 8010cfa:	4ac3      	ldr	r2, [pc, #780]	@ (8011008 <_dtoa_r+0x610>)
 8010cfc:	ed92 6b08 	vldr	d6, [r2, #32]
 8010d00:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8010d04:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010d08:	f001 010f 	and.w	r1, r1, #15
 8010d0c:	2203      	movs	r2, #3
 8010d0e:	48be      	ldr	r0, [pc, #760]	@ (8011008 <_dtoa_r+0x610>)
 8010d10:	2900      	cmp	r1, #0
 8010d12:	f040 808f 	bne.w	8010e34 <_dtoa_r+0x43c>
 8010d16:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010d1a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010d1e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010d22:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010d24:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010d28:	2900      	cmp	r1, #0
 8010d2a:	f000 80b3 	beq.w	8010e94 <_dtoa_r+0x49c>
 8010d2e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8010d32:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d3a:	f140 80ab 	bpl.w	8010e94 <_dtoa_r+0x49c>
 8010d3e:	f1ba 0f00 	cmp.w	sl, #0
 8010d42:	f000 80a7 	beq.w	8010e94 <_dtoa_r+0x49c>
 8010d46:	f1bb 0f00 	cmp.w	fp, #0
 8010d4a:	dd30      	ble.n	8010dae <_dtoa_r+0x3b6>
 8010d4c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8010d50:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010d54:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010d58:	f108 31ff 	add.w	r1, r8, #4294967295
 8010d5c:	9105      	str	r1, [sp, #20]
 8010d5e:	3201      	adds	r2, #1
 8010d60:	465c      	mov	r4, fp
 8010d62:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010d66:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8010d6a:	ee07 2a90 	vmov	s15, r2
 8010d6e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010d72:	eea7 5b06 	vfma.f64	d5, d7, d6
 8010d76:	ee15 2a90 	vmov	r2, s11
 8010d7a:	ec51 0b15 	vmov	r0, r1, d5
 8010d7e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8010d82:	2c00      	cmp	r4, #0
 8010d84:	f040 808a 	bne.w	8010e9c <_dtoa_r+0x4a4>
 8010d88:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8010d8c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010d90:	ec41 0b17 	vmov	d7, r0, r1
 8010d94:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d9c:	f300 826a 	bgt.w	8011274 <_dtoa_r+0x87c>
 8010da0:	eeb1 7b47 	vneg.f64	d7, d7
 8010da4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dac:	d423      	bmi.n	8010df6 <_dtoa_r+0x3fe>
 8010dae:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010db2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010db4:	2a00      	cmp	r2, #0
 8010db6:	f2c0 8129 	blt.w	801100c <_dtoa_r+0x614>
 8010dba:	f1b8 0f0e 	cmp.w	r8, #14
 8010dbe:	f300 8125 	bgt.w	801100c <_dtoa_r+0x614>
 8010dc2:	4b90      	ldr	r3, [pc, #576]	@ (8011004 <_dtoa_r+0x60c>)
 8010dc4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010dc8:	ed93 6b00 	vldr	d6, [r3]
 8010dcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	f280 80c8 	bge.w	8010f64 <_dtoa_r+0x56c>
 8010dd4:	f1ba 0f00 	cmp.w	sl, #0
 8010dd8:	f300 80c4 	bgt.w	8010f64 <_dtoa_r+0x56c>
 8010ddc:	d10b      	bne.n	8010df6 <_dtoa_r+0x3fe>
 8010dde:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8010de2:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010de6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010dea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010df2:	f2c0 823c 	blt.w	801126e <_dtoa_r+0x876>
 8010df6:	2400      	movs	r4, #0
 8010df8:	4625      	mov	r5, r4
 8010dfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010dfc:	43db      	mvns	r3, r3
 8010dfe:	9305      	str	r3, [sp, #20]
 8010e00:	463e      	mov	r6, r7
 8010e02:	f04f 0800 	mov.w	r8, #0
 8010e06:	4621      	mov	r1, r4
 8010e08:	4648      	mov	r0, r9
 8010e0a:	f000 fc93 	bl	8011734 <_Bfree>
 8010e0e:	2d00      	cmp	r5, #0
 8010e10:	f000 80a2 	beq.w	8010f58 <_dtoa_r+0x560>
 8010e14:	f1b8 0f00 	cmp.w	r8, #0
 8010e18:	d005      	beq.n	8010e26 <_dtoa_r+0x42e>
 8010e1a:	45a8      	cmp	r8, r5
 8010e1c:	d003      	beq.n	8010e26 <_dtoa_r+0x42e>
 8010e1e:	4641      	mov	r1, r8
 8010e20:	4648      	mov	r0, r9
 8010e22:	f000 fc87 	bl	8011734 <_Bfree>
 8010e26:	4629      	mov	r1, r5
 8010e28:	4648      	mov	r0, r9
 8010e2a:	f000 fc83 	bl	8011734 <_Bfree>
 8010e2e:	e093      	b.n	8010f58 <_dtoa_r+0x560>
 8010e30:	2202      	movs	r2, #2
 8010e32:	e76c      	b.n	8010d0e <_dtoa_r+0x316>
 8010e34:	07cc      	lsls	r4, r1, #31
 8010e36:	d504      	bpl.n	8010e42 <_dtoa_r+0x44a>
 8010e38:	ed90 6b00 	vldr	d6, [r0]
 8010e3c:	3201      	adds	r2, #1
 8010e3e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010e42:	1049      	asrs	r1, r1, #1
 8010e44:	3008      	adds	r0, #8
 8010e46:	e763      	b.n	8010d10 <_dtoa_r+0x318>
 8010e48:	d022      	beq.n	8010e90 <_dtoa_r+0x498>
 8010e4a:	f1c8 0100 	rsb	r1, r8, #0
 8010e4e:	4a6d      	ldr	r2, [pc, #436]	@ (8011004 <_dtoa_r+0x60c>)
 8010e50:	f001 000f 	and.w	r0, r1, #15
 8010e54:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010e58:	ed92 7b00 	vldr	d7, [r2]
 8010e5c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010e60:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010e64:	4868      	ldr	r0, [pc, #416]	@ (8011008 <_dtoa_r+0x610>)
 8010e66:	1109      	asrs	r1, r1, #4
 8010e68:	2400      	movs	r4, #0
 8010e6a:	2202      	movs	r2, #2
 8010e6c:	b929      	cbnz	r1, 8010e7a <_dtoa_r+0x482>
 8010e6e:	2c00      	cmp	r4, #0
 8010e70:	f43f af57 	beq.w	8010d22 <_dtoa_r+0x32a>
 8010e74:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010e78:	e753      	b.n	8010d22 <_dtoa_r+0x32a>
 8010e7a:	07ce      	lsls	r6, r1, #31
 8010e7c:	d505      	bpl.n	8010e8a <_dtoa_r+0x492>
 8010e7e:	ed90 6b00 	vldr	d6, [r0]
 8010e82:	3201      	adds	r2, #1
 8010e84:	2401      	movs	r4, #1
 8010e86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010e8a:	1049      	asrs	r1, r1, #1
 8010e8c:	3008      	adds	r0, #8
 8010e8e:	e7ed      	b.n	8010e6c <_dtoa_r+0x474>
 8010e90:	2202      	movs	r2, #2
 8010e92:	e746      	b.n	8010d22 <_dtoa_r+0x32a>
 8010e94:	f8cd 8014 	str.w	r8, [sp, #20]
 8010e98:	4654      	mov	r4, sl
 8010e9a:	e762      	b.n	8010d62 <_dtoa_r+0x36a>
 8010e9c:	4a59      	ldr	r2, [pc, #356]	@ (8011004 <_dtoa_r+0x60c>)
 8010e9e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8010ea2:	ed12 4b02 	vldr	d4, [r2, #-8]
 8010ea6:	9a08      	ldr	r2, [sp, #32]
 8010ea8:	ec41 0b17 	vmov	d7, r0, r1
 8010eac:	443c      	add	r4, r7
 8010eae:	b34a      	cbz	r2, 8010f04 <_dtoa_r+0x50c>
 8010eb0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8010eb4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8010eb8:	463e      	mov	r6, r7
 8010eba:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010ebe:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8010ec2:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010ec6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010eca:	ee14 2a90 	vmov	r2, s9
 8010ece:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010ed2:	3230      	adds	r2, #48	@ 0x30
 8010ed4:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010ed8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ee0:	f806 2b01 	strb.w	r2, [r6], #1
 8010ee4:	d438      	bmi.n	8010f58 <_dtoa_r+0x560>
 8010ee6:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010eea:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ef2:	d46e      	bmi.n	8010fd2 <_dtoa_r+0x5da>
 8010ef4:	42a6      	cmp	r6, r4
 8010ef6:	f43f af5a 	beq.w	8010dae <_dtoa_r+0x3b6>
 8010efa:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010efe:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010f02:	e7e0      	b.n	8010ec6 <_dtoa_r+0x4ce>
 8010f04:	4621      	mov	r1, r4
 8010f06:	463e      	mov	r6, r7
 8010f08:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010f0c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8010f10:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010f14:	ee14 2a90 	vmov	r2, s9
 8010f18:	3230      	adds	r2, #48	@ 0x30
 8010f1a:	f806 2b01 	strb.w	r2, [r6], #1
 8010f1e:	42a6      	cmp	r6, r4
 8010f20:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010f24:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010f28:	d119      	bne.n	8010f5e <_dtoa_r+0x566>
 8010f2a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8010f2e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010f32:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f3a:	dc4a      	bgt.n	8010fd2 <_dtoa_r+0x5da>
 8010f3c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010f40:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f48:	f57f af31 	bpl.w	8010dae <_dtoa_r+0x3b6>
 8010f4c:	460e      	mov	r6, r1
 8010f4e:	3901      	subs	r1, #1
 8010f50:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010f54:	2b30      	cmp	r3, #48	@ 0x30
 8010f56:	d0f9      	beq.n	8010f4c <_dtoa_r+0x554>
 8010f58:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010f5c:	e027      	b.n	8010fae <_dtoa_r+0x5b6>
 8010f5e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010f62:	e7d5      	b.n	8010f10 <_dtoa_r+0x518>
 8010f64:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010f68:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8010f6c:	463e      	mov	r6, r7
 8010f6e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010f72:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010f76:	ee15 3a10 	vmov	r3, s10
 8010f7a:	3330      	adds	r3, #48	@ 0x30
 8010f7c:	f806 3b01 	strb.w	r3, [r6], #1
 8010f80:	1bf3      	subs	r3, r6, r7
 8010f82:	459a      	cmp	sl, r3
 8010f84:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010f88:	eea3 7b46 	vfms.f64	d7, d3, d6
 8010f8c:	d132      	bne.n	8010ff4 <_dtoa_r+0x5fc>
 8010f8e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010f92:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f9a:	dc18      	bgt.n	8010fce <_dtoa_r+0x5d6>
 8010f9c:	eeb4 7b46 	vcmp.f64	d7, d6
 8010fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fa4:	d103      	bne.n	8010fae <_dtoa_r+0x5b6>
 8010fa6:	ee15 3a10 	vmov	r3, s10
 8010faa:	07db      	lsls	r3, r3, #31
 8010fac:	d40f      	bmi.n	8010fce <_dtoa_r+0x5d6>
 8010fae:	9901      	ldr	r1, [sp, #4]
 8010fb0:	4648      	mov	r0, r9
 8010fb2:	f000 fbbf 	bl	8011734 <_Bfree>
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010fba:	7033      	strb	r3, [r6, #0]
 8010fbc:	f108 0301 	add.w	r3, r8, #1
 8010fc0:	6013      	str	r3, [r2, #0]
 8010fc2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	f000 824b 	beq.w	8011460 <_dtoa_r+0xa68>
 8010fca:	601e      	str	r6, [r3, #0]
 8010fcc:	e248      	b.n	8011460 <_dtoa_r+0xa68>
 8010fce:	f8cd 8014 	str.w	r8, [sp, #20]
 8010fd2:	4633      	mov	r3, r6
 8010fd4:	461e      	mov	r6, r3
 8010fd6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010fda:	2a39      	cmp	r2, #57	@ 0x39
 8010fdc:	d106      	bne.n	8010fec <_dtoa_r+0x5f4>
 8010fde:	429f      	cmp	r7, r3
 8010fe0:	d1f8      	bne.n	8010fd4 <_dtoa_r+0x5dc>
 8010fe2:	9a05      	ldr	r2, [sp, #20]
 8010fe4:	3201      	adds	r2, #1
 8010fe6:	9205      	str	r2, [sp, #20]
 8010fe8:	2230      	movs	r2, #48	@ 0x30
 8010fea:	703a      	strb	r2, [r7, #0]
 8010fec:	781a      	ldrb	r2, [r3, #0]
 8010fee:	3201      	adds	r2, #1
 8010ff0:	701a      	strb	r2, [r3, #0]
 8010ff2:	e7b1      	b.n	8010f58 <_dtoa_r+0x560>
 8010ff4:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010ff8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011000:	d1b5      	bne.n	8010f6e <_dtoa_r+0x576>
 8011002:	e7d4      	b.n	8010fae <_dtoa_r+0x5b6>
 8011004:	08012ad0 	.word	0x08012ad0
 8011008:	08012aa8 	.word	0x08012aa8
 801100c:	9908      	ldr	r1, [sp, #32]
 801100e:	2900      	cmp	r1, #0
 8011010:	f000 80e9 	beq.w	80111e6 <_dtoa_r+0x7ee>
 8011014:	9907      	ldr	r1, [sp, #28]
 8011016:	2901      	cmp	r1, #1
 8011018:	f300 80cb 	bgt.w	80111b2 <_dtoa_r+0x7ba>
 801101c:	2d00      	cmp	r5, #0
 801101e:	f000 80c4 	beq.w	80111aa <_dtoa_r+0x7b2>
 8011022:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8011026:	9e04      	ldr	r6, [sp, #16]
 8011028:	461c      	mov	r4, r3
 801102a:	9305      	str	r3, [sp, #20]
 801102c:	9b04      	ldr	r3, [sp, #16]
 801102e:	4413      	add	r3, r2
 8011030:	9304      	str	r3, [sp, #16]
 8011032:	9b06      	ldr	r3, [sp, #24]
 8011034:	2101      	movs	r1, #1
 8011036:	4413      	add	r3, r2
 8011038:	4648      	mov	r0, r9
 801103a:	9306      	str	r3, [sp, #24]
 801103c:	f000 fc2e 	bl	801189c <__i2b>
 8011040:	9b05      	ldr	r3, [sp, #20]
 8011042:	4605      	mov	r5, r0
 8011044:	b166      	cbz	r6, 8011060 <_dtoa_r+0x668>
 8011046:	9a06      	ldr	r2, [sp, #24]
 8011048:	2a00      	cmp	r2, #0
 801104a:	dd09      	ble.n	8011060 <_dtoa_r+0x668>
 801104c:	42b2      	cmp	r2, r6
 801104e:	9904      	ldr	r1, [sp, #16]
 8011050:	bfa8      	it	ge
 8011052:	4632      	movge	r2, r6
 8011054:	1a89      	subs	r1, r1, r2
 8011056:	9104      	str	r1, [sp, #16]
 8011058:	9906      	ldr	r1, [sp, #24]
 801105a:	1ab6      	subs	r6, r6, r2
 801105c:	1a8a      	subs	r2, r1, r2
 801105e:	9206      	str	r2, [sp, #24]
 8011060:	b30b      	cbz	r3, 80110a6 <_dtoa_r+0x6ae>
 8011062:	9a08      	ldr	r2, [sp, #32]
 8011064:	2a00      	cmp	r2, #0
 8011066:	f000 80c5 	beq.w	80111f4 <_dtoa_r+0x7fc>
 801106a:	2c00      	cmp	r4, #0
 801106c:	f000 80bf 	beq.w	80111ee <_dtoa_r+0x7f6>
 8011070:	4629      	mov	r1, r5
 8011072:	4622      	mov	r2, r4
 8011074:	4648      	mov	r0, r9
 8011076:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011078:	f000 fcc8 	bl	8011a0c <__pow5mult>
 801107c:	9a01      	ldr	r2, [sp, #4]
 801107e:	4601      	mov	r1, r0
 8011080:	4605      	mov	r5, r0
 8011082:	4648      	mov	r0, r9
 8011084:	f000 fc20 	bl	80118c8 <__multiply>
 8011088:	9901      	ldr	r1, [sp, #4]
 801108a:	9005      	str	r0, [sp, #20]
 801108c:	4648      	mov	r0, r9
 801108e:	f000 fb51 	bl	8011734 <_Bfree>
 8011092:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011094:	1b1b      	subs	r3, r3, r4
 8011096:	f000 80b0 	beq.w	80111fa <_dtoa_r+0x802>
 801109a:	9905      	ldr	r1, [sp, #20]
 801109c:	461a      	mov	r2, r3
 801109e:	4648      	mov	r0, r9
 80110a0:	f000 fcb4 	bl	8011a0c <__pow5mult>
 80110a4:	9001      	str	r0, [sp, #4]
 80110a6:	2101      	movs	r1, #1
 80110a8:	4648      	mov	r0, r9
 80110aa:	f000 fbf7 	bl	801189c <__i2b>
 80110ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80110b0:	4604      	mov	r4, r0
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	f000 81da 	beq.w	801146c <_dtoa_r+0xa74>
 80110b8:	461a      	mov	r2, r3
 80110ba:	4601      	mov	r1, r0
 80110bc:	4648      	mov	r0, r9
 80110be:	f000 fca5 	bl	8011a0c <__pow5mult>
 80110c2:	9b07      	ldr	r3, [sp, #28]
 80110c4:	2b01      	cmp	r3, #1
 80110c6:	4604      	mov	r4, r0
 80110c8:	f300 80a0 	bgt.w	801120c <_dtoa_r+0x814>
 80110cc:	9b02      	ldr	r3, [sp, #8]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	f040 8096 	bne.w	8011200 <_dtoa_r+0x808>
 80110d4:	9b03      	ldr	r3, [sp, #12]
 80110d6:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80110da:	2a00      	cmp	r2, #0
 80110dc:	f040 8092 	bne.w	8011204 <_dtoa_r+0x80c>
 80110e0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80110e4:	0d12      	lsrs	r2, r2, #20
 80110e6:	0512      	lsls	r2, r2, #20
 80110e8:	2a00      	cmp	r2, #0
 80110ea:	f000 808d 	beq.w	8011208 <_dtoa_r+0x810>
 80110ee:	9b04      	ldr	r3, [sp, #16]
 80110f0:	3301      	adds	r3, #1
 80110f2:	9304      	str	r3, [sp, #16]
 80110f4:	9b06      	ldr	r3, [sp, #24]
 80110f6:	3301      	adds	r3, #1
 80110f8:	9306      	str	r3, [sp, #24]
 80110fa:	2301      	movs	r3, #1
 80110fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80110fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011100:	2b00      	cmp	r3, #0
 8011102:	f000 81b9 	beq.w	8011478 <_dtoa_r+0xa80>
 8011106:	6922      	ldr	r2, [r4, #16]
 8011108:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801110c:	6910      	ldr	r0, [r2, #16]
 801110e:	f000 fb79 	bl	8011804 <__hi0bits>
 8011112:	f1c0 0020 	rsb	r0, r0, #32
 8011116:	9b06      	ldr	r3, [sp, #24]
 8011118:	4418      	add	r0, r3
 801111a:	f010 001f 	ands.w	r0, r0, #31
 801111e:	f000 8081 	beq.w	8011224 <_dtoa_r+0x82c>
 8011122:	f1c0 0220 	rsb	r2, r0, #32
 8011126:	2a04      	cmp	r2, #4
 8011128:	dd73      	ble.n	8011212 <_dtoa_r+0x81a>
 801112a:	9b04      	ldr	r3, [sp, #16]
 801112c:	f1c0 001c 	rsb	r0, r0, #28
 8011130:	4403      	add	r3, r0
 8011132:	9304      	str	r3, [sp, #16]
 8011134:	9b06      	ldr	r3, [sp, #24]
 8011136:	4406      	add	r6, r0
 8011138:	4403      	add	r3, r0
 801113a:	9306      	str	r3, [sp, #24]
 801113c:	9b04      	ldr	r3, [sp, #16]
 801113e:	2b00      	cmp	r3, #0
 8011140:	dd05      	ble.n	801114e <_dtoa_r+0x756>
 8011142:	9901      	ldr	r1, [sp, #4]
 8011144:	461a      	mov	r2, r3
 8011146:	4648      	mov	r0, r9
 8011148:	f000 fcba 	bl	8011ac0 <__lshift>
 801114c:	9001      	str	r0, [sp, #4]
 801114e:	9b06      	ldr	r3, [sp, #24]
 8011150:	2b00      	cmp	r3, #0
 8011152:	dd05      	ble.n	8011160 <_dtoa_r+0x768>
 8011154:	4621      	mov	r1, r4
 8011156:	461a      	mov	r2, r3
 8011158:	4648      	mov	r0, r9
 801115a:	f000 fcb1 	bl	8011ac0 <__lshift>
 801115e:	4604      	mov	r4, r0
 8011160:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011162:	2b00      	cmp	r3, #0
 8011164:	d060      	beq.n	8011228 <_dtoa_r+0x830>
 8011166:	9801      	ldr	r0, [sp, #4]
 8011168:	4621      	mov	r1, r4
 801116a:	f000 fd15 	bl	8011b98 <__mcmp>
 801116e:	2800      	cmp	r0, #0
 8011170:	da5a      	bge.n	8011228 <_dtoa_r+0x830>
 8011172:	f108 33ff 	add.w	r3, r8, #4294967295
 8011176:	9305      	str	r3, [sp, #20]
 8011178:	9901      	ldr	r1, [sp, #4]
 801117a:	2300      	movs	r3, #0
 801117c:	220a      	movs	r2, #10
 801117e:	4648      	mov	r0, r9
 8011180:	f000 fafa 	bl	8011778 <__multadd>
 8011184:	9b08      	ldr	r3, [sp, #32]
 8011186:	9001      	str	r0, [sp, #4]
 8011188:	2b00      	cmp	r3, #0
 801118a:	f000 8177 	beq.w	801147c <_dtoa_r+0xa84>
 801118e:	4629      	mov	r1, r5
 8011190:	2300      	movs	r3, #0
 8011192:	220a      	movs	r2, #10
 8011194:	4648      	mov	r0, r9
 8011196:	f000 faef 	bl	8011778 <__multadd>
 801119a:	f1bb 0f00 	cmp.w	fp, #0
 801119e:	4605      	mov	r5, r0
 80111a0:	dc6e      	bgt.n	8011280 <_dtoa_r+0x888>
 80111a2:	9b07      	ldr	r3, [sp, #28]
 80111a4:	2b02      	cmp	r3, #2
 80111a6:	dc48      	bgt.n	801123a <_dtoa_r+0x842>
 80111a8:	e06a      	b.n	8011280 <_dtoa_r+0x888>
 80111aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80111ac:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80111b0:	e739      	b.n	8011026 <_dtoa_r+0x62e>
 80111b2:	f10a 34ff 	add.w	r4, sl, #4294967295
 80111b6:	42a3      	cmp	r3, r4
 80111b8:	db07      	blt.n	80111ca <_dtoa_r+0x7d2>
 80111ba:	f1ba 0f00 	cmp.w	sl, #0
 80111be:	eba3 0404 	sub.w	r4, r3, r4
 80111c2:	db0b      	blt.n	80111dc <_dtoa_r+0x7e4>
 80111c4:	9e04      	ldr	r6, [sp, #16]
 80111c6:	4652      	mov	r2, sl
 80111c8:	e72f      	b.n	801102a <_dtoa_r+0x632>
 80111ca:	1ae2      	subs	r2, r4, r3
 80111cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80111ce:	9e04      	ldr	r6, [sp, #16]
 80111d0:	4413      	add	r3, r2
 80111d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80111d4:	4652      	mov	r2, sl
 80111d6:	4623      	mov	r3, r4
 80111d8:	2400      	movs	r4, #0
 80111da:	e726      	b.n	801102a <_dtoa_r+0x632>
 80111dc:	9a04      	ldr	r2, [sp, #16]
 80111de:	eba2 060a 	sub.w	r6, r2, sl
 80111e2:	2200      	movs	r2, #0
 80111e4:	e721      	b.n	801102a <_dtoa_r+0x632>
 80111e6:	9e04      	ldr	r6, [sp, #16]
 80111e8:	9d08      	ldr	r5, [sp, #32]
 80111ea:	461c      	mov	r4, r3
 80111ec:	e72a      	b.n	8011044 <_dtoa_r+0x64c>
 80111ee:	9a01      	ldr	r2, [sp, #4]
 80111f0:	9205      	str	r2, [sp, #20]
 80111f2:	e752      	b.n	801109a <_dtoa_r+0x6a2>
 80111f4:	9901      	ldr	r1, [sp, #4]
 80111f6:	461a      	mov	r2, r3
 80111f8:	e751      	b.n	801109e <_dtoa_r+0x6a6>
 80111fa:	9b05      	ldr	r3, [sp, #20]
 80111fc:	9301      	str	r3, [sp, #4]
 80111fe:	e752      	b.n	80110a6 <_dtoa_r+0x6ae>
 8011200:	2300      	movs	r3, #0
 8011202:	e77b      	b.n	80110fc <_dtoa_r+0x704>
 8011204:	9b02      	ldr	r3, [sp, #8]
 8011206:	e779      	b.n	80110fc <_dtoa_r+0x704>
 8011208:	920b      	str	r2, [sp, #44]	@ 0x2c
 801120a:	e778      	b.n	80110fe <_dtoa_r+0x706>
 801120c:	2300      	movs	r3, #0
 801120e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011210:	e779      	b.n	8011106 <_dtoa_r+0x70e>
 8011212:	d093      	beq.n	801113c <_dtoa_r+0x744>
 8011214:	9b04      	ldr	r3, [sp, #16]
 8011216:	321c      	adds	r2, #28
 8011218:	4413      	add	r3, r2
 801121a:	9304      	str	r3, [sp, #16]
 801121c:	9b06      	ldr	r3, [sp, #24]
 801121e:	4416      	add	r6, r2
 8011220:	4413      	add	r3, r2
 8011222:	e78a      	b.n	801113a <_dtoa_r+0x742>
 8011224:	4602      	mov	r2, r0
 8011226:	e7f5      	b.n	8011214 <_dtoa_r+0x81c>
 8011228:	f1ba 0f00 	cmp.w	sl, #0
 801122c:	f8cd 8014 	str.w	r8, [sp, #20]
 8011230:	46d3      	mov	fp, sl
 8011232:	dc21      	bgt.n	8011278 <_dtoa_r+0x880>
 8011234:	9b07      	ldr	r3, [sp, #28]
 8011236:	2b02      	cmp	r3, #2
 8011238:	dd1e      	ble.n	8011278 <_dtoa_r+0x880>
 801123a:	f1bb 0f00 	cmp.w	fp, #0
 801123e:	f47f addc 	bne.w	8010dfa <_dtoa_r+0x402>
 8011242:	4621      	mov	r1, r4
 8011244:	465b      	mov	r3, fp
 8011246:	2205      	movs	r2, #5
 8011248:	4648      	mov	r0, r9
 801124a:	f000 fa95 	bl	8011778 <__multadd>
 801124e:	4601      	mov	r1, r0
 8011250:	4604      	mov	r4, r0
 8011252:	9801      	ldr	r0, [sp, #4]
 8011254:	f000 fca0 	bl	8011b98 <__mcmp>
 8011258:	2800      	cmp	r0, #0
 801125a:	f77f adce 	ble.w	8010dfa <_dtoa_r+0x402>
 801125e:	463e      	mov	r6, r7
 8011260:	2331      	movs	r3, #49	@ 0x31
 8011262:	f806 3b01 	strb.w	r3, [r6], #1
 8011266:	9b05      	ldr	r3, [sp, #20]
 8011268:	3301      	adds	r3, #1
 801126a:	9305      	str	r3, [sp, #20]
 801126c:	e5c9      	b.n	8010e02 <_dtoa_r+0x40a>
 801126e:	f8cd 8014 	str.w	r8, [sp, #20]
 8011272:	4654      	mov	r4, sl
 8011274:	4625      	mov	r5, r4
 8011276:	e7f2      	b.n	801125e <_dtoa_r+0x866>
 8011278:	9b08      	ldr	r3, [sp, #32]
 801127a:	2b00      	cmp	r3, #0
 801127c:	f000 8102 	beq.w	8011484 <_dtoa_r+0xa8c>
 8011280:	2e00      	cmp	r6, #0
 8011282:	dd05      	ble.n	8011290 <_dtoa_r+0x898>
 8011284:	4629      	mov	r1, r5
 8011286:	4632      	mov	r2, r6
 8011288:	4648      	mov	r0, r9
 801128a:	f000 fc19 	bl	8011ac0 <__lshift>
 801128e:	4605      	mov	r5, r0
 8011290:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011292:	2b00      	cmp	r3, #0
 8011294:	d058      	beq.n	8011348 <_dtoa_r+0x950>
 8011296:	6869      	ldr	r1, [r5, #4]
 8011298:	4648      	mov	r0, r9
 801129a:	f000 fa0b 	bl	80116b4 <_Balloc>
 801129e:	4606      	mov	r6, r0
 80112a0:	b928      	cbnz	r0, 80112ae <_dtoa_r+0x8b6>
 80112a2:	4b82      	ldr	r3, [pc, #520]	@ (80114ac <_dtoa_r+0xab4>)
 80112a4:	4602      	mov	r2, r0
 80112a6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80112aa:	f7ff bbbe 	b.w	8010a2a <_dtoa_r+0x32>
 80112ae:	692a      	ldr	r2, [r5, #16]
 80112b0:	3202      	adds	r2, #2
 80112b2:	0092      	lsls	r2, r2, #2
 80112b4:	f105 010c 	add.w	r1, r5, #12
 80112b8:	300c      	adds	r0, #12
 80112ba:	f7ff fae8 	bl	801088e <memcpy>
 80112be:	2201      	movs	r2, #1
 80112c0:	4631      	mov	r1, r6
 80112c2:	4648      	mov	r0, r9
 80112c4:	f000 fbfc 	bl	8011ac0 <__lshift>
 80112c8:	1c7b      	adds	r3, r7, #1
 80112ca:	9304      	str	r3, [sp, #16]
 80112cc:	eb07 030b 	add.w	r3, r7, fp
 80112d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80112d2:	9b02      	ldr	r3, [sp, #8]
 80112d4:	f003 0301 	and.w	r3, r3, #1
 80112d8:	46a8      	mov	r8, r5
 80112da:	9308      	str	r3, [sp, #32]
 80112dc:	4605      	mov	r5, r0
 80112de:	9b04      	ldr	r3, [sp, #16]
 80112e0:	9801      	ldr	r0, [sp, #4]
 80112e2:	4621      	mov	r1, r4
 80112e4:	f103 3bff 	add.w	fp, r3, #4294967295
 80112e8:	f7ff fafe 	bl	80108e8 <quorem>
 80112ec:	4641      	mov	r1, r8
 80112ee:	9002      	str	r0, [sp, #8]
 80112f0:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80112f4:	9801      	ldr	r0, [sp, #4]
 80112f6:	f000 fc4f 	bl	8011b98 <__mcmp>
 80112fa:	462a      	mov	r2, r5
 80112fc:	9006      	str	r0, [sp, #24]
 80112fe:	4621      	mov	r1, r4
 8011300:	4648      	mov	r0, r9
 8011302:	f000 fc65 	bl	8011bd0 <__mdiff>
 8011306:	68c2      	ldr	r2, [r0, #12]
 8011308:	4606      	mov	r6, r0
 801130a:	b9fa      	cbnz	r2, 801134c <_dtoa_r+0x954>
 801130c:	4601      	mov	r1, r0
 801130e:	9801      	ldr	r0, [sp, #4]
 8011310:	f000 fc42 	bl	8011b98 <__mcmp>
 8011314:	4602      	mov	r2, r0
 8011316:	4631      	mov	r1, r6
 8011318:	4648      	mov	r0, r9
 801131a:	920a      	str	r2, [sp, #40]	@ 0x28
 801131c:	f000 fa0a 	bl	8011734 <_Bfree>
 8011320:	9b07      	ldr	r3, [sp, #28]
 8011322:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011324:	9e04      	ldr	r6, [sp, #16]
 8011326:	ea42 0103 	orr.w	r1, r2, r3
 801132a:	9b08      	ldr	r3, [sp, #32]
 801132c:	4319      	orrs	r1, r3
 801132e:	d10f      	bne.n	8011350 <_dtoa_r+0x958>
 8011330:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8011334:	d028      	beq.n	8011388 <_dtoa_r+0x990>
 8011336:	9b06      	ldr	r3, [sp, #24]
 8011338:	2b00      	cmp	r3, #0
 801133a:	dd02      	ble.n	8011342 <_dtoa_r+0x94a>
 801133c:	9b02      	ldr	r3, [sp, #8]
 801133e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8011342:	f88b a000 	strb.w	sl, [fp]
 8011346:	e55e      	b.n	8010e06 <_dtoa_r+0x40e>
 8011348:	4628      	mov	r0, r5
 801134a:	e7bd      	b.n	80112c8 <_dtoa_r+0x8d0>
 801134c:	2201      	movs	r2, #1
 801134e:	e7e2      	b.n	8011316 <_dtoa_r+0x91e>
 8011350:	9b06      	ldr	r3, [sp, #24]
 8011352:	2b00      	cmp	r3, #0
 8011354:	db04      	blt.n	8011360 <_dtoa_r+0x968>
 8011356:	9907      	ldr	r1, [sp, #28]
 8011358:	430b      	orrs	r3, r1
 801135a:	9908      	ldr	r1, [sp, #32]
 801135c:	430b      	orrs	r3, r1
 801135e:	d120      	bne.n	80113a2 <_dtoa_r+0x9aa>
 8011360:	2a00      	cmp	r2, #0
 8011362:	ddee      	ble.n	8011342 <_dtoa_r+0x94a>
 8011364:	9901      	ldr	r1, [sp, #4]
 8011366:	2201      	movs	r2, #1
 8011368:	4648      	mov	r0, r9
 801136a:	f000 fba9 	bl	8011ac0 <__lshift>
 801136e:	4621      	mov	r1, r4
 8011370:	9001      	str	r0, [sp, #4]
 8011372:	f000 fc11 	bl	8011b98 <__mcmp>
 8011376:	2800      	cmp	r0, #0
 8011378:	dc03      	bgt.n	8011382 <_dtoa_r+0x98a>
 801137a:	d1e2      	bne.n	8011342 <_dtoa_r+0x94a>
 801137c:	f01a 0f01 	tst.w	sl, #1
 8011380:	d0df      	beq.n	8011342 <_dtoa_r+0x94a>
 8011382:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8011386:	d1d9      	bne.n	801133c <_dtoa_r+0x944>
 8011388:	2339      	movs	r3, #57	@ 0x39
 801138a:	f88b 3000 	strb.w	r3, [fp]
 801138e:	4633      	mov	r3, r6
 8011390:	461e      	mov	r6, r3
 8011392:	3b01      	subs	r3, #1
 8011394:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011398:	2a39      	cmp	r2, #57	@ 0x39
 801139a:	d052      	beq.n	8011442 <_dtoa_r+0xa4a>
 801139c:	3201      	adds	r2, #1
 801139e:	701a      	strb	r2, [r3, #0]
 80113a0:	e531      	b.n	8010e06 <_dtoa_r+0x40e>
 80113a2:	2a00      	cmp	r2, #0
 80113a4:	dd07      	ble.n	80113b6 <_dtoa_r+0x9be>
 80113a6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80113aa:	d0ed      	beq.n	8011388 <_dtoa_r+0x990>
 80113ac:	f10a 0301 	add.w	r3, sl, #1
 80113b0:	f88b 3000 	strb.w	r3, [fp]
 80113b4:	e527      	b.n	8010e06 <_dtoa_r+0x40e>
 80113b6:	9b04      	ldr	r3, [sp, #16]
 80113b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80113ba:	f803 ac01 	strb.w	sl, [r3, #-1]
 80113be:	4293      	cmp	r3, r2
 80113c0:	d029      	beq.n	8011416 <_dtoa_r+0xa1e>
 80113c2:	9901      	ldr	r1, [sp, #4]
 80113c4:	2300      	movs	r3, #0
 80113c6:	220a      	movs	r2, #10
 80113c8:	4648      	mov	r0, r9
 80113ca:	f000 f9d5 	bl	8011778 <__multadd>
 80113ce:	45a8      	cmp	r8, r5
 80113d0:	9001      	str	r0, [sp, #4]
 80113d2:	f04f 0300 	mov.w	r3, #0
 80113d6:	f04f 020a 	mov.w	r2, #10
 80113da:	4641      	mov	r1, r8
 80113dc:	4648      	mov	r0, r9
 80113de:	d107      	bne.n	80113f0 <_dtoa_r+0x9f8>
 80113e0:	f000 f9ca 	bl	8011778 <__multadd>
 80113e4:	4680      	mov	r8, r0
 80113e6:	4605      	mov	r5, r0
 80113e8:	9b04      	ldr	r3, [sp, #16]
 80113ea:	3301      	adds	r3, #1
 80113ec:	9304      	str	r3, [sp, #16]
 80113ee:	e776      	b.n	80112de <_dtoa_r+0x8e6>
 80113f0:	f000 f9c2 	bl	8011778 <__multadd>
 80113f4:	4629      	mov	r1, r5
 80113f6:	4680      	mov	r8, r0
 80113f8:	2300      	movs	r3, #0
 80113fa:	220a      	movs	r2, #10
 80113fc:	4648      	mov	r0, r9
 80113fe:	f000 f9bb 	bl	8011778 <__multadd>
 8011402:	4605      	mov	r5, r0
 8011404:	e7f0      	b.n	80113e8 <_dtoa_r+0x9f0>
 8011406:	f1bb 0f00 	cmp.w	fp, #0
 801140a:	bfcc      	ite	gt
 801140c:	465e      	movgt	r6, fp
 801140e:	2601      	movle	r6, #1
 8011410:	443e      	add	r6, r7
 8011412:	f04f 0800 	mov.w	r8, #0
 8011416:	9901      	ldr	r1, [sp, #4]
 8011418:	2201      	movs	r2, #1
 801141a:	4648      	mov	r0, r9
 801141c:	f000 fb50 	bl	8011ac0 <__lshift>
 8011420:	4621      	mov	r1, r4
 8011422:	9001      	str	r0, [sp, #4]
 8011424:	f000 fbb8 	bl	8011b98 <__mcmp>
 8011428:	2800      	cmp	r0, #0
 801142a:	dcb0      	bgt.n	801138e <_dtoa_r+0x996>
 801142c:	d102      	bne.n	8011434 <_dtoa_r+0xa3c>
 801142e:	f01a 0f01 	tst.w	sl, #1
 8011432:	d1ac      	bne.n	801138e <_dtoa_r+0x996>
 8011434:	4633      	mov	r3, r6
 8011436:	461e      	mov	r6, r3
 8011438:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801143c:	2a30      	cmp	r2, #48	@ 0x30
 801143e:	d0fa      	beq.n	8011436 <_dtoa_r+0xa3e>
 8011440:	e4e1      	b.n	8010e06 <_dtoa_r+0x40e>
 8011442:	429f      	cmp	r7, r3
 8011444:	d1a4      	bne.n	8011390 <_dtoa_r+0x998>
 8011446:	9b05      	ldr	r3, [sp, #20]
 8011448:	3301      	adds	r3, #1
 801144a:	9305      	str	r3, [sp, #20]
 801144c:	2331      	movs	r3, #49	@ 0x31
 801144e:	703b      	strb	r3, [r7, #0]
 8011450:	e4d9      	b.n	8010e06 <_dtoa_r+0x40e>
 8011452:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011454:	4f16      	ldr	r7, [pc, #88]	@ (80114b0 <_dtoa_r+0xab8>)
 8011456:	b11b      	cbz	r3, 8011460 <_dtoa_r+0xa68>
 8011458:	f107 0308 	add.w	r3, r7, #8
 801145c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801145e:	6013      	str	r3, [r2, #0]
 8011460:	4638      	mov	r0, r7
 8011462:	b011      	add	sp, #68	@ 0x44
 8011464:	ecbd 8b02 	vpop	{d8}
 8011468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801146c:	9b07      	ldr	r3, [sp, #28]
 801146e:	2b01      	cmp	r3, #1
 8011470:	f77f ae2c 	ble.w	80110cc <_dtoa_r+0x6d4>
 8011474:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011476:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011478:	2001      	movs	r0, #1
 801147a:	e64c      	b.n	8011116 <_dtoa_r+0x71e>
 801147c:	f1bb 0f00 	cmp.w	fp, #0
 8011480:	f77f aed8 	ble.w	8011234 <_dtoa_r+0x83c>
 8011484:	463e      	mov	r6, r7
 8011486:	9801      	ldr	r0, [sp, #4]
 8011488:	4621      	mov	r1, r4
 801148a:	f7ff fa2d 	bl	80108e8 <quorem>
 801148e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8011492:	f806 ab01 	strb.w	sl, [r6], #1
 8011496:	1bf2      	subs	r2, r6, r7
 8011498:	4593      	cmp	fp, r2
 801149a:	ddb4      	ble.n	8011406 <_dtoa_r+0xa0e>
 801149c:	9901      	ldr	r1, [sp, #4]
 801149e:	2300      	movs	r3, #0
 80114a0:	220a      	movs	r2, #10
 80114a2:	4648      	mov	r0, r9
 80114a4:	f000 f968 	bl	8011778 <__multadd>
 80114a8:	9001      	str	r0, [sp, #4]
 80114aa:	e7ec      	b.n	8011486 <_dtoa_r+0xa8e>
 80114ac:	08012a13 	.word	0x08012a13
 80114b0:	080129ae 	.word	0x080129ae

080114b4 <_free_r>:
 80114b4:	b538      	push	{r3, r4, r5, lr}
 80114b6:	4605      	mov	r5, r0
 80114b8:	2900      	cmp	r1, #0
 80114ba:	d041      	beq.n	8011540 <_free_r+0x8c>
 80114bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80114c0:	1f0c      	subs	r4, r1, #4
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	bfb8      	it	lt
 80114c6:	18e4      	addlt	r4, r4, r3
 80114c8:	f000 f8e8 	bl	801169c <__malloc_lock>
 80114cc:	4a1d      	ldr	r2, [pc, #116]	@ (8011544 <_free_r+0x90>)
 80114ce:	6813      	ldr	r3, [r2, #0]
 80114d0:	b933      	cbnz	r3, 80114e0 <_free_r+0x2c>
 80114d2:	6063      	str	r3, [r4, #4]
 80114d4:	6014      	str	r4, [r2, #0]
 80114d6:	4628      	mov	r0, r5
 80114d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80114dc:	f000 b8e4 	b.w	80116a8 <__malloc_unlock>
 80114e0:	42a3      	cmp	r3, r4
 80114e2:	d908      	bls.n	80114f6 <_free_r+0x42>
 80114e4:	6820      	ldr	r0, [r4, #0]
 80114e6:	1821      	adds	r1, r4, r0
 80114e8:	428b      	cmp	r3, r1
 80114ea:	bf01      	itttt	eq
 80114ec:	6819      	ldreq	r1, [r3, #0]
 80114ee:	685b      	ldreq	r3, [r3, #4]
 80114f0:	1809      	addeq	r1, r1, r0
 80114f2:	6021      	streq	r1, [r4, #0]
 80114f4:	e7ed      	b.n	80114d2 <_free_r+0x1e>
 80114f6:	461a      	mov	r2, r3
 80114f8:	685b      	ldr	r3, [r3, #4]
 80114fa:	b10b      	cbz	r3, 8011500 <_free_r+0x4c>
 80114fc:	42a3      	cmp	r3, r4
 80114fe:	d9fa      	bls.n	80114f6 <_free_r+0x42>
 8011500:	6811      	ldr	r1, [r2, #0]
 8011502:	1850      	adds	r0, r2, r1
 8011504:	42a0      	cmp	r0, r4
 8011506:	d10b      	bne.n	8011520 <_free_r+0x6c>
 8011508:	6820      	ldr	r0, [r4, #0]
 801150a:	4401      	add	r1, r0
 801150c:	1850      	adds	r0, r2, r1
 801150e:	4283      	cmp	r3, r0
 8011510:	6011      	str	r1, [r2, #0]
 8011512:	d1e0      	bne.n	80114d6 <_free_r+0x22>
 8011514:	6818      	ldr	r0, [r3, #0]
 8011516:	685b      	ldr	r3, [r3, #4]
 8011518:	6053      	str	r3, [r2, #4]
 801151a:	4408      	add	r0, r1
 801151c:	6010      	str	r0, [r2, #0]
 801151e:	e7da      	b.n	80114d6 <_free_r+0x22>
 8011520:	d902      	bls.n	8011528 <_free_r+0x74>
 8011522:	230c      	movs	r3, #12
 8011524:	602b      	str	r3, [r5, #0]
 8011526:	e7d6      	b.n	80114d6 <_free_r+0x22>
 8011528:	6820      	ldr	r0, [r4, #0]
 801152a:	1821      	adds	r1, r4, r0
 801152c:	428b      	cmp	r3, r1
 801152e:	bf04      	itt	eq
 8011530:	6819      	ldreq	r1, [r3, #0]
 8011532:	685b      	ldreq	r3, [r3, #4]
 8011534:	6063      	str	r3, [r4, #4]
 8011536:	bf04      	itt	eq
 8011538:	1809      	addeq	r1, r1, r0
 801153a:	6021      	streq	r1, [r4, #0]
 801153c:	6054      	str	r4, [r2, #4]
 801153e:	e7ca      	b.n	80114d6 <_free_r+0x22>
 8011540:	bd38      	pop	{r3, r4, r5, pc}
 8011542:	bf00      	nop
 8011544:	24000800 	.word	0x24000800

08011548 <malloc>:
 8011548:	4b02      	ldr	r3, [pc, #8]	@ (8011554 <malloc+0xc>)
 801154a:	4601      	mov	r1, r0
 801154c:	6818      	ldr	r0, [r3, #0]
 801154e:	f000 b825 	b.w	801159c <_malloc_r>
 8011552:	bf00      	nop
 8011554:	24000038 	.word	0x24000038

08011558 <sbrk_aligned>:
 8011558:	b570      	push	{r4, r5, r6, lr}
 801155a:	4e0f      	ldr	r6, [pc, #60]	@ (8011598 <sbrk_aligned+0x40>)
 801155c:	460c      	mov	r4, r1
 801155e:	6831      	ldr	r1, [r6, #0]
 8011560:	4605      	mov	r5, r0
 8011562:	b911      	cbnz	r1, 801156a <sbrk_aligned+0x12>
 8011564:	f001 f816 	bl	8012594 <_sbrk_r>
 8011568:	6030      	str	r0, [r6, #0]
 801156a:	4621      	mov	r1, r4
 801156c:	4628      	mov	r0, r5
 801156e:	f001 f811 	bl	8012594 <_sbrk_r>
 8011572:	1c43      	adds	r3, r0, #1
 8011574:	d103      	bne.n	801157e <sbrk_aligned+0x26>
 8011576:	f04f 34ff 	mov.w	r4, #4294967295
 801157a:	4620      	mov	r0, r4
 801157c:	bd70      	pop	{r4, r5, r6, pc}
 801157e:	1cc4      	adds	r4, r0, #3
 8011580:	f024 0403 	bic.w	r4, r4, #3
 8011584:	42a0      	cmp	r0, r4
 8011586:	d0f8      	beq.n	801157a <sbrk_aligned+0x22>
 8011588:	1a21      	subs	r1, r4, r0
 801158a:	4628      	mov	r0, r5
 801158c:	f001 f802 	bl	8012594 <_sbrk_r>
 8011590:	3001      	adds	r0, #1
 8011592:	d1f2      	bne.n	801157a <sbrk_aligned+0x22>
 8011594:	e7ef      	b.n	8011576 <sbrk_aligned+0x1e>
 8011596:	bf00      	nop
 8011598:	240007fc 	.word	0x240007fc

0801159c <_malloc_r>:
 801159c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115a0:	1ccd      	adds	r5, r1, #3
 80115a2:	f025 0503 	bic.w	r5, r5, #3
 80115a6:	3508      	adds	r5, #8
 80115a8:	2d0c      	cmp	r5, #12
 80115aa:	bf38      	it	cc
 80115ac:	250c      	movcc	r5, #12
 80115ae:	2d00      	cmp	r5, #0
 80115b0:	4606      	mov	r6, r0
 80115b2:	db01      	blt.n	80115b8 <_malloc_r+0x1c>
 80115b4:	42a9      	cmp	r1, r5
 80115b6:	d904      	bls.n	80115c2 <_malloc_r+0x26>
 80115b8:	230c      	movs	r3, #12
 80115ba:	6033      	str	r3, [r6, #0]
 80115bc:	2000      	movs	r0, #0
 80115be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011698 <_malloc_r+0xfc>
 80115c6:	f000 f869 	bl	801169c <__malloc_lock>
 80115ca:	f8d8 3000 	ldr.w	r3, [r8]
 80115ce:	461c      	mov	r4, r3
 80115d0:	bb44      	cbnz	r4, 8011624 <_malloc_r+0x88>
 80115d2:	4629      	mov	r1, r5
 80115d4:	4630      	mov	r0, r6
 80115d6:	f7ff ffbf 	bl	8011558 <sbrk_aligned>
 80115da:	1c43      	adds	r3, r0, #1
 80115dc:	4604      	mov	r4, r0
 80115de:	d158      	bne.n	8011692 <_malloc_r+0xf6>
 80115e0:	f8d8 4000 	ldr.w	r4, [r8]
 80115e4:	4627      	mov	r7, r4
 80115e6:	2f00      	cmp	r7, #0
 80115e8:	d143      	bne.n	8011672 <_malloc_r+0xd6>
 80115ea:	2c00      	cmp	r4, #0
 80115ec:	d04b      	beq.n	8011686 <_malloc_r+0xea>
 80115ee:	6823      	ldr	r3, [r4, #0]
 80115f0:	4639      	mov	r1, r7
 80115f2:	4630      	mov	r0, r6
 80115f4:	eb04 0903 	add.w	r9, r4, r3
 80115f8:	f000 ffcc 	bl	8012594 <_sbrk_r>
 80115fc:	4581      	cmp	r9, r0
 80115fe:	d142      	bne.n	8011686 <_malloc_r+0xea>
 8011600:	6821      	ldr	r1, [r4, #0]
 8011602:	1a6d      	subs	r5, r5, r1
 8011604:	4629      	mov	r1, r5
 8011606:	4630      	mov	r0, r6
 8011608:	f7ff ffa6 	bl	8011558 <sbrk_aligned>
 801160c:	3001      	adds	r0, #1
 801160e:	d03a      	beq.n	8011686 <_malloc_r+0xea>
 8011610:	6823      	ldr	r3, [r4, #0]
 8011612:	442b      	add	r3, r5
 8011614:	6023      	str	r3, [r4, #0]
 8011616:	f8d8 3000 	ldr.w	r3, [r8]
 801161a:	685a      	ldr	r2, [r3, #4]
 801161c:	bb62      	cbnz	r2, 8011678 <_malloc_r+0xdc>
 801161e:	f8c8 7000 	str.w	r7, [r8]
 8011622:	e00f      	b.n	8011644 <_malloc_r+0xa8>
 8011624:	6822      	ldr	r2, [r4, #0]
 8011626:	1b52      	subs	r2, r2, r5
 8011628:	d420      	bmi.n	801166c <_malloc_r+0xd0>
 801162a:	2a0b      	cmp	r2, #11
 801162c:	d917      	bls.n	801165e <_malloc_r+0xc2>
 801162e:	1961      	adds	r1, r4, r5
 8011630:	42a3      	cmp	r3, r4
 8011632:	6025      	str	r5, [r4, #0]
 8011634:	bf18      	it	ne
 8011636:	6059      	strne	r1, [r3, #4]
 8011638:	6863      	ldr	r3, [r4, #4]
 801163a:	bf08      	it	eq
 801163c:	f8c8 1000 	streq.w	r1, [r8]
 8011640:	5162      	str	r2, [r4, r5]
 8011642:	604b      	str	r3, [r1, #4]
 8011644:	4630      	mov	r0, r6
 8011646:	f000 f82f 	bl	80116a8 <__malloc_unlock>
 801164a:	f104 000b 	add.w	r0, r4, #11
 801164e:	1d23      	adds	r3, r4, #4
 8011650:	f020 0007 	bic.w	r0, r0, #7
 8011654:	1ac2      	subs	r2, r0, r3
 8011656:	bf1c      	itt	ne
 8011658:	1a1b      	subne	r3, r3, r0
 801165a:	50a3      	strne	r3, [r4, r2]
 801165c:	e7af      	b.n	80115be <_malloc_r+0x22>
 801165e:	6862      	ldr	r2, [r4, #4]
 8011660:	42a3      	cmp	r3, r4
 8011662:	bf0c      	ite	eq
 8011664:	f8c8 2000 	streq.w	r2, [r8]
 8011668:	605a      	strne	r2, [r3, #4]
 801166a:	e7eb      	b.n	8011644 <_malloc_r+0xa8>
 801166c:	4623      	mov	r3, r4
 801166e:	6864      	ldr	r4, [r4, #4]
 8011670:	e7ae      	b.n	80115d0 <_malloc_r+0x34>
 8011672:	463c      	mov	r4, r7
 8011674:	687f      	ldr	r7, [r7, #4]
 8011676:	e7b6      	b.n	80115e6 <_malloc_r+0x4a>
 8011678:	461a      	mov	r2, r3
 801167a:	685b      	ldr	r3, [r3, #4]
 801167c:	42a3      	cmp	r3, r4
 801167e:	d1fb      	bne.n	8011678 <_malloc_r+0xdc>
 8011680:	2300      	movs	r3, #0
 8011682:	6053      	str	r3, [r2, #4]
 8011684:	e7de      	b.n	8011644 <_malloc_r+0xa8>
 8011686:	230c      	movs	r3, #12
 8011688:	6033      	str	r3, [r6, #0]
 801168a:	4630      	mov	r0, r6
 801168c:	f000 f80c 	bl	80116a8 <__malloc_unlock>
 8011690:	e794      	b.n	80115bc <_malloc_r+0x20>
 8011692:	6005      	str	r5, [r0, #0]
 8011694:	e7d6      	b.n	8011644 <_malloc_r+0xa8>
 8011696:	bf00      	nop
 8011698:	24000800 	.word	0x24000800

0801169c <__malloc_lock>:
 801169c:	4801      	ldr	r0, [pc, #4]	@ (80116a4 <__malloc_lock+0x8>)
 801169e:	f7ff b8f4 	b.w	801088a <__retarget_lock_acquire_recursive>
 80116a2:	bf00      	nop
 80116a4:	240007f8 	.word	0x240007f8

080116a8 <__malloc_unlock>:
 80116a8:	4801      	ldr	r0, [pc, #4]	@ (80116b0 <__malloc_unlock+0x8>)
 80116aa:	f7ff b8ef 	b.w	801088c <__retarget_lock_release_recursive>
 80116ae:	bf00      	nop
 80116b0:	240007f8 	.word	0x240007f8

080116b4 <_Balloc>:
 80116b4:	b570      	push	{r4, r5, r6, lr}
 80116b6:	69c6      	ldr	r6, [r0, #28]
 80116b8:	4604      	mov	r4, r0
 80116ba:	460d      	mov	r5, r1
 80116bc:	b976      	cbnz	r6, 80116dc <_Balloc+0x28>
 80116be:	2010      	movs	r0, #16
 80116c0:	f7ff ff42 	bl	8011548 <malloc>
 80116c4:	4602      	mov	r2, r0
 80116c6:	61e0      	str	r0, [r4, #28]
 80116c8:	b920      	cbnz	r0, 80116d4 <_Balloc+0x20>
 80116ca:	4b18      	ldr	r3, [pc, #96]	@ (801172c <_Balloc+0x78>)
 80116cc:	4818      	ldr	r0, [pc, #96]	@ (8011730 <_Balloc+0x7c>)
 80116ce:	216b      	movs	r1, #107	@ 0x6b
 80116d0:	f7ff f8ec 	bl	80108ac <__assert_func>
 80116d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80116d8:	6006      	str	r6, [r0, #0]
 80116da:	60c6      	str	r6, [r0, #12]
 80116dc:	69e6      	ldr	r6, [r4, #28]
 80116de:	68f3      	ldr	r3, [r6, #12]
 80116e0:	b183      	cbz	r3, 8011704 <_Balloc+0x50>
 80116e2:	69e3      	ldr	r3, [r4, #28]
 80116e4:	68db      	ldr	r3, [r3, #12]
 80116e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80116ea:	b9b8      	cbnz	r0, 801171c <_Balloc+0x68>
 80116ec:	2101      	movs	r1, #1
 80116ee:	fa01 f605 	lsl.w	r6, r1, r5
 80116f2:	1d72      	adds	r2, r6, #5
 80116f4:	0092      	lsls	r2, r2, #2
 80116f6:	4620      	mov	r0, r4
 80116f8:	f000 ff63 	bl	80125c2 <_calloc_r>
 80116fc:	b160      	cbz	r0, 8011718 <_Balloc+0x64>
 80116fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011702:	e00e      	b.n	8011722 <_Balloc+0x6e>
 8011704:	2221      	movs	r2, #33	@ 0x21
 8011706:	2104      	movs	r1, #4
 8011708:	4620      	mov	r0, r4
 801170a:	f000 ff5a 	bl	80125c2 <_calloc_r>
 801170e:	69e3      	ldr	r3, [r4, #28]
 8011710:	60f0      	str	r0, [r6, #12]
 8011712:	68db      	ldr	r3, [r3, #12]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d1e4      	bne.n	80116e2 <_Balloc+0x2e>
 8011718:	2000      	movs	r0, #0
 801171a:	bd70      	pop	{r4, r5, r6, pc}
 801171c:	6802      	ldr	r2, [r0, #0]
 801171e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011722:	2300      	movs	r3, #0
 8011724:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011728:	e7f7      	b.n	801171a <_Balloc+0x66>
 801172a:	bf00      	nop
 801172c:	08012901 	.word	0x08012901
 8011730:	08012a24 	.word	0x08012a24

08011734 <_Bfree>:
 8011734:	b570      	push	{r4, r5, r6, lr}
 8011736:	69c6      	ldr	r6, [r0, #28]
 8011738:	4605      	mov	r5, r0
 801173a:	460c      	mov	r4, r1
 801173c:	b976      	cbnz	r6, 801175c <_Bfree+0x28>
 801173e:	2010      	movs	r0, #16
 8011740:	f7ff ff02 	bl	8011548 <malloc>
 8011744:	4602      	mov	r2, r0
 8011746:	61e8      	str	r0, [r5, #28]
 8011748:	b920      	cbnz	r0, 8011754 <_Bfree+0x20>
 801174a:	4b09      	ldr	r3, [pc, #36]	@ (8011770 <_Bfree+0x3c>)
 801174c:	4809      	ldr	r0, [pc, #36]	@ (8011774 <_Bfree+0x40>)
 801174e:	218f      	movs	r1, #143	@ 0x8f
 8011750:	f7ff f8ac 	bl	80108ac <__assert_func>
 8011754:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011758:	6006      	str	r6, [r0, #0]
 801175a:	60c6      	str	r6, [r0, #12]
 801175c:	b13c      	cbz	r4, 801176e <_Bfree+0x3a>
 801175e:	69eb      	ldr	r3, [r5, #28]
 8011760:	6862      	ldr	r2, [r4, #4]
 8011762:	68db      	ldr	r3, [r3, #12]
 8011764:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011768:	6021      	str	r1, [r4, #0]
 801176a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801176e:	bd70      	pop	{r4, r5, r6, pc}
 8011770:	08012901 	.word	0x08012901
 8011774:	08012a24 	.word	0x08012a24

08011778 <__multadd>:
 8011778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801177c:	690d      	ldr	r5, [r1, #16]
 801177e:	4607      	mov	r7, r0
 8011780:	460c      	mov	r4, r1
 8011782:	461e      	mov	r6, r3
 8011784:	f101 0c14 	add.w	ip, r1, #20
 8011788:	2000      	movs	r0, #0
 801178a:	f8dc 3000 	ldr.w	r3, [ip]
 801178e:	b299      	uxth	r1, r3
 8011790:	fb02 6101 	mla	r1, r2, r1, r6
 8011794:	0c1e      	lsrs	r6, r3, #16
 8011796:	0c0b      	lsrs	r3, r1, #16
 8011798:	fb02 3306 	mla	r3, r2, r6, r3
 801179c:	b289      	uxth	r1, r1
 801179e:	3001      	adds	r0, #1
 80117a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80117a4:	4285      	cmp	r5, r0
 80117a6:	f84c 1b04 	str.w	r1, [ip], #4
 80117aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80117ae:	dcec      	bgt.n	801178a <__multadd+0x12>
 80117b0:	b30e      	cbz	r6, 80117f6 <__multadd+0x7e>
 80117b2:	68a3      	ldr	r3, [r4, #8]
 80117b4:	42ab      	cmp	r3, r5
 80117b6:	dc19      	bgt.n	80117ec <__multadd+0x74>
 80117b8:	6861      	ldr	r1, [r4, #4]
 80117ba:	4638      	mov	r0, r7
 80117bc:	3101      	adds	r1, #1
 80117be:	f7ff ff79 	bl	80116b4 <_Balloc>
 80117c2:	4680      	mov	r8, r0
 80117c4:	b928      	cbnz	r0, 80117d2 <__multadd+0x5a>
 80117c6:	4602      	mov	r2, r0
 80117c8:	4b0c      	ldr	r3, [pc, #48]	@ (80117fc <__multadd+0x84>)
 80117ca:	480d      	ldr	r0, [pc, #52]	@ (8011800 <__multadd+0x88>)
 80117cc:	21ba      	movs	r1, #186	@ 0xba
 80117ce:	f7ff f86d 	bl	80108ac <__assert_func>
 80117d2:	6922      	ldr	r2, [r4, #16]
 80117d4:	3202      	adds	r2, #2
 80117d6:	f104 010c 	add.w	r1, r4, #12
 80117da:	0092      	lsls	r2, r2, #2
 80117dc:	300c      	adds	r0, #12
 80117de:	f7ff f856 	bl	801088e <memcpy>
 80117e2:	4621      	mov	r1, r4
 80117e4:	4638      	mov	r0, r7
 80117e6:	f7ff ffa5 	bl	8011734 <_Bfree>
 80117ea:	4644      	mov	r4, r8
 80117ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80117f0:	3501      	adds	r5, #1
 80117f2:	615e      	str	r6, [r3, #20]
 80117f4:	6125      	str	r5, [r4, #16]
 80117f6:	4620      	mov	r0, r4
 80117f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117fc:	08012a13 	.word	0x08012a13
 8011800:	08012a24 	.word	0x08012a24

08011804 <__hi0bits>:
 8011804:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011808:	4603      	mov	r3, r0
 801180a:	bf36      	itet	cc
 801180c:	0403      	lslcc	r3, r0, #16
 801180e:	2000      	movcs	r0, #0
 8011810:	2010      	movcc	r0, #16
 8011812:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011816:	bf3c      	itt	cc
 8011818:	021b      	lslcc	r3, r3, #8
 801181a:	3008      	addcc	r0, #8
 801181c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011820:	bf3c      	itt	cc
 8011822:	011b      	lslcc	r3, r3, #4
 8011824:	3004      	addcc	r0, #4
 8011826:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801182a:	bf3c      	itt	cc
 801182c:	009b      	lslcc	r3, r3, #2
 801182e:	3002      	addcc	r0, #2
 8011830:	2b00      	cmp	r3, #0
 8011832:	db05      	blt.n	8011840 <__hi0bits+0x3c>
 8011834:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011838:	f100 0001 	add.w	r0, r0, #1
 801183c:	bf08      	it	eq
 801183e:	2020      	moveq	r0, #32
 8011840:	4770      	bx	lr

08011842 <__lo0bits>:
 8011842:	6803      	ldr	r3, [r0, #0]
 8011844:	4602      	mov	r2, r0
 8011846:	f013 0007 	ands.w	r0, r3, #7
 801184a:	d00b      	beq.n	8011864 <__lo0bits+0x22>
 801184c:	07d9      	lsls	r1, r3, #31
 801184e:	d421      	bmi.n	8011894 <__lo0bits+0x52>
 8011850:	0798      	lsls	r0, r3, #30
 8011852:	bf49      	itett	mi
 8011854:	085b      	lsrmi	r3, r3, #1
 8011856:	089b      	lsrpl	r3, r3, #2
 8011858:	2001      	movmi	r0, #1
 801185a:	6013      	strmi	r3, [r2, #0]
 801185c:	bf5c      	itt	pl
 801185e:	6013      	strpl	r3, [r2, #0]
 8011860:	2002      	movpl	r0, #2
 8011862:	4770      	bx	lr
 8011864:	b299      	uxth	r1, r3
 8011866:	b909      	cbnz	r1, 801186c <__lo0bits+0x2a>
 8011868:	0c1b      	lsrs	r3, r3, #16
 801186a:	2010      	movs	r0, #16
 801186c:	b2d9      	uxtb	r1, r3
 801186e:	b909      	cbnz	r1, 8011874 <__lo0bits+0x32>
 8011870:	3008      	adds	r0, #8
 8011872:	0a1b      	lsrs	r3, r3, #8
 8011874:	0719      	lsls	r1, r3, #28
 8011876:	bf04      	itt	eq
 8011878:	091b      	lsreq	r3, r3, #4
 801187a:	3004      	addeq	r0, #4
 801187c:	0799      	lsls	r1, r3, #30
 801187e:	bf04      	itt	eq
 8011880:	089b      	lsreq	r3, r3, #2
 8011882:	3002      	addeq	r0, #2
 8011884:	07d9      	lsls	r1, r3, #31
 8011886:	d403      	bmi.n	8011890 <__lo0bits+0x4e>
 8011888:	085b      	lsrs	r3, r3, #1
 801188a:	f100 0001 	add.w	r0, r0, #1
 801188e:	d003      	beq.n	8011898 <__lo0bits+0x56>
 8011890:	6013      	str	r3, [r2, #0]
 8011892:	4770      	bx	lr
 8011894:	2000      	movs	r0, #0
 8011896:	4770      	bx	lr
 8011898:	2020      	movs	r0, #32
 801189a:	4770      	bx	lr

0801189c <__i2b>:
 801189c:	b510      	push	{r4, lr}
 801189e:	460c      	mov	r4, r1
 80118a0:	2101      	movs	r1, #1
 80118a2:	f7ff ff07 	bl	80116b4 <_Balloc>
 80118a6:	4602      	mov	r2, r0
 80118a8:	b928      	cbnz	r0, 80118b6 <__i2b+0x1a>
 80118aa:	4b05      	ldr	r3, [pc, #20]	@ (80118c0 <__i2b+0x24>)
 80118ac:	4805      	ldr	r0, [pc, #20]	@ (80118c4 <__i2b+0x28>)
 80118ae:	f240 1145 	movw	r1, #325	@ 0x145
 80118b2:	f7fe fffb 	bl	80108ac <__assert_func>
 80118b6:	2301      	movs	r3, #1
 80118b8:	6144      	str	r4, [r0, #20]
 80118ba:	6103      	str	r3, [r0, #16]
 80118bc:	bd10      	pop	{r4, pc}
 80118be:	bf00      	nop
 80118c0:	08012a13 	.word	0x08012a13
 80118c4:	08012a24 	.word	0x08012a24

080118c8 <__multiply>:
 80118c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118cc:	4617      	mov	r7, r2
 80118ce:	690a      	ldr	r2, [r1, #16]
 80118d0:	693b      	ldr	r3, [r7, #16]
 80118d2:	429a      	cmp	r2, r3
 80118d4:	bfa8      	it	ge
 80118d6:	463b      	movge	r3, r7
 80118d8:	4689      	mov	r9, r1
 80118da:	bfa4      	itt	ge
 80118dc:	460f      	movge	r7, r1
 80118de:	4699      	movge	r9, r3
 80118e0:	693d      	ldr	r5, [r7, #16]
 80118e2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80118e6:	68bb      	ldr	r3, [r7, #8]
 80118e8:	6879      	ldr	r1, [r7, #4]
 80118ea:	eb05 060a 	add.w	r6, r5, sl
 80118ee:	42b3      	cmp	r3, r6
 80118f0:	b085      	sub	sp, #20
 80118f2:	bfb8      	it	lt
 80118f4:	3101      	addlt	r1, #1
 80118f6:	f7ff fedd 	bl	80116b4 <_Balloc>
 80118fa:	b930      	cbnz	r0, 801190a <__multiply+0x42>
 80118fc:	4602      	mov	r2, r0
 80118fe:	4b41      	ldr	r3, [pc, #260]	@ (8011a04 <__multiply+0x13c>)
 8011900:	4841      	ldr	r0, [pc, #260]	@ (8011a08 <__multiply+0x140>)
 8011902:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011906:	f7fe ffd1 	bl	80108ac <__assert_func>
 801190a:	f100 0414 	add.w	r4, r0, #20
 801190e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8011912:	4623      	mov	r3, r4
 8011914:	2200      	movs	r2, #0
 8011916:	4573      	cmp	r3, lr
 8011918:	d320      	bcc.n	801195c <__multiply+0x94>
 801191a:	f107 0814 	add.w	r8, r7, #20
 801191e:	f109 0114 	add.w	r1, r9, #20
 8011922:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8011926:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801192a:	9302      	str	r3, [sp, #8]
 801192c:	1beb      	subs	r3, r5, r7
 801192e:	3b15      	subs	r3, #21
 8011930:	f023 0303 	bic.w	r3, r3, #3
 8011934:	3304      	adds	r3, #4
 8011936:	3715      	adds	r7, #21
 8011938:	42bd      	cmp	r5, r7
 801193a:	bf38      	it	cc
 801193c:	2304      	movcc	r3, #4
 801193e:	9301      	str	r3, [sp, #4]
 8011940:	9b02      	ldr	r3, [sp, #8]
 8011942:	9103      	str	r1, [sp, #12]
 8011944:	428b      	cmp	r3, r1
 8011946:	d80c      	bhi.n	8011962 <__multiply+0x9a>
 8011948:	2e00      	cmp	r6, #0
 801194a:	dd03      	ble.n	8011954 <__multiply+0x8c>
 801194c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011950:	2b00      	cmp	r3, #0
 8011952:	d055      	beq.n	8011a00 <__multiply+0x138>
 8011954:	6106      	str	r6, [r0, #16]
 8011956:	b005      	add	sp, #20
 8011958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801195c:	f843 2b04 	str.w	r2, [r3], #4
 8011960:	e7d9      	b.n	8011916 <__multiply+0x4e>
 8011962:	f8b1 a000 	ldrh.w	sl, [r1]
 8011966:	f1ba 0f00 	cmp.w	sl, #0
 801196a:	d01f      	beq.n	80119ac <__multiply+0xe4>
 801196c:	46c4      	mov	ip, r8
 801196e:	46a1      	mov	r9, r4
 8011970:	2700      	movs	r7, #0
 8011972:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011976:	f8d9 3000 	ldr.w	r3, [r9]
 801197a:	fa1f fb82 	uxth.w	fp, r2
 801197e:	b29b      	uxth	r3, r3
 8011980:	fb0a 330b 	mla	r3, sl, fp, r3
 8011984:	443b      	add	r3, r7
 8011986:	f8d9 7000 	ldr.w	r7, [r9]
 801198a:	0c12      	lsrs	r2, r2, #16
 801198c:	0c3f      	lsrs	r7, r7, #16
 801198e:	fb0a 7202 	mla	r2, sl, r2, r7
 8011992:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8011996:	b29b      	uxth	r3, r3
 8011998:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801199c:	4565      	cmp	r5, ip
 801199e:	f849 3b04 	str.w	r3, [r9], #4
 80119a2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80119a6:	d8e4      	bhi.n	8011972 <__multiply+0xaa>
 80119a8:	9b01      	ldr	r3, [sp, #4]
 80119aa:	50e7      	str	r7, [r4, r3]
 80119ac:	9b03      	ldr	r3, [sp, #12]
 80119ae:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80119b2:	3104      	adds	r1, #4
 80119b4:	f1b9 0f00 	cmp.w	r9, #0
 80119b8:	d020      	beq.n	80119fc <__multiply+0x134>
 80119ba:	6823      	ldr	r3, [r4, #0]
 80119bc:	4647      	mov	r7, r8
 80119be:	46a4      	mov	ip, r4
 80119c0:	f04f 0a00 	mov.w	sl, #0
 80119c4:	f8b7 b000 	ldrh.w	fp, [r7]
 80119c8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80119cc:	fb09 220b 	mla	r2, r9, fp, r2
 80119d0:	4452      	add	r2, sl
 80119d2:	b29b      	uxth	r3, r3
 80119d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80119d8:	f84c 3b04 	str.w	r3, [ip], #4
 80119dc:	f857 3b04 	ldr.w	r3, [r7], #4
 80119e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80119e4:	f8bc 3000 	ldrh.w	r3, [ip]
 80119e8:	fb09 330a 	mla	r3, r9, sl, r3
 80119ec:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80119f0:	42bd      	cmp	r5, r7
 80119f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80119f6:	d8e5      	bhi.n	80119c4 <__multiply+0xfc>
 80119f8:	9a01      	ldr	r2, [sp, #4]
 80119fa:	50a3      	str	r3, [r4, r2]
 80119fc:	3404      	adds	r4, #4
 80119fe:	e79f      	b.n	8011940 <__multiply+0x78>
 8011a00:	3e01      	subs	r6, #1
 8011a02:	e7a1      	b.n	8011948 <__multiply+0x80>
 8011a04:	08012a13 	.word	0x08012a13
 8011a08:	08012a24 	.word	0x08012a24

08011a0c <__pow5mult>:
 8011a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a10:	4615      	mov	r5, r2
 8011a12:	f012 0203 	ands.w	r2, r2, #3
 8011a16:	4607      	mov	r7, r0
 8011a18:	460e      	mov	r6, r1
 8011a1a:	d007      	beq.n	8011a2c <__pow5mult+0x20>
 8011a1c:	4c25      	ldr	r4, [pc, #148]	@ (8011ab4 <__pow5mult+0xa8>)
 8011a1e:	3a01      	subs	r2, #1
 8011a20:	2300      	movs	r3, #0
 8011a22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011a26:	f7ff fea7 	bl	8011778 <__multadd>
 8011a2a:	4606      	mov	r6, r0
 8011a2c:	10ad      	asrs	r5, r5, #2
 8011a2e:	d03d      	beq.n	8011aac <__pow5mult+0xa0>
 8011a30:	69fc      	ldr	r4, [r7, #28]
 8011a32:	b97c      	cbnz	r4, 8011a54 <__pow5mult+0x48>
 8011a34:	2010      	movs	r0, #16
 8011a36:	f7ff fd87 	bl	8011548 <malloc>
 8011a3a:	4602      	mov	r2, r0
 8011a3c:	61f8      	str	r0, [r7, #28]
 8011a3e:	b928      	cbnz	r0, 8011a4c <__pow5mult+0x40>
 8011a40:	4b1d      	ldr	r3, [pc, #116]	@ (8011ab8 <__pow5mult+0xac>)
 8011a42:	481e      	ldr	r0, [pc, #120]	@ (8011abc <__pow5mult+0xb0>)
 8011a44:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011a48:	f7fe ff30 	bl	80108ac <__assert_func>
 8011a4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011a50:	6004      	str	r4, [r0, #0]
 8011a52:	60c4      	str	r4, [r0, #12]
 8011a54:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011a58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011a5c:	b94c      	cbnz	r4, 8011a72 <__pow5mult+0x66>
 8011a5e:	f240 2171 	movw	r1, #625	@ 0x271
 8011a62:	4638      	mov	r0, r7
 8011a64:	f7ff ff1a 	bl	801189c <__i2b>
 8011a68:	2300      	movs	r3, #0
 8011a6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8011a6e:	4604      	mov	r4, r0
 8011a70:	6003      	str	r3, [r0, #0]
 8011a72:	f04f 0900 	mov.w	r9, #0
 8011a76:	07eb      	lsls	r3, r5, #31
 8011a78:	d50a      	bpl.n	8011a90 <__pow5mult+0x84>
 8011a7a:	4631      	mov	r1, r6
 8011a7c:	4622      	mov	r2, r4
 8011a7e:	4638      	mov	r0, r7
 8011a80:	f7ff ff22 	bl	80118c8 <__multiply>
 8011a84:	4631      	mov	r1, r6
 8011a86:	4680      	mov	r8, r0
 8011a88:	4638      	mov	r0, r7
 8011a8a:	f7ff fe53 	bl	8011734 <_Bfree>
 8011a8e:	4646      	mov	r6, r8
 8011a90:	106d      	asrs	r5, r5, #1
 8011a92:	d00b      	beq.n	8011aac <__pow5mult+0xa0>
 8011a94:	6820      	ldr	r0, [r4, #0]
 8011a96:	b938      	cbnz	r0, 8011aa8 <__pow5mult+0x9c>
 8011a98:	4622      	mov	r2, r4
 8011a9a:	4621      	mov	r1, r4
 8011a9c:	4638      	mov	r0, r7
 8011a9e:	f7ff ff13 	bl	80118c8 <__multiply>
 8011aa2:	6020      	str	r0, [r4, #0]
 8011aa4:	f8c0 9000 	str.w	r9, [r0]
 8011aa8:	4604      	mov	r4, r0
 8011aaa:	e7e4      	b.n	8011a76 <__pow5mult+0x6a>
 8011aac:	4630      	mov	r0, r6
 8011aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ab2:	bf00      	nop
 8011ab4:	08012a98 	.word	0x08012a98
 8011ab8:	08012901 	.word	0x08012901
 8011abc:	08012a24 	.word	0x08012a24

08011ac0 <__lshift>:
 8011ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ac4:	460c      	mov	r4, r1
 8011ac6:	6849      	ldr	r1, [r1, #4]
 8011ac8:	6923      	ldr	r3, [r4, #16]
 8011aca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011ace:	68a3      	ldr	r3, [r4, #8]
 8011ad0:	4607      	mov	r7, r0
 8011ad2:	4691      	mov	r9, r2
 8011ad4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011ad8:	f108 0601 	add.w	r6, r8, #1
 8011adc:	42b3      	cmp	r3, r6
 8011ade:	db0b      	blt.n	8011af8 <__lshift+0x38>
 8011ae0:	4638      	mov	r0, r7
 8011ae2:	f7ff fde7 	bl	80116b4 <_Balloc>
 8011ae6:	4605      	mov	r5, r0
 8011ae8:	b948      	cbnz	r0, 8011afe <__lshift+0x3e>
 8011aea:	4602      	mov	r2, r0
 8011aec:	4b28      	ldr	r3, [pc, #160]	@ (8011b90 <__lshift+0xd0>)
 8011aee:	4829      	ldr	r0, [pc, #164]	@ (8011b94 <__lshift+0xd4>)
 8011af0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011af4:	f7fe feda 	bl	80108ac <__assert_func>
 8011af8:	3101      	adds	r1, #1
 8011afa:	005b      	lsls	r3, r3, #1
 8011afc:	e7ee      	b.n	8011adc <__lshift+0x1c>
 8011afe:	2300      	movs	r3, #0
 8011b00:	f100 0114 	add.w	r1, r0, #20
 8011b04:	f100 0210 	add.w	r2, r0, #16
 8011b08:	4618      	mov	r0, r3
 8011b0a:	4553      	cmp	r3, sl
 8011b0c:	db33      	blt.n	8011b76 <__lshift+0xb6>
 8011b0e:	6920      	ldr	r0, [r4, #16]
 8011b10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011b14:	f104 0314 	add.w	r3, r4, #20
 8011b18:	f019 091f 	ands.w	r9, r9, #31
 8011b1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011b20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011b24:	d02b      	beq.n	8011b7e <__lshift+0xbe>
 8011b26:	f1c9 0e20 	rsb	lr, r9, #32
 8011b2a:	468a      	mov	sl, r1
 8011b2c:	2200      	movs	r2, #0
 8011b2e:	6818      	ldr	r0, [r3, #0]
 8011b30:	fa00 f009 	lsl.w	r0, r0, r9
 8011b34:	4310      	orrs	r0, r2
 8011b36:	f84a 0b04 	str.w	r0, [sl], #4
 8011b3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b3e:	459c      	cmp	ip, r3
 8011b40:	fa22 f20e 	lsr.w	r2, r2, lr
 8011b44:	d8f3      	bhi.n	8011b2e <__lshift+0x6e>
 8011b46:	ebac 0304 	sub.w	r3, ip, r4
 8011b4a:	3b15      	subs	r3, #21
 8011b4c:	f023 0303 	bic.w	r3, r3, #3
 8011b50:	3304      	adds	r3, #4
 8011b52:	f104 0015 	add.w	r0, r4, #21
 8011b56:	4560      	cmp	r0, ip
 8011b58:	bf88      	it	hi
 8011b5a:	2304      	movhi	r3, #4
 8011b5c:	50ca      	str	r2, [r1, r3]
 8011b5e:	b10a      	cbz	r2, 8011b64 <__lshift+0xa4>
 8011b60:	f108 0602 	add.w	r6, r8, #2
 8011b64:	3e01      	subs	r6, #1
 8011b66:	4638      	mov	r0, r7
 8011b68:	612e      	str	r6, [r5, #16]
 8011b6a:	4621      	mov	r1, r4
 8011b6c:	f7ff fde2 	bl	8011734 <_Bfree>
 8011b70:	4628      	mov	r0, r5
 8011b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b76:	f842 0f04 	str.w	r0, [r2, #4]!
 8011b7a:	3301      	adds	r3, #1
 8011b7c:	e7c5      	b.n	8011b0a <__lshift+0x4a>
 8011b7e:	3904      	subs	r1, #4
 8011b80:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b84:	f841 2f04 	str.w	r2, [r1, #4]!
 8011b88:	459c      	cmp	ip, r3
 8011b8a:	d8f9      	bhi.n	8011b80 <__lshift+0xc0>
 8011b8c:	e7ea      	b.n	8011b64 <__lshift+0xa4>
 8011b8e:	bf00      	nop
 8011b90:	08012a13 	.word	0x08012a13
 8011b94:	08012a24 	.word	0x08012a24

08011b98 <__mcmp>:
 8011b98:	690a      	ldr	r2, [r1, #16]
 8011b9a:	4603      	mov	r3, r0
 8011b9c:	6900      	ldr	r0, [r0, #16]
 8011b9e:	1a80      	subs	r0, r0, r2
 8011ba0:	b530      	push	{r4, r5, lr}
 8011ba2:	d10e      	bne.n	8011bc2 <__mcmp+0x2a>
 8011ba4:	3314      	adds	r3, #20
 8011ba6:	3114      	adds	r1, #20
 8011ba8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011bac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011bb0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011bb4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011bb8:	4295      	cmp	r5, r2
 8011bba:	d003      	beq.n	8011bc4 <__mcmp+0x2c>
 8011bbc:	d205      	bcs.n	8011bca <__mcmp+0x32>
 8011bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8011bc2:	bd30      	pop	{r4, r5, pc}
 8011bc4:	42a3      	cmp	r3, r4
 8011bc6:	d3f3      	bcc.n	8011bb0 <__mcmp+0x18>
 8011bc8:	e7fb      	b.n	8011bc2 <__mcmp+0x2a>
 8011bca:	2001      	movs	r0, #1
 8011bcc:	e7f9      	b.n	8011bc2 <__mcmp+0x2a>
	...

08011bd0 <__mdiff>:
 8011bd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bd4:	4689      	mov	r9, r1
 8011bd6:	4606      	mov	r6, r0
 8011bd8:	4611      	mov	r1, r2
 8011bda:	4648      	mov	r0, r9
 8011bdc:	4614      	mov	r4, r2
 8011bde:	f7ff ffdb 	bl	8011b98 <__mcmp>
 8011be2:	1e05      	subs	r5, r0, #0
 8011be4:	d112      	bne.n	8011c0c <__mdiff+0x3c>
 8011be6:	4629      	mov	r1, r5
 8011be8:	4630      	mov	r0, r6
 8011bea:	f7ff fd63 	bl	80116b4 <_Balloc>
 8011bee:	4602      	mov	r2, r0
 8011bf0:	b928      	cbnz	r0, 8011bfe <__mdiff+0x2e>
 8011bf2:	4b3f      	ldr	r3, [pc, #252]	@ (8011cf0 <__mdiff+0x120>)
 8011bf4:	f240 2137 	movw	r1, #567	@ 0x237
 8011bf8:	483e      	ldr	r0, [pc, #248]	@ (8011cf4 <__mdiff+0x124>)
 8011bfa:	f7fe fe57 	bl	80108ac <__assert_func>
 8011bfe:	2301      	movs	r3, #1
 8011c00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011c04:	4610      	mov	r0, r2
 8011c06:	b003      	add	sp, #12
 8011c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c0c:	bfbc      	itt	lt
 8011c0e:	464b      	movlt	r3, r9
 8011c10:	46a1      	movlt	r9, r4
 8011c12:	4630      	mov	r0, r6
 8011c14:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011c18:	bfba      	itte	lt
 8011c1a:	461c      	movlt	r4, r3
 8011c1c:	2501      	movlt	r5, #1
 8011c1e:	2500      	movge	r5, #0
 8011c20:	f7ff fd48 	bl	80116b4 <_Balloc>
 8011c24:	4602      	mov	r2, r0
 8011c26:	b918      	cbnz	r0, 8011c30 <__mdiff+0x60>
 8011c28:	4b31      	ldr	r3, [pc, #196]	@ (8011cf0 <__mdiff+0x120>)
 8011c2a:	f240 2145 	movw	r1, #581	@ 0x245
 8011c2e:	e7e3      	b.n	8011bf8 <__mdiff+0x28>
 8011c30:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011c34:	6926      	ldr	r6, [r4, #16]
 8011c36:	60c5      	str	r5, [r0, #12]
 8011c38:	f109 0310 	add.w	r3, r9, #16
 8011c3c:	f109 0514 	add.w	r5, r9, #20
 8011c40:	f104 0e14 	add.w	lr, r4, #20
 8011c44:	f100 0b14 	add.w	fp, r0, #20
 8011c48:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011c4c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011c50:	9301      	str	r3, [sp, #4]
 8011c52:	46d9      	mov	r9, fp
 8011c54:	f04f 0c00 	mov.w	ip, #0
 8011c58:	9b01      	ldr	r3, [sp, #4]
 8011c5a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011c5e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011c62:	9301      	str	r3, [sp, #4]
 8011c64:	fa1f f38a 	uxth.w	r3, sl
 8011c68:	4619      	mov	r1, r3
 8011c6a:	b283      	uxth	r3, r0
 8011c6c:	1acb      	subs	r3, r1, r3
 8011c6e:	0c00      	lsrs	r0, r0, #16
 8011c70:	4463      	add	r3, ip
 8011c72:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011c76:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011c7a:	b29b      	uxth	r3, r3
 8011c7c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011c80:	4576      	cmp	r6, lr
 8011c82:	f849 3b04 	str.w	r3, [r9], #4
 8011c86:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011c8a:	d8e5      	bhi.n	8011c58 <__mdiff+0x88>
 8011c8c:	1b33      	subs	r3, r6, r4
 8011c8e:	3b15      	subs	r3, #21
 8011c90:	f023 0303 	bic.w	r3, r3, #3
 8011c94:	3415      	adds	r4, #21
 8011c96:	3304      	adds	r3, #4
 8011c98:	42a6      	cmp	r6, r4
 8011c9a:	bf38      	it	cc
 8011c9c:	2304      	movcc	r3, #4
 8011c9e:	441d      	add	r5, r3
 8011ca0:	445b      	add	r3, fp
 8011ca2:	461e      	mov	r6, r3
 8011ca4:	462c      	mov	r4, r5
 8011ca6:	4544      	cmp	r4, r8
 8011ca8:	d30e      	bcc.n	8011cc8 <__mdiff+0xf8>
 8011caa:	f108 0103 	add.w	r1, r8, #3
 8011cae:	1b49      	subs	r1, r1, r5
 8011cb0:	f021 0103 	bic.w	r1, r1, #3
 8011cb4:	3d03      	subs	r5, #3
 8011cb6:	45a8      	cmp	r8, r5
 8011cb8:	bf38      	it	cc
 8011cba:	2100      	movcc	r1, #0
 8011cbc:	440b      	add	r3, r1
 8011cbe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011cc2:	b191      	cbz	r1, 8011cea <__mdiff+0x11a>
 8011cc4:	6117      	str	r7, [r2, #16]
 8011cc6:	e79d      	b.n	8011c04 <__mdiff+0x34>
 8011cc8:	f854 1b04 	ldr.w	r1, [r4], #4
 8011ccc:	46e6      	mov	lr, ip
 8011cce:	0c08      	lsrs	r0, r1, #16
 8011cd0:	fa1c fc81 	uxtah	ip, ip, r1
 8011cd4:	4471      	add	r1, lr
 8011cd6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011cda:	b289      	uxth	r1, r1
 8011cdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011ce0:	f846 1b04 	str.w	r1, [r6], #4
 8011ce4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011ce8:	e7dd      	b.n	8011ca6 <__mdiff+0xd6>
 8011cea:	3f01      	subs	r7, #1
 8011cec:	e7e7      	b.n	8011cbe <__mdiff+0xee>
 8011cee:	bf00      	nop
 8011cf0:	08012a13 	.word	0x08012a13
 8011cf4:	08012a24 	.word	0x08012a24

08011cf8 <__d2b>:
 8011cf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011cfc:	460f      	mov	r7, r1
 8011cfe:	2101      	movs	r1, #1
 8011d00:	ec59 8b10 	vmov	r8, r9, d0
 8011d04:	4616      	mov	r6, r2
 8011d06:	f7ff fcd5 	bl	80116b4 <_Balloc>
 8011d0a:	4604      	mov	r4, r0
 8011d0c:	b930      	cbnz	r0, 8011d1c <__d2b+0x24>
 8011d0e:	4602      	mov	r2, r0
 8011d10:	4b23      	ldr	r3, [pc, #140]	@ (8011da0 <__d2b+0xa8>)
 8011d12:	4824      	ldr	r0, [pc, #144]	@ (8011da4 <__d2b+0xac>)
 8011d14:	f240 310f 	movw	r1, #783	@ 0x30f
 8011d18:	f7fe fdc8 	bl	80108ac <__assert_func>
 8011d1c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011d20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011d24:	b10d      	cbz	r5, 8011d2a <__d2b+0x32>
 8011d26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011d2a:	9301      	str	r3, [sp, #4]
 8011d2c:	f1b8 0300 	subs.w	r3, r8, #0
 8011d30:	d023      	beq.n	8011d7a <__d2b+0x82>
 8011d32:	4668      	mov	r0, sp
 8011d34:	9300      	str	r3, [sp, #0]
 8011d36:	f7ff fd84 	bl	8011842 <__lo0bits>
 8011d3a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011d3e:	b1d0      	cbz	r0, 8011d76 <__d2b+0x7e>
 8011d40:	f1c0 0320 	rsb	r3, r0, #32
 8011d44:	fa02 f303 	lsl.w	r3, r2, r3
 8011d48:	430b      	orrs	r3, r1
 8011d4a:	40c2      	lsrs	r2, r0
 8011d4c:	6163      	str	r3, [r4, #20]
 8011d4e:	9201      	str	r2, [sp, #4]
 8011d50:	9b01      	ldr	r3, [sp, #4]
 8011d52:	61a3      	str	r3, [r4, #24]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	bf0c      	ite	eq
 8011d58:	2201      	moveq	r2, #1
 8011d5a:	2202      	movne	r2, #2
 8011d5c:	6122      	str	r2, [r4, #16]
 8011d5e:	b1a5      	cbz	r5, 8011d8a <__d2b+0x92>
 8011d60:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011d64:	4405      	add	r5, r0
 8011d66:	603d      	str	r5, [r7, #0]
 8011d68:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011d6c:	6030      	str	r0, [r6, #0]
 8011d6e:	4620      	mov	r0, r4
 8011d70:	b003      	add	sp, #12
 8011d72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d76:	6161      	str	r1, [r4, #20]
 8011d78:	e7ea      	b.n	8011d50 <__d2b+0x58>
 8011d7a:	a801      	add	r0, sp, #4
 8011d7c:	f7ff fd61 	bl	8011842 <__lo0bits>
 8011d80:	9b01      	ldr	r3, [sp, #4]
 8011d82:	6163      	str	r3, [r4, #20]
 8011d84:	3020      	adds	r0, #32
 8011d86:	2201      	movs	r2, #1
 8011d88:	e7e8      	b.n	8011d5c <__d2b+0x64>
 8011d8a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011d8e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011d92:	6038      	str	r0, [r7, #0]
 8011d94:	6918      	ldr	r0, [r3, #16]
 8011d96:	f7ff fd35 	bl	8011804 <__hi0bits>
 8011d9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011d9e:	e7e5      	b.n	8011d6c <__d2b+0x74>
 8011da0:	08012a13 	.word	0x08012a13
 8011da4:	08012a24 	.word	0x08012a24

08011da8 <__ssputs_r>:
 8011da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011dac:	688e      	ldr	r6, [r1, #8]
 8011dae:	461f      	mov	r7, r3
 8011db0:	42be      	cmp	r6, r7
 8011db2:	680b      	ldr	r3, [r1, #0]
 8011db4:	4682      	mov	sl, r0
 8011db6:	460c      	mov	r4, r1
 8011db8:	4690      	mov	r8, r2
 8011dba:	d82d      	bhi.n	8011e18 <__ssputs_r+0x70>
 8011dbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011dc0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011dc4:	d026      	beq.n	8011e14 <__ssputs_r+0x6c>
 8011dc6:	6965      	ldr	r5, [r4, #20]
 8011dc8:	6909      	ldr	r1, [r1, #16]
 8011dca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011dce:	eba3 0901 	sub.w	r9, r3, r1
 8011dd2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011dd6:	1c7b      	adds	r3, r7, #1
 8011dd8:	444b      	add	r3, r9
 8011dda:	106d      	asrs	r5, r5, #1
 8011ddc:	429d      	cmp	r5, r3
 8011dde:	bf38      	it	cc
 8011de0:	461d      	movcc	r5, r3
 8011de2:	0553      	lsls	r3, r2, #21
 8011de4:	d527      	bpl.n	8011e36 <__ssputs_r+0x8e>
 8011de6:	4629      	mov	r1, r5
 8011de8:	f7ff fbd8 	bl	801159c <_malloc_r>
 8011dec:	4606      	mov	r6, r0
 8011dee:	b360      	cbz	r0, 8011e4a <__ssputs_r+0xa2>
 8011df0:	6921      	ldr	r1, [r4, #16]
 8011df2:	464a      	mov	r2, r9
 8011df4:	f7fe fd4b 	bl	801088e <memcpy>
 8011df8:	89a3      	ldrh	r3, [r4, #12]
 8011dfa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011dfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e02:	81a3      	strh	r3, [r4, #12]
 8011e04:	6126      	str	r6, [r4, #16]
 8011e06:	6165      	str	r5, [r4, #20]
 8011e08:	444e      	add	r6, r9
 8011e0a:	eba5 0509 	sub.w	r5, r5, r9
 8011e0e:	6026      	str	r6, [r4, #0]
 8011e10:	60a5      	str	r5, [r4, #8]
 8011e12:	463e      	mov	r6, r7
 8011e14:	42be      	cmp	r6, r7
 8011e16:	d900      	bls.n	8011e1a <__ssputs_r+0x72>
 8011e18:	463e      	mov	r6, r7
 8011e1a:	6820      	ldr	r0, [r4, #0]
 8011e1c:	4632      	mov	r2, r6
 8011e1e:	4641      	mov	r1, r8
 8011e20:	f000 fb7c 	bl	801251c <memmove>
 8011e24:	68a3      	ldr	r3, [r4, #8]
 8011e26:	1b9b      	subs	r3, r3, r6
 8011e28:	60a3      	str	r3, [r4, #8]
 8011e2a:	6823      	ldr	r3, [r4, #0]
 8011e2c:	4433      	add	r3, r6
 8011e2e:	6023      	str	r3, [r4, #0]
 8011e30:	2000      	movs	r0, #0
 8011e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e36:	462a      	mov	r2, r5
 8011e38:	f000 fbe9 	bl	801260e <_realloc_r>
 8011e3c:	4606      	mov	r6, r0
 8011e3e:	2800      	cmp	r0, #0
 8011e40:	d1e0      	bne.n	8011e04 <__ssputs_r+0x5c>
 8011e42:	6921      	ldr	r1, [r4, #16]
 8011e44:	4650      	mov	r0, sl
 8011e46:	f7ff fb35 	bl	80114b4 <_free_r>
 8011e4a:	230c      	movs	r3, #12
 8011e4c:	f8ca 3000 	str.w	r3, [sl]
 8011e50:	89a3      	ldrh	r3, [r4, #12]
 8011e52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e56:	81a3      	strh	r3, [r4, #12]
 8011e58:	f04f 30ff 	mov.w	r0, #4294967295
 8011e5c:	e7e9      	b.n	8011e32 <__ssputs_r+0x8a>
	...

08011e60 <_svfiprintf_r>:
 8011e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e64:	4698      	mov	r8, r3
 8011e66:	898b      	ldrh	r3, [r1, #12]
 8011e68:	061b      	lsls	r3, r3, #24
 8011e6a:	b09d      	sub	sp, #116	@ 0x74
 8011e6c:	4607      	mov	r7, r0
 8011e6e:	460d      	mov	r5, r1
 8011e70:	4614      	mov	r4, r2
 8011e72:	d510      	bpl.n	8011e96 <_svfiprintf_r+0x36>
 8011e74:	690b      	ldr	r3, [r1, #16]
 8011e76:	b973      	cbnz	r3, 8011e96 <_svfiprintf_r+0x36>
 8011e78:	2140      	movs	r1, #64	@ 0x40
 8011e7a:	f7ff fb8f 	bl	801159c <_malloc_r>
 8011e7e:	6028      	str	r0, [r5, #0]
 8011e80:	6128      	str	r0, [r5, #16]
 8011e82:	b930      	cbnz	r0, 8011e92 <_svfiprintf_r+0x32>
 8011e84:	230c      	movs	r3, #12
 8011e86:	603b      	str	r3, [r7, #0]
 8011e88:	f04f 30ff 	mov.w	r0, #4294967295
 8011e8c:	b01d      	add	sp, #116	@ 0x74
 8011e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e92:	2340      	movs	r3, #64	@ 0x40
 8011e94:	616b      	str	r3, [r5, #20]
 8011e96:	2300      	movs	r3, #0
 8011e98:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e9a:	2320      	movs	r3, #32
 8011e9c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011ea0:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ea4:	2330      	movs	r3, #48	@ 0x30
 8011ea6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012044 <_svfiprintf_r+0x1e4>
 8011eaa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011eae:	f04f 0901 	mov.w	r9, #1
 8011eb2:	4623      	mov	r3, r4
 8011eb4:	469a      	mov	sl, r3
 8011eb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011eba:	b10a      	cbz	r2, 8011ec0 <_svfiprintf_r+0x60>
 8011ebc:	2a25      	cmp	r2, #37	@ 0x25
 8011ebe:	d1f9      	bne.n	8011eb4 <_svfiprintf_r+0x54>
 8011ec0:	ebba 0b04 	subs.w	fp, sl, r4
 8011ec4:	d00b      	beq.n	8011ede <_svfiprintf_r+0x7e>
 8011ec6:	465b      	mov	r3, fp
 8011ec8:	4622      	mov	r2, r4
 8011eca:	4629      	mov	r1, r5
 8011ecc:	4638      	mov	r0, r7
 8011ece:	f7ff ff6b 	bl	8011da8 <__ssputs_r>
 8011ed2:	3001      	adds	r0, #1
 8011ed4:	f000 80a7 	beq.w	8012026 <_svfiprintf_r+0x1c6>
 8011ed8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011eda:	445a      	add	r2, fp
 8011edc:	9209      	str	r2, [sp, #36]	@ 0x24
 8011ede:	f89a 3000 	ldrb.w	r3, [sl]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	f000 809f 	beq.w	8012026 <_svfiprintf_r+0x1c6>
 8011ee8:	2300      	movs	r3, #0
 8011eea:	f04f 32ff 	mov.w	r2, #4294967295
 8011eee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011ef2:	f10a 0a01 	add.w	sl, sl, #1
 8011ef6:	9304      	str	r3, [sp, #16]
 8011ef8:	9307      	str	r3, [sp, #28]
 8011efa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011efe:	931a      	str	r3, [sp, #104]	@ 0x68
 8011f00:	4654      	mov	r4, sl
 8011f02:	2205      	movs	r2, #5
 8011f04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f08:	484e      	ldr	r0, [pc, #312]	@ (8012044 <_svfiprintf_r+0x1e4>)
 8011f0a:	f7ee f9f9 	bl	8000300 <memchr>
 8011f0e:	9a04      	ldr	r2, [sp, #16]
 8011f10:	b9d8      	cbnz	r0, 8011f4a <_svfiprintf_r+0xea>
 8011f12:	06d0      	lsls	r0, r2, #27
 8011f14:	bf44      	itt	mi
 8011f16:	2320      	movmi	r3, #32
 8011f18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f1c:	0711      	lsls	r1, r2, #28
 8011f1e:	bf44      	itt	mi
 8011f20:	232b      	movmi	r3, #43	@ 0x2b
 8011f22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f26:	f89a 3000 	ldrb.w	r3, [sl]
 8011f2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f2c:	d015      	beq.n	8011f5a <_svfiprintf_r+0xfa>
 8011f2e:	9a07      	ldr	r2, [sp, #28]
 8011f30:	4654      	mov	r4, sl
 8011f32:	2000      	movs	r0, #0
 8011f34:	f04f 0c0a 	mov.w	ip, #10
 8011f38:	4621      	mov	r1, r4
 8011f3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f3e:	3b30      	subs	r3, #48	@ 0x30
 8011f40:	2b09      	cmp	r3, #9
 8011f42:	d94b      	bls.n	8011fdc <_svfiprintf_r+0x17c>
 8011f44:	b1b0      	cbz	r0, 8011f74 <_svfiprintf_r+0x114>
 8011f46:	9207      	str	r2, [sp, #28]
 8011f48:	e014      	b.n	8011f74 <_svfiprintf_r+0x114>
 8011f4a:	eba0 0308 	sub.w	r3, r0, r8
 8011f4e:	fa09 f303 	lsl.w	r3, r9, r3
 8011f52:	4313      	orrs	r3, r2
 8011f54:	9304      	str	r3, [sp, #16]
 8011f56:	46a2      	mov	sl, r4
 8011f58:	e7d2      	b.n	8011f00 <_svfiprintf_r+0xa0>
 8011f5a:	9b03      	ldr	r3, [sp, #12]
 8011f5c:	1d19      	adds	r1, r3, #4
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	9103      	str	r1, [sp, #12]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	bfbb      	ittet	lt
 8011f66:	425b      	neglt	r3, r3
 8011f68:	f042 0202 	orrlt.w	r2, r2, #2
 8011f6c:	9307      	strge	r3, [sp, #28]
 8011f6e:	9307      	strlt	r3, [sp, #28]
 8011f70:	bfb8      	it	lt
 8011f72:	9204      	strlt	r2, [sp, #16]
 8011f74:	7823      	ldrb	r3, [r4, #0]
 8011f76:	2b2e      	cmp	r3, #46	@ 0x2e
 8011f78:	d10a      	bne.n	8011f90 <_svfiprintf_r+0x130>
 8011f7a:	7863      	ldrb	r3, [r4, #1]
 8011f7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f7e:	d132      	bne.n	8011fe6 <_svfiprintf_r+0x186>
 8011f80:	9b03      	ldr	r3, [sp, #12]
 8011f82:	1d1a      	adds	r2, r3, #4
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	9203      	str	r2, [sp, #12]
 8011f88:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011f8c:	3402      	adds	r4, #2
 8011f8e:	9305      	str	r3, [sp, #20]
 8011f90:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012054 <_svfiprintf_r+0x1f4>
 8011f94:	7821      	ldrb	r1, [r4, #0]
 8011f96:	2203      	movs	r2, #3
 8011f98:	4650      	mov	r0, sl
 8011f9a:	f7ee f9b1 	bl	8000300 <memchr>
 8011f9e:	b138      	cbz	r0, 8011fb0 <_svfiprintf_r+0x150>
 8011fa0:	9b04      	ldr	r3, [sp, #16]
 8011fa2:	eba0 000a 	sub.w	r0, r0, sl
 8011fa6:	2240      	movs	r2, #64	@ 0x40
 8011fa8:	4082      	lsls	r2, r0
 8011faa:	4313      	orrs	r3, r2
 8011fac:	3401      	adds	r4, #1
 8011fae:	9304      	str	r3, [sp, #16]
 8011fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fb4:	4824      	ldr	r0, [pc, #144]	@ (8012048 <_svfiprintf_r+0x1e8>)
 8011fb6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011fba:	2206      	movs	r2, #6
 8011fbc:	f7ee f9a0 	bl	8000300 <memchr>
 8011fc0:	2800      	cmp	r0, #0
 8011fc2:	d036      	beq.n	8012032 <_svfiprintf_r+0x1d2>
 8011fc4:	4b21      	ldr	r3, [pc, #132]	@ (801204c <_svfiprintf_r+0x1ec>)
 8011fc6:	bb1b      	cbnz	r3, 8012010 <_svfiprintf_r+0x1b0>
 8011fc8:	9b03      	ldr	r3, [sp, #12]
 8011fca:	3307      	adds	r3, #7
 8011fcc:	f023 0307 	bic.w	r3, r3, #7
 8011fd0:	3308      	adds	r3, #8
 8011fd2:	9303      	str	r3, [sp, #12]
 8011fd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011fd6:	4433      	add	r3, r6
 8011fd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8011fda:	e76a      	b.n	8011eb2 <_svfiprintf_r+0x52>
 8011fdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8011fe0:	460c      	mov	r4, r1
 8011fe2:	2001      	movs	r0, #1
 8011fe4:	e7a8      	b.n	8011f38 <_svfiprintf_r+0xd8>
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	3401      	adds	r4, #1
 8011fea:	9305      	str	r3, [sp, #20]
 8011fec:	4619      	mov	r1, r3
 8011fee:	f04f 0c0a 	mov.w	ip, #10
 8011ff2:	4620      	mov	r0, r4
 8011ff4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ff8:	3a30      	subs	r2, #48	@ 0x30
 8011ffa:	2a09      	cmp	r2, #9
 8011ffc:	d903      	bls.n	8012006 <_svfiprintf_r+0x1a6>
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d0c6      	beq.n	8011f90 <_svfiprintf_r+0x130>
 8012002:	9105      	str	r1, [sp, #20]
 8012004:	e7c4      	b.n	8011f90 <_svfiprintf_r+0x130>
 8012006:	fb0c 2101 	mla	r1, ip, r1, r2
 801200a:	4604      	mov	r4, r0
 801200c:	2301      	movs	r3, #1
 801200e:	e7f0      	b.n	8011ff2 <_svfiprintf_r+0x192>
 8012010:	ab03      	add	r3, sp, #12
 8012012:	9300      	str	r3, [sp, #0]
 8012014:	462a      	mov	r2, r5
 8012016:	4b0e      	ldr	r3, [pc, #56]	@ (8012050 <_svfiprintf_r+0x1f0>)
 8012018:	a904      	add	r1, sp, #16
 801201a:	4638      	mov	r0, r7
 801201c:	f7fd fdd8 	bl	800fbd0 <_printf_float>
 8012020:	1c42      	adds	r2, r0, #1
 8012022:	4606      	mov	r6, r0
 8012024:	d1d6      	bne.n	8011fd4 <_svfiprintf_r+0x174>
 8012026:	89ab      	ldrh	r3, [r5, #12]
 8012028:	065b      	lsls	r3, r3, #25
 801202a:	f53f af2d 	bmi.w	8011e88 <_svfiprintf_r+0x28>
 801202e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012030:	e72c      	b.n	8011e8c <_svfiprintf_r+0x2c>
 8012032:	ab03      	add	r3, sp, #12
 8012034:	9300      	str	r3, [sp, #0]
 8012036:	462a      	mov	r2, r5
 8012038:	4b05      	ldr	r3, [pc, #20]	@ (8012050 <_svfiprintf_r+0x1f0>)
 801203a:	a904      	add	r1, sp, #16
 801203c:	4638      	mov	r0, r7
 801203e:	f7fe f84f 	bl	80100e0 <_printf_i>
 8012042:	e7ed      	b.n	8012020 <_svfiprintf_r+0x1c0>
 8012044:	08012a7d 	.word	0x08012a7d
 8012048:	08012a87 	.word	0x08012a87
 801204c:	0800fbd1 	.word	0x0800fbd1
 8012050:	08011da9 	.word	0x08011da9
 8012054:	08012a83 	.word	0x08012a83

08012058 <__sfputc_r>:
 8012058:	6893      	ldr	r3, [r2, #8]
 801205a:	3b01      	subs	r3, #1
 801205c:	2b00      	cmp	r3, #0
 801205e:	b410      	push	{r4}
 8012060:	6093      	str	r3, [r2, #8]
 8012062:	da08      	bge.n	8012076 <__sfputc_r+0x1e>
 8012064:	6994      	ldr	r4, [r2, #24]
 8012066:	42a3      	cmp	r3, r4
 8012068:	db01      	blt.n	801206e <__sfputc_r+0x16>
 801206a:	290a      	cmp	r1, #10
 801206c:	d103      	bne.n	8012076 <__sfputc_r+0x1e>
 801206e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012072:	f7fe ba8c 	b.w	801058e <__swbuf_r>
 8012076:	6813      	ldr	r3, [r2, #0]
 8012078:	1c58      	adds	r0, r3, #1
 801207a:	6010      	str	r0, [r2, #0]
 801207c:	7019      	strb	r1, [r3, #0]
 801207e:	4608      	mov	r0, r1
 8012080:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012084:	4770      	bx	lr

08012086 <__sfputs_r>:
 8012086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012088:	4606      	mov	r6, r0
 801208a:	460f      	mov	r7, r1
 801208c:	4614      	mov	r4, r2
 801208e:	18d5      	adds	r5, r2, r3
 8012090:	42ac      	cmp	r4, r5
 8012092:	d101      	bne.n	8012098 <__sfputs_r+0x12>
 8012094:	2000      	movs	r0, #0
 8012096:	e007      	b.n	80120a8 <__sfputs_r+0x22>
 8012098:	f814 1b01 	ldrb.w	r1, [r4], #1
 801209c:	463a      	mov	r2, r7
 801209e:	4630      	mov	r0, r6
 80120a0:	f7ff ffda 	bl	8012058 <__sfputc_r>
 80120a4:	1c43      	adds	r3, r0, #1
 80120a6:	d1f3      	bne.n	8012090 <__sfputs_r+0xa>
 80120a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080120ac <_vfiprintf_r>:
 80120ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120b0:	460d      	mov	r5, r1
 80120b2:	b09d      	sub	sp, #116	@ 0x74
 80120b4:	4614      	mov	r4, r2
 80120b6:	4698      	mov	r8, r3
 80120b8:	4606      	mov	r6, r0
 80120ba:	b118      	cbz	r0, 80120c4 <_vfiprintf_r+0x18>
 80120bc:	6a03      	ldr	r3, [r0, #32]
 80120be:	b90b      	cbnz	r3, 80120c4 <_vfiprintf_r+0x18>
 80120c0:	f7fe f9b8 	bl	8010434 <__sinit>
 80120c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80120c6:	07d9      	lsls	r1, r3, #31
 80120c8:	d405      	bmi.n	80120d6 <_vfiprintf_r+0x2a>
 80120ca:	89ab      	ldrh	r3, [r5, #12]
 80120cc:	059a      	lsls	r2, r3, #22
 80120ce:	d402      	bmi.n	80120d6 <_vfiprintf_r+0x2a>
 80120d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80120d2:	f7fe fbda 	bl	801088a <__retarget_lock_acquire_recursive>
 80120d6:	89ab      	ldrh	r3, [r5, #12]
 80120d8:	071b      	lsls	r3, r3, #28
 80120da:	d501      	bpl.n	80120e0 <_vfiprintf_r+0x34>
 80120dc:	692b      	ldr	r3, [r5, #16]
 80120de:	b99b      	cbnz	r3, 8012108 <_vfiprintf_r+0x5c>
 80120e0:	4629      	mov	r1, r5
 80120e2:	4630      	mov	r0, r6
 80120e4:	f7fe fa92 	bl	801060c <__swsetup_r>
 80120e8:	b170      	cbz	r0, 8012108 <_vfiprintf_r+0x5c>
 80120ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80120ec:	07dc      	lsls	r4, r3, #31
 80120ee:	d504      	bpl.n	80120fa <_vfiprintf_r+0x4e>
 80120f0:	f04f 30ff 	mov.w	r0, #4294967295
 80120f4:	b01d      	add	sp, #116	@ 0x74
 80120f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120fa:	89ab      	ldrh	r3, [r5, #12]
 80120fc:	0598      	lsls	r0, r3, #22
 80120fe:	d4f7      	bmi.n	80120f0 <_vfiprintf_r+0x44>
 8012100:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012102:	f7fe fbc3 	bl	801088c <__retarget_lock_release_recursive>
 8012106:	e7f3      	b.n	80120f0 <_vfiprintf_r+0x44>
 8012108:	2300      	movs	r3, #0
 801210a:	9309      	str	r3, [sp, #36]	@ 0x24
 801210c:	2320      	movs	r3, #32
 801210e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012112:	f8cd 800c 	str.w	r8, [sp, #12]
 8012116:	2330      	movs	r3, #48	@ 0x30
 8012118:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80122c8 <_vfiprintf_r+0x21c>
 801211c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012120:	f04f 0901 	mov.w	r9, #1
 8012124:	4623      	mov	r3, r4
 8012126:	469a      	mov	sl, r3
 8012128:	f813 2b01 	ldrb.w	r2, [r3], #1
 801212c:	b10a      	cbz	r2, 8012132 <_vfiprintf_r+0x86>
 801212e:	2a25      	cmp	r2, #37	@ 0x25
 8012130:	d1f9      	bne.n	8012126 <_vfiprintf_r+0x7a>
 8012132:	ebba 0b04 	subs.w	fp, sl, r4
 8012136:	d00b      	beq.n	8012150 <_vfiprintf_r+0xa4>
 8012138:	465b      	mov	r3, fp
 801213a:	4622      	mov	r2, r4
 801213c:	4629      	mov	r1, r5
 801213e:	4630      	mov	r0, r6
 8012140:	f7ff ffa1 	bl	8012086 <__sfputs_r>
 8012144:	3001      	adds	r0, #1
 8012146:	f000 80a7 	beq.w	8012298 <_vfiprintf_r+0x1ec>
 801214a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801214c:	445a      	add	r2, fp
 801214e:	9209      	str	r2, [sp, #36]	@ 0x24
 8012150:	f89a 3000 	ldrb.w	r3, [sl]
 8012154:	2b00      	cmp	r3, #0
 8012156:	f000 809f 	beq.w	8012298 <_vfiprintf_r+0x1ec>
 801215a:	2300      	movs	r3, #0
 801215c:	f04f 32ff 	mov.w	r2, #4294967295
 8012160:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012164:	f10a 0a01 	add.w	sl, sl, #1
 8012168:	9304      	str	r3, [sp, #16]
 801216a:	9307      	str	r3, [sp, #28]
 801216c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012170:	931a      	str	r3, [sp, #104]	@ 0x68
 8012172:	4654      	mov	r4, sl
 8012174:	2205      	movs	r2, #5
 8012176:	f814 1b01 	ldrb.w	r1, [r4], #1
 801217a:	4853      	ldr	r0, [pc, #332]	@ (80122c8 <_vfiprintf_r+0x21c>)
 801217c:	f7ee f8c0 	bl	8000300 <memchr>
 8012180:	9a04      	ldr	r2, [sp, #16]
 8012182:	b9d8      	cbnz	r0, 80121bc <_vfiprintf_r+0x110>
 8012184:	06d1      	lsls	r1, r2, #27
 8012186:	bf44      	itt	mi
 8012188:	2320      	movmi	r3, #32
 801218a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801218e:	0713      	lsls	r3, r2, #28
 8012190:	bf44      	itt	mi
 8012192:	232b      	movmi	r3, #43	@ 0x2b
 8012194:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012198:	f89a 3000 	ldrb.w	r3, [sl]
 801219c:	2b2a      	cmp	r3, #42	@ 0x2a
 801219e:	d015      	beq.n	80121cc <_vfiprintf_r+0x120>
 80121a0:	9a07      	ldr	r2, [sp, #28]
 80121a2:	4654      	mov	r4, sl
 80121a4:	2000      	movs	r0, #0
 80121a6:	f04f 0c0a 	mov.w	ip, #10
 80121aa:	4621      	mov	r1, r4
 80121ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80121b0:	3b30      	subs	r3, #48	@ 0x30
 80121b2:	2b09      	cmp	r3, #9
 80121b4:	d94b      	bls.n	801224e <_vfiprintf_r+0x1a2>
 80121b6:	b1b0      	cbz	r0, 80121e6 <_vfiprintf_r+0x13a>
 80121b8:	9207      	str	r2, [sp, #28]
 80121ba:	e014      	b.n	80121e6 <_vfiprintf_r+0x13a>
 80121bc:	eba0 0308 	sub.w	r3, r0, r8
 80121c0:	fa09 f303 	lsl.w	r3, r9, r3
 80121c4:	4313      	orrs	r3, r2
 80121c6:	9304      	str	r3, [sp, #16]
 80121c8:	46a2      	mov	sl, r4
 80121ca:	e7d2      	b.n	8012172 <_vfiprintf_r+0xc6>
 80121cc:	9b03      	ldr	r3, [sp, #12]
 80121ce:	1d19      	adds	r1, r3, #4
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	9103      	str	r1, [sp, #12]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	bfbb      	ittet	lt
 80121d8:	425b      	neglt	r3, r3
 80121da:	f042 0202 	orrlt.w	r2, r2, #2
 80121de:	9307      	strge	r3, [sp, #28]
 80121e0:	9307      	strlt	r3, [sp, #28]
 80121e2:	bfb8      	it	lt
 80121e4:	9204      	strlt	r2, [sp, #16]
 80121e6:	7823      	ldrb	r3, [r4, #0]
 80121e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80121ea:	d10a      	bne.n	8012202 <_vfiprintf_r+0x156>
 80121ec:	7863      	ldrb	r3, [r4, #1]
 80121ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80121f0:	d132      	bne.n	8012258 <_vfiprintf_r+0x1ac>
 80121f2:	9b03      	ldr	r3, [sp, #12]
 80121f4:	1d1a      	adds	r2, r3, #4
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	9203      	str	r2, [sp, #12]
 80121fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80121fe:	3402      	adds	r4, #2
 8012200:	9305      	str	r3, [sp, #20]
 8012202:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80122d8 <_vfiprintf_r+0x22c>
 8012206:	7821      	ldrb	r1, [r4, #0]
 8012208:	2203      	movs	r2, #3
 801220a:	4650      	mov	r0, sl
 801220c:	f7ee f878 	bl	8000300 <memchr>
 8012210:	b138      	cbz	r0, 8012222 <_vfiprintf_r+0x176>
 8012212:	9b04      	ldr	r3, [sp, #16]
 8012214:	eba0 000a 	sub.w	r0, r0, sl
 8012218:	2240      	movs	r2, #64	@ 0x40
 801221a:	4082      	lsls	r2, r0
 801221c:	4313      	orrs	r3, r2
 801221e:	3401      	adds	r4, #1
 8012220:	9304      	str	r3, [sp, #16]
 8012222:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012226:	4829      	ldr	r0, [pc, #164]	@ (80122cc <_vfiprintf_r+0x220>)
 8012228:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801222c:	2206      	movs	r2, #6
 801222e:	f7ee f867 	bl	8000300 <memchr>
 8012232:	2800      	cmp	r0, #0
 8012234:	d03f      	beq.n	80122b6 <_vfiprintf_r+0x20a>
 8012236:	4b26      	ldr	r3, [pc, #152]	@ (80122d0 <_vfiprintf_r+0x224>)
 8012238:	bb1b      	cbnz	r3, 8012282 <_vfiprintf_r+0x1d6>
 801223a:	9b03      	ldr	r3, [sp, #12]
 801223c:	3307      	adds	r3, #7
 801223e:	f023 0307 	bic.w	r3, r3, #7
 8012242:	3308      	adds	r3, #8
 8012244:	9303      	str	r3, [sp, #12]
 8012246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012248:	443b      	add	r3, r7
 801224a:	9309      	str	r3, [sp, #36]	@ 0x24
 801224c:	e76a      	b.n	8012124 <_vfiprintf_r+0x78>
 801224e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012252:	460c      	mov	r4, r1
 8012254:	2001      	movs	r0, #1
 8012256:	e7a8      	b.n	80121aa <_vfiprintf_r+0xfe>
 8012258:	2300      	movs	r3, #0
 801225a:	3401      	adds	r4, #1
 801225c:	9305      	str	r3, [sp, #20]
 801225e:	4619      	mov	r1, r3
 8012260:	f04f 0c0a 	mov.w	ip, #10
 8012264:	4620      	mov	r0, r4
 8012266:	f810 2b01 	ldrb.w	r2, [r0], #1
 801226a:	3a30      	subs	r2, #48	@ 0x30
 801226c:	2a09      	cmp	r2, #9
 801226e:	d903      	bls.n	8012278 <_vfiprintf_r+0x1cc>
 8012270:	2b00      	cmp	r3, #0
 8012272:	d0c6      	beq.n	8012202 <_vfiprintf_r+0x156>
 8012274:	9105      	str	r1, [sp, #20]
 8012276:	e7c4      	b.n	8012202 <_vfiprintf_r+0x156>
 8012278:	fb0c 2101 	mla	r1, ip, r1, r2
 801227c:	4604      	mov	r4, r0
 801227e:	2301      	movs	r3, #1
 8012280:	e7f0      	b.n	8012264 <_vfiprintf_r+0x1b8>
 8012282:	ab03      	add	r3, sp, #12
 8012284:	9300      	str	r3, [sp, #0]
 8012286:	462a      	mov	r2, r5
 8012288:	4b12      	ldr	r3, [pc, #72]	@ (80122d4 <_vfiprintf_r+0x228>)
 801228a:	a904      	add	r1, sp, #16
 801228c:	4630      	mov	r0, r6
 801228e:	f7fd fc9f 	bl	800fbd0 <_printf_float>
 8012292:	4607      	mov	r7, r0
 8012294:	1c78      	adds	r0, r7, #1
 8012296:	d1d6      	bne.n	8012246 <_vfiprintf_r+0x19a>
 8012298:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801229a:	07d9      	lsls	r1, r3, #31
 801229c:	d405      	bmi.n	80122aa <_vfiprintf_r+0x1fe>
 801229e:	89ab      	ldrh	r3, [r5, #12]
 80122a0:	059a      	lsls	r2, r3, #22
 80122a2:	d402      	bmi.n	80122aa <_vfiprintf_r+0x1fe>
 80122a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80122a6:	f7fe faf1 	bl	801088c <__retarget_lock_release_recursive>
 80122aa:	89ab      	ldrh	r3, [r5, #12]
 80122ac:	065b      	lsls	r3, r3, #25
 80122ae:	f53f af1f 	bmi.w	80120f0 <_vfiprintf_r+0x44>
 80122b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80122b4:	e71e      	b.n	80120f4 <_vfiprintf_r+0x48>
 80122b6:	ab03      	add	r3, sp, #12
 80122b8:	9300      	str	r3, [sp, #0]
 80122ba:	462a      	mov	r2, r5
 80122bc:	4b05      	ldr	r3, [pc, #20]	@ (80122d4 <_vfiprintf_r+0x228>)
 80122be:	a904      	add	r1, sp, #16
 80122c0:	4630      	mov	r0, r6
 80122c2:	f7fd ff0d 	bl	80100e0 <_printf_i>
 80122c6:	e7e4      	b.n	8012292 <_vfiprintf_r+0x1e6>
 80122c8:	08012a7d 	.word	0x08012a7d
 80122cc:	08012a87 	.word	0x08012a87
 80122d0:	0800fbd1 	.word	0x0800fbd1
 80122d4:	08012087 	.word	0x08012087
 80122d8:	08012a83 	.word	0x08012a83

080122dc <__sflush_r>:
 80122dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80122e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122e4:	0716      	lsls	r6, r2, #28
 80122e6:	4605      	mov	r5, r0
 80122e8:	460c      	mov	r4, r1
 80122ea:	d454      	bmi.n	8012396 <__sflush_r+0xba>
 80122ec:	684b      	ldr	r3, [r1, #4]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	dc02      	bgt.n	80122f8 <__sflush_r+0x1c>
 80122f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	dd48      	ble.n	801238a <__sflush_r+0xae>
 80122f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80122fa:	2e00      	cmp	r6, #0
 80122fc:	d045      	beq.n	801238a <__sflush_r+0xae>
 80122fe:	2300      	movs	r3, #0
 8012300:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012304:	682f      	ldr	r7, [r5, #0]
 8012306:	6a21      	ldr	r1, [r4, #32]
 8012308:	602b      	str	r3, [r5, #0]
 801230a:	d030      	beq.n	801236e <__sflush_r+0x92>
 801230c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801230e:	89a3      	ldrh	r3, [r4, #12]
 8012310:	0759      	lsls	r1, r3, #29
 8012312:	d505      	bpl.n	8012320 <__sflush_r+0x44>
 8012314:	6863      	ldr	r3, [r4, #4]
 8012316:	1ad2      	subs	r2, r2, r3
 8012318:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801231a:	b10b      	cbz	r3, 8012320 <__sflush_r+0x44>
 801231c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801231e:	1ad2      	subs	r2, r2, r3
 8012320:	2300      	movs	r3, #0
 8012322:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012324:	6a21      	ldr	r1, [r4, #32]
 8012326:	4628      	mov	r0, r5
 8012328:	47b0      	blx	r6
 801232a:	1c43      	adds	r3, r0, #1
 801232c:	89a3      	ldrh	r3, [r4, #12]
 801232e:	d106      	bne.n	801233e <__sflush_r+0x62>
 8012330:	6829      	ldr	r1, [r5, #0]
 8012332:	291d      	cmp	r1, #29
 8012334:	d82b      	bhi.n	801238e <__sflush_r+0xb2>
 8012336:	4a2a      	ldr	r2, [pc, #168]	@ (80123e0 <__sflush_r+0x104>)
 8012338:	40ca      	lsrs	r2, r1
 801233a:	07d6      	lsls	r6, r2, #31
 801233c:	d527      	bpl.n	801238e <__sflush_r+0xb2>
 801233e:	2200      	movs	r2, #0
 8012340:	6062      	str	r2, [r4, #4]
 8012342:	04d9      	lsls	r1, r3, #19
 8012344:	6922      	ldr	r2, [r4, #16]
 8012346:	6022      	str	r2, [r4, #0]
 8012348:	d504      	bpl.n	8012354 <__sflush_r+0x78>
 801234a:	1c42      	adds	r2, r0, #1
 801234c:	d101      	bne.n	8012352 <__sflush_r+0x76>
 801234e:	682b      	ldr	r3, [r5, #0]
 8012350:	b903      	cbnz	r3, 8012354 <__sflush_r+0x78>
 8012352:	6560      	str	r0, [r4, #84]	@ 0x54
 8012354:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012356:	602f      	str	r7, [r5, #0]
 8012358:	b1b9      	cbz	r1, 801238a <__sflush_r+0xae>
 801235a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801235e:	4299      	cmp	r1, r3
 8012360:	d002      	beq.n	8012368 <__sflush_r+0x8c>
 8012362:	4628      	mov	r0, r5
 8012364:	f7ff f8a6 	bl	80114b4 <_free_r>
 8012368:	2300      	movs	r3, #0
 801236a:	6363      	str	r3, [r4, #52]	@ 0x34
 801236c:	e00d      	b.n	801238a <__sflush_r+0xae>
 801236e:	2301      	movs	r3, #1
 8012370:	4628      	mov	r0, r5
 8012372:	47b0      	blx	r6
 8012374:	4602      	mov	r2, r0
 8012376:	1c50      	adds	r0, r2, #1
 8012378:	d1c9      	bne.n	801230e <__sflush_r+0x32>
 801237a:	682b      	ldr	r3, [r5, #0]
 801237c:	2b00      	cmp	r3, #0
 801237e:	d0c6      	beq.n	801230e <__sflush_r+0x32>
 8012380:	2b1d      	cmp	r3, #29
 8012382:	d001      	beq.n	8012388 <__sflush_r+0xac>
 8012384:	2b16      	cmp	r3, #22
 8012386:	d11e      	bne.n	80123c6 <__sflush_r+0xea>
 8012388:	602f      	str	r7, [r5, #0]
 801238a:	2000      	movs	r0, #0
 801238c:	e022      	b.n	80123d4 <__sflush_r+0xf8>
 801238e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012392:	b21b      	sxth	r3, r3
 8012394:	e01b      	b.n	80123ce <__sflush_r+0xf2>
 8012396:	690f      	ldr	r7, [r1, #16]
 8012398:	2f00      	cmp	r7, #0
 801239a:	d0f6      	beq.n	801238a <__sflush_r+0xae>
 801239c:	0793      	lsls	r3, r2, #30
 801239e:	680e      	ldr	r6, [r1, #0]
 80123a0:	bf08      	it	eq
 80123a2:	694b      	ldreq	r3, [r1, #20]
 80123a4:	600f      	str	r7, [r1, #0]
 80123a6:	bf18      	it	ne
 80123a8:	2300      	movne	r3, #0
 80123aa:	eba6 0807 	sub.w	r8, r6, r7
 80123ae:	608b      	str	r3, [r1, #8]
 80123b0:	f1b8 0f00 	cmp.w	r8, #0
 80123b4:	dde9      	ble.n	801238a <__sflush_r+0xae>
 80123b6:	6a21      	ldr	r1, [r4, #32]
 80123b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80123ba:	4643      	mov	r3, r8
 80123bc:	463a      	mov	r2, r7
 80123be:	4628      	mov	r0, r5
 80123c0:	47b0      	blx	r6
 80123c2:	2800      	cmp	r0, #0
 80123c4:	dc08      	bgt.n	80123d8 <__sflush_r+0xfc>
 80123c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80123ce:	81a3      	strh	r3, [r4, #12]
 80123d0:	f04f 30ff 	mov.w	r0, #4294967295
 80123d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123d8:	4407      	add	r7, r0
 80123da:	eba8 0800 	sub.w	r8, r8, r0
 80123de:	e7e7      	b.n	80123b0 <__sflush_r+0xd4>
 80123e0:	20400001 	.word	0x20400001

080123e4 <_fflush_r>:
 80123e4:	b538      	push	{r3, r4, r5, lr}
 80123e6:	690b      	ldr	r3, [r1, #16]
 80123e8:	4605      	mov	r5, r0
 80123ea:	460c      	mov	r4, r1
 80123ec:	b913      	cbnz	r3, 80123f4 <_fflush_r+0x10>
 80123ee:	2500      	movs	r5, #0
 80123f0:	4628      	mov	r0, r5
 80123f2:	bd38      	pop	{r3, r4, r5, pc}
 80123f4:	b118      	cbz	r0, 80123fe <_fflush_r+0x1a>
 80123f6:	6a03      	ldr	r3, [r0, #32]
 80123f8:	b90b      	cbnz	r3, 80123fe <_fflush_r+0x1a>
 80123fa:	f7fe f81b 	bl	8010434 <__sinit>
 80123fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012402:	2b00      	cmp	r3, #0
 8012404:	d0f3      	beq.n	80123ee <_fflush_r+0xa>
 8012406:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012408:	07d0      	lsls	r0, r2, #31
 801240a:	d404      	bmi.n	8012416 <_fflush_r+0x32>
 801240c:	0599      	lsls	r1, r3, #22
 801240e:	d402      	bmi.n	8012416 <_fflush_r+0x32>
 8012410:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012412:	f7fe fa3a 	bl	801088a <__retarget_lock_acquire_recursive>
 8012416:	4628      	mov	r0, r5
 8012418:	4621      	mov	r1, r4
 801241a:	f7ff ff5f 	bl	80122dc <__sflush_r>
 801241e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012420:	07da      	lsls	r2, r3, #31
 8012422:	4605      	mov	r5, r0
 8012424:	d4e4      	bmi.n	80123f0 <_fflush_r+0xc>
 8012426:	89a3      	ldrh	r3, [r4, #12]
 8012428:	059b      	lsls	r3, r3, #22
 801242a:	d4e1      	bmi.n	80123f0 <_fflush_r+0xc>
 801242c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801242e:	f7fe fa2d 	bl	801088c <__retarget_lock_release_recursive>
 8012432:	e7dd      	b.n	80123f0 <_fflush_r+0xc>

08012434 <fiprintf>:
 8012434:	b40e      	push	{r1, r2, r3}
 8012436:	b503      	push	{r0, r1, lr}
 8012438:	4601      	mov	r1, r0
 801243a:	ab03      	add	r3, sp, #12
 801243c:	4805      	ldr	r0, [pc, #20]	@ (8012454 <fiprintf+0x20>)
 801243e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012442:	6800      	ldr	r0, [r0, #0]
 8012444:	9301      	str	r3, [sp, #4]
 8012446:	f7ff fe31 	bl	80120ac <_vfiprintf_r>
 801244a:	b002      	add	sp, #8
 801244c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012450:	b003      	add	sp, #12
 8012452:	4770      	bx	lr
 8012454:	24000038 	.word	0x24000038

08012458 <__swhatbuf_r>:
 8012458:	b570      	push	{r4, r5, r6, lr}
 801245a:	460c      	mov	r4, r1
 801245c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012460:	2900      	cmp	r1, #0
 8012462:	b096      	sub	sp, #88	@ 0x58
 8012464:	4615      	mov	r5, r2
 8012466:	461e      	mov	r6, r3
 8012468:	da0d      	bge.n	8012486 <__swhatbuf_r+0x2e>
 801246a:	89a3      	ldrh	r3, [r4, #12]
 801246c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012470:	f04f 0100 	mov.w	r1, #0
 8012474:	bf14      	ite	ne
 8012476:	2340      	movne	r3, #64	@ 0x40
 8012478:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801247c:	2000      	movs	r0, #0
 801247e:	6031      	str	r1, [r6, #0]
 8012480:	602b      	str	r3, [r5, #0]
 8012482:	b016      	add	sp, #88	@ 0x58
 8012484:	bd70      	pop	{r4, r5, r6, pc}
 8012486:	466a      	mov	r2, sp
 8012488:	f000 f862 	bl	8012550 <_fstat_r>
 801248c:	2800      	cmp	r0, #0
 801248e:	dbec      	blt.n	801246a <__swhatbuf_r+0x12>
 8012490:	9901      	ldr	r1, [sp, #4]
 8012492:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012496:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801249a:	4259      	negs	r1, r3
 801249c:	4159      	adcs	r1, r3
 801249e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80124a2:	e7eb      	b.n	801247c <__swhatbuf_r+0x24>

080124a4 <__smakebuf_r>:
 80124a4:	898b      	ldrh	r3, [r1, #12]
 80124a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80124a8:	079d      	lsls	r5, r3, #30
 80124aa:	4606      	mov	r6, r0
 80124ac:	460c      	mov	r4, r1
 80124ae:	d507      	bpl.n	80124c0 <__smakebuf_r+0x1c>
 80124b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80124b4:	6023      	str	r3, [r4, #0]
 80124b6:	6123      	str	r3, [r4, #16]
 80124b8:	2301      	movs	r3, #1
 80124ba:	6163      	str	r3, [r4, #20]
 80124bc:	b003      	add	sp, #12
 80124be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124c0:	ab01      	add	r3, sp, #4
 80124c2:	466a      	mov	r2, sp
 80124c4:	f7ff ffc8 	bl	8012458 <__swhatbuf_r>
 80124c8:	9f00      	ldr	r7, [sp, #0]
 80124ca:	4605      	mov	r5, r0
 80124cc:	4639      	mov	r1, r7
 80124ce:	4630      	mov	r0, r6
 80124d0:	f7ff f864 	bl	801159c <_malloc_r>
 80124d4:	b948      	cbnz	r0, 80124ea <__smakebuf_r+0x46>
 80124d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124da:	059a      	lsls	r2, r3, #22
 80124dc:	d4ee      	bmi.n	80124bc <__smakebuf_r+0x18>
 80124de:	f023 0303 	bic.w	r3, r3, #3
 80124e2:	f043 0302 	orr.w	r3, r3, #2
 80124e6:	81a3      	strh	r3, [r4, #12]
 80124e8:	e7e2      	b.n	80124b0 <__smakebuf_r+0xc>
 80124ea:	89a3      	ldrh	r3, [r4, #12]
 80124ec:	6020      	str	r0, [r4, #0]
 80124ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80124f2:	81a3      	strh	r3, [r4, #12]
 80124f4:	9b01      	ldr	r3, [sp, #4]
 80124f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80124fa:	b15b      	cbz	r3, 8012514 <__smakebuf_r+0x70>
 80124fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012500:	4630      	mov	r0, r6
 8012502:	f000 f837 	bl	8012574 <_isatty_r>
 8012506:	b128      	cbz	r0, 8012514 <__smakebuf_r+0x70>
 8012508:	89a3      	ldrh	r3, [r4, #12]
 801250a:	f023 0303 	bic.w	r3, r3, #3
 801250e:	f043 0301 	orr.w	r3, r3, #1
 8012512:	81a3      	strh	r3, [r4, #12]
 8012514:	89a3      	ldrh	r3, [r4, #12]
 8012516:	431d      	orrs	r5, r3
 8012518:	81a5      	strh	r5, [r4, #12]
 801251a:	e7cf      	b.n	80124bc <__smakebuf_r+0x18>

0801251c <memmove>:
 801251c:	4288      	cmp	r0, r1
 801251e:	b510      	push	{r4, lr}
 8012520:	eb01 0402 	add.w	r4, r1, r2
 8012524:	d902      	bls.n	801252c <memmove+0x10>
 8012526:	4284      	cmp	r4, r0
 8012528:	4623      	mov	r3, r4
 801252a:	d807      	bhi.n	801253c <memmove+0x20>
 801252c:	1e43      	subs	r3, r0, #1
 801252e:	42a1      	cmp	r1, r4
 8012530:	d008      	beq.n	8012544 <memmove+0x28>
 8012532:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012536:	f803 2f01 	strb.w	r2, [r3, #1]!
 801253a:	e7f8      	b.n	801252e <memmove+0x12>
 801253c:	4402      	add	r2, r0
 801253e:	4601      	mov	r1, r0
 8012540:	428a      	cmp	r2, r1
 8012542:	d100      	bne.n	8012546 <memmove+0x2a>
 8012544:	bd10      	pop	{r4, pc}
 8012546:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801254a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801254e:	e7f7      	b.n	8012540 <memmove+0x24>

08012550 <_fstat_r>:
 8012550:	b538      	push	{r3, r4, r5, lr}
 8012552:	4d07      	ldr	r5, [pc, #28]	@ (8012570 <_fstat_r+0x20>)
 8012554:	2300      	movs	r3, #0
 8012556:	4604      	mov	r4, r0
 8012558:	4608      	mov	r0, r1
 801255a:	4611      	mov	r1, r2
 801255c:	602b      	str	r3, [r5, #0]
 801255e:	f7ef fba3 	bl	8001ca8 <_fstat>
 8012562:	1c43      	adds	r3, r0, #1
 8012564:	d102      	bne.n	801256c <_fstat_r+0x1c>
 8012566:	682b      	ldr	r3, [r5, #0]
 8012568:	b103      	cbz	r3, 801256c <_fstat_r+0x1c>
 801256a:	6023      	str	r3, [r4, #0]
 801256c:	bd38      	pop	{r3, r4, r5, pc}
 801256e:	bf00      	nop
 8012570:	240007f4 	.word	0x240007f4

08012574 <_isatty_r>:
 8012574:	b538      	push	{r3, r4, r5, lr}
 8012576:	4d06      	ldr	r5, [pc, #24]	@ (8012590 <_isatty_r+0x1c>)
 8012578:	2300      	movs	r3, #0
 801257a:	4604      	mov	r4, r0
 801257c:	4608      	mov	r0, r1
 801257e:	602b      	str	r3, [r5, #0]
 8012580:	f7ef fba2 	bl	8001cc8 <_isatty>
 8012584:	1c43      	adds	r3, r0, #1
 8012586:	d102      	bne.n	801258e <_isatty_r+0x1a>
 8012588:	682b      	ldr	r3, [r5, #0]
 801258a:	b103      	cbz	r3, 801258e <_isatty_r+0x1a>
 801258c:	6023      	str	r3, [r4, #0]
 801258e:	bd38      	pop	{r3, r4, r5, pc}
 8012590:	240007f4 	.word	0x240007f4

08012594 <_sbrk_r>:
 8012594:	b538      	push	{r3, r4, r5, lr}
 8012596:	4d06      	ldr	r5, [pc, #24]	@ (80125b0 <_sbrk_r+0x1c>)
 8012598:	2300      	movs	r3, #0
 801259a:	4604      	mov	r4, r0
 801259c:	4608      	mov	r0, r1
 801259e:	602b      	str	r3, [r5, #0]
 80125a0:	f7ef fbaa 	bl	8001cf8 <_sbrk>
 80125a4:	1c43      	adds	r3, r0, #1
 80125a6:	d102      	bne.n	80125ae <_sbrk_r+0x1a>
 80125a8:	682b      	ldr	r3, [r5, #0]
 80125aa:	b103      	cbz	r3, 80125ae <_sbrk_r+0x1a>
 80125ac:	6023      	str	r3, [r4, #0]
 80125ae:	bd38      	pop	{r3, r4, r5, pc}
 80125b0:	240007f4 	.word	0x240007f4

080125b4 <abort>:
 80125b4:	b508      	push	{r3, lr}
 80125b6:	2006      	movs	r0, #6
 80125b8:	f000 f88c 	bl	80126d4 <raise>
 80125bc:	2001      	movs	r0, #1
 80125be:	f7ef fb23 	bl	8001c08 <_exit>

080125c2 <_calloc_r>:
 80125c2:	b570      	push	{r4, r5, r6, lr}
 80125c4:	fba1 5402 	umull	r5, r4, r1, r2
 80125c8:	b934      	cbnz	r4, 80125d8 <_calloc_r+0x16>
 80125ca:	4629      	mov	r1, r5
 80125cc:	f7fe ffe6 	bl	801159c <_malloc_r>
 80125d0:	4606      	mov	r6, r0
 80125d2:	b928      	cbnz	r0, 80125e0 <_calloc_r+0x1e>
 80125d4:	4630      	mov	r0, r6
 80125d6:	bd70      	pop	{r4, r5, r6, pc}
 80125d8:	220c      	movs	r2, #12
 80125da:	6002      	str	r2, [r0, #0]
 80125dc:	2600      	movs	r6, #0
 80125de:	e7f9      	b.n	80125d4 <_calloc_r+0x12>
 80125e0:	462a      	mov	r2, r5
 80125e2:	4621      	mov	r1, r4
 80125e4:	f7fe f868 	bl	80106b8 <memset>
 80125e8:	e7f4      	b.n	80125d4 <_calloc_r+0x12>

080125ea <__ascii_mbtowc>:
 80125ea:	b082      	sub	sp, #8
 80125ec:	b901      	cbnz	r1, 80125f0 <__ascii_mbtowc+0x6>
 80125ee:	a901      	add	r1, sp, #4
 80125f0:	b142      	cbz	r2, 8012604 <__ascii_mbtowc+0x1a>
 80125f2:	b14b      	cbz	r3, 8012608 <__ascii_mbtowc+0x1e>
 80125f4:	7813      	ldrb	r3, [r2, #0]
 80125f6:	600b      	str	r3, [r1, #0]
 80125f8:	7812      	ldrb	r2, [r2, #0]
 80125fa:	1e10      	subs	r0, r2, #0
 80125fc:	bf18      	it	ne
 80125fe:	2001      	movne	r0, #1
 8012600:	b002      	add	sp, #8
 8012602:	4770      	bx	lr
 8012604:	4610      	mov	r0, r2
 8012606:	e7fb      	b.n	8012600 <__ascii_mbtowc+0x16>
 8012608:	f06f 0001 	mvn.w	r0, #1
 801260c:	e7f8      	b.n	8012600 <__ascii_mbtowc+0x16>

0801260e <_realloc_r>:
 801260e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012612:	4607      	mov	r7, r0
 8012614:	4614      	mov	r4, r2
 8012616:	460d      	mov	r5, r1
 8012618:	b921      	cbnz	r1, 8012624 <_realloc_r+0x16>
 801261a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801261e:	4611      	mov	r1, r2
 8012620:	f7fe bfbc 	b.w	801159c <_malloc_r>
 8012624:	b92a      	cbnz	r2, 8012632 <_realloc_r+0x24>
 8012626:	f7fe ff45 	bl	80114b4 <_free_r>
 801262a:	4625      	mov	r5, r4
 801262c:	4628      	mov	r0, r5
 801262e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012632:	f000 f86b 	bl	801270c <_malloc_usable_size_r>
 8012636:	4284      	cmp	r4, r0
 8012638:	4606      	mov	r6, r0
 801263a:	d802      	bhi.n	8012642 <_realloc_r+0x34>
 801263c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012640:	d8f4      	bhi.n	801262c <_realloc_r+0x1e>
 8012642:	4621      	mov	r1, r4
 8012644:	4638      	mov	r0, r7
 8012646:	f7fe ffa9 	bl	801159c <_malloc_r>
 801264a:	4680      	mov	r8, r0
 801264c:	b908      	cbnz	r0, 8012652 <_realloc_r+0x44>
 801264e:	4645      	mov	r5, r8
 8012650:	e7ec      	b.n	801262c <_realloc_r+0x1e>
 8012652:	42b4      	cmp	r4, r6
 8012654:	4622      	mov	r2, r4
 8012656:	4629      	mov	r1, r5
 8012658:	bf28      	it	cs
 801265a:	4632      	movcs	r2, r6
 801265c:	f7fe f917 	bl	801088e <memcpy>
 8012660:	4629      	mov	r1, r5
 8012662:	4638      	mov	r0, r7
 8012664:	f7fe ff26 	bl	80114b4 <_free_r>
 8012668:	e7f1      	b.n	801264e <_realloc_r+0x40>

0801266a <__ascii_wctomb>:
 801266a:	4603      	mov	r3, r0
 801266c:	4608      	mov	r0, r1
 801266e:	b141      	cbz	r1, 8012682 <__ascii_wctomb+0x18>
 8012670:	2aff      	cmp	r2, #255	@ 0xff
 8012672:	d904      	bls.n	801267e <__ascii_wctomb+0x14>
 8012674:	228a      	movs	r2, #138	@ 0x8a
 8012676:	601a      	str	r2, [r3, #0]
 8012678:	f04f 30ff 	mov.w	r0, #4294967295
 801267c:	4770      	bx	lr
 801267e:	700a      	strb	r2, [r1, #0]
 8012680:	2001      	movs	r0, #1
 8012682:	4770      	bx	lr

08012684 <_raise_r>:
 8012684:	291f      	cmp	r1, #31
 8012686:	b538      	push	{r3, r4, r5, lr}
 8012688:	4605      	mov	r5, r0
 801268a:	460c      	mov	r4, r1
 801268c:	d904      	bls.n	8012698 <_raise_r+0x14>
 801268e:	2316      	movs	r3, #22
 8012690:	6003      	str	r3, [r0, #0]
 8012692:	f04f 30ff 	mov.w	r0, #4294967295
 8012696:	bd38      	pop	{r3, r4, r5, pc}
 8012698:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801269a:	b112      	cbz	r2, 80126a2 <_raise_r+0x1e>
 801269c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80126a0:	b94b      	cbnz	r3, 80126b6 <_raise_r+0x32>
 80126a2:	4628      	mov	r0, r5
 80126a4:	f000 f830 	bl	8012708 <_getpid_r>
 80126a8:	4622      	mov	r2, r4
 80126aa:	4601      	mov	r1, r0
 80126ac:	4628      	mov	r0, r5
 80126ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126b2:	f000 b817 	b.w	80126e4 <_kill_r>
 80126b6:	2b01      	cmp	r3, #1
 80126b8:	d00a      	beq.n	80126d0 <_raise_r+0x4c>
 80126ba:	1c59      	adds	r1, r3, #1
 80126bc:	d103      	bne.n	80126c6 <_raise_r+0x42>
 80126be:	2316      	movs	r3, #22
 80126c0:	6003      	str	r3, [r0, #0]
 80126c2:	2001      	movs	r0, #1
 80126c4:	e7e7      	b.n	8012696 <_raise_r+0x12>
 80126c6:	2100      	movs	r1, #0
 80126c8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80126cc:	4620      	mov	r0, r4
 80126ce:	4798      	blx	r3
 80126d0:	2000      	movs	r0, #0
 80126d2:	e7e0      	b.n	8012696 <_raise_r+0x12>

080126d4 <raise>:
 80126d4:	4b02      	ldr	r3, [pc, #8]	@ (80126e0 <raise+0xc>)
 80126d6:	4601      	mov	r1, r0
 80126d8:	6818      	ldr	r0, [r3, #0]
 80126da:	f7ff bfd3 	b.w	8012684 <_raise_r>
 80126de:	bf00      	nop
 80126e0:	24000038 	.word	0x24000038

080126e4 <_kill_r>:
 80126e4:	b538      	push	{r3, r4, r5, lr}
 80126e6:	4d07      	ldr	r5, [pc, #28]	@ (8012704 <_kill_r+0x20>)
 80126e8:	2300      	movs	r3, #0
 80126ea:	4604      	mov	r4, r0
 80126ec:	4608      	mov	r0, r1
 80126ee:	4611      	mov	r1, r2
 80126f0:	602b      	str	r3, [r5, #0]
 80126f2:	f7ef fa79 	bl	8001be8 <_kill>
 80126f6:	1c43      	adds	r3, r0, #1
 80126f8:	d102      	bne.n	8012700 <_kill_r+0x1c>
 80126fa:	682b      	ldr	r3, [r5, #0]
 80126fc:	b103      	cbz	r3, 8012700 <_kill_r+0x1c>
 80126fe:	6023      	str	r3, [r4, #0]
 8012700:	bd38      	pop	{r3, r4, r5, pc}
 8012702:	bf00      	nop
 8012704:	240007f4 	.word	0x240007f4

08012708 <_getpid_r>:
 8012708:	f7ef ba66 	b.w	8001bd8 <_getpid>

0801270c <_malloc_usable_size_r>:
 801270c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012710:	1f18      	subs	r0, r3, #4
 8012712:	2b00      	cmp	r3, #0
 8012714:	bfbc      	itt	lt
 8012716:	580b      	ldrlt	r3, [r1, r0]
 8012718:	18c0      	addlt	r0, r0, r3
 801271a:	4770      	bx	lr

0801271c <_init>:
 801271c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801271e:	bf00      	nop
 8012720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012722:	bc08      	pop	{r3}
 8012724:	469e      	mov	lr, r3
 8012726:	4770      	bx	lr

08012728 <_fini>:
 8012728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801272a:	bf00      	nop
 801272c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801272e:	bc08      	pop	{r3}
 8012730:	469e      	mov	lr, r3
 8012732:	4770      	bx	lr
